
H12R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015770  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003450  08015830  08015830  00025830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c80  08018c80  0003027c  2**0
                  CONTENTS
  4 .ARM          00000000  08018c80  08018c80  0003027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018c80  08018c80  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c80  08018c80  00028c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018c84  08018c84  00028c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08018c88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063f4  20000280  08018f04  00030280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006674  08018f04  00036674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054685  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008471  00000000  00000000  00084929  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a6c3  00000000  00000000  0008cd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d00  00000000  00000000  000a7460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002038  00000000  00000000  000a9160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b2c6  00000000  00000000  000ab198  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00026b9a  00000000  00000000  000c645e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00083c61  00000000  00000000  000ecff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00170c59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006010  00000000  00000000  00170cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000280 	.word	0x20000280
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08015814 	.word	0x08015814

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000284 	.word	0x20000284
 8000100:	08015814 	.word	0x08015814

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fba7 	bl	8001b8c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 faff 	bl	8001a4c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fb99 	bl	8001b8c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fb8f 	bl	8001b8c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fb21 	bl	8001ac4 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fb17 	bl	8001ac4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f909 	bl	80006c4 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f88b 	bl	80005d8 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f8fb 	bl	80006c4 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f8f1 	bl	80006c4 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f899 	bl	8000628 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f88f 	bl	8000628 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_lmul>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46ce      	mov	lr, r9
 800051c:	4647      	mov	r7, r8
 800051e:	0415      	lsls	r5, r2, #16
 8000520:	0c2d      	lsrs	r5, r5, #16
 8000522:	002e      	movs	r6, r5
 8000524:	b580      	push	{r7, lr}
 8000526:	0407      	lsls	r7, r0, #16
 8000528:	0c14      	lsrs	r4, r2, #16
 800052a:	0c3f      	lsrs	r7, r7, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	437e      	muls	r6, r7
 8000532:	435d      	muls	r5, r3
 8000534:	4367      	muls	r7, r4
 8000536:	4363      	muls	r3, r4
 8000538:	197f      	adds	r7, r7, r5
 800053a:	0c34      	lsrs	r4, r6, #16
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	469c      	mov	ip, r3
 8000540:	42a5      	cmp	r5, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x34>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	464b      	mov	r3, r9
 800054e:	4343      	muls	r3, r0
 8000550:	4351      	muls	r1, r2
 8000552:	0c25      	lsrs	r5, r4, #16
 8000554:	0436      	lsls	r6, r6, #16
 8000556:	4465      	add	r5, ip
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	0424      	lsls	r4, r4, #16
 800055c:	19a4      	adds	r4, r4, r6
 800055e:	195b      	adds	r3, r3, r5
 8000560:	1859      	adds	r1, r3, r1
 8000562:	0020      	movs	r0, r4
 8000564:	bc0c      	pop	{r2, r3}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	; 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f000 fbe7 	bl	8000d50 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fa1d 	bl	80009c8 <__aeabi_fsub>
 800058e:	f000 fbdf 	bl	8000d50 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff73 	bl	8000490 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 f90d 	bl	80027d0 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 fdbe 	bl	8002140 <__aeabi_dsub>
 80005c4:	f002 f904 	bl	80027d0 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__eqsf2>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	0042      	lsls	r2, r0, #1
 80005dc:	024e      	lsls	r6, r1, #9
 80005de:	004c      	lsls	r4, r1, #1
 80005e0:	0245      	lsls	r5, r0, #9
 80005e2:	0a6d      	lsrs	r5, r5, #9
 80005e4:	0e12      	lsrs	r2, r2, #24
 80005e6:	0fc3      	lsrs	r3, r0, #31
 80005e8:	0a76      	lsrs	r6, r6, #9
 80005ea:	0e24      	lsrs	r4, r4, #24
 80005ec:	0fc9      	lsrs	r1, r1, #31
 80005ee:	2aff      	cmp	r2, #255	; 0xff
 80005f0:	d00f      	beq.n	8000612 <__eqsf2+0x3a>
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d011      	beq.n	800061a <__eqsf2+0x42>
 80005f6:	2001      	movs	r0, #1
 80005f8:	42a2      	cmp	r2, r4
 80005fa:	d000      	beq.n	80005fe <__eqsf2+0x26>
 80005fc:	bd70      	pop	{r4, r5, r6, pc}
 80005fe:	42b5      	cmp	r5, r6
 8000600:	d1fc      	bne.n	80005fc <__eqsf2+0x24>
 8000602:	428b      	cmp	r3, r1
 8000604:	d00d      	beq.n	8000622 <__eqsf2+0x4a>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d1f8      	bne.n	80005fc <__eqsf2+0x24>
 800060a:	0028      	movs	r0, r5
 800060c:	1e45      	subs	r5, r0, #1
 800060e:	41a8      	sbcs	r0, r5
 8000610:	e7f4      	b.n	80005fc <__eqsf2+0x24>
 8000612:	2001      	movs	r0, #1
 8000614:	2d00      	cmp	r5, #0
 8000616:	d1f1      	bne.n	80005fc <__eqsf2+0x24>
 8000618:	e7eb      	b.n	80005f2 <__eqsf2+0x1a>
 800061a:	2001      	movs	r0, #1
 800061c:	2e00      	cmp	r6, #0
 800061e:	d1ed      	bne.n	80005fc <__eqsf2+0x24>
 8000620:	e7e9      	b.n	80005f6 <__eqsf2+0x1e>
 8000622:	2000      	movs	r0, #0
 8000624:	e7ea      	b.n	80005fc <__eqsf2+0x24>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__gesf2>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	004a      	lsls	r2, r1, #1
 800062c:	024e      	lsls	r6, r1, #9
 800062e:	0245      	lsls	r5, r0, #9
 8000630:	0044      	lsls	r4, r0, #1
 8000632:	0a6d      	lsrs	r5, r5, #9
 8000634:	0e24      	lsrs	r4, r4, #24
 8000636:	0fc3      	lsrs	r3, r0, #31
 8000638:	0a76      	lsrs	r6, r6, #9
 800063a:	0e12      	lsrs	r2, r2, #24
 800063c:	0fc9      	lsrs	r1, r1, #31
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d015      	beq.n	800066e <__gesf2+0x46>
 8000642:	2aff      	cmp	r2, #255	; 0xff
 8000644:	d00e      	beq.n	8000664 <__gesf2+0x3c>
 8000646:	2c00      	cmp	r4, #0
 8000648:	d115      	bne.n	8000676 <__gesf2+0x4e>
 800064a:	2a00      	cmp	r2, #0
 800064c:	d101      	bne.n	8000652 <__gesf2+0x2a>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d01c      	beq.n	800068c <__gesf2+0x64>
 8000652:	2d00      	cmp	r5, #0
 8000654:	d014      	beq.n	8000680 <__gesf2+0x58>
 8000656:	428b      	cmp	r3, r1
 8000658:	d027      	beq.n	80006aa <__gesf2+0x82>
 800065a:	2002      	movs	r0, #2
 800065c:	3b01      	subs	r3, #1
 800065e:	4018      	ands	r0, r3
 8000660:	3801      	subs	r0, #1
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	2e00      	cmp	r6, #0
 8000666:	d0ee      	beq.n	8000646 <__gesf2+0x1e>
 8000668:	2002      	movs	r0, #2
 800066a:	4240      	negs	r0, r0
 800066c:	e7f9      	b.n	8000662 <__gesf2+0x3a>
 800066e:	2d00      	cmp	r5, #0
 8000670:	d1fa      	bne.n	8000668 <__gesf2+0x40>
 8000672:	2aff      	cmp	r2, #255	; 0xff
 8000674:	d00e      	beq.n	8000694 <__gesf2+0x6c>
 8000676:	2a00      	cmp	r2, #0
 8000678:	d10e      	bne.n	8000698 <__gesf2+0x70>
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0ed      	beq.n	800065a <__gesf2+0x32>
 800067e:	e00b      	b.n	8000698 <__gesf2+0x70>
 8000680:	2301      	movs	r3, #1
 8000682:	3901      	subs	r1, #1
 8000684:	4399      	bics	r1, r3
 8000686:	0008      	movs	r0, r1
 8000688:	3001      	adds	r0, #1
 800068a:	e7ea      	b.n	8000662 <__gesf2+0x3a>
 800068c:	2000      	movs	r0, #0
 800068e:	2d00      	cmp	r5, #0
 8000690:	d0e7      	beq.n	8000662 <__gesf2+0x3a>
 8000692:	e7e2      	b.n	800065a <__gesf2+0x32>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d1e7      	bne.n	8000668 <__gesf2+0x40>
 8000698:	428b      	cmp	r3, r1
 800069a:	d1de      	bne.n	800065a <__gesf2+0x32>
 800069c:	4294      	cmp	r4, r2
 800069e:	dd05      	ble.n	80006ac <__gesf2+0x84>
 80006a0:	2102      	movs	r1, #2
 80006a2:	1e58      	subs	r0, r3, #1
 80006a4:	4008      	ands	r0, r1
 80006a6:	3801      	subs	r0, #1
 80006a8:	e7db      	b.n	8000662 <__gesf2+0x3a>
 80006aa:	2400      	movs	r4, #0
 80006ac:	42a2      	cmp	r2, r4
 80006ae:	dc04      	bgt.n	80006ba <__gesf2+0x92>
 80006b0:	42b5      	cmp	r5, r6
 80006b2:	d8d2      	bhi.n	800065a <__gesf2+0x32>
 80006b4:	2000      	movs	r0, #0
 80006b6:	42b5      	cmp	r5, r6
 80006b8:	d2d3      	bcs.n	8000662 <__gesf2+0x3a>
 80006ba:	1e58      	subs	r0, r3, #1
 80006bc:	2301      	movs	r3, #1
 80006be:	4398      	bics	r0, r3
 80006c0:	3001      	adds	r0, #1
 80006c2:	e7ce      	b.n	8000662 <__gesf2+0x3a>

080006c4 <__lesf2>:
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	0042      	lsls	r2, r0, #1
 80006c8:	0244      	lsls	r4, r0, #9
 80006ca:	024d      	lsls	r5, r1, #9
 80006cc:	0fc3      	lsrs	r3, r0, #31
 80006ce:	0048      	lsls	r0, r1, #1
 80006d0:	0a64      	lsrs	r4, r4, #9
 80006d2:	0e12      	lsrs	r2, r2, #24
 80006d4:	0a6d      	lsrs	r5, r5, #9
 80006d6:	0e00      	lsrs	r0, r0, #24
 80006d8:	0fc9      	lsrs	r1, r1, #31
 80006da:	2aff      	cmp	r2, #255	; 0xff
 80006dc:	d012      	beq.n	8000704 <__lesf2+0x40>
 80006de:	28ff      	cmp	r0, #255	; 0xff
 80006e0:	d00c      	beq.n	80006fc <__lesf2+0x38>
 80006e2:	2a00      	cmp	r2, #0
 80006e4:	d112      	bne.n	800070c <__lesf2+0x48>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	d119      	bne.n	800071e <__lesf2+0x5a>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d117      	bne.n	800071e <__lesf2+0x5a>
 80006ee:	2c00      	cmp	r4, #0
 80006f0:	d02b      	beq.n	800074a <__lesf2+0x86>
 80006f2:	2002      	movs	r0, #2
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4018      	ands	r0, r3
 80006f8:	3801      	subs	r0, #1
 80006fa:	e026      	b.n	800074a <__lesf2+0x86>
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d0f0      	beq.n	80006e2 <__lesf2+0x1e>
 8000700:	2002      	movs	r0, #2
 8000702:	e022      	b.n	800074a <__lesf2+0x86>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d1fb      	bne.n	8000700 <__lesf2+0x3c>
 8000708:	28ff      	cmp	r0, #255	; 0xff
 800070a:	d01f      	beq.n	800074c <__lesf2+0x88>
 800070c:	2800      	cmp	r0, #0
 800070e:	d11f      	bne.n	8000750 <__lesf2+0x8c>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d11d      	bne.n	8000750 <__lesf2+0x8c>
 8000714:	2002      	movs	r0, #2
 8000716:	3b01      	subs	r3, #1
 8000718:	4018      	ands	r0, r3
 800071a:	3801      	subs	r0, #1
 800071c:	e015      	b.n	800074a <__lesf2+0x86>
 800071e:	2c00      	cmp	r4, #0
 8000720:	d00e      	beq.n	8000740 <__lesf2+0x7c>
 8000722:	428b      	cmp	r3, r1
 8000724:	d1e5      	bne.n	80006f2 <__lesf2+0x2e>
 8000726:	2200      	movs	r2, #0
 8000728:	4290      	cmp	r0, r2
 800072a:	dc04      	bgt.n	8000736 <__lesf2+0x72>
 800072c:	42ac      	cmp	r4, r5
 800072e:	d8e0      	bhi.n	80006f2 <__lesf2+0x2e>
 8000730:	2000      	movs	r0, #0
 8000732:	42ac      	cmp	r4, r5
 8000734:	d209      	bcs.n	800074a <__lesf2+0x86>
 8000736:	1e58      	subs	r0, r3, #1
 8000738:	2301      	movs	r3, #1
 800073a:	4398      	bics	r0, r3
 800073c:	3001      	adds	r0, #1
 800073e:	e004      	b.n	800074a <__lesf2+0x86>
 8000740:	2301      	movs	r3, #1
 8000742:	3901      	subs	r1, #1
 8000744:	4399      	bics	r1, r3
 8000746:	0008      	movs	r0, r1
 8000748:	3001      	adds	r0, #1
 800074a:	bd30      	pop	{r4, r5, pc}
 800074c:	2d00      	cmp	r5, #0
 800074e:	d1d7      	bne.n	8000700 <__lesf2+0x3c>
 8000750:	428b      	cmp	r3, r1
 8000752:	d1ce      	bne.n	80006f2 <__lesf2+0x2e>
 8000754:	4282      	cmp	r2, r0
 8000756:	dde7      	ble.n	8000728 <__lesf2+0x64>
 8000758:	2102      	movs	r1, #2
 800075a:	1e58      	subs	r0, r3, #1
 800075c:	4008      	ands	r0, r1
 800075e:	3801      	subs	r0, #1
 8000760:	e7f3      	b.n	800074a <__lesf2+0x86>
 8000762:	46c0      	nop			; (mov r8, r8)

08000764 <__aeabi_fmul>:
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	464e      	mov	r6, r9
 8000768:	4657      	mov	r7, sl
 800076a:	4645      	mov	r5, r8
 800076c:	46de      	mov	lr, fp
 800076e:	b5e0      	push	{r5, r6, r7, lr}
 8000770:	0243      	lsls	r3, r0, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	0045      	lsls	r5, r0, #1
 8000776:	b083      	sub	sp, #12
 8000778:	1c0f      	adds	r7, r1, #0
 800077a:	4699      	mov	r9, r3
 800077c:	0e2d      	lsrs	r5, r5, #24
 800077e:	0fc6      	lsrs	r6, r0, #31
 8000780:	2d00      	cmp	r5, #0
 8000782:	d057      	beq.n	8000834 <__aeabi_fmul+0xd0>
 8000784:	2dff      	cmp	r5, #255	; 0xff
 8000786:	d024      	beq.n	80007d2 <__aeabi_fmul+0x6e>
 8000788:	2080      	movs	r0, #128	; 0x80
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	04c0      	lsls	r0, r0, #19
 800078e:	4318      	orrs	r0, r3
 8000790:	2300      	movs	r3, #0
 8000792:	4681      	mov	r9, r0
 8000794:	469a      	mov	sl, r3
 8000796:	469b      	mov	fp, r3
 8000798:	3d7f      	subs	r5, #127	; 0x7f
 800079a:	027c      	lsls	r4, r7, #9
 800079c:	007a      	lsls	r2, r7, #1
 800079e:	0ffb      	lsrs	r3, r7, #31
 80007a0:	0a64      	lsrs	r4, r4, #9
 80007a2:	0e12      	lsrs	r2, r2, #24
 80007a4:	4698      	mov	r8, r3
 80007a6:	d023      	beq.n	80007f0 <__aeabi_fmul+0x8c>
 80007a8:	2aff      	cmp	r2, #255	; 0xff
 80007aa:	d04b      	beq.n	8000844 <__aeabi_fmul+0xe0>
 80007ac:	00e3      	lsls	r3, r4, #3
 80007ae:	2480      	movs	r4, #128	; 0x80
 80007b0:	2000      	movs	r0, #0
 80007b2:	04e4      	lsls	r4, r4, #19
 80007b4:	3a7f      	subs	r2, #127	; 0x7f
 80007b6:	431c      	orrs	r4, r3
 80007b8:	18ad      	adds	r5, r5, r2
 80007ba:	1c6b      	adds	r3, r5, #1
 80007bc:	4647      	mov	r7, r8
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	4653      	mov	r3, sl
 80007c2:	4077      	eors	r7, r6
 80007c4:	003a      	movs	r2, r7
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d848      	bhi.n	800085c <__aeabi_fmul+0xf8>
 80007ca:	497d      	ldr	r1, [pc, #500]	; (80009c0 <__aeabi_fmul+0x25c>)
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	58cb      	ldr	r3, [r1, r3]
 80007d0:	469f      	mov	pc, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fmul+0x74>
 80007d6:	e085      	b.n	80008e4 <__aeabi_fmul+0x180>
 80007d8:	3308      	adds	r3, #8
 80007da:	469a      	mov	sl, r3
 80007dc:	3b06      	subs	r3, #6
 80007de:	469b      	mov	fp, r3
 80007e0:	027c      	lsls	r4, r7, #9
 80007e2:	007a      	lsls	r2, r7, #1
 80007e4:	0ffb      	lsrs	r3, r7, #31
 80007e6:	25ff      	movs	r5, #255	; 0xff
 80007e8:	0a64      	lsrs	r4, r4, #9
 80007ea:	0e12      	lsrs	r2, r2, #24
 80007ec:	4698      	mov	r8, r3
 80007ee:	d1db      	bne.n	80007a8 <__aeabi_fmul+0x44>
 80007f0:	2c00      	cmp	r4, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fmul+0x92>
 80007f4:	e090      	b.n	8000918 <__aeabi_fmul+0x1b4>
 80007f6:	4652      	mov	r2, sl
 80007f8:	2301      	movs	r3, #1
 80007fa:	431a      	orrs	r2, r3
 80007fc:	4692      	mov	sl, r2
 80007fe:	2001      	movs	r0, #1
 8000800:	e7db      	b.n	80007ba <__aeabi_fmul+0x56>
 8000802:	464c      	mov	r4, r9
 8000804:	4658      	mov	r0, fp
 8000806:	0017      	movs	r7, r2
 8000808:	2802      	cmp	r0, #2
 800080a:	d024      	beq.n	8000856 <__aeabi_fmul+0xf2>
 800080c:	2803      	cmp	r0, #3
 800080e:	d100      	bne.n	8000812 <__aeabi_fmul+0xae>
 8000810:	e0cf      	b.n	80009b2 <__aeabi_fmul+0x24e>
 8000812:	2200      	movs	r2, #0
 8000814:	2300      	movs	r3, #0
 8000816:	2801      	cmp	r0, #1
 8000818:	d14d      	bne.n	80008b6 <__aeabi_fmul+0x152>
 800081a:	0258      	lsls	r0, r3, #9
 800081c:	05d2      	lsls	r2, r2, #23
 800081e:	0a40      	lsrs	r0, r0, #9
 8000820:	07ff      	lsls	r7, r7, #31
 8000822:	4310      	orrs	r0, r2
 8000824:	4338      	orrs	r0, r7
 8000826:	b003      	add	sp, #12
 8000828:	bc3c      	pop	{r2, r3, r4, r5}
 800082a:	4690      	mov	r8, r2
 800082c:	4699      	mov	r9, r3
 800082e:	46a2      	mov	sl, r4
 8000830:	46ab      	mov	fp, r5
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000834:	2b00      	cmp	r3, #0
 8000836:	d15b      	bne.n	80008f0 <__aeabi_fmul+0x18c>
 8000838:	2304      	movs	r3, #4
 800083a:	469a      	mov	sl, r3
 800083c:	3b03      	subs	r3, #3
 800083e:	2500      	movs	r5, #0
 8000840:	469b      	mov	fp, r3
 8000842:	e7aa      	b.n	800079a <__aeabi_fmul+0x36>
 8000844:	35ff      	adds	r5, #255	; 0xff
 8000846:	2c00      	cmp	r4, #0
 8000848:	d160      	bne.n	800090c <__aeabi_fmul+0x1a8>
 800084a:	4652      	mov	r2, sl
 800084c:	2302      	movs	r3, #2
 800084e:	431a      	orrs	r2, r3
 8000850:	4692      	mov	sl, r2
 8000852:	2002      	movs	r0, #2
 8000854:	e7b1      	b.n	80007ba <__aeabi_fmul+0x56>
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	2300      	movs	r3, #0
 800085a:	e7de      	b.n	800081a <__aeabi_fmul+0xb6>
 800085c:	464b      	mov	r3, r9
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	469c      	mov	ip, r3
 8000862:	464b      	mov	r3, r9
 8000864:	0426      	lsls	r6, r4, #16
 8000866:	0c36      	lsrs	r6, r6, #16
 8000868:	0418      	lsls	r0, r3, #16
 800086a:	4661      	mov	r1, ip
 800086c:	0033      	movs	r3, r6
 800086e:	0c22      	lsrs	r2, r4, #16
 8000870:	4664      	mov	r4, ip
 8000872:	0c00      	lsrs	r0, r0, #16
 8000874:	4343      	muls	r3, r0
 8000876:	434e      	muls	r6, r1
 8000878:	4350      	muls	r0, r2
 800087a:	4354      	muls	r4, r2
 800087c:	1980      	adds	r0, r0, r6
 800087e:	0c1a      	lsrs	r2, r3, #16
 8000880:	1812      	adds	r2, r2, r0
 8000882:	4296      	cmp	r6, r2
 8000884:	d903      	bls.n	800088e <__aeabi_fmul+0x12a>
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	0249      	lsls	r1, r1, #9
 800088a:	468c      	mov	ip, r1
 800088c:	4464      	add	r4, ip
 800088e:	041b      	lsls	r3, r3, #16
 8000890:	0c1b      	lsrs	r3, r3, #16
 8000892:	0410      	lsls	r0, r2, #16
 8000894:	18c0      	adds	r0, r0, r3
 8000896:	0183      	lsls	r3, r0, #6
 8000898:	1e5e      	subs	r6, r3, #1
 800089a:	41b3      	sbcs	r3, r6
 800089c:	0e80      	lsrs	r0, r0, #26
 800089e:	4318      	orrs	r0, r3
 80008a0:	0c13      	lsrs	r3, r2, #16
 80008a2:	191b      	adds	r3, r3, r4
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	4303      	orrs	r3, r0
 80008a8:	001c      	movs	r4, r3
 80008aa:	0123      	lsls	r3, r4, #4
 80008ac:	d579      	bpl.n	80009a2 <__aeabi_fmul+0x23e>
 80008ae:	2301      	movs	r3, #1
 80008b0:	0862      	lsrs	r2, r4, #1
 80008b2:	401c      	ands	r4, r3
 80008b4:	4314      	orrs	r4, r2
 80008b6:	9a01      	ldr	r2, [sp, #4]
 80008b8:	327f      	adds	r2, #127	; 0x7f
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	dd4d      	ble.n	800095a <__aeabi_fmul+0x1f6>
 80008be:	0763      	lsls	r3, r4, #29
 80008c0:	d004      	beq.n	80008cc <__aeabi_fmul+0x168>
 80008c2:	230f      	movs	r3, #15
 80008c4:	4023      	ands	r3, r4
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x168>
 80008ca:	3404      	adds	r4, #4
 80008cc:	0123      	lsls	r3, r4, #4
 80008ce:	d503      	bpl.n	80008d8 <__aeabi_fmul+0x174>
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <__aeabi_fmul+0x260>)
 80008d2:	9a01      	ldr	r2, [sp, #4]
 80008d4:	401c      	ands	r4, r3
 80008d6:	3280      	adds	r2, #128	; 0x80
 80008d8:	2afe      	cmp	r2, #254	; 0xfe
 80008da:	dcbc      	bgt.n	8000856 <__aeabi_fmul+0xf2>
 80008dc:	01a3      	lsls	r3, r4, #6
 80008de:	0a5b      	lsrs	r3, r3, #9
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	e79a      	b.n	800081a <__aeabi_fmul+0xb6>
 80008e4:	230c      	movs	r3, #12
 80008e6:	469a      	mov	sl, r3
 80008e8:	3b09      	subs	r3, #9
 80008ea:	25ff      	movs	r5, #255	; 0xff
 80008ec:	469b      	mov	fp, r3
 80008ee:	e754      	b.n	800079a <__aeabi_fmul+0x36>
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 f8e5 	bl	8002ac0 <__clzsi2>
 80008f6:	464a      	mov	r2, r9
 80008f8:	1f43      	subs	r3, r0, #5
 80008fa:	2576      	movs	r5, #118	; 0x76
 80008fc:	409a      	lsls	r2, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	426d      	negs	r5, r5
 8000902:	4691      	mov	r9, r2
 8000904:	1a2d      	subs	r5, r5, r0
 8000906:	469a      	mov	sl, r3
 8000908:	469b      	mov	fp, r3
 800090a:	e746      	b.n	800079a <__aeabi_fmul+0x36>
 800090c:	4652      	mov	r2, sl
 800090e:	2303      	movs	r3, #3
 8000910:	431a      	orrs	r2, r3
 8000912:	4692      	mov	sl, r2
 8000914:	2003      	movs	r0, #3
 8000916:	e750      	b.n	80007ba <__aeabi_fmul+0x56>
 8000918:	0020      	movs	r0, r4
 800091a:	f002 f8d1 	bl	8002ac0 <__clzsi2>
 800091e:	1f43      	subs	r3, r0, #5
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	409c      	lsls	r4, r3
 8000924:	3d76      	subs	r5, #118	; 0x76
 8000926:	2000      	movs	r0, #0
 8000928:	e747      	b.n	80007ba <__aeabi_fmul+0x56>
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	2700      	movs	r7, #0
 800092e:	03db      	lsls	r3, r3, #15
 8000930:	22ff      	movs	r2, #255	; 0xff
 8000932:	e772      	b.n	800081a <__aeabi_fmul+0xb6>
 8000934:	4642      	mov	r2, r8
 8000936:	e766      	b.n	8000806 <__aeabi_fmul+0xa2>
 8000938:	464c      	mov	r4, r9
 800093a:	0032      	movs	r2, r6
 800093c:	4658      	mov	r0, fp
 800093e:	e762      	b.n	8000806 <__aeabi_fmul+0xa2>
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	464a      	mov	r2, r9
 8000944:	03db      	lsls	r3, r3, #15
 8000946:	421a      	tst	r2, r3
 8000948:	d022      	beq.n	8000990 <__aeabi_fmul+0x22c>
 800094a:	421c      	tst	r4, r3
 800094c:	d120      	bne.n	8000990 <__aeabi_fmul+0x22c>
 800094e:	4323      	orrs	r3, r4
 8000950:	025b      	lsls	r3, r3, #9
 8000952:	0a5b      	lsrs	r3, r3, #9
 8000954:	4647      	mov	r7, r8
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	e75f      	b.n	800081a <__aeabi_fmul+0xb6>
 800095a:	2301      	movs	r3, #1
 800095c:	1a9a      	subs	r2, r3, r2
 800095e:	2a1b      	cmp	r2, #27
 8000960:	dc21      	bgt.n	80009a6 <__aeabi_fmul+0x242>
 8000962:	0023      	movs	r3, r4
 8000964:	9901      	ldr	r1, [sp, #4]
 8000966:	40d3      	lsrs	r3, r2
 8000968:	319e      	adds	r1, #158	; 0x9e
 800096a:	408c      	lsls	r4, r1
 800096c:	001a      	movs	r2, r3
 800096e:	0023      	movs	r3, r4
 8000970:	1e5c      	subs	r4, r3, #1
 8000972:	41a3      	sbcs	r3, r4
 8000974:	4313      	orrs	r3, r2
 8000976:	075a      	lsls	r2, r3, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fmul+0x220>
 800097a:	220f      	movs	r2, #15
 800097c:	401a      	ands	r2, r3
 800097e:	2a04      	cmp	r2, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fmul+0x220>
 8000982:	3304      	adds	r3, #4
 8000984:	015a      	lsls	r2, r3, #5
 8000986:	d411      	bmi.n	80009ac <__aeabi_fmul+0x248>
 8000988:	019b      	lsls	r3, r3, #6
 800098a:	0a5b      	lsrs	r3, r3, #9
 800098c:	2200      	movs	r2, #0
 800098e:	e744      	b.n	800081a <__aeabi_fmul+0xb6>
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	464a      	mov	r2, r9
 8000994:	03db      	lsls	r3, r3, #15
 8000996:	4313      	orrs	r3, r2
 8000998:	025b      	lsls	r3, r3, #9
 800099a:	0a5b      	lsrs	r3, r3, #9
 800099c:	0037      	movs	r7, r6
 800099e:	22ff      	movs	r2, #255	; 0xff
 80009a0:	e73b      	b.n	800081a <__aeabi_fmul+0xb6>
 80009a2:	9501      	str	r5, [sp, #4]
 80009a4:	e787      	b.n	80008b6 <__aeabi_fmul+0x152>
 80009a6:	2200      	movs	r2, #0
 80009a8:	2300      	movs	r3, #0
 80009aa:	e736      	b.n	800081a <__aeabi_fmul+0xb6>
 80009ac:	2201      	movs	r2, #1
 80009ae:	2300      	movs	r3, #0
 80009b0:	e733      	b.n	800081a <__aeabi_fmul+0xb6>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	4323      	orrs	r3, r4
 80009b8:	025b      	lsls	r3, r3, #9
 80009ba:	0a5b      	lsrs	r3, r3, #9
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	e72c      	b.n	800081a <__aeabi_fmul+0xb6>
 80009c0:	08015864 	.word	0x08015864
 80009c4:	f7ffffff 	.word	0xf7ffffff

080009c8 <__aeabi_fsub>:
 80009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ca:	4647      	mov	r7, r8
 80009cc:	46ce      	mov	lr, r9
 80009ce:	0044      	lsls	r4, r0, #1
 80009d0:	0fc2      	lsrs	r2, r0, #31
 80009d2:	b580      	push	{r7, lr}
 80009d4:	0247      	lsls	r7, r0, #9
 80009d6:	0248      	lsls	r0, r1, #9
 80009d8:	0a40      	lsrs	r0, r0, #9
 80009da:	4684      	mov	ip, r0
 80009dc:	4666      	mov	r6, ip
 80009de:	0048      	lsls	r0, r1, #1
 80009e0:	0a7f      	lsrs	r7, r7, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	00f6      	lsls	r6, r6, #3
 80009e6:	0025      	movs	r5, r4
 80009e8:	4690      	mov	r8, r2
 80009ea:	00fb      	lsls	r3, r7, #3
 80009ec:	0e00      	lsrs	r0, r0, #24
 80009ee:	0fc9      	lsrs	r1, r1, #31
 80009f0:	46b1      	mov	r9, r6
 80009f2:	28ff      	cmp	r0, #255	; 0xff
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x30>
 80009f6:	e085      	b.n	8000b04 <__aeabi_fsub+0x13c>
 80009f8:	2601      	movs	r6, #1
 80009fa:	4071      	eors	r1, r6
 80009fc:	1a26      	subs	r6, r4, r0
 80009fe:	4291      	cmp	r1, r2
 8000a00:	d057      	beq.n	8000ab2 <__aeabi_fsub+0xea>
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	dd43      	ble.n	8000a8e <__aeabi_fsub+0xc6>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fsub+0x44>
 8000a0a:	e07f      	b.n	8000b0c <__aeabi_fsub+0x144>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fsub+0x4c>
 8000a12:	e0aa      	b.n	8000b6a <__aeabi_fsub+0x1a2>
 8000a14:	3e01      	subs	r6, #1
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fsub+0x54>
 8000a1a:	e0f7      	b.n	8000c0c <__aeabi_fsub+0x244>
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	015a      	lsls	r2, r3, #5
 8000a20:	d400      	bmi.n	8000a24 <__aeabi_fsub+0x5c>
 8000a22:	e08b      	b.n	8000b3c <__aeabi_fsub+0x174>
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	099c      	lsrs	r4, r3, #6
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f002 f849 	bl	8002ac0 <__clzsi2>
 8000a2e:	3805      	subs	r0, #5
 8000a30:	4084      	lsls	r4, r0
 8000a32:	4285      	cmp	r5, r0
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_fsub+0x70>
 8000a36:	e0d3      	b.n	8000be0 <__aeabi_fsub+0x218>
 8000a38:	1b45      	subs	r5, r0, r5
 8000a3a:	0023      	movs	r3, r4
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	3501      	adds	r5, #1
 8000a40:	40eb      	lsrs	r3, r5
 8000a42:	1b45      	subs	r5, r0, r5
 8000a44:	40ac      	lsls	r4, r5
 8000a46:	1e62      	subs	r2, r4, #1
 8000a48:	4194      	sbcs	r4, r2
 8000a4a:	4323      	orrs	r3, r4
 8000a4c:	2407      	movs	r4, #7
 8000a4e:	2500      	movs	r5, #0
 8000a50:	401c      	ands	r4, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	4641      	mov	r1, r8
 8000a56:	400a      	ands	r2, r1
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fsub+0x9e>
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	4019      	ands	r1, r3
 8000a60:	2904      	cmp	r1, #4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fsub+0x9e>
 8000a64:	3304      	adds	r3, #4
 8000a66:	0159      	lsls	r1, r3, #5
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_fsub+0xa4>
 8000a6a:	e080      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	b2ec      	uxtb	r4, r5
 8000a70:	2dff      	cmp	r5, #255	; 0xff
 8000a72:	d000      	beq.n	8000a76 <__aeabi_fsub+0xae>
 8000a74:	e0a3      	b.n	8000bbe <__aeabi_fsub+0x1f6>
 8000a76:	24ff      	movs	r4, #255	; 0xff
 8000a78:	2300      	movs	r3, #0
 8000a7a:	025b      	lsls	r3, r3, #9
 8000a7c:	05e4      	lsls	r4, r4, #23
 8000a7e:	0a58      	lsrs	r0, r3, #9
 8000a80:	07d2      	lsls	r2, r2, #31
 8000a82:	4320      	orrs	r0, r4
 8000a84:	4310      	orrs	r0, r2
 8000a86:	bc0c      	pop	{r2, r3}
 8000a88:	4690      	mov	r8, r2
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d174      	bne.n	8000b7c <__aeabi_fsub+0x1b4>
 8000a92:	1c60      	adds	r0, r4, #1
 8000a94:	b2c0      	uxtb	r0, r0
 8000a96:	2801      	cmp	r0, #1
 8000a98:	dc00      	bgt.n	8000a9c <__aeabi_fsub+0xd4>
 8000a9a:	e0a7      	b.n	8000bec <__aeabi_fsub+0x224>
 8000a9c:	464a      	mov	r2, r9
 8000a9e:	1a9c      	subs	r4, r3, r2
 8000aa0:	0162      	lsls	r2, r4, #5
 8000aa2:	d500      	bpl.n	8000aa6 <__aeabi_fsub+0xde>
 8000aa4:	e0b6      	b.n	8000c14 <__aeabi_fsub+0x24c>
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d1be      	bne.n	8000a28 <__aeabi_fsub+0x60>
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2400      	movs	r4, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e7e3      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	dc00      	bgt.n	8000ab8 <__aeabi_fsub+0xf0>
 8000ab6:	e085      	b.n	8000bc4 <__aeabi_fsub+0x1fc>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d046      	beq.n	8000b4a <__aeabi_fsub+0x182>
 8000abc:	2cff      	cmp	r4, #255	; 0xff
 8000abe:	d049      	beq.n	8000b54 <__aeabi_fsub+0x18c>
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	4648      	mov	r0, r9
 8000ac4:	04d2      	lsls	r2, r2, #19
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	4681      	mov	r9, r0
 8000aca:	2201      	movs	r2, #1
 8000acc:	2e1b      	cmp	r6, #27
 8000ace:	dc09      	bgt.n	8000ae4 <__aeabi_fsub+0x11c>
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	464c      	mov	r4, r9
 8000ad4:	1b80      	subs	r0, r0, r6
 8000ad6:	4084      	lsls	r4, r0
 8000ad8:	464a      	mov	r2, r9
 8000ada:	0020      	movs	r0, r4
 8000adc:	40f2      	lsrs	r2, r6
 8000ade:	1e44      	subs	r4, r0, #1
 8000ae0:	41a0      	sbcs	r0, r4
 8000ae2:	4302      	orrs	r2, r0
 8000ae4:	189b      	adds	r3, r3, r2
 8000ae6:	015a      	lsls	r2, r3, #5
 8000ae8:	d528      	bpl.n	8000b3c <__aeabi_fsub+0x174>
 8000aea:	3501      	adds	r5, #1
 8000aec:	2dff      	cmp	r5, #255	; 0xff
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x12a>
 8000af0:	e0a8      	b.n	8000c44 <__aeabi_fsub+0x27c>
 8000af2:	2201      	movs	r2, #1
 8000af4:	2407      	movs	r4, #7
 8000af6:	4994      	ldr	r1, [pc, #592]	; (8000d48 <__aeabi_fsub+0x380>)
 8000af8:	401a      	ands	r2, r3
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	400b      	ands	r3, r1
 8000afe:	4313      	orrs	r3, r2
 8000b00:	401c      	ands	r4, r3
 8000b02:	e7a6      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0x142>
 8000b08:	e778      	b.n	80009fc <__aeabi_fsub+0x34>
 8000b0a:	e775      	b.n	80009f8 <__aeabi_fsub+0x30>
 8000b0c:	2cff      	cmp	r4, #255	; 0xff
 8000b0e:	d054      	beq.n	8000bba <__aeabi_fsub+0x1f2>
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	4649      	mov	r1, r9
 8000b14:	04d2      	lsls	r2, r2, #19
 8000b16:	4311      	orrs	r1, r2
 8000b18:	4689      	mov	r9, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2e1b      	cmp	r6, #27
 8000b1e:	dc09      	bgt.n	8000b34 <__aeabi_fsub+0x16c>
 8000b20:	2120      	movs	r1, #32
 8000b22:	4648      	mov	r0, r9
 8000b24:	1b89      	subs	r1, r1, r6
 8000b26:	4088      	lsls	r0, r1
 8000b28:	464a      	mov	r2, r9
 8000b2a:	0001      	movs	r1, r0
 8000b2c:	40f2      	lsrs	r2, r6
 8000b2e:	1e48      	subs	r0, r1, #1
 8000b30:	4181      	sbcs	r1, r0
 8000b32:	430a      	orrs	r2, r1
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	015a      	lsls	r2, r3, #5
 8000b38:	d500      	bpl.n	8000b3c <__aeabi_fsub+0x174>
 8000b3a:	e773      	b.n	8000a24 <__aeabi_fsub+0x5c>
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4641      	mov	r1, r8
 8000b40:	400a      	ands	r2, r1
 8000b42:	0759      	lsls	r1, r3, #29
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fsub+0x180>
 8000b46:	e789      	b.n	8000a5c <__aeabi_fsub+0x94>
 8000b48:	e011      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000b4a:	4648      	mov	r0, r9
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d158      	bne.n	8000c02 <__aeabi_fsub+0x23a>
 8000b50:	2cff      	cmp	r4, #255	; 0xff
 8000b52:	d10c      	bne.n	8000b6e <__aeabi_fsub+0x1a6>
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x194>
 8000b5a:	e78c      	b.n	8000a76 <__aeabi_fsub+0xae>
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	03c0      	lsls	r0, r0, #15
 8000b60:	4303      	orrs	r3, r0
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	0a5b      	lsrs	r3, r3, #9
 8000b66:	24ff      	movs	r4, #255	; 0xff
 8000b68:	e787      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000b6a:	2cff      	cmp	r4, #255	; 0xff
 8000b6c:	d025      	beq.n	8000bba <__aeabi_fsub+0x1f2>
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	2dff      	cmp	r5, #255	; 0xff
 8000b72:	d0f0      	beq.n	8000b56 <__aeabi_fsub+0x18e>
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	b2ec      	uxtb	r4, r5
 8000b7a:	e77e      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000b7c:	2c00      	cmp	r4, #0
 8000b7e:	d04d      	beq.n	8000c1c <__aeabi_fsub+0x254>
 8000b80:	28ff      	cmp	r0, #255	; 0xff
 8000b82:	d018      	beq.n	8000bb6 <__aeabi_fsub+0x1ee>
 8000b84:	2480      	movs	r4, #128	; 0x80
 8000b86:	04e4      	lsls	r4, r4, #19
 8000b88:	4272      	negs	r2, r6
 8000b8a:	4323      	orrs	r3, r4
 8000b8c:	2a1b      	cmp	r2, #27
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_fsub+0x1ca>
 8000b90:	e0c4      	b.n	8000d1c <__aeabi_fsub+0x354>
 8000b92:	001c      	movs	r4, r3
 8000b94:	2520      	movs	r5, #32
 8000b96:	40d4      	lsrs	r4, r2
 8000b98:	1aaa      	subs	r2, r5, r2
 8000b9a:	4093      	lsls	r3, r2
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	4193      	sbcs	r3, r2
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	0005      	movs	r5, r0
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4688      	mov	r8, r1
 8000baa:	e738      	b.n	8000a1e <__aeabi_fsub+0x56>
 8000bac:	1c72      	adds	r2, r6, #1
 8000bae:	d0f8      	beq.n	8000ba2 <__aeabi_fsub+0x1da>
 8000bb0:	43f2      	mvns	r2, r6
 8000bb2:	28ff      	cmp	r0, #255	; 0xff
 8000bb4:	d1ea      	bne.n	8000b8c <__aeabi_fsub+0x1c4>
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	464b      	mov	r3, r9
 8000bba:	25ff      	movs	r5, #255	; 0xff
 8000bbc:	e7d7      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	0a5b      	lsrs	r3, r3, #9
 8000bc2:	e75a      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d141      	bne.n	8000c4c <__aeabi_fsub+0x284>
 8000bc8:	1c65      	adds	r5, r4, #1
 8000bca:	b2e9      	uxtb	r1, r5
 8000bcc:	2901      	cmp	r1, #1
 8000bce:	dd45      	ble.n	8000c5c <__aeabi_fsub+0x294>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x20e>
 8000bd4:	e74f      	b.n	8000a76 <__aeabi_fsub+0xae>
 8000bd6:	2407      	movs	r4, #7
 8000bd8:	444b      	add	r3, r9
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	401c      	ands	r4, r3
 8000bde:	e738      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000be0:	2207      	movs	r2, #7
 8000be2:	4b5a      	ldr	r3, [pc, #360]	; (8000d4c <__aeabi_fsub+0x384>)
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	4023      	ands	r3, r4
 8000be8:	4014      	ands	r4, r2
 8000bea:	e732      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d11d      	bne.n	8000c2c <__aeabi_fsub+0x264>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d17a      	bne.n	8000cea <__aeabi_fsub+0x322>
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fsub+0x234>
 8000bfa:	e091      	b.n	8000d20 <__aeabi_fsub+0x358>
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	2500      	movs	r5, #0
 8000c00:	e7b5      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c02:	3e01      	subs	r6, #1
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d119      	bne.n	8000c3c <__aeabi_fsub+0x274>
 8000c08:	444b      	add	r3, r9
 8000c0a:	e76c      	b.n	8000ae6 <__aeabi_fsub+0x11e>
 8000c0c:	2cff      	cmp	r4, #255	; 0xff
 8000c0e:	d184      	bne.n	8000b1a <__aeabi_fsub+0x152>
 8000c10:	25ff      	movs	r5, #255	; 0xff
 8000c12:	e7ac      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c14:	464a      	mov	r2, r9
 8000c16:	4688      	mov	r8, r1
 8000c18:	1ad4      	subs	r4, r2, r3
 8000c1a:	e705      	b.n	8000a28 <__aeabi_fsub+0x60>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1c5      	bne.n	8000bac <__aeabi_fsub+0x1e4>
 8000c20:	000a      	movs	r2, r1
 8000c22:	28ff      	cmp	r0, #255	; 0xff
 8000c24:	d0c8      	beq.n	8000bb8 <__aeabi_fsub+0x1f0>
 8000c26:	0005      	movs	r5, r0
 8000c28:	464b      	mov	r3, r9
 8000c2a:	e7a0      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d149      	bne.n	8000cc4 <__aeabi_fsub+0x2fc>
 8000c30:	464b      	mov	r3, r9
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d077      	beq.n	8000d26 <__aeabi_fsub+0x35e>
 8000c36:	000a      	movs	r2, r1
 8000c38:	25ff      	movs	r5, #255	; 0xff
 8000c3a:	e798      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000c3c:	2cff      	cmp	r4, #255	; 0xff
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fsub+0x27a>
 8000c40:	e743      	b.n	8000aca <__aeabi_fsub+0x102>
 8000c42:	e787      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000c44:	000a      	movs	r2, r1
 8000c46:	24ff      	movs	r4, #255	; 0xff
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e716      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	d115      	bne.n	8000c7c <__aeabi_fsub+0x2b4>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d157      	bne.n	8000d04 <__aeabi_fsub+0x33c>
 8000c54:	28ff      	cmp	r0, #255	; 0xff
 8000c56:	d1e6      	bne.n	8000c26 <__aeabi_fsub+0x25e>
 8000c58:	464b      	mov	r3, r9
 8000c5a:	e77b      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000c5c:	2c00      	cmp	r4, #0
 8000c5e:	d120      	bne.n	8000ca2 <__aeabi_fsub+0x2da>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d057      	beq.n	8000d14 <__aeabi_fsub+0x34c>
 8000c64:	4649      	mov	r1, r9
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d053      	beq.n	8000d12 <__aeabi_fsub+0x34a>
 8000c6a:	444b      	add	r3, r9
 8000c6c:	015a      	lsls	r2, r3, #5
 8000c6e:	d568      	bpl.n	8000d42 <__aeabi_fsub+0x37a>
 8000c70:	2407      	movs	r4, #7
 8000c72:	4a36      	ldr	r2, [pc, #216]	; (8000d4c <__aeabi_fsub+0x384>)
 8000c74:	401c      	ands	r4, r3
 8000c76:	2501      	movs	r5, #1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	e6ea      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000c7c:	28ff      	cmp	r0, #255	; 0xff
 8000c7e:	d0eb      	beq.n	8000c58 <__aeabi_fsub+0x290>
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	04d2      	lsls	r2, r2, #19
 8000c84:	4276      	negs	r6, r6
 8000c86:	4313      	orrs	r3, r2
 8000c88:	2e1b      	cmp	r6, #27
 8000c8a:	dc53      	bgt.n	8000d34 <__aeabi_fsub+0x36c>
 8000c8c:	2520      	movs	r5, #32
 8000c8e:	1bad      	subs	r5, r5, r6
 8000c90:	001a      	movs	r2, r3
 8000c92:	40ab      	lsls	r3, r5
 8000c94:	40f2      	lsrs	r2, r6
 8000c96:	1e5c      	subs	r4, r3, #1
 8000c98:	41a3      	sbcs	r3, r4
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	444b      	add	r3, r9
 8000c9e:	0005      	movs	r5, r0
 8000ca0:	e721      	b.n	8000ae6 <__aeabi_fsub+0x11e>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0d8      	beq.n	8000c58 <__aeabi_fsub+0x290>
 8000ca6:	4649      	mov	r1, r9
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d100      	bne.n	8000cae <__aeabi_fsub+0x2e6>
 8000cac:	e752      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	03c9      	lsls	r1, r1, #15
 8000cb2:	420f      	tst	r7, r1
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x2f0>
 8000cb6:	e74d      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cb8:	4660      	mov	r0, ip
 8000cba:	4208      	tst	r0, r1
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fsub+0x2f8>
 8000cbe:	e749      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	e747      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000cc4:	4648      	mov	r0, r9
 8000cc6:	25ff      	movs	r5, #255	; 0xff
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d100      	bne.n	8000cce <__aeabi_fsub+0x306>
 8000ccc:	e74f      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	03d2      	lsls	r2, r2, #15
 8000cd2:	4217      	tst	r7, r2
 8000cd4:	d004      	beq.n	8000ce0 <__aeabi_fsub+0x318>
 8000cd6:	4660      	mov	r0, ip
 8000cd8:	4210      	tst	r0, r2
 8000cda:	d101      	bne.n	8000ce0 <__aeabi_fsub+0x318>
 8000cdc:	464b      	mov	r3, r9
 8000cde:	4688      	mov	r8, r1
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4641      	mov	r1, r8
 8000ce4:	25ff      	movs	r5, #255	; 0xff
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	e741      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000cea:	4648      	mov	r0, r9
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d01f      	beq.n	8000d30 <__aeabi_fsub+0x368>
 8000cf0:	1a1a      	subs	r2, r3, r0
 8000cf2:	0150      	lsls	r0, r2, #5
 8000cf4:	d520      	bpl.n	8000d38 <__aeabi_fsub+0x370>
 8000cf6:	464a      	mov	r2, r9
 8000cf8:	2407      	movs	r4, #7
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	401c      	ands	r4, r3
 8000cfe:	4688      	mov	r8, r1
 8000d00:	2500      	movs	r5, #0
 8000d02:	e6a6      	b.n	8000a52 <__aeabi_fsub+0x8a>
 8000d04:	1c74      	adds	r4, r6, #1
 8000d06:	d0c9      	beq.n	8000c9c <__aeabi_fsub+0x2d4>
 8000d08:	43f6      	mvns	r6, r6
 8000d0a:	28ff      	cmp	r0, #255	; 0xff
 8000d0c:	d1bc      	bne.n	8000c88 <__aeabi_fsub+0x2c0>
 8000d0e:	464b      	mov	r3, r9
 8000d10:	e720      	b.n	8000b54 <__aeabi_fsub+0x18c>
 8000d12:	4699      	mov	r9, r3
 8000d14:	464b      	mov	r3, r9
 8000d16:	2500      	movs	r5, #0
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	e72b      	b.n	8000b74 <__aeabi_fsub+0x1ac>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e740      	b.n	8000ba2 <__aeabi_fsub+0x1da>
 8000d20:	2200      	movs	r2, #0
 8000d22:	2300      	movs	r3, #0
 8000d24:	e6a9      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	2200      	movs	r2, #0
 8000d2a:	03db      	lsls	r3, r3, #15
 8000d2c:	24ff      	movs	r4, #255	; 0xff
 8000d2e:	e6a4      	b.n	8000a7a <__aeabi_fsub+0xb2>
 8000d30:	2500      	movs	r5, #0
 8000d32:	e71c      	b.n	8000b6e <__aeabi_fsub+0x1a6>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e7b1      	b.n	8000c9c <__aeabi_fsub+0x2d4>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d0f1      	beq.n	8000d20 <__aeabi_fsub+0x358>
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	2500      	movs	r5, #0
 8000d40:	e6fc      	b.n	8000b3c <__aeabi_fsub+0x174>
 8000d42:	2500      	movs	r5, #0
 8000d44:	e6fa      	b.n	8000b3c <__aeabi_fsub+0x174>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	7dffffff 	.word	0x7dffffff
 8000d4c:	fbffffff 	.word	0xfbffffff

08000d50 <__aeabi_f2iz>:
 8000d50:	0241      	lsls	r1, r0, #9
 8000d52:	0042      	lsls	r2, r0, #1
 8000d54:	0fc3      	lsrs	r3, r0, #31
 8000d56:	0a49      	lsrs	r1, r1, #9
 8000d58:	0e12      	lsrs	r2, r2, #24
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000d5e:	d90d      	bls.n	8000d7c <__aeabi_f2iz+0x2c>
 8000d60:	2a9d      	cmp	r2, #157	; 0x9d
 8000d62:	d80c      	bhi.n	8000d7e <__aeabi_f2iz+0x2e>
 8000d64:	2080      	movs	r0, #128	; 0x80
 8000d66:	0400      	lsls	r0, r0, #16
 8000d68:	4301      	orrs	r1, r0
 8000d6a:	2a95      	cmp	r2, #149	; 0x95
 8000d6c:	dc0a      	bgt.n	8000d84 <__aeabi_f2iz+0x34>
 8000d6e:	2096      	movs	r0, #150	; 0x96
 8000d70:	1a82      	subs	r2, r0, r2
 8000d72:	40d1      	lsrs	r1, r2
 8000d74:	4248      	negs	r0, r1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_f2iz+0x2c>
 8000d7a:	0008      	movs	r0, r1
 8000d7c:	4770      	bx	lr
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <__aeabi_f2iz+0x3c>)
 8000d80:	1898      	adds	r0, r3, r2
 8000d82:	e7fb      	b.n	8000d7c <__aeabi_f2iz+0x2c>
 8000d84:	3a96      	subs	r2, #150	; 0x96
 8000d86:	4091      	lsls	r1, r2
 8000d88:	e7f4      	b.n	8000d74 <__aeabi_f2iz+0x24>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	7fffffff 	.word	0x7fffffff

08000d90 <__aeabi_ui2f>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	1e04      	subs	r4, r0, #0
 8000d94:	d034      	beq.n	8000e00 <__aeabi_ui2f+0x70>
 8000d96:	f001 fe93 	bl	8002ac0 <__clzsi2>
 8000d9a:	229e      	movs	r2, #158	; 0x9e
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	2a96      	cmp	r2, #150	; 0x96
 8000da0:	dc07      	bgt.n	8000db2 <__aeabi_ui2f+0x22>
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	2808      	cmp	r0, #8
 8000da6:	dd2e      	ble.n	8000e06 <__aeabi_ui2f+0x76>
 8000da8:	3808      	subs	r0, #8
 8000daa:	4084      	lsls	r4, r0
 8000dac:	0260      	lsls	r0, r4, #9
 8000dae:	0a40      	lsrs	r0, r0, #9
 8000db0:	e021      	b.n	8000df6 <__aeabi_ui2f+0x66>
 8000db2:	2a99      	cmp	r2, #153	; 0x99
 8000db4:	dd09      	ble.n	8000dca <__aeabi_ui2f+0x3a>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0021      	movs	r1, r4
 8000dba:	331b      	adds	r3, #27
 8000dbc:	4099      	lsls	r1, r3
 8000dbe:	1e4b      	subs	r3, r1, #1
 8000dc0:	4199      	sbcs	r1, r3
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	1a1b      	subs	r3, r3, r0
 8000dc6:	40dc      	lsrs	r4, r3
 8000dc8:	430c      	orrs	r4, r1
 8000dca:	2805      	cmp	r0, #5
 8000dcc:	dd01      	ble.n	8000dd2 <__aeabi_ui2f+0x42>
 8000dce:	1f43      	subs	r3, r0, #5
 8000dd0:	409c      	lsls	r4, r3
 8000dd2:	0023      	movs	r3, r4
 8000dd4:	490d      	ldr	r1, [pc, #52]	; (8000e0c <__aeabi_ui2f+0x7c>)
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	0765      	lsls	r5, r4, #29
 8000dda:	d009      	beq.n	8000df0 <__aeabi_ui2f+0x60>
 8000ddc:	250f      	movs	r5, #15
 8000dde:	402c      	ands	r4, r5
 8000de0:	2c04      	cmp	r4, #4
 8000de2:	d005      	beq.n	8000df0 <__aeabi_ui2f+0x60>
 8000de4:	3304      	adds	r3, #4
 8000de6:	015c      	lsls	r4, r3, #5
 8000de8:	d502      	bpl.n	8000df0 <__aeabi_ui2f+0x60>
 8000dea:	229f      	movs	r2, #159	; 0x9f
 8000dec:	400b      	ands	r3, r1
 8000dee:	1a12      	subs	r2, r2, r0
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	0a58      	lsrs	r0, r3, #9
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	0240      	lsls	r0, r0, #9
 8000df8:	05d2      	lsls	r2, r2, #23
 8000dfa:	0a40      	lsrs	r0, r0, #9
 8000dfc:	4310      	orrs	r0, r2
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
 8000e00:	2200      	movs	r2, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	e7f7      	b.n	8000df6 <__aeabi_ui2f+0x66>
 8000e06:	0260      	lsls	r0, r4, #9
 8000e08:	0a40      	lsrs	r0, r0, #9
 8000e0a:	e7f4      	b.n	8000df6 <__aeabi_ui2f+0x66>
 8000e0c:	fbffffff 	.word	0xfbffffff

08000e10 <__aeabi_dadd>:
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	464f      	mov	r7, r9
 8000e14:	4646      	mov	r6, r8
 8000e16:	46d6      	mov	lr, sl
 8000e18:	000c      	movs	r4, r1
 8000e1a:	0309      	lsls	r1, r1, #12
 8000e1c:	b5c0      	push	{r6, r7, lr}
 8000e1e:	0a49      	lsrs	r1, r1, #9
 8000e20:	0f47      	lsrs	r7, r0, #29
 8000e22:	005e      	lsls	r6, r3, #1
 8000e24:	4339      	orrs	r1, r7
 8000e26:	031f      	lsls	r7, r3, #12
 8000e28:	0fdb      	lsrs	r3, r3, #31
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	0065      	lsls	r5, r4, #1
 8000e2e:	0a7b      	lsrs	r3, r7, #9
 8000e30:	0f57      	lsrs	r7, r2, #29
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0d6d      	lsrs	r5, r5, #21
 8000e36:	0fe4      	lsrs	r4, r4, #31
 8000e38:	0d76      	lsrs	r6, r6, #21
 8000e3a:	46a1      	mov	r9, r4
 8000e3c:	00c0      	lsls	r0, r0, #3
 8000e3e:	46b8      	mov	r8, r7
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	1bab      	subs	r3, r5, r6
 8000e44:	4564      	cmp	r4, ip
 8000e46:	d07b      	beq.n	8000f40 <__aeabi_dadd+0x130>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dd5f      	ble.n	8000f0c <__aeabi_dadd+0xfc>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x42>
 8000e50:	e0a4      	b.n	8000f9c <__aeabi_dadd+0x18c>
 8000e52:	003e      	movs	r6, r7
 8000e54:	4316      	orrs	r6, r2
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x4a>
 8000e58:	e112      	b.n	8001080 <__aeabi_dadd+0x270>
 8000e5a:	1e5e      	subs	r6, r3, #1
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_dadd+0x52>
 8000e60:	e19e      	b.n	80011a0 <__aeabi_dadd+0x390>
 8000e62:	1a87      	subs	r7, r0, r2
 8000e64:	4643      	mov	r3, r8
 8000e66:	42b8      	cmp	r0, r7
 8000e68:	4180      	sbcs	r0, r0
 8000e6a:	2501      	movs	r5, #1
 8000e6c:	1ac9      	subs	r1, r1, r3
 8000e6e:	4240      	negs	r0, r0
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	020b      	lsls	r3, r1, #8
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_dadd+0x68>
 8000e76:	e131      	b.n	80010dc <__aeabi_dadd+0x2cc>
 8000e78:	0249      	lsls	r1, r1, #9
 8000e7a:	0a4e      	lsrs	r6, r1, #9
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x72>
 8000e80:	e16e      	b.n	8001160 <__aeabi_dadd+0x350>
 8000e82:	0030      	movs	r0, r6
 8000e84:	f001 fe1c 	bl	8002ac0 <__clzsi2>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	2b1f      	cmp	r3, #31
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_dadd+0x82>
 8000e90:	e161      	b.n	8001156 <__aeabi_dadd+0x346>
 8000e92:	2220      	movs	r2, #32
 8000e94:	0039      	movs	r1, r7
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	409e      	lsls	r6, r3
 8000e9a:	40d1      	lsrs	r1, r2
 8000e9c:	409f      	lsls	r7, r3
 8000e9e:	430e      	orrs	r6, r1
 8000ea0:	429d      	cmp	r5, r3
 8000ea2:	dd00      	ble.n	8000ea6 <__aeabi_dadd+0x96>
 8000ea4:	e151      	b.n	800114a <__aeabi_dadd+0x33a>
 8000ea6:	1b5d      	subs	r5, r3, r5
 8000ea8:	1c6b      	adds	r3, r5, #1
 8000eaa:	2b1f      	cmp	r3, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0xa0>
 8000eae:	e17c      	b.n	80011aa <__aeabi_dadd+0x39a>
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	003d      	movs	r5, r7
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	408f      	lsls	r7, r1
 8000eba:	4088      	lsls	r0, r1
 8000ebc:	40dd      	lsrs	r5, r3
 8000ebe:	1e79      	subs	r1, r7, #1
 8000ec0:	418f      	sbcs	r7, r1
 8000ec2:	0031      	movs	r1, r6
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	4328      	orrs	r0, r5
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	2500      	movs	r5, #0
 8000ecc:	4307      	orrs	r7, r0
 8000ece:	403a      	ands	r2, r7
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d009      	beq.n	8000ee8 <__aeabi_dadd+0xd8>
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	403b      	ands	r3, r7
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dadd+0xd8>
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	42bb      	cmp	r3, r7
 8000ee0:	41bf      	sbcs	r7, r7
 8000ee2:	427f      	negs	r7, r7
 8000ee4:	19c9      	adds	r1, r1, r7
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	020b      	lsls	r3, r1, #8
 8000eea:	d400      	bmi.n	8000eee <__aeabi_dadd+0xde>
 8000eec:	e226      	b.n	800133c <__aeabi_dadd+0x52c>
 8000eee:	1c6a      	adds	r2, r5, #1
 8000ef0:	4bc6      	ldr	r3, [pc, #792]	; (800120c <__aeabi_dadd+0x3fc>)
 8000ef2:	0555      	lsls	r5, r2, #21
 8000ef4:	0d6d      	lsrs	r5, r5, #21
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0xec>
 8000efa:	e106      	b.n	800110a <__aeabi_dadd+0x2fa>
 8000efc:	4ac4      	ldr	r2, [pc, #784]	; (8001210 <__aeabi_dadd+0x400>)
 8000efe:	08ff      	lsrs	r7, r7, #3
 8000f00:	400a      	ands	r2, r1
 8000f02:	0753      	lsls	r3, r2, #29
 8000f04:	0252      	lsls	r2, r2, #9
 8000f06:	433b      	orrs	r3, r7
 8000f08:	0b12      	lsrs	r2, r2, #12
 8000f0a:	e08e      	b.n	800102a <__aeabi_dadd+0x21a>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_dadd+0x102>
 8000f10:	e0b8      	b.n	8001084 <__aeabi_dadd+0x274>
 8000f12:	1c6b      	adds	r3, r5, #1
 8000f14:	055b      	lsls	r3, r3, #21
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_dadd+0x10e>
 8000f1c:	e130      	b.n	8001180 <__aeabi_dadd+0x370>
 8000f1e:	1a87      	subs	r7, r0, r2
 8000f20:	4643      	mov	r3, r8
 8000f22:	42b8      	cmp	r0, r7
 8000f24:	41b6      	sbcs	r6, r6
 8000f26:	1acb      	subs	r3, r1, r3
 8000f28:	4276      	negs	r6, r6
 8000f2a:	1b9e      	subs	r6, r3, r6
 8000f2c:	0233      	lsls	r3, r6, #8
 8000f2e:	d500      	bpl.n	8000f32 <__aeabi_dadd+0x122>
 8000f30:	e14c      	b.n	80011cc <__aeabi_dadd+0x3bc>
 8000f32:	003b      	movs	r3, r7
 8000f34:	4333      	orrs	r3, r6
 8000f36:	d1a1      	bne.n	8000e7c <__aeabi_dadd+0x6c>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e070      	b.n	8001022 <__aeabi_dadd+0x212>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_dadd+0x136>
 8000f44:	e0e5      	b.n	8001112 <__aeabi_dadd+0x302>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x13c>
 8000f4a:	e083      	b.n	8001054 <__aeabi_dadd+0x244>
 8000f4c:	4eaf      	ldr	r6, [pc, #700]	; (800120c <__aeabi_dadd+0x3fc>)
 8000f4e:	42b5      	cmp	r5, r6
 8000f50:	d060      	beq.n	8001014 <__aeabi_dadd+0x204>
 8000f52:	2680      	movs	r6, #128	; 0x80
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4337      	orrs	r7, r6
 8000f58:	46b8      	mov	r8, r7
 8000f5a:	2b38      	cmp	r3, #56	; 0x38
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_dadd+0x150>
 8000f5e:	e13e      	b.n	80011de <__aeabi_dadd+0x3ce>
 8000f60:	4643      	mov	r3, r8
 8000f62:	4313      	orrs	r3, r2
 8000f64:	001f      	movs	r7, r3
 8000f66:	1e7a      	subs	r2, r7, #1
 8000f68:	4197      	sbcs	r7, r2
 8000f6a:	183f      	adds	r7, r7, r0
 8000f6c:	4287      	cmp	r7, r0
 8000f6e:	4180      	sbcs	r0, r0
 8000f70:	4240      	negs	r0, r0
 8000f72:	1809      	adds	r1, r1, r0
 8000f74:	020b      	lsls	r3, r1, #8
 8000f76:	d400      	bmi.n	8000f7a <__aeabi_dadd+0x16a>
 8000f78:	e0b0      	b.n	80010dc <__aeabi_dadd+0x2cc>
 8000f7a:	4ba4      	ldr	r3, [pc, #656]	; (800120c <__aeabi_dadd+0x3fc>)
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	429d      	cmp	r5, r3
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x174>
 8000f82:	e0c3      	b.n	800110c <__aeabi_dadd+0x2fc>
 8000f84:	4aa2      	ldr	r2, [pc, #648]	; (8001210 <__aeabi_dadd+0x400>)
 8000f86:	087b      	lsrs	r3, r7, #1
 8000f88:	400a      	ands	r2, r1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	400f      	ands	r7, r1
 8000f8e:	431f      	orrs	r7, r3
 8000f90:	0851      	lsrs	r1, r2, #1
 8000f92:	07d3      	lsls	r3, r2, #31
 8000f94:	2207      	movs	r2, #7
 8000f96:	431f      	orrs	r7, r3
 8000f98:	403a      	ands	r2, r7
 8000f9a:	e799      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 8000f9c:	4e9b      	ldr	r6, [pc, #620]	; (800120c <__aeabi_dadd+0x3fc>)
 8000f9e:	42b5      	cmp	r5, r6
 8000fa0:	d038      	beq.n	8001014 <__aeabi_dadd+0x204>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0436      	lsls	r6, r6, #16
 8000fa6:	4337      	orrs	r7, r6
 8000fa8:	46b8      	mov	r8, r7
 8000faa:	2b38      	cmp	r3, #56	; 0x38
 8000fac:	dd00      	ble.n	8000fb0 <__aeabi_dadd+0x1a0>
 8000fae:	e0dc      	b.n	800116a <__aeabi_dadd+0x35a>
 8000fb0:	2b1f      	cmp	r3, #31
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dadd+0x1a6>
 8000fb4:	e130      	b.n	8001218 <__aeabi_dadd+0x408>
 8000fb6:	001e      	movs	r6, r3
 8000fb8:	4647      	mov	r7, r8
 8000fba:	3e20      	subs	r6, #32
 8000fbc:	40f7      	lsrs	r7, r6
 8000fbe:	46bc      	mov	ip, r7
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	d004      	beq.n	8000fce <__aeabi_dadd+0x1be>
 8000fc4:	2640      	movs	r6, #64	; 0x40
 8000fc6:	1af3      	subs	r3, r6, r3
 8000fc8:	4646      	mov	r6, r8
 8000fca:	409e      	lsls	r6, r3
 8000fcc:	4332      	orrs	r2, r6
 8000fce:	0017      	movs	r7, r2
 8000fd0:	4663      	mov	r3, ip
 8000fd2:	1e7a      	subs	r2, r7, #1
 8000fd4:	4197      	sbcs	r7, r2
 8000fd6:	431f      	orrs	r7, r3
 8000fd8:	e0cc      	b.n	8001174 <__aeabi_dadd+0x364>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x1d0>
 8000fde:	e204      	b.n	80013ea <__aeabi_dadd+0x5da>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x1d8>
 8000fe6:	e159      	b.n	800129c <__aeabi_dadd+0x48c>
 8000fe8:	074b      	lsls	r3, r1, #29
 8000fea:	08c0      	lsrs	r0, r0, #3
 8000fec:	4318      	orrs	r0, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	08c9      	lsrs	r1, r1, #3
 8000ff2:	031b      	lsls	r3, r3, #12
 8000ff4:	4219      	tst	r1, r3
 8000ff6:	d008      	beq.n	800100a <__aeabi_dadd+0x1fa>
 8000ff8:	4645      	mov	r5, r8
 8000ffa:	08ed      	lsrs	r5, r5, #3
 8000ffc:	421d      	tst	r5, r3
 8000ffe:	d104      	bne.n	800100a <__aeabi_dadd+0x1fa>
 8001000:	4643      	mov	r3, r8
 8001002:	08d0      	lsrs	r0, r2, #3
 8001004:	0759      	lsls	r1, r3, #29
 8001006:	4308      	orrs	r0, r1
 8001008:	0029      	movs	r1, r5
 800100a:	0f42      	lsrs	r2, r0, #29
 800100c:	00c9      	lsls	r1, r1, #3
 800100e:	4d7f      	ldr	r5, [pc, #508]	; (800120c <__aeabi_dadd+0x3fc>)
 8001010:	4311      	orrs	r1, r2
 8001012:	00c0      	lsls	r0, r0, #3
 8001014:	074b      	lsls	r3, r1, #29
 8001016:	08ca      	lsrs	r2, r1, #3
 8001018:	497c      	ldr	r1, [pc, #496]	; (800120c <__aeabi_dadd+0x3fc>)
 800101a:	08c0      	lsrs	r0, r0, #3
 800101c:	4303      	orrs	r3, r0
 800101e:	428d      	cmp	r5, r1
 8001020:	d068      	beq.n	80010f4 <__aeabi_dadd+0x2e4>
 8001022:	0312      	lsls	r2, r2, #12
 8001024:	056d      	lsls	r5, r5, #21
 8001026:	0b12      	lsrs	r2, r2, #12
 8001028:	0d6d      	lsrs	r5, r5, #21
 800102a:	2100      	movs	r1, #0
 800102c:	0312      	lsls	r2, r2, #12
 800102e:	0018      	movs	r0, r3
 8001030:	0b13      	lsrs	r3, r2, #12
 8001032:	0d0a      	lsrs	r2, r1, #20
 8001034:	0512      	lsls	r2, r2, #20
 8001036:	431a      	orrs	r2, r3
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <__aeabi_dadd+0x404>)
 800103a:	052d      	lsls	r5, r5, #20
 800103c:	4013      	ands	r3, r2
 800103e:	432b      	orrs	r3, r5
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	07e4      	lsls	r4, r4, #31
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	4323      	orrs	r3, r4
 8001048:	0019      	movs	r1, r3
 800104a:	bc1c      	pop	{r2, r3, r4}
 800104c:	4690      	mov	r8, r2
 800104e:	4699      	mov	r9, r3
 8001050:	46a2      	mov	sl, r4
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001054:	003e      	movs	r6, r7
 8001056:	4316      	orrs	r6, r2
 8001058:	d012      	beq.n	8001080 <__aeabi_dadd+0x270>
 800105a:	1e5e      	subs	r6, r3, #1
 800105c:	2e00      	cmp	r6, #0
 800105e:	d000      	beq.n	8001062 <__aeabi_dadd+0x252>
 8001060:	e100      	b.n	8001264 <__aeabi_dadd+0x454>
 8001062:	1887      	adds	r7, r0, r2
 8001064:	4287      	cmp	r7, r0
 8001066:	4180      	sbcs	r0, r0
 8001068:	4441      	add	r1, r8
 800106a:	4240      	negs	r0, r0
 800106c:	1809      	adds	r1, r1, r0
 800106e:	2501      	movs	r5, #1
 8001070:	020b      	lsls	r3, r1, #8
 8001072:	d533      	bpl.n	80010dc <__aeabi_dadd+0x2cc>
 8001074:	2502      	movs	r5, #2
 8001076:	e785      	b.n	8000f84 <__aeabi_dadd+0x174>
 8001078:	4664      	mov	r4, ip
 800107a:	0033      	movs	r3, r6
 800107c:	4641      	mov	r1, r8
 800107e:	0010      	movs	r0, r2
 8001080:	001d      	movs	r5, r3
 8001082:	e7c7      	b.n	8001014 <__aeabi_dadd+0x204>
 8001084:	2d00      	cmp	r5, #0
 8001086:	d000      	beq.n	800108a <__aeabi_dadd+0x27a>
 8001088:	e0da      	b.n	8001240 <__aeabi_dadd+0x430>
 800108a:	000c      	movs	r4, r1
 800108c:	4304      	orrs	r4, r0
 800108e:	d0f3      	beq.n	8001078 <__aeabi_dadd+0x268>
 8001090:	1c5c      	adds	r4, r3, #1
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x286>
 8001094:	e19f      	b.n	80013d6 <__aeabi_dadd+0x5c6>
 8001096:	4c5d      	ldr	r4, [pc, #372]	; (800120c <__aeabi_dadd+0x3fc>)
 8001098:	42a6      	cmp	r6, r4
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x28e>
 800109c:	e12f      	b.n	80012fe <__aeabi_dadd+0x4ee>
 800109e:	43db      	mvns	r3, r3
 80010a0:	2b38      	cmp	r3, #56	; 0x38
 80010a2:	dd00      	ble.n	80010a6 <__aeabi_dadd+0x296>
 80010a4:	e166      	b.n	8001374 <__aeabi_dadd+0x564>
 80010a6:	2b1f      	cmp	r3, #31
 80010a8:	dd00      	ble.n	80010ac <__aeabi_dadd+0x29c>
 80010aa:	e183      	b.n	80013b4 <__aeabi_dadd+0x5a4>
 80010ac:	2420      	movs	r4, #32
 80010ae:	0005      	movs	r5, r0
 80010b0:	1ae4      	subs	r4, r4, r3
 80010b2:	000f      	movs	r7, r1
 80010b4:	40dd      	lsrs	r5, r3
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	40a0      	lsls	r0, r4
 80010ba:	4643      	mov	r3, r8
 80010bc:	40a7      	lsls	r7, r4
 80010be:	1a5b      	subs	r3, r3, r1
 80010c0:	1e44      	subs	r4, r0, #1
 80010c2:	41a0      	sbcs	r0, r4
 80010c4:	4698      	mov	r8, r3
 80010c6:	432f      	orrs	r7, r5
 80010c8:	4338      	orrs	r0, r7
 80010ca:	1a17      	subs	r7, r2, r0
 80010cc:	42ba      	cmp	r2, r7
 80010ce:	4192      	sbcs	r2, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	4252      	negs	r2, r2
 80010d4:	1a99      	subs	r1, r3, r2
 80010d6:	4664      	mov	r4, ip
 80010d8:	0035      	movs	r5, r6
 80010da:	e6ca      	b.n	8000e72 <__aeabi_dadd+0x62>
 80010dc:	2207      	movs	r2, #7
 80010de:	403a      	ands	r2, r7
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d000      	beq.n	80010e6 <__aeabi_dadd+0x2d6>
 80010e4:	e6f6      	b.n	8000ed4 <__aeabi_dadd+0xc4>
 80010e6:	074b      	lsls	r3, r1, #29
 80010e8:	08ca      	lsrs	r2, r1, #3
 80010ea:	4948      	ldr	r1, [pc, #288]	; (800120c <__aeabi_dadd+0x3fc>)
 80010ec:	08ff      	lsrs	r7, r7, #3
 80010ee:	433b      	orrs	r3, r7
 80010f0:	428d      	cmp	r5, r1
 80010f2:	d196      	bne.n	8001022 <__aeabi_dadd+0x212>
 80010f4:	0019      	movs	r1, r3
 80010f6:	4311      	orrs	r1, r2
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x2ec>
 80010fa:	e19e      	b.n	800143a <__aeabi_dadd+0x62a>
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	0309      	lsls	r1, r1, #12
 8001100:	430a      	orrs	r2, r1
 8001102:	0312      	lsls	r2, r2, #12
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	4d41      	ldr	r5, [pc, #260]	; (800120c <__aeabi_dadd+0x3fc>)
 8001108:	e78f      	b.n	800102a <__aeabi_dadd+0x21a>
 800110a:	0015      	movs	r5, r2
 800110c:	2200      	movs	r2, #0
 800110e:	2300      	movs	r3, #0
 8001110:	e78b      	b.n	800102a <__aeabi_dadd+0x21a>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d000      	beq.n	8001118 <__aeabi_dadd+0x308>
 8001116:	e0c7      	b.n	80012a8 <__aeabi_dadd+0x498>
 8001118:	1c6b      	adds	r3, r5, #1
 800111a:	055f      	lsls	r7, r3, #21
 800111c:	0d7f      	lsrs	r7, r7, #21
 800111e:	2f01      	cmp	r7, #1
 8001120:	dc00      	bgt.n	8001124 <__aeabi_dadd+0x314>
 8001122:	e0f1      	b.n	8001308 <__aeabi_dadd+0x4f8>
 8001124:	4d39      	ldr	r5, [pc, #228]	; (800120c <__aeabi_dadd+0x3fc>)
 8001126:	42ab      	cmp	r3, r5
 8001128:	d100      	bne.n	800112c <__aeabi_dadd+0x31c>
 800112a:	e0b9      	b.n	80012a0 <__aeabi_dadd+0x490>
 800112c:	1885      	adds	r5, r0, r2
 800112e:	000a      	movs	r2, r1
 8001130:	4285      	cmp	r5, r0
 8001132:	4189      	sbcs	r1, r1
 8001134:	4442      	add	r2, r8
 8001136:	4249      	negs	r1, r1
 8001138:	1851      	adds	r1, r2, r1
 800113a:	2207      	movs	r2, #7
 800113c:	07cf      	lsls	r7, r1, #31
 800113e:	086d      	lsrs	r5, r5, #1
 8001140:	432f      	orrs	r7, r5
 8001142:	0849      	lsrs	r1, r1, #1
 8001144:	403a      	ands	r2, r7
 8001146:	001d      	movs	r5, r3
 8001148:	e6c2      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 800114a:	2207      	movs	r2, #7
 800114c:	4930      	ldr	r1, [pc, #192]	; (8001210 <__aeabi_dadd+0x400>)
 800114e:	1aed      	subs	r5, r5, r3
 8001150:	4031      	ands	r1, r6
 8001152:	403a      	ands	r2, r7
 8001154:	e6bc      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 8001156:	003e      	movs	r6, r7
 8001158:	3828      	subs	r0, #40	; 0x28
 800115a:	4086      	lsls	r6, r0
 800115c:	2700      	movs	r7, #0
 800115e:	e69f      	b.n	8000ea0 <__aeabi_dadd+0x90>
 8001160:	0038      	movs	r0, r7
 8001162:	f001 fcad 	bl	8002ac0 <__clzsi2>
 8001166:	3020      	adds	r0, #32
 8001168:	e68e      	b.n	8000e88 <__aeabi_dadd+0x78>
 800116a:	4643      	mov	r3, r8
 800116c:	4313      	orrs	r3, r2
 800116e:	001f      	movs	r7, r3
 8001170:	1e7a      	subs	r2, r7, #1
 8001172:	4197      	sbcs	r7, r2
 8001174:	1bc7      	subs	r7, r0, r7
 8001176:	42b8      	cmp	r0, r7
 8001178:	4180      	sbcs	r0, r0
 800117a:	4240      	negs	r0, r0
 800117c:	1a09      	subs	r1, r1, r0
 800117e:	e678      	b.n	8000e72 <__aeabi_dadd+0x62>
 8001180:	000e      	movs	r6, r1
 8001182:	003b      	movs	r3, r7
 8001184:	4306      	orrs	r6, r0
 8001186:	4313      	orrs	r3, r2
 8001188:	2d00      	cmp	r5, #0
 800118a:	d161      	bne.n	8001250 <__aeabi_dadd+0x440>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x382>
 8001190:	e0f4      	b.n	800137c <__aeabi_dadd+0x56c>
 8001192:	2b00      	cmp	r3, #0
 8001194:	d100      	bne.n	8001198 <__aeabi_dadd+0x388>
 8001196:	e11b      	b.n	80013d0 <__aeabi_dadd+0x5c0>
 8001198:	4664      	mov	r4, ip
 800119a:	0039      	movs	r1, r7
 800119c:	0010      	movs	r0, r2
 800119e:	e739      	b.n	8001014 <__aeabi_dadd+0x204>
 80011a0:	4f1a      	ldr	r7, [pc, #104]	; (800120c <__aeabi_dadd+0x3fc>)
 80011a2:	42bb      	cmp	r3, r7
 80011a4:	d07a      	beq.n	800129c <__aeabi_dadd+0x48c>
 80011a6:	0033      	movs	r3, r6
 80011a8:	e6ff      	b.n	8000faa <__aeabi_dadd+0x19a>
 80011aa:	0030      	movs	r0, r6
 80011ac:	3d1f      	subs	r5, #31
 80011ae:	40e8      	lsrs	r0, r5
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d003      	beq.n	80011bc <__aeabi_dadd+0x3ac>
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	1acb      	subs	r3, r1, r3
 80011b8:	409e      	lsls	r6, r3
 80011ba:	4337      	orrs	r7, r6
 80011bc:	1e7b      	subs	r3, r7, #1
 80011be:	419f      	sbcs	r7, r3
 80011c0:	2207      	movs	r2, #7
 80011c2:	4307      	orrs	r7, r0
 80011c4:	403a      	ands	r2, r7
 80011c6:	2100      	movs	r1, #0
 80011c8:	2500      	movs	r5, #0
 80011ca:	e789      	b.n	80010e0 <__aeabi_dadd+0x2d0>
 80011cc:	1a17      	subs	r7, r2, r0
 80011ce:	4643      	mov	r3, r8
 80011d0:	42ba      	cmp	r2, r7
 80011d2:	41b6      	sbcs	r6, r6
 80011d4:	1a59      	subs	r1, r3, r1
 80011d6:	4276      	negs	r6, r6
 80011d8:	1b8e      	subs	r6, r1, r6
 80011da:	4664      	mov	r4, ip
 80011dc:	e64e      	b.n	8000e7c <__aeabi_dadd+0x6c>
 80011de:	2b1f      	cmp	r3, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0x3d4>
 80011e2:	e0ad      	b.n	8001340 <__aeabi_dadd+0x530>
 80011e4:	2620      	movs	r6, #32
 80011e6:	4647      	mov	r7, r8
 80011e8:	1af6      	subs	r6, r6, r3
 80011ea:	40b7      	lsls	r7, r6
 80011ec:	46b9      	mov	r9, r7
 80011ee:	0017      	movs	r7, r2
 80011f0:	46b2      	mov	sl, r6
 80011f2:	40df      	lsrs	r7, r3
 80011f4:	464e      	mov	r6, r9
 80011f6:	433e      	orrs	r6, r7
 80011f8:	0037      	movs	r7, r6
 80011fa:	4656      	mov	r6, sl
 80011fc:	40b2      	lsls	r2, r6
 80011fe:	1e56      	subs	r6, r2, #1
 8001200:	41b2      	sbcs	r2, r6
 8001202:	4317      	orrs	r7, r2
 8001204:	4642      	mov	r2, r8
 8001206:	40da      	lsrs	r2, r3
 8001208:	1889      	adds	r1, r1, r2
 800120a:	e6ae      	b.n	8000f6a <__aeabi_dadd+0x15a>
 800120c:	000007ff 	.word	0x000007ff
 8001210:	ff7fffff 	.word	0xff7fffff
 8001214:	800fffff 	.word	0x800fffff
 8001218:	2620      	movs	r6, #32
 800121a:	4647      	mov	r7, r8
 800121c:	1af6      	subs	r6, r6, r3
 800121e:	40b7      	lsls	r7, r6
 8001220:	46b9      	mov	r9, r7
 8001222:	0017      	movs	r7, r2
 8001224:	46b2      	mov	sl, r6
 8001226:	40df      	lsrs	r7, r3
 8001228:	464e      	mov	r6, r9
 800122a:	433e      	orrs	r6, r7
 800122c:	0037      	movs	r7, r6
 800122e:	4656      	mov	r6, sl
 8001230:	40b2      	lsls	r2, r6
 8001232:	1e56      	subs	r6, r2, #1
 8001234:	41b2      	sbcs	r2, r6
 8001236:	4317      	orrs	r7, r2
 8001238:	4642      	mov	r2, r8
 800123a:	40da      	lsrs	r2, r3
 800123c:	1a89      	subs	r1, r1, r2
 800123e:	e799      	b.n	8001174 <__aeabi_dadd+0x364>
 8001240:	4c7f      	ldr	r4, [pc, #508]	; (8001440 <__aeabi_dadd+0x630>)
 8001242:	42a6      	cmp	r6, r4
 8001244:	d05b      	beq.n	80012fe <__aeabi_dadd+0x4ee>
 8001246:	2480      	movs	r4, #128	; 0x80
 8001248:	0424      	lsls	r4, r4, #16
 800124a:	425b      	negs	r3, r3
 800124c:	4321      	orrs	r1, r4
 800124e:	e727      	b.n	80010a0 <__aeabi_dadd+0x290>
 8001250:	2e00      	cmp	r6, #0
 8001252:	d10c      	bne.n	800126e <__aeabi_dadd+0x45e>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x44a>
 8001258:	e0cb      	b.n	80013f2 <__aeabi_dadd+0x5e2>
 800125a:	4664      	mov	r4, ip
 800125c:	0039      	movs	r1, r7
 800125e:	0010      	movs	r0, r2
 8001260:	4d77      	ldr	r5, [pc, #476]	; (8001440 <__aeabi_dadd+0x630>)
 8001262:	e6d7      	b.n	8001014 <__aeabi_dadd+0x204>
 8001264:	4f76      	ldr	r7, [pc, #472]	; (8001440 <__aeabi_dadd+0x630>)
 8001266:	42bb      	cmp	r3, r7
 8001268:	d018      	beq.n	800129c <__aeabi_dadd+0x48c>
 800126a:	0033      	movs	r3, r6
 800126c:	e675      	b.n	8000f5a <__aeabi_dadd+0x14a>
 800126e:	2b00      	cmp	r3, #0
 8001270:	d014      	beq.n	800129c <__aeabi_dadd+0x48c>
 8001272:	074b      	lsls	r3, r1, #29
 8001274:	08c0      	lsrs	r0, r0, #3
 8001276:	4318      	orrs	r0, r3
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	08c9      	lsrs	r1, r1, #3
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	4219      	tst	r1, r3
 8001280:	d007      	beq.n	8001292 <__aeabi_dadd+0x482>
 8001282:	08fc      	lsrs	r4, r7, #3
 8001284:	421c      	tst	r4, r3
 8001286:	d104      	bne.n	8001292 <__aeabi_dadd+0x482>
 8001288:	0779      	lsls	r1, r7, #29
 800128a:	08d0      	lsrs	r0, r2, #3
 800128c:	4308      	orrs	r0, r1
 800128e:	46e1      	mov	r9, ip
 8001290:	0021      	movs	r1, r4
 8001292:	464c      	mov	r4, r9
 8001294:	0f42      	lsrs	r2, r0, #29
 8001296:	00c9      	lsls	r1, r1, #3
 8001298:	4311      	orrs	r1, r2
 800129a:	00c0      	lsls	r0, r0, #3
 800129c:	4d68      	ldr	r5, [pc, #416]	; (8001440 <__aeabi_dadd+0x630>)
 800129e:	e6b9      	b.n	8001014 <__aeabi_dadd+0x204>
 80012a0:	001d      	movs	r5, r3
 80012a2:	2200      	movs	r2, #0
 80012a4:	2300      	movs	r3, #0
 80012a6:	e6c0      	b.n	800102a <__aeabi_dadd+0x21a>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d15b      	bne.n	8001364 <__aeabi_dadd+0x554>
 80012ac:	000d      	movs	r5, r1
 80012ae:	4305      	orrs	r5, r0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dadd+0x4a4>
 80012b2:	e6e2      	b.n	800107a <__aeabi_dadd+0x26a>
 80012b4:	1c5d      	adds	r5, r3, #1
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x4aa>
 80012b8:	e0b0      	b.n	800141c <__aeabi_dadd+0x60c>
 80012ba:	4d61      	ldr	r5, [pc, #388]	; (8001440 <__aeabi_dadd+0x630>)
 80012bc:	42ae      	cmp	r6, r5
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x4f0>
 80012c0:	43db      	mvns	r3, r3
 80012c2:	2b38      	cmp	r3, #56	; 0x38
 80012c4:	dc71      	bgt.n	80013aa <__aeabi_dadd+0x59a>
 80012c6:	2b1f      	cmp	r3, #31
 80012c8:	dd00      	ble.n	80012cc <__aeabi_dadd+0x4bc>
 80012ca:	e096      	b.n	80013fa <__aeabi_dadd+0x5ea>
 80012cc:	2520      	movs	r5, #32
 80012ce:	000f      	movs	r7, r1
 80012d0:	1aed      	subs	r5, r5, r3
 80012d2:	40af      	lsls	r7, r5
 80012d4:	46b9      	mov	r9, r7
 80012d6:	0007      	movs	r7, r0
 80012d8:	46aa      	mov	sl, r5
 80012da:	40df      	lsrs	r7, r3
 80012dc:	464d      	mov	r5, r9
 80012de:	433d      	orrs	r5, r7
 80012e0:	002f      	movs	r7, r5
 80012e2:	4655      	mov	r5, sl
 80012e4:	40a8      	lsls	r0, r5
 80012e6:	40d9      	lsrs	r1, r3
 80012e8:	1e45      	subs	r5, r0, #1
 80012ea:	41a8      	sbcs	r0, r5
 80012ec:	4488      	add	r8, r1
 80012ee:	4307      	orrs	r7, r0
 80012f0:	18bf      	adds	r7, r7, r2
 80012f2:	4297      	cmp	r7, r2
 80012f4:	4192      	sbcs	r2, r2
 80012f6:	4251      	negs	r1, r2
 80012f8:	4441      	add	r1, r8
 80012fa:	0035      	movs	r5, r6
 80012fc:	e63a      	b.n	8000f74 <__aeabi_dadd+0x164>
 80012fe:	4664      	mov	r4, ip
 8001300:	0035      	movs	r5, r6
 8001302:	4641      	mov	r1, r8
 8001304:	0010      	movs	r0, r2
 8001306:	e685      	b.n	8001014 <__aeabi_dadd+0x204>
 8001308:	000b      	movs	r3, r1
 800130a:	4303      	orrs	r3, r0
 800130c:	2d00      	cmp	r5, #0
 800130e:	d000      	beq.n	8001312 <__aeabi_dadd+0x502>
 8001310:	e663      	b.n	8000fda <__aeabi_dadd+0x1ca>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f5      	beq.n	8001302 <__aeabi_dadd+0x4f2>
 8001316:	4643      	mov	r3, r8
 8001318:	4313      	orrs	r3, r2
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x50e>
 800131c:	e67a      	b.n	8001014 <__aeabi_dadd+0x204>
 800131e:	1887      	adds	r7, r0, r2
 8001320:	4287      	cmp	r7, r0
 8001322:	4180      	sbcs	r0, r0
 8001324:	2207      	movs	r2, #7
 8001326:	4441      	add	r1, r8
 8001328:	4240      	negs	r0, r0
 800132a:	1809      	adds	r1, r1, r0
 800132c:	403a      	ands	r2, r7
 800132e:	020b      	lsls	r3, r1, #8
 8001330:	d400      	bmi.n	8001334 <__aeabi_dadd+0x524>
 8001332:	e6d5      	b.n	80010e0 <__aeabi_dadd+0x2d0>
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <__aeabi_dadd+0x634>)
 8001336:	3501      	adds	r5, #1
 8001338:	4019      	ands	r1, r3
 800133a:	e5c9      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 800133c:	0038      	movs	r0, r7
 800133e:	e669      	b.n	8001014 <__aeabi_dadd+0x204>
 8001340:	001e      	movs	r6, r3
 8001342:	4647      	mov	r7, r8
 8001344:	3e20      	subs	r6, #32
 8001346:	40f7      	lsrs	r7, r6
 8001348:	46bc      	mov	ip, r7
 800134a:	2b20      	cmp	r3, #32
 800134c:	d004      	beq.n	8001358 <__aeabi_dadd+0x548>
 800134e:	2640      	movs	r6, #64	; 0x40
 8001350:	1af3      	subs	r3, r6, r3
 8001352:	4646      	mov	r6, r8
 8001354:	409e      	lsls	r6, r3
 8001356:	4332      	orrs	r2, r6
 8001358:	0017      	movs	r7, r2
 800135a:	4663      	mov	r3, ip
 800135c:	1e7a      	subs	r2, r7, #1
 800135e:	4197      	sbcs	r7, r2
 8001360:	431f      	orrs	r7, r3
 8001362:	e602      	b.n	8000f6a <__aeabi_dadd+0x15a>
 8001364:	4d36      	ldr	r5, [pc, #216]	; (8001440 <__aeabi_dadd+0x630>)
 8001366:	42ae      	cmp	r6, r5
 8001368:	d0ca      	beq.n	8001300 <__aeabi_dadd+0x4f0>
 800136a:	2580      	movs	r5, #128	; 0x80
 800136c:	042d      	lsls	r5, r5, #16
 800136e:	425b      	negs	r3, r3
 8001370:	4329      	orrs	r1, r5
 8001372:	e7a6      	b.n	80012c2 <__aeabi_dadd+0x4b2>
 8001374:	4308      	orrs	r0, r1
 8001376:	1e41      	subs	r1, r0, #1
 8001378:	4188      	sbcs	r0, r1
 800137a:	e6a6      	b.n	80010ca <__aeabi_dadd+0x2ba>
 800137c:	2b00      	cmp	r3, #0
 800137e:	d100      	bne.n	8001382 <__aeabi_dadd+0x572>
 8001380:	e648      	b.n	8001014 <__aeabi_dadd+0x204>
 8001382:	1a87      	subs	r7, r0, r2
 8001384:	4643      	mov	r3, r8
 8001386:	42b8      	cmp	r0, r7
 8001388:	41b6      	sbcs	r6, r6
 800138a:	1acb      	subs	r3, r1, r3
 800138c:	4276      	negs	r6, r6
 800138e:	1b9e      	subs	r6, r3, r6
 8001390:	0233      	lsls	r3, r6, #8
 8001392:	d54b      	bpl.n	800142c <__aeabi_dadd+0x61c>
 8001394:	1a17      	subs	r7, r2, r0
 8001396:	4643      	mov	r3, r8
 8001398:	42ba      	cmp	r2, r7
 800139a:	4192      	sbcs	r2, r2
 800139c:	1a59      	subs	r1, r3, r1
 800139e:	4252      	negs	r2, r2
 80013a0:	1a89      	subs	r1, r1, r2
 80013a2:	2207      	movs	r2, #7
 80013a4:	4664      	mov	r4, ip
 80013a6:	403a      	ands	r2, r7
 80013a8:	e592      	b.n	8000ed0 <__aeabi_dadd+0xc0>
 80013aa:	4301      	orrs	r1, r0
 80013ac:	000f      	movs	r7, r1
 80013ae:	1e79      	subs	r1, r7, #1
 80013b0:	418f      	sbcs	r7, r1
 80013b2:	e79d      	b.n	80012f0 <__aeabi_dadd+0x4e0>
 80013b4:	001c      	movs	r4, r3
 80013b6:	000f      	movs	r7, r1
 80013b8:	3c20      	subs	r4, #32
 80013ba:	40e7      	lsrs	r7, r4
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d003      	beq.n	80013c8 <__aeabi_dadd+0x5b8>
 80013c0:	2440      	movs	r4, #64	; 0x40
 80013c2:	1ae3      	subs	r3, r4, r3
 80013c4:	4099      	lsls	r1, r3
 80013c6:	4308      	orrs	r0, r1
 80013c8:	1e41      	subs	r1, r0, #1
 80013ca:	4188      	sbcs	r0, r1
 80013cc:	4338      	orrs	r0, r7
 80013ce:	e67c      	b.n	80010ca <__aeabi_dadd+0x2ba>
 80013d0:	2200      	movs	r2, #0
 80013d2:	2400      	movs	r4, #0
 80013d4:	e625      	b.n	8001022 <__aeabi_dadd+0x212>
 80013d6:	1a17      	subs	r7, r2, r0
 80013d8:	4643      	mov	r3, r8
 80013da:	42ba      	cmp	r2, r7
 80013dc:	4192      	sbcs	r2, r2
 80013de:	1a59      	subs	r1, r3, r1
 80013e0:	4252      	negs	r2, r2
 80013e2:	1a89      	subs	r1, r1, r2
 80013e4:	4664      	mov	r4, ip
 80013e6:	0035      	movs	r5, r6
 80013e8:	e543      	b.n	8000e72 <__aeabi_dadd+0x62>
 80013ea:	4641      	mov	r1, r8
 80013ec:	0010      	movs	r0, r2
 80013ee:	4d14      	ldr	r5, [pc, #80]	; (8001440 <__aeabi_dadd+0x630>)
 80013f0:	e610      	b.n	8001014 <__aeabi_dadd+0x204>
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	2400      	movs	r4, #0
 80013f6:	0312      	lsls	r2, r2, #12
 80013f8:	e680      	b.n	80010fc <__aeabi_dadd+0x2ec>
 80013fa:	001d      	movs	r5, r3
 80013fc:	000f      	movs	r7, r1
 80013fe:	3d20      	subs	r5, #32
 8001400:	40ef      	lsrs	r7, r5
 8001402:	46bc      	mov	ip, r7
 8001404:	2b20      	cmp	r3, #32
 8001406:	d003      	beq.n	8001410 <__aeabi_dadd+0x600>
 8001408:	2540      	movs	r5, #64	; 0x40
 800140a:	1aeb      	subs	r3, r5, r3
 800140c:	4099      	lsls	r1, r3
 800140e:	4308      	orrs	r0, r1
 8001410:	0007      	movs	r7, r0
 8001412:	4663      	mov	r3, ip
 8001414:	1e78      	subs	r0, r7, #1
 8001416:	4187      	sbcs	r7, r0
 8001418:	431f      	orrs	r7, r3
 800141a:	e769      	b.n	80012f0 <__aeabi_dadd+0x4e0>
 800141c:	1887      	adds	r7, r0, r2
 800141e:	4297      	cmp	r7, r2
 8001420:	419b      	sbcs	r3, r3
 8001422:	4441      	add	r1, r8
 8001424:	425b      	negs	r3, r3
 8001426:	18c9      	adds	r1, r1, r3
 8001428:	0035      	movs	r5, r6
 800142a:	e5a3      	b.n	8000f74 <__aeabi_dadd+0x164>
 800142c:	003b      	movs	r3, r7
 800142e:	4333      	orrs	r3, r6
 8001430:	d0ce      	beq.n	80013d0 <__aeabi_dadd+0x5c0>
 8001432:	2207      	movs	r2, #7
 8001434:	0031      	movs	r1, r6
 8001436:	403a      	ands	r2, r7
 8001438:	e652      	b.n	80010e0 <__aeabi_dadd+0x2d0>
 800143a:	2300      	movs	r3, #0
 800143c:	001a      	movs	r2, r3
 800143e:	e5f4      	b.n	800102a <__aeabi_dadd+0x21a>
 8001440:	000007ff 	.word	0x000007ff
 8001444:	ff7fffff 	.word	0xff7fffff

08001448 <__aeabi_ddiv>:
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	4657      	mov	r7, sl
 800144c:	46de      	mov	lr, fp
 800144e:	464e      	mov	r6, r9
 8001450:	4645      	mov	r5, r8
 8001452:	b5e0      	push	{r5, r6, r7, lr}
 8001454:	4683      	mov	fp, r0
 8001456:	0007      	movs	r7, r0
 8001458:	030e      	lsls	r6, r1, #12
 800145a:	0048      	lsls	r0, r1, #1
 800145c:	b085      	sub	sp, #20
 800145e:	4692      	mov	sl, r2
 8001460:	001c      	movs	r4, r3
 8001462:	0b36      	lsrs	r6, r6, #12
 8001464:	0d40      	lsrs	r0, r0, #21
 8001466:	0fcd      	lsrs	r5, r1, #31
 8001468:	2800      	cmp	r0, #0
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x26>
 800146c:	e09d      	b.n	80015aa <__aeabi_ddiv+0x162>
 800146e:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <__aeabi_ddiv+0x27c>)
 8001470:	4298      	cmp	r0, r3
 8001472:	d039      	beq.n	80014e8 <__aeabi_ddiv+0xa0>
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	00f6      	lsls	r6, r6, #3
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431e      	orrs	r6, r3
 800147c:	4a92      	ldr	r2, [pc, #584]	; (80016c8 <__aeabi_ddiv+0x280>)
 800147e:	0f7b      	lsrs	r3, r7, #29
 8001480:	4333      	orrs	r3, r6
 8001482:	4699      	mov	r9, r3
 8001484:	4694      	mov	ip, r2
 8001486:	0003      	movs	r3, r0
 8001488:	4463      	add	r3, ip
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	2600      	movs	r6, #0
 8001490:	00ff      	lsls	r7, r7, #3
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	0323      	lsls	r3, r4, #12
 8001496:	0b1b      	lsrs	r3, r3, #12
 8001498:	4698      	mov	r8, r3
 800149a:	0063      	lsls	r3, r4, #1
 800149c:	0fe4      	lsrs	r4, r4, #31
 800149e:	4652      	mov	r2, sl
 80014a0:	0d5b      	lsrs	r3, r3, #21
 80014a2:	9401      	str	r4, [sp, #4]
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x60>
 80014a6:	e0b3      	b.n	8001610 <__aeabi_ddiv+0x1c8>
 80014a8:	4986      	ldr	r1, [pc, #536]	; (80016c4 <__aeabi_ddiv+0x27c>)
 80014aa:	428b      	cmp	r3, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_ddiv+0x68>
 80014ae:	e09e      	b.n	80015ee <__aeabi_ddiv+0x1a6>
 80014b0:	4642      	mov	r2, r8
 80014b2:	00d1      	lsls	r1, r2, #3
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	430a      	orrs	r2, r1
 80014ba:	4651      	mov	r1, sl
 80014bc:	0f49      	lsrs	r1, r1, #29
 80014be:	4311      	orrs	r1, r2
 80014c0:	468b      	mov	fp, r1
 80014c2:	4981      	ldr	r1, [pc, #516]	; (80016c8 <__aeabi_ddiv+0x280>)
 80014c4:	4652      	mov	r2, sl
 80014c6:	468c      	mov	ip, r1
 80014c8:	9900      	ldr	r1, [sp, #0]
 80014ca:	4463      	add	r3, ip
 80014cc:	1acb      	subs	r3, r1, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	00d2      	lsls	r2, r2, #3
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	002b      	movs	r3, r5
 80014d6:	4063      	eors	r3, r4
 80014d8:	469a      	mov	sl, r3
 80014da:	2e0f      	cmp	r6, #15
 80014dc:	d900      	bls.n	80014e0 <__aeabi_ddiv+0x98>
 80014de:	e105      	b.n	80016ec <__aeabi_ddiv+0x2a4>
 80014e0:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <__aeabi_ddiv+0x284>)
 80014e2:	00b6      	lsls	r6, r6, #2
 80014e4:	599b      	ldr	r3, [r3, r6]
 80014e6:	469f      	mov	pc, r3
 80014e8:	465b      	mov	r3, fp
 80014ea:	4333      	orrs	r3, r6
 80014ec:	4699      	mov	r9, r3
 80014ee:	d000      	beq.n	80014f2 <__aeabi_ddiv+0xaa>
 80014f0:	e0b8      	b.n	8001664 <__aeabi_ddiv+0x21c>
 80014f2:	2302      	movs	r3, #2
 80014f4:	2608      	movs	r6, #8
 80014f6:	2700      	movs	r7, #0
 80014f8:	9000      	str	r0, [sp, #0]
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	e7ca      	b.n	8001494 <__aeabi_ddiv+0x4c>
 80014fe:	46cb      	mov	fp, r9
 8001500:	003a      	movs	r2, r7
 8001502:	9902      	ldr	r1, [sp, #8]
 8001504:	9501      	str	r5, [sp, #4]
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	469a      	mov	sl, r3
 800150a:	2902      	cmp	r1, #2
 800150c:	d027      	beq.n	800155e <__aeabi_ddiv+0x116>
 800150e:	2903      	cmp	r1, #3
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0xcc>
 8001512:	e280      	b.n	8001a16 <__aeabi_ddiv+0x5ce>
 8001514:	2901      	cmp	r1, #1
 8001516:	d044      	beq.n	80015a2 <__aeabi_ddiv+0x15a>
 8001518:	496d      	ldr	r1, [pc, #436]	; (80016d0 <__aeabi_ddiv+0x288>)
 800151a:	9b00      	ldr	r3, [sp, #0]
 800151c:	468c      	mov	ip, r1
 800151e:	4463      	add	r3, ip
 8001520:	001c      	movs	r4, r3
 8001522:	2c00      	cmp	r4, #0
 8001524:	dd38      	ble.n	8001598 <__aeabi_ddiv+0x150>
 8001526:	0753      	lsls	r3, r2, #29
 8001528:	d000      	beq.n	800152c <__aeabi_ddiv+0xe4>
 800152a:	e213      	b.n	8001954 <__aeabi_ddiv+0x50c>
 800152c:	08d2      	lsrs	r2, r2, #3
 800152e:	465b      	mov	r3, fp
 8001530:	01db      	lsls	r3, r3, #7
 8001532:	d509      	bpl.n	8001548 <__aeabi_ddiv+0x100>
 8001534:	4659      	mov	r1, fp
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <__aeabi_ddiv+0x28c>)
 8001538:	4019      	ands	r1, r3
 800153a:	468b      	mov	fp, r1
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	00c9      	lsls	r1, r1, #3
 8001540:	468c      	mov	ip, r1
 8001542:	9b00      	ldr	r3, [sp, #0]
 8001544:	4463      	add	r3, ip
 8001546:	001c      	movs	r4, r3
 8001548:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <__aeabi_ddiv+0x290>)
 800154a:	429c      	cmp	r4, r3
 800154c:	dc07      	bgt.n	800155e <__aeabi_ddiv+0x116>
 800154e:	465b      	mov	r3, fp
 8001550:	0564      	lsls	r4, r4, #21
 8001552:	075f      	lsls	r7, r3, #29
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4317      	orrs	r7, r2
 8001558:	0b1b      	lsrs	r3, r3, #12
 800155a:	0d62      	lsrs	r2, r4, #21
 800155c:	e002      	b.n	8001564 <__aeabi_ddiv+0x11c>
 800155e:	2300      	movs	r3, #0
 8001560:	2700      	movs	r7, #0
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <__aeabi_ddiv+0x27c>)
 8001564:	2100      	movs	r1, #0
 8001566:	031b      	lsls	r3, r3, #12
 8001568:	0b1c      	lsrs	r4, r3, #12
 800156a:	0d0b      	lsrs	r3, r1, #20
 800156c:	051b      	lsls	r3, r3, #20
 800156e:	4323      	orrs	r3, r4
 8001570:	0514      	lsls	r4, r2, #20
 8001572:	4a5a      	ldr	r2, [pc, #360]	; (80016dc <__aeabi_ddiv+0x294>)
 8001574:	0038      	movs	r0, r7
 8001576:	4013      	ands	r3, r2
 8001578:	431c      	orrs	r4, r3
 800157a:	4653      	mov	r3, sl
 800157c:	0064      	lsls	r4, r4, #1
 800157e:	07db      	lsls	r3, r3, #31
 8001580:	0864      	lsrs	r4, r4, #1
 8001582:	431c      	orrs	r4, r3
 8001584:	0021      	movs	r1, r4
 8001586:	b005      	add	sp, #20
 8001588:	bc3c      	pop	{r2, r3, r4, r5}
 800158a:	4690      	mov	r8, r2
 800158c:	4699      	mov	r9, r3
 800158e:	46a2      	mov	sl, r4
 8001590:	46ab      	mov	fp, r5
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001594:	2201      	movs	r2, #1
 8001596:	4252      	negs	r2, r2
 8001598:	2301      	movs	r3, #1
 800159a:	1b1b      	subs	r3, r3, r4
 800159c:	2b38      	cmp	r3, #56	; 0x38
 800159e:	dc00      	bgt.n	80015a2 <__aeabi_ddiv+0x15a>
 80015a0:	e1ad      	b.n	80018fe <__aeabi_ddiv+0x4b6>
 80015a2:	2200      	movs	r2, #0
 80015a4:	2300      	movs	r3, #0
 80015a6:	2700      	movs	r7, #0
 80015a8:	e7dc      	b.n	8001564 <__aeabi_ddiv+0x11c>
 80015aa:	465b      	mov	r3, fp
 80015ac:	4333      	orrs	r3, r6
 80015ae:	4699      	mov	r9, r3
 80015b0:	d05e      	beq.n	8001670 <__aeabi_ddiv+0x228>
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x170>
 80015b6:	e18a      	b.n	80018ce <__aeabi_ddiv+0x486>
 80015b8:	0030      	movs	r0, r6
 80015ba:	f001 fa81 	bl	8002ac0 <__clzsi2>
 80015be:	0003      	movs	r3, r0
 80015c0:	3b0b      	subs	r3, #11
 80015c2:	2b1c      	cmp	r3, #28
 80015c4:	dd00      	ble.n	80015c8 <__aeabi_ddiv+0x180>
 80015c6:	e17b      	b.n	80018c0 <__aeabi_ddiv+0x478>
 80015c8:	221d      	movs	r2, #29
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	465a      	mov	r2, fp
 80015ce:	0001      	movs	r1, r0
 80015d0:	40da      	lsrs	r2, r3
 80015d2:	3908      	subs	r1, #8
 80015d4:	408e      	lsls	r6, r1
 80015d6:	0013      	movs	r3, r2
 80015d8:	465f      	mov	r7, fp
 80015da:	4333      	orrs	r3, r6
 80015dc:	4699      	mov	r9, r3
 80015de:	408f      	lsls	r7, r1
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <__aeabi_ddiv+0x298>)
 80015e2:	2600      	movs	r6, #0
 80015e4:	1a1b      	subs	r3, r3, r0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	e752      	b.n	8001494 <__aeabi_ddiv+0x4c>
 80015ee:	4641      	mov	r1, r8
 80015f0:	4653      	mov	r3, sl
 80015f2:	430b      	orrs	r3, r1
 80015f4:	493b      	ldr	r1, [pc, #236]	; (80016e4 <__aeabi_ddiv+0x29c>)
 80015f6:	469b      	mov	fp, r3
 80015f8:	468c      	mov	ip, r1
 80015fa:	9b00      	ldr	r3, [sp, #0]
 80015fc:	4463      	add	r3, ip
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	465b      	mov	r3, fp
 8001602:	2b00      	cmp	r3, #0
 8001604:	d13b      	bne.n	800167e <__aeabi_ddiv+0x236>
 8001606:	2302      	movs	r3, #2
 8001608:	2200      	movs	r2, #0
 800160a:	431e      	orrs	r6, r3
 800160c:	2102      	movs	r1, #2
 800160e:	e761      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001610:	4643      	mov	r3, r8
 8001612:	4313      	orrs	r3, r2
 8001614:	469b      	mov	fp, r3
 8001616:	d037      	beq.n	8001688 <__aeabi_ddiv+0x240>
 8001618:	4643      	mov	r3, r8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x1d8>
 800161e:	e162      	b.n	80018e6 <__aeabi_ddiv+0x49e>
 8001620:	4640      	mov	r0, r8
 8001622:	f001 fa4d 	bl	8002ac0 <__clzsi2>
 8001626:	0003      	movs	r3, r0
 8001628:	3b0b      	subs	r3, #11
 800162a:	2b1c      	cmp	r3, #28
 800162c:	dd00      	ble.n	8001630 <__aeabi_ddiv+0x1e8>
 800162e:	e153      	b.n	80018d8 <__aeabi_ddiv+0x490>
 8001630:	0002      	movs	r2, r0
 8001632:	4641      	mov	r1, r8
 8001634:	3a08      	subs	r2, #8
 8001636:	4091      	lsls	r1, r2
 8001638:	4688      	mov	r8, r1
 800163a:	211d      	movs	r1, #29
 800163c:	1acb      	subs	r3, r1, r3
 800163e:	4651      	mov	r1, sl
 8001640:	40d9      	lsrs	r1, r3
 8001642:	000b      	movs	r3, r1
 8001644:	4641      	mov	r1, r8
 8001646:	430b      	orrs	r3, r1
 8001648:	469b      	mov	fp, r3
 800164a:	4653      	mov	r3, sl
 800164c:	4093      	lsls	r3, r2
 800164e:	001a      	movs	r2, r3
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	4925      	ldr	r1, [pc, #148]	; (80016e8 <__aeabi_ddiv+0x2a0>)
 8001654:	469c      	mov	ip, r3
 8001656:	4460      	add	r0, ip
 8001658:	0003      	movs	r3, r0
 800165a:	468c      	mov	ip, r1
 800165c:	4463      	add	r3, ip
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2100      	movs	r1, #0
 8001662:	e737      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001664:	2303      	movs	r3, #3
 8001666:	46b1      	mov	r9, r6
 8001668:	9000      	str	r0, [sp, #0]
 800166a:	260c      	movs	r6, #12
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	e711      	b.n	8001494 <__aeabi_ddiv+0x4c>
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	2604      	movs	r6, #4
 8001678:	2700      	movs	r7, #0
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	e70a      	b.n	8001494 <__aeabi_ddiv+0x4c>
 800167e:	2303      	movs	r3, #3
 8001680:	46c3      	mov	fp, r8
 8001682:	431e      	orrs	r6, r3
 8001684:	2103      	movs	r1, #3
 8001686:	e725      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001688:	3301      	adds	r3, #1
 800168a:	431e      	orrs	r6, r3
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	e720      	b.n	80014d4 <__aeabi_ddiv+0x8c>
 8001692:	2300      	movs	r3, #0
 8001694:	469a      	mov	sl, r3
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	2700      	movs	r7, #0
 800169a:	031b      	lsls	r3, r3, #12
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <__aeabi_ddiv+0x27c>)
 800169e:	e761      	b.n	8001564 <__aeabi_ddiv+0x11c>
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	4649      	mov	r1, r9
 80016a4:	031b      	lsls	r3, r3, #12
 80016a6:	4219      	tst	r1, r3
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x264>
 80016aa:	e0e2      	b.n	8001872 <__aeabi_ddiv+0x42a>
 80016ac:	4659      	mov	r1, fp
 80016ae:	4219      	tst	r1, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_ddiv+0x26c>
 80016b2:	e0de      	b.n	8001872 <__aeabi_ddiv+0x42a>
 80016b4:	430b      	orrs	r3, r1
 80016b6:	031b      	lsls	r3, r3, #12
 80016b8:	0017      	movs	r7, r2
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	46a2      	mov	sl, r4
 80016be:	4a01      	ldr	r2, [pc, #4]	; (80016c4 <__aeabi_ddiv+0x27c>)
 80016c0:	e750      	b.n	8001564 <__aeabi_ddiv+0x11c>
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	000007ff 	.word	0x000007ff
 80016c8:	fffffc01 	.word	0xfffffc01
 80016cc:	080158a4 	.word	0x080158a4
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	fffffc0d 	.word	0xfffffc0d
 80016e4:	fffff801 	.word	0xfffff801
 80016e8:	000003f3 	.word	0x000003f3
 80016ec:	45d9      	cmp	r9, fp
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x2aa>
 80016f0:	e0cb      	b.n	800188a <__aeabi_ddiv+0x442>
 80016f2:	d100      	bne.n	80016f6 <__aeabi_ddiv+0x2ae>
 80016f4:	e0c6      	b.n	8001884 <__aeabi_ddiv+0x43c>
 80016f6:	003c      	movs	r4, r7
 80016f8:	4648      	mov	r0, r9
 80016fa:	2700      	movs	r7, #0
 80016fc:	9b00      	ldr	r3, [sp, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	465b      	mov	r3, fp
 8001704:	0e16      	lsrs	r6, r2, #24
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	431e      	orrs	r6, r3
 800170a:	0213      	lsls	r3, r2, #8
 800170c:	4698      	mov	r8, r3
 800170e:	0433      	lsls	r3, r6, #16
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	4699      	mov	r9, r3
 8001714:	0c31      	lsrs	r1, r6, #16
 8001716:	9101      	str	r1, [sp, #4]
 8001718:	f7fe fd96 	bl	8000248 <__aeabi_uidivmod>
 800171c:	464a      	mov	r2, r9
 800171e:	4342      	muls	r2, r0
 8001720:	040b      	lsls	r3, r1, #16
 8001722:	0c21      	lsrs	r1, r4, #16
 8001724:	0005      	movs	r5, r0
 8001726:	4319      	orrs	r1, r3
 8001728:	428a      	cmp	r2, r1
 800172a:	d907      	bls.n	800173c <__aeabi_ddiv+0x2f4>
 800172c:	1989      	adds	r1, r1, r6
 800172e:	3d01      	subs	r5, #1
 8001730:	428e      	cmp	r6, r1
 8001732:	d803      	bhi.n	800173c <__aeabi_ddiv+0x2f4>
 8001734:	428a      	cmp	r2, r1
 8001736:	d901      	bls.n	800173c <__aeabi_ddiv+0x2f4>
 8001738:	1e85      	subs	r5, r0, #2
 800173a:	1989      	adds	r1, r1, r6
 800173c:	1a88      	subs	r0, r1, r2
 800173e:	9901      	ldr	r1, [sp, #4]
 8001740:	f7fe fd82 	bl	8000248 <__aeabi_uidivmod>
 8001744:	0409      	lsls	r1, r1, #16
 8001746:	468c      	mov	ip, r1
 8001748:	464a      	mov	r2, r9
 800174a:	0421      	lsls	r1, r4, #16
 800174c:	4664      	mov	r4, ip
 800174e:	4342      	muls	r2, r0
 8001750:	0c09      	lsrs	r1, r1, #16
 8001752:	0003      	movs	r3, r0
 8001754:	4321      	orrs	r1, r4
 8001756:	428a      	cmp	r2, r1
 8001758:	d904      	bls.n	8001764 <__aeabi_ddiv+0x31c>
 800175a:	1989      	adds	r1, r1, r6
 800175c:	3b01      	subs	r3, #1
 800175e:	428e      	cmp	r6, r1
 8001760:	d800      	bhi.n	8001764 <__aeabi_ddiv+0x31c>
 8001762:	e0f1      	b.n	8001948 <__aeabi_ddiv+0x500>
 8001764:	042d      	lsls	r5, r5, #16
 8001766:	431d      	orrs	r5, r3
 8001768:	46ab      	mov	fp, r5
 800176a:	4643      	mov	r3, r8
 800176c:	1a89      	subs	r1, r1, r2
 800176e:	4642      	mov	r2, r8
 8001770:	0c28      	lsrs	r0, r5, #16
 8001772:	0412      	lsls	r2, r2, #16
 8001774:	0c1d      	lsrs	r5, r3, #16
 8001776:	465b      	mov	r3, fp
 8001778:	0c14      	lsrs	r4, r2, #16
 800177a:	0022      	movs	r2, r4
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	435a      	muls	r2, r3
 8001782:	9403      	str	r4, [sp, #12]
 8001784:	436b      	muls	r3, r5
 8001786:	4344      	muls	r4, r0
 8001788:	9502      	str	r5, [sp, #8]
 800178a:	4368      	muls	r0, r5
 800178c:	191b      	adds	r3, r3, r4
 800178e:	0c15      	lsrs	r5, r2, #16
 8001790:	18eb      	adds	r3, r5, r3
 8001792:	429c      	cmp	r4, r3
 8001794:	d903      	bls.n	800179e <__aeabi_ddiv+0x356>
 8001796:	2480      	movs	r4, #128	; 0x80
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	46a4      	mov	ip, r4
 800179c:	4460      	add	r0, ip
 800179e:	0c1c      	lsrs	r4, r3, #16
 80017a0:	0415      	lsls	r5, r2, #16
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	0c2d      	lsrs	r5, r5, #16
 80017a6:	1820      	adds	r0, r4, r0
 80017a8:	195d      	adds	r5, r3, r5
 80017aa:	4281      	cmp	r1, r0
 80017ac:	d377      	bcc.n	800189e <__aeabi_ddiv+0x456>
 80017ae:	d073      	beq.n	8001898 <__aeabi_ddiv+0x450>
 80017b0:	1a0c      	subs	r4, r1, r0
 80017b2:	4aa2      	ldr	r2, [pc, #648]	; (8001a3c <__aeabi_ddiv+0x5f4>)
 80017b4:	1b7d      	subs	r5, r7, r5
 80017b6:	42af      	cmp	r7, r5
 80017b8:	41bf      	sbcs	r7, r7
 80017ba:	4694      	mov	ip, r2
 80017bc:	9b00      	ldr	r3, [sp, #0]
 80017be:	427f      	negs	r7, r7
 80017c0:	4463      	add	r3, ip
 80017c2:	1be0      	subs	r0, r4, r7
 80017c4:	001c      	movs	r4, r3
 80017c6:	4286      	cmp	r6, r0
 80017c8:	d100      	bne.n	80017cc <__aeabi_ddiv+0x384>
 80017ca:	e0db      	b.n	8001984 <__aeabi_ddiv+0x53c>
 80017cc:	9901      	ldr	r1, [sp, #4]
 80017ce:	f7fe fd3b 	bl	8000248 <__aeabi_uidivmod>
 80017d2:	464a      	mov	r2, r9
 80017d4:	4342      	muls	r2, r0
 80017d6:	040b      	lsls	r3, r1, #16
 80017d8:	0c29      	lsrs	r1, r5, #16
 80017da:	0007      	movs	r7, r0
 80017dc:	4319      	orrs	r1, r3
 80017de:	428a      	cmp	r2, r1
 80017e0:	d907      	bls.n	80017f2 <__aeabi_ddiv+0x3aa>
 80017e2:	1989      	adds	r1, r1, r6
 80017e4:	3f01      	subs	r7, #1
 80017e6:	428e      	cmp	r6, r1
 80017e8:	d803      	bhi.n	80017f2 <__aeabi_ddiv+0x3aa>
 80017ea:	428a      	cmp	r2, r1
 80017ec:	d901      	bls.n	80017f2 <__aeabi_ddiv+0x3aa>
 80017ee:	1e87      	subs	r7, r0, #2
 80017f0:	1989      	adds	r1, r1, r6
 80017f2:	1a88      	subs	r0, r1, r2
 80017f4:	9901      	ldr	r1, [sp, #4]
 80017f6:	f7fe fd27 	bl	8000248 <__aeabi_uidivmod>
 80017fa:	0409      	lsls	r1, r1, #16
 80017fc:	464a      	mov	r2, r9
 80017fe:	4689      	mov	r9, r1
 8001800:	0429      	lsls	r1, r5, #16
 8001802:	464d      	mov	r5, r9
 8001804:	4342      	muls	r2, r0
 8001806:	0c09      	lsrs	r1, r1, #16
 8001808:	0003      	movs	r3, r0
 800180a:	4329      	orrs	r1, r5
 800180c:	428a      	cmp	r2, r1
 800180e:	d907      	bls.n	8001820 <__aeabi_ddiv+0x3d8>
 8001810:	1989      	adds	r1, r1, r6
 8001812:	3b01      	subs	r3, #1
 8001814:	428e      	cmp	r6, r1
 8001816:	d803      	bhi.n	8001820 <__aeabi_ddiv+0x3d8>
 8001818:	428a      	cmp	r2, r1
 800181a:	d901      	bls.n	8001820 <__aeabi_ddiv+0x3d8>
 800181c:	1e83      	subs	r3, r0, #2
 800181e:	1989      	adds	r1, r1, r6
 8001820:	043f      	lsls	r7, r7, #16
 8001822:	1a89      	subs	r1, r1, r2
 8001824:	003a      	movs	r2, r7
 8001826:	9f03      	ldr	r7, [sp, #12]
 8001828:	431a      	orrs	r2, r3
 800182a:	0038      	movs	r0, r7
 800182c:	0413      	lsls	r3, r2, #16
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	4358      	muls	r0, r3
 8001832:	4681      	mov	r9, r0
 8001834:	9802      	ldr	r0, [sp, #8]
 8001836:	0c15      	lsrs	r5, r2, #16
 8001838:	436f      	muls	r7, r5
 800183a:	4343      	muls	r3, r0
 800183c:	4345      	muls	r5, r0
 800183e:	4648      	mov	r0, r9
 8001840:	0c00      	lsrs	r0, r0, #16
 8001842:	4684      	mov	ip, r0
 8001844:	19db      	adds	r3, r3, r7
 8001846:	4463      	add	r3, ip
 8001848:	429f      	cmp	r7, r3
 800184a:	d903      	bls.n	8001854 <__aeabi_ddiv+0x40c>
 800184c:	2080      	movs	r0, #128	; 0x80
 800184e:	0240      	lsls	r0, r0, #9
 8001850:	4684      	mov	ip, r0
 8001852:	4465      	add	r5, ip
 8001854:	4648      	mov	r0, r9
 8001856:	0c1f      	lsrs	r7, r3, #16
 8001858:	0400      	lsls	r0, r0, #16
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	0c00      	lsrs	r0, r0, #16
 800185e:	197d      	adds	r5, r7, r5
 8001860:	1818      	adds	r0, r3, r0
 8001862:	42a9      	cmp	r1, r5
 8001864:	d200      	bcs.n	8001868 <__aeabi_ddiv+0x420>
 8001866:	e084      	b.n	8001972 <__aeabi_ddiv+0x52a>
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x424>
 800186a:	e07f      	b.n	800196c <__aeabi_ddiv+0x524>
 800186c:	2301      	movs	r3, #1
 800186e:	431a      	orrs	r2, r3
 8001870:	e657      	b.n	8001522 <__aeabi_ddiv+0xda>
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	464a      	mov	r2, r9
 8001876:	031b      	lsls	r3, r3, #12
 8001878:	4313      	orrs	r3, r2
 800187a:	031b      	lsls	r3, r3, #12
 800187c:	0b1b      	lsrs	r3, r3, #12
 800187e:	46aa      	mov	sl, r5
 8001880:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <__aeabi_ddiv+0x5f8>)
 8001882:	e66f      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001884:	42ba      	cmp	r2, r7
 8001886:	d900      	bls.n	800188a <__aeabi_ddiv+0x442>
 8001888:	e735      	b.n	80016f6 <__aeabi_ddiv+0x2ae>
 800188a:	464b      	mov	r3, r9
 800188c:	07dc      	lsls	r4, r3, #31
 800188e:	0858      	lsrs	r0, r3, #1
 8001890:	087b      	lsrs	r3, r7, #1
 8001892:	431c      	orrs	r4, r3
 8001894:	07ff      	lsls	r7, r7, #31
 8001896:	e734      	b.n	8001702 <__aeabi_ddiv+0x2ba>
 8001898:	2400      	movs	r4, #0
 800189a:	42af      	cmp	r7, r5
 800189c:	d289      	bcs.n	80017b2 <__aeabi_ddiv+0x36a>
 800189e:	4447      	add	r7, r8
 80018a0:	4547      	cmp	r7, r8
 80018a2:	41a4      	sbcs	r4, r4
 80018a4:	465b      	mov	r3, fp
 80018a6:	4264      	negs	r4, r4
 80018a8:	19a4      	adds	r4, r4, r6
 80018aa:	1864      	adds	r4, r4, r1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	42a6      	cmp	r6, r4
 80018b0:	d21e      	bcs.n	80018f0 <__aeabi_ddiv+0x4a8>
 80018b2:	42a0      	cmp	r0, r4
 80018b4:	d86d      	bhi.n	8001992 <__aeabi_ddiv+0x54a>
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0x472>
 80018b8:	e0b6      	b.n	8001a28 <__aeabi_ddiv+0x5e0>
 80018ba:	1a24      	subs	r4, r4, r0
 80018bc:	469b      	mov	fp, r3
 80018be:	e778      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 80018c0:	0003      	movs	r3, r0
 80018c2:	465a      	mov	r2, fp
 80018c4:	3b28      	subs	r3, #40	; 0x28
 80018c6:	409a      	lsls	r2, r3
 80018c8:	2700      	movs	r7, #0
 80018ca:	4691      	mov	r9, r2
 80018cc:	e688      	b.n	80015e0 <__aeabi_ddiv+0x198>
 80018ce:	4658      	mov	r0, fp
 80018d0:	f001 f8f6 	bl	8002ac0 <__clzsi2>
 80018d4:	3020      	adds	r0, #32
 80018d6:	e672      	b.n	80015be <__aeabi_ddiv+0x176>
 80018d8:	0003      	movs	r3, r0
 80018da:	4652      	mov	r2, sl
 80018dc:	3b28      	subs	r3, #40	; 0x28
 80018de:	409a      	lsls	r2, r3
 80018e0:	4693      	mov	fp, r2
 80018e2:	2200      	movs	r2, #0
 80018e4:	e6b4      	b.n	8001650 <__aeabi_ddiv+0x208>
 80018e6:	4650      	mov	r0, sl
 80018e8:	f001 f8ea 	bl	8002ac0 <__clzsi2>
 80018ec:	3020      	adds	r0, #32
 80018ee:	e69a      	b.n	8001626 <__aeabi_ddiv+0x1de>
 80018f0:	42a6      	cmp	r6, r4
 80018f2:	d1e2      	bne.n	80018ba <__aeabi_ddiv+0x472>
 80018f4:	45b8      	cmp	r8, r7
 80018f6:	d9dc      	bls.n	80018b2 <__aeabi_ddiv+0x46a>
 80018f8:	1a34      	subs	r4, r6, r0
 80018fa:	469b      	mov	fp, r3
 80018fc:	e759      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 80018fe:	2b1f      	cmp	r3, #31
 8001900:	dc65      	bgt.n	80019ce <__aeabi_ddiv+0x586>
 8001902:	4c50      	ldr	r4, [pc, #320]	; (8001a44 <__aeabi_ddiv+0x5fc>)
 8001904:	9900      	ldr	r1, [sp, #0]
 8001906:	46a4      	mov	ip, r4
 8001908:	465c      	mov	r4, fp
 800190a:	4461      	add	r1, ip
 800190c:	0008      	movs	r0, r1
 800190e:	408c      	lsls	r4, r1
 8001910:	0011      	movs	r1, r2
 8001912:	4082      	lsls	r2, r0
 8001914:	40d9      	lsrs	r1, r3
 8001916:	1e50      	subs	r0, r2, #1
 8001918:	4182      	sbcs	r2, r0
 800191a:	430c      	orrs	r4, r1
 800191c:	4314      	orrs	r4, r2
 800191e:	465a      	mov	r2, fp
 8001920:	40da      	lsrs	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	0762      	lsls	r2, r4, #29
 8001926:	d009      	beq.n	800193c <__aeabi_ddiv+0x4f4>
 8001928:	220f      	movs	r2, #15
 800192a:	4022      	ands	r2, r4
 800192c:	2a04      	cmp	r2, #4
 800192e:	d005      	beq.n	800193c <__aeabi_ddiv+0x4f4>
 8001930:	0022      	movs	r2, r4
 8001932:	1d14      	adds	r4, r2, #4
 8001934:	4294      	cmp	r4, r2
 8001936:	4189      	sbcs	r1, r1
 8001938:	4249      	negs	r1, r1
 800193a:	185b      	adds	r3, r3, r1
 800193c:	021a      	lsls	r2, r3, #8
 800193e:	d562      	bpl.n	8001a06 <__aeabi_ddiv+0x5be>
 8001940:	2201      	movs	r2, #1
 8001942:	2300      	movs	r3, #0
 8001944:	2700      	movs	r7, #0
 8001946:	e60d      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001948:	428a      	cmp	r2, r1
 800194a:	d800      	bhi.n	800194e <__aeabi_ddiv+0x506>
 800194c:	e70a      	b.n	8001764 <__aeabi_ddiv+0x31c>
 800194e:	1e83      	subs	r3, r0, #2
 8001950:	1989      	adds	r1, r1, r6
 8001952:	e707      	b.n	8001764 <__aeabi_ddiv+0x31c>
 8001954:	230f      	movs	r3, #15
 8001956:	4013      	ands	r3, r2
 8001958:	2b04      	cmp	r3, #4
 800195a:	d100      	bne.n	800195e <__aeabi_ddiv+0x516>
 800195c:	e5e6      	b.n	800152c <__aeabi_ddiv+0xe4>
 800195e:	1d17      	adds	r7, r2, #4
 8001960:	4297      	cmp	r7, r2
 8001962:	4192      	sbcs	r2, r2
 8001964:	4253      	negs	r3, r2
 8001966:	449b      	add	fp, r3
 8001968:	08fa      	lsrs	r2, r7, #3
 800196a:	e5e0      	b.n	800152e <__aeabi_ddiv+0xe6>
 800196c:	2800      	cmp	r0, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x52a>
 8001970:	e5d7      	b.n	8001522 <__aeabi_ddiv+0xda>
 8001972:	1871      	adds	r1, r6, r1
 8001974:	1e53      	subs	r3, r2, #1
 8001976:	42b1      	cmp	r1, r6
 8001978:	d327      	bcc.n	80019ca <__aeabi_ddiv+0x582>
 800197a:	42a9      	cmp	r1, r5
 800197c:	d315      	bcc.n	80019aa <__aeabi_ddiv+0x562>
 800197e:	d058      	beq.n	8001a32 <__aeabi_ddiv+0x5ea>
 8001980:	001a      	movs	r2, r3
 8001982:	e773      	b.n	800186c <__aeabi_ddiv+0x424>
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_ddiv+0x542>
 8001988:	e604      	b.n	8001594 <__aeabi_ddiv+0x14c>
 800198a:	2301      	movs	r3, #1
 800198c:	2200      	movs	r2, #0
 800198e:	449b      	add	fp, r3
 8001990:	e5cd      	b.n	800152e <__aeabi_ddiv+0xe6>
 8001992:	2302      	movs	r3, #2
 8001994:	4447      	add	r7, r8
 8001996:	4547      	cmp	r7, r8
 8001998:	4189      	sbcs	r1, r1
 800199a:	425b      	negs	r3, r3
 800199c:	469c      	mov	ip, r3
 800199e:	4249      	negs	r1, r1
 80019a0:	1989      	adds	r1, r1, r6
 80019a2:	190c      	adds	r4, r1, r4
 80019a4:	44e3      	add	fp, ip
 80019a6:	1a24      	subs	r4, r4, r0
 80019a8:	e703      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 80019aa:	4643      	mov	r3, r8
 80019ac:	005f      	lsls	r7, r3, #1
 80019ae:	4547      	cmp	r7, r8
 80019b0:	419b      	sbcs	r3, r3
 80019b2:	46b8      	mov	r8, r7
 80019b4:	425b      	negs	r3, r3
 80019b6:	199e      	adds	r6, r3, r6
 80019b8:	3a02      	subs	r2, #2
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	42a9      	cmp	r1, r5
 80019be:	d000      	beq.n	80019c2 <__aeabi_ddiv+0x57a>
 80019c0:	e754      	b.n	800186c <__aeabi_ddiv+0x424>
 80019c2:	4540      	cmp	r0, r8
 80019c4:	d000      	beq.n	80019c8 <__aeabi_ddiv+0x580>
 80019c6:	e751      	b.n	800186c <__aeabi_ddiv+0x424>
 80019c8:	e5ab      	b.n	8001522 <__aeabi_ddiv+0xda>
 80019ca:	001a      	movs	r2, r3
 80019cc:	e7f6      	b.n	80019bc <__aeabi_ddiv+0x574>
 80019ce:	211f      	movs	r1, #31
 80019d0:	465f      	mov	r7, fp
 80019d2:	4249      	negs	r1, r1
 80019d4:	1b0c      	subs	r4, r1, r4
 80019d6:	40e7      	lsrs	r7, r4
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d007      	beq.n	80019ec <__aeabi_ddiv+0x5a4>
 80019dc:	491a      	ldr	r1, [pc, #104]	; (8001a48 <__aeabi_ddiv+0x600>)
 80019de:	9b00      	ldr	r3, [sp, #0]
 80019e0:	468c      	mov	ip, r1
 80019e2:	4463      	add	r3, ip
 80019e4:	0018      	movs	r0, r3
 80019e6:	465b      	mov	r3, fp
 80019e8:	4083      	lsls	r3, r0
 80019ea:	431a      	orrs	r2, r3
 80019ec:	1e50      	subs	r0, r2, #1
 80019ee:	4182      	sbcs	r2, r0
 80019f0:	433a      	orrs	r2, r7
 80019f2:	2707      	movs	r7, #7
 80019f4:	2300      	movs	r3, #0
 80019f6:	4017      	ands	r7, r2
 80019f8:	d009      	beq.n	8001a0e <__aeabi_ddiv+0x5c6>
 80019fa:	210f      	movs	r1, #15
 80019fc:	2300      	movs	r3, #0
 80019fe:	4011      	ands	r1, r2
 8001a00:	0014      	movs	r4, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d195      	bne.n	8001932 <__aeabi_ddiv+0x4ea>
 8001a06:	0022      	movs	r2, r4
 8001a08:	075f      	lsls	r7, r3, #29
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	0b1b      	lsrs	r3, r3, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4317      	orrs	r7, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e5a6      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	4659      	mov	r1, fp
 8001a1a:	031b      	lsls	r3, r3, #12
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	0017      	movs	r7, r2
 8001a22:	0b1b      	lsrs	r3, r3, #12
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <__aeabi_ddiv+0x5f8>)
 8001a26:	e59d      	b.n	8001564 <__aeabi_ddiv+0x11c>
 8001a28:	42bd      	cmp	r5, r7
 8001a2a:	d8b2      	bhi.n	8001992 <__aeabi_ddiv+0x54a>
 8001a2c:	469b      	mov	fp, r3
 8001a2e:	2400      	movs	r4, #0
 8001a30:	e6bf      	b.n	80017b2 <__aeabi_ddiv+0x36a>
 8001a32:	4580      	cmp	r8, r0
 8001a34:	d3b9      	bcc.n	80019aa <__aeabi_ddiv+0x562>
 8001a36:	001a      	movs	r2, r3
 8001a38:	e7c3      	b.n	80019c2 <__aeabi_ddiv+0x57a>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	000007ff 	.word	0x000007ff
 8001a44:	0000041e 	.word	0x0000041e
 8001a48:	0000043e 	.word	0x0000043e

08001a4c <__eqdf2>:
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	464f      	mov	r7, r9
 8001a50:	4646      	mov	r6, r8
 8001a52:	46d6      	mov	lr, sl
 8001a54:	4684      	mov	ip, r0
 8001a56:	b5c0      	push	{r6, r7, lr}
 8001a58:	4680      	mov	r8, r0
 8001a5a:	4e19      	ldr	r6, [pc, #100]	; (8001ac0 <__eqdf2+0x74>)
 8001a5c:	0318      	lsls	r0, r3, #12
 8001a5e:	030f      	lsls	r7, r1, #12
 8001a60:	004d      	lsls	r5, r1, #1
 8001a62:	0b00      	lsrs	r0, r0, #12
 8001a64:	005c      	lsls	r4, r3, #1
 8001a66:	4682      	mov	sl, r0
 8001a68:	0b3f      	lsrs	r7, r7, #12
 8001a6a:	0d6d      	lsrs	r5, r5, #21
 8001a6c:	0fc9      	lsrs	r1, r1, #31
 8001a6e:	4691      	mov	r9, r2
 8001a70:	0d64      	lsrs	r4, r4, #21
 8001a72:	0fdb      	lsrs	r3, r3, #31
 8001a74:	2001      	movs	r0, #1
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d00a      	beq.n	8001a90 <__eqdf2+0x44>
 8001a7a:	42b4      	cmp	r4, r6
 8001a7c:	d003      	beq.n	8001a86 <__eqdf2+0x3a>
 8001a7e:	42a5      	cmp	r5, r4
 8001a80:	d101      	bne.n	8001a86 <__eqdf2+0x3a>
 8001a82:	4557      	cmp	r7, sl
 8001a84:	d00c      	beq.n	8001aa0 <__eqdf2+0x54>
 8001a86:	bc1c      	pop	{r2, r3, r4}
 8001a88:	4690      	mov	r8, r2
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	46a2      	mov	sl, r4
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a90:	4666      	mov	r6, ip
 8001a92:	433e      	orrs	r6, r7
 8001a94:	d1f7      	bne.n	8001a86 <__eqdf2+0x3a>
 8001a96:	42ac      	cmp	r4, r5
 8001a98:	d1f5      	bne.n	8001a86 <__eqdf2+0x3a>
 8001a9a:	4654      	mov	r4, sl
 8001a9c:	4314      	orrs	r4, r2
 8001a9e:	d1f2      	bne.n	8001a86 <__eqdf2+0x3a>
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	45c8      	cmp	r8, r9
 8001aa4:	d1ef      	bne.n	8001a86 <__eqdf2+0x3a>
 8001aa6:	4299      	cmp	r1, r3
 8001aa8:	d007      	beq.n	8001aba <__eqdf2+0x6e>
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	d1eb      	bne.n	8001a86 <__eqdf2+0x3a>
 8001aae:	4663      	mov	r3, ip
 8001ab0:	431f      	orrs	r7, r3
 8001ab2:	0038      	movs	r0, r7
 8001ab4:	1e47      	subs	r7, r0, #1
 8001ab6:	41b8      	sbcs	r0, r7
 8001ab8:	e7e5      	b.n	8001a86 <__eqdf2+0x3a>
 8001aba:	2000      	movs	r0, #0
 8001abc:	e7e3      	b.n	8001a86 <__eqdf2+0x3a>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff

08001ac4 <__gedf2>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	464f      	mov	r7, r9
 8001ac8:	4646      	mov	r6, r8
 8001aca:	46d6      	mov	lr, sl
 8001acc:	004d      	lsls	r5, r1, #1
 8001ace:	b5c0      	push	{r6, r7, lr}
 8001ad0:	030e      	lsls	r6, r1, #12
 8001ad2:	0fc9      	lsrs	r1, r1, #31
 8001ad4:	468a      	mov	sl, r1
 8001ad6:	492c      	ldr	r1, [pc, #176]	; (8001b88 <__gedf2+0xc4>)
 8001ad8:	031f      	lsls	r7, r3, #12
 8001ada:	005c      	lsls	r4, r3, #1
 8001adc:	4680      	mov	r8, r0
 8001ade:	0b36      	lsrs	r6, r6, #12
 8001ae0:	0d6d      	lsrs	r5, r5, #21
 8001ae2:	4691      	mov	r9, r2
 8001ae4:	0b3f      	lsrs	r7, r7, #12
 8001ae6:	0d64      	lsrs	r4, r4, #21
 8001ae8:	0fdb      	lsrs	r3, r3, #31
 8001aea:	428d      	cmp	r5, r1
 8001aec:	d01e      	beq.n	8001b2c <__gedf2+0x68>
 8001aee:	428c      	cmp	r4, r1
 8001af0:	d016      	beq.n	8001b20 <__gedf2+0x5c>
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d11e      	bne.n	8001b34 <__gedf2+0x70>
 8001af6:	4330      	orrs	r0, r6
 8001af8:	4684      	mov	ip, r0
 8001afa:	2c00      	cmp	r4, #0
 8001afc:	d101      	bne.n	8001b02 <__gedf2+0x3e>
 8001afe:	433a      	orrs	r2, r7
 8001b00:	d023      	beq.n	8001b4a <__gedf2+0x86>
 8001b02:	4662      	mov	r2, ip
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d01a      	beq.n	8001b3e <__gedf2+0x7a>
 8001b08:	459a      	cmp	sl, r3
 8001b0a:	d029      	beq.n	8001b60 <__gedf2+0x9c>
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	2002      	movs	r0, #2
 8001b10:	3901      	subs	r1, #1
 8001b12:	4008      	ands	r0, r1
 8001b14:	3801      	subs	r0, #1
 8001b16:	bc1c      	pop	{r2, r3, r4}
 8001b18:	4690      	mov	r8, r2
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b20:	0039      	movs	r1, r7
 8001b22:	4311      	orrs	r1, r2
 8001b24:	d0e5      	beq.n	8001af2 <__gedf2+0x2e>
 8001b26:	2002      	movs	r0, #2
 8001b28:	4240      	negs	r0, r0
 8001b2a:	e7f4      	b.n	8001b16 <__gedf2+0x52>
 8001b2c:	4330      	orrs	r0, r6
 8001b2e:	d1fa      	bne.n	8001b26 <__gedf2+0x62>
 8001b30:	42ac      	cmp	r4, r5
 8001b32:	d00f      	beq.n	8001b54 <__gedf2+0x90>
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d10f      	bne.n	8001b58 <__gedf2+0x94>
 8001b38:	433a      	orrs	r2, r7
 8001b3a:	d0e7      	beq.n	8001b0c <__gedf2+0x48>
 8001b3c:	e00c      	b.n	8001b58 <__gedf2+0x94>
 8001b3e:	2201      	movs	r2, #1
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4393      	bics	r3, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	3001      	adds	r0, #1
 8001b48:	e7e5      	b.n	8001b16 <__gedf2+0x52>
 8001b4a:	4663      	mov	r3, ip
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0e1      	beq.n	8001b16 <__gedf2+0x52>
 8001b52:	e7db      	b.n	8001b0c <__gedf2+0x48>
 8001b54:	433a      	orrs	r2, r7
 8001b56:	d1e6      	bne.n	8001b26 <__gedf2+0x62>
 8001b58:	459a      	cmp	sl, r3
 8001b5a:	d1d7      	bne.n	8001b0c <__gedf2+0x48>
 8001b5c:	42a5      	cmp	r5, r4
 8001b5e:	dcd5      	bgt.n	8001b0c <__gedf2+0x48>
 8001b60:	42a5      	cmp	r5, r4
 8001b62:	db05      	blt.n	8001b70 <__gedf2+0xac>
 8001b64:	42be      	cmp	r6, r7
 8001b66:	d8d1      	bhi.n	8001b0c <__gedf2+0x48>
 8001b68:	d008      	beq.n	8001b7c <__gedf2+0xb8>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	42be      	cmp	r6, r7
 8001b6e:	d2d2      	bcs.n	8001b16 <__gedf2+0x52>
 8001b70:	4650      	mov	r0, sl
 8001b72:	2301      	movs	r3, #1
 8001b74:	3801      	subs	r0, #1
 8001b76:	4398      	bics	r0, r3
 8001b78:	3001      	adds	r0, #1
 8001b7a:	e7cc      	b.n	8001b16 <__gedf2+0x52>
 8001b7c:	45c8      	cmp	r8, r9
 8001b7e:	d8c5      	bhi.n	8001b0c <__gedf2+0x48>
 8001b80:	2000      	movs	r0, #0
 8001b82:	45c8      	cmp	r8, r9
 8001b84:	d3f4      	bcc.n	8001b70 <__gedf2+0xac>
 8001b86:	e7c6      	b.n	8001b16 <__gedf2+0x52>
 8001b88:	000007ff 	.word	0x000007ff

08001b8c <__ledf2>:
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8e:	464f      	mov	r7, r9
 8001b90:	4646      	mov	r6, r8
 8001b92:	46d6      	mov	lr, sl
 8001b94:	004d      	lsls	r5, r1, #1
 8001b96:	b5c0      	push	{r6, r7, lr}
 8001b98:	030e      	lsls	r6, r1, #12
 8001b9a:	0fc9      	lsrs	r1, r1, #31
 8001b9c:	468a      	mov	sl, r1
 8001b9e:	492e      	ldr	r1, [pc, #184]	; (8001c58 <__ledf2+0xcc>)
 8001ba0:	031f      	lsls	r7, r3, #12
 8001ba2:	005c      	lsls	r4, r3, #1
 8001ba4:	4680      	mov	r8, r0
 8001ba6:	0b36      	lsrs	r6, r6, #12
 8001ba8:	0d6d      	lsrs	r5, r5, #21
 8001baa:	4691      	mov	r9, r2
 8001bac:	0b3f      	lsrs	r7, r7, #12
 8001bae:	0d64      	lsrs	r4, r4, #21
 8001bb0:	0fdb      	lsrs	r3, r3, #31
 8001bb2:	428d      	cmp	r5, r1
 8001bb4:	d018      	beq.n	8001be8 <__ledf2+0x5c>
 8001bb6:	428c      	cmp	r4, r1
 8001bb8:	d011      	beq.n	8001bde <__ledf2+0x52>
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	d118      	bne.n	8001bf0 <__ledf2+0x64>
 8001bbe:	4330      	orrs	r0, r6
 8001bc0:	4684      	mov	ip, r0
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	d11e      	bne.n	8001c04 <__ledf2+0x78>
 8001bc6:	433a      	orrs	r2, r7
 8001bc8:	d11c      	bne.n	8001c04 <__ledf2+0x78>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	2000      	movs	r0, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d030      	beq.n	8001c34 <__ledf2+0xa8>
 8001bd2:	4651      	mov	r1, sl
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	3901      	subs	r1, #1
 8001bd8:	4008      	ands	r0, r1
 8001bda:	3801      	subs	r0, #1
 8001bdc:	e02a      	b.n	8001c34 <__ledf2+0xa8>
 8001bde:	0039      	movs	r1, r7
 8001be0:	4311      	orrs	r1, r2
 8001be2:	d0ea      	beq.n	8001bba <__ledf2+0x2e>
 8001be4:	2002      	movs	r0, #2
 8001be6:	e025      	b.n	8001c34 <__ledf2+0xa8>
 8001be8:	4330      	orrs	r0, r6
 8001bea:	d1fb      	bne.n	8001be4 <__ledf2+0x58>
 8001bec:	42ac      	cmp	r4, r5
 8001bee:	d026      	beq.n	8001c3e <__ledf2+0xb2>
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d126      	bne.n	8001c42 <__ledf2+0xb6>
 8001bf4:	433a      	orrs	r2, r7
 8001bf6:	d124      	bne.n	8001c42 <__ledf2+0xb6>
 8001bf8:	4651      	mov	r1, sl
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	3901      	subs	r1, #1
 8001bfe:	4008      	ands	r0, r1
 8001c00:	3801      	subs	r0, #1
 8001c02:	e017      	b.n	8001c34 <__ledf2+0xa8>
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d00f      	beq.n	8001c2a <__ledf2+0x9e>
 8001c0a:	459a      	cmp	sl, r3
 8001c0c:	d1e1      	bne.n	8001bd2 <__ledf2+0x46>
 8001c0e:	42a5      	cmp	r5, r4
 8001c10:	db05      	blt.n	8001c1e <__ledf2+0x92>
 8001c12:	42be      	cmp	r6, r7
 8001c14:	d8dd      	bhi.n	8001bd2 <__ledf2+0x46>
 8001c16:	d019      	beq.n	8001c4c <__ledf2+0xc0>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	42be      	cmp	r6, r7
 8001c1c:	d20a      	bcs.n	8001c34 <__ledf2+0xa8>
 8001c1e:	4650      	mov	r0, sl
 8001c20:	2301      	movs	r3, #1
 8001c22:	3801      	subs	r0, #1
 8001c24:	4398      	bics	r0, r3
 8001c26:	3001      	adds	r0, #1
 8001c28:	e004      	b.n	8001c34 <__ledf2+0xa8>
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	3001      	adds	r0, #1
 8001c34:	bc1c      	pop	{r2, r3, r4}
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	46a2      	mov	sl, r4
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	433a      	orrs	r2, r7
 8001c40:	d1d0      	bne.n	8001be4 <__ledf2+0x58>
 8001c42:	459a      	cmp	sl, r3
 8001c44:	d1c5      	bne.n	8001bd2 <__ledf2+0x46>
 8001c46:	42a5      	cmp	r5, r4
 8001c48:	dcc3      	bgt.n	8001bd2 <__ledf2+0x46>
 8001c4a:	e7e0      	b.n	8001c0e <__ledf2+0x82>
 8001c4c:	45c8      	cmp	r8, r9
 8001c4e:	d8c0      	bhi.n	8001bd2 <__ledf2+0x46>
 8001c50:	2000      	movs	r0, #0
 8001c52:	45c8      	cmp	r8, r9
 8001c54:	d3e3      	bcc.n	8001c1e <__ledf2+0x92>
 8001c56:	e7ed      	b.n	8001c34 <__ledf2+0xa8>
 8001c58:	000007ff 	.word	0x000007ff

08001c5c <__aeabi_dmul>:
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	4657      	mov	r7, sl
 8001c60:	46de      	mov	lr, fp
 8001c62:	464e      	mov	r6, r9
 8001c64:	4645      	mov	r5, r8
 8001c66:	b5e0      	push	{r5, r6, r7, lr}
 8001c68:	4683      	mov	fp, r0
 8001c6a:	0006      	movs	r6, r0
 8001c6c:	030f      	lsls	r7, r1, #12
 8001c6e:	0048      	lsls	r0, r1, #1
 8001c70:	b087      	sub	sp, #28
 8001c72:	4692      	mov	sl, r2
 8001c74:	001d      	movs	r5, r3
 8001c76:	0b3f      	lsrs	r7, r7, #12
 8001c78:	0d40      	lsrs	r0, r0, #21
 8001c7a:	0fcc      	lsrs	r4, r1, #31
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dmul+0x26>
 8001c80:	e06f      	b.n	8001d62 <__aeabi_dmul+0x106>
 8001c82:	4bde      	ldr	r3, [pc, #888]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001c84:	4298      	cmp	r0, r3
 8001c86:	d038      	beq.n	8001cfa <__aeabi_dmul+0x9e>
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	00ff      	lsls	r7, r7, #3
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	431f      	orrs	r7, r3
 8001c90:	0f73      	lsrs	r3, r6, #29
 8001c92:	433b      	orrs	r3, r7
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	4bda      	ldr	r3, [pc, #872]	; (8002000 <__aeabi_dmul+0x3a4>)
 8001c98:	2700      	movs	r7, #0
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	469b      	mov	fp, r3
 8001ca0:	00f6      	lsls	r6, r6, #3
 8001ca2:	4481      	add	r9, r0
 8001ca4:	032b      	lsls	r3, r5, #12
 8001ca6:	0069      	lsls	r1, r5, #1
 8001ca8:	0b1b      	lsrs	r3, r3, #12
 8001caa:	4652      	mov	r2, sl
 8001cac:	4698      	mov	r8, r3
 8001cae:	0d49      	lsrs	r1, r1, #21
 8001cb0:	0fed      	lsrs	r5, r5, #31
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dmul+0x5c>
 8001cb6:	e085      	b.n	8001dc4 <__aeabi_dmul+0x168>
 8001cb8:	4bd0      	ldr	r3, [pc, #832]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001cba:	4299      	cmp	r1, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dmul+0x64>
 8001cbe:	e073      	b.n	8001da8 <__aeabi_dmul+0x14c>
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	00da      	lsls	r2, r3, #3
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	4652      	mov	r2, sl
 8001ccc:	48cc      	ldr	r0, [pc, #816]	; (8002000 <__aeabi_dmul+0x3a4>)
 8001cce:	0f52      	lsrs	r2, r2, #29
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	4461      	add	r1, ip
 8001cda:	00d2      	lsls	r2, r2, #3
 8001cdc:	4489      	add	r9, r1
 8001cde:	0021      	movs	r1, r4
 8001ce0:	4069      	eors	r1, r5
 8001ce2:	9100      	str	r1, [sp, #0]
 8001ce4:	468c      	mov	ip, r1
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4449      	add	r1, r9
 8001cea:	468a      	mov	sl, r1
 8001cec:	2f0f      	cmp	r7, #15
 8001cee:	d900      	bls.n	8001cf2 <__aeabi_dmul+0x96>
 8001cf0:	e090      	b.n	8001e14 <__aeabi_dmul+0x1b8>
 8001cf2:	49c4      	ldr	r1, [pc, #784]	; (8002004 <__aeabi_dmul+0x3a8>)
 8001cf4:	00bf      	lsls	r7, r7, #2
 8001cf6:	59cf      	ldr	r7, [r1, r7]
 8001cf8:	46bf      	mov	pc, r7
 8001cfa:	465b      	mov	r3, fp
 8001cfc:	433b      	orrs	r3, r7
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dmul+0xa8>
 8001d02:	e16a      	b.n	8001fda <__aeabi_dmul+0x37e>
 8001d04:	2302      	movs	r3, #2
 8001d06:	2708      	movs	r7, #8
 8001d08:	2600      	movs	r6, #0
 8001d0a:	4681      	mov	r9, r0
 8001d0c:	469b      	mov	fp, r3
 8001d0e:	e7c9      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001d10:	0032      	movs	r2, r6
 8001d12:	4658      	mov	r0, fp
 8001d14:	9b01      	ldr	r3, [sp, #4]
 8001d16:	4661      	mov	r1, ip
 8001d18:	9100      	str	r1, [sp, #0]
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dmul+0xc4>
 8001d1e:	e075      	b.n	8001e0c <__aeabi_dmul+0x1b0>
 8001d20:	2803      	cmp	r0, #3
 8001d22:	d100      	bne.n	8001d26 <__aeabi_dmul+0xca>
 8001d24:	e1fe      	b.n	8002124 <__aeabi_dmul+0x4c8>
 8001d26:	2801      	cmp	r0, #1
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dmul+0xd0>
 8001d2a:	e12c      	b.n	8001f86 <__aeabi_dmul+0x32a>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2700      	movs	r7, #0
 8001d30:	2600      	movs	r6, #0
 8001d32:	2500      	movs	r5, #0
 8001d34:	033f      	lsls	r7, r7, #12
 8001d36:	0d2a      	lsrs	r2, r5, #20
 8001d38:	0b3f      	lsrs	r7, r7, #12
 8001d3a:	48b3      	ldr	r0, [pc, #716]	; (8002008 <__aeabi_dmul+0x3ac>)
 8001d3c:	0512      	lsls	r2, r2, #20
 8001d3e:	433a      	orrs	r2, r7
 8001d40:	4002      	ands	r2, r0
 8001d42:	051b      	lsls	r3, r3, #20
 8001d44:	4313      	orrs	r3, r2
 8001d46:	9a00      	ldr	r2, [sp, #0]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	07d1      	lsls	r1, r2, #31
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	0030      	movs	r0, r6
 8001d52:	0019      	movs	r1, r3
 8001d54:	b007      	add	sp, #28
 8001d56:	bc3c      	pop	{r2, r3, r4, r5}
 8001d58:	4690      	mov	r8, r2
 8001d5a:	4699      	mov	r9, r3
 8001d5c:	46a2      	mov	sl, r4
 8001d5e:	46ab      	mov	fp, r5
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	465b      	mov	r3, fp
 8001d64:	433b      	orrs	r3, r7
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dmul+0x110>
 8001d6a:	e12f      	b.n	8001fcc <__aeabi_dmul+0x370>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dmul+0x116>
 8001d70:	e1a5      	b.n	80020be <__aeabi_dmul+0x462>
 8001d72:	0038      	movs	r0, r7
 8001d74:	f000 fea4 	bl	8002ac0 <__clzsi2>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	3b0b      	subs	r3, #11
 8001d7c:	2b1c      	cmp	r3, #28
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dmul+0x126>
 8001d80:	e196      	b.n	80020b0 <__aeabi_dmul+0x454>
 8001d82:	221d      	movs	r2, #29
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	465a      	mov	r2, fp
 8001d88:	0001      	movs	r1, r0
 8001d8a:	40da      	lsrs	r2, r3
 8001d8c:	465e      	mov	r6, fp
 8001d8e:	3908      	subs	r1, #8
 8001d90:	408f      	lsls	r7, r1
 8001d92:	0013      	movs	r3, r2
 8001d94:	408e      	lsls	r6, r1
 8001d96:	433b      	orrs	r3, r7
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	4b9c      	ldr	r3, [pc, #624]	; (800200c <__aeabi_dmul+0x3b0>)
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	1a1b      	subs	r3, r3, r0
 8001da0:	4699      	mov	r9, r3
 8001da2:	2300      	movs	r3, #0
 8001da4:	469b      	mov	fp, r3
 8001da6:	e77d      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001da8:	4641      	mov	r1, r8
 8001daa:	4653      	mov	r3, sl
 8001dac:	430b      	orrs	r3, r1
 8001dae:	4993      	ldr	r1, [pc, #588]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001db0:	468c      	mov	ip, r1
 8001db2:	44e1      	add	r9, ip
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d000      	beq.n	8001dba <__aeabi_dmul+0x15e>
 8001db8:	e11a      	b.n	8001ff0 <__aeabi_dmul+0x394>
 8001dba:	2202      	movs	r2, #2
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	4317      	orrs	r7, r2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	e78c      	b.n	8001cde <__aeabi_dmul+0x82>
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dmul+0x16e>
 8001dc8:	e10d      	b.n	8001fe6 <__aeabi_dmul+0x38a>
 8001dca:	4643      	mov	r3, r8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dmul+0x176>
 8001dd0:	e181      	b.n	80020d6 <__aeabi_dmul+0x47a>
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	f000 fe74 	bl	8002ac0 <__clzsi2>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	3a0b      	subs	r2, #11
 8001ddc:	2a1c      	cmp	r2, #28
 8001dde:	dd00      	ble.n	8001de2 <__aeabi_dmul+0x186>
 8001de0:	e172      	b.n	80020c8 <__aeabi_dmul+0x46c>
 8001de2:	0001      	movs	r1, r0
 8001de4:	4643      	mov	r3, r8
 8001de6:	3908      	subs	r1, #8
 8001de8:	408b      	lsls	r3, r1
 8001dea:	4698      	mov	r8, r3
 8001dec:	231d      	movs	r3, #29
 8001dee:	1a9a      	subs	r2, r3, r2
 8001df0:	4653      	mov	r3, sl
 8001df2:	40d3      	lsrs	r3, r2
 8001df4:	001a      	movs	r2, r3
 8001df6:	4643      	mov	r3, r8
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	4652      	mov	r2, sl
 8001dfc:	408a      	lsls	r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	1a08      	subs	r0, r1, r0
 8001e02:	4982      	ldr	r1, [pc, #520]	; (800200c <__aeabi_dmul+0x3b0>)
 8001e04:	4689      	mov	r9, r1
 8001e06:	4481      	add	r9, r0
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e768      	b.n	8001cde <__aeabi_dmul+0x82>
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <__aeabi_dmul+0x3a0>)
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e78e      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8001e14:	0c14      	lsrs	r4, r2, #16
 8001e16:	0412      	lsls	r2, r2, #16
 8001e18:	0c12      	lsrs	r2, r2, #16
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0c37      	lsrs	r7, r6, #16
 8001e1e:	0436      	lsls	r6, r6, #16
 8001e20:	0c35      	lsrs	r5, r6, #16
 8001e22:	4379      	muls	r1, r7
 8001e24:	0028      	movs	r0, r5
 8001e26:	468c      	mov	ip, r1
 8001e28:	002e      	movs	r6, r5
 8001e2a:	4360      	muls	r0, r4
 8001e2c:	4460      	add	r0, ip
 8001e2e:	4683      	mov	fp, r0
 8001e30:	4356      	muls	r6, r2
 8001e32:	0021      	movs	r1, r4
 8001e34:	0c30      	lsrs	r0, r6, #16
 8001e36:	4680      	mov	r8, r0
 8001e38:	4658      	mov	r0, fp
 8001e3a:	4379      	muls	r1, r7
 8001e3c:	4440      	add	r0, r8
 8001e3e:	9102      	str	r1, [sp, #8]
 8001e40:	4584      	cmp	ip, r0
 8001e42:	d906      	bls.n	8001e52 <__aeabi_dmul+0x1f6>
 8001e44:	4688      	mov	r8, r1
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0249      	lsls	r1, r1, #9
 8001e4a:	468c      	mov	ip, r1
 8001e4c:	44e0      	add	r8, ip
 8001e4e:	4641      	mov	r1, r8
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	0436      	lsls	r6, r6, #16
 8001e54:	0c01      	lsrs	r1, r0, #16
 8001e56:	0c36      	lsrs	r6, r6, #16
 8001e58:	0400      	lsls	r0, r0, #16
 8001e5a:	468b      	mov	fp, r1
 8001e5c:	1981      	adds	r1, r0, r6
 8001e5e:	0c1e      	lsrs	r6, r3, #16
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	9103      	str	r1, [sp, #12]
 8001e66:	0019      	movs	r1, r3
 8001e68:	4379      	muls	r1, r7
 8001e6a:	468c      	mov	ip, r1
 8001e6c:	0028      	movs	r0, r5
 8001e6e:	4375      	muls	r5, r6
 8001e70:	4465      	add	r5, ip
 8001e72:	46a8      	mov	r8, r5
 8001e74:	4358      	muls	r0, r3
 8001e76:	0c05      	lsrs	r5, r0, #16
 8001e78:	4445      	add	r5, r8
 8001e7a:	4377      	muls	r7, r6
 8001e7c:	42a9      	cmp	r1, r5
 8001e7e:	d903      	bls.n	8001e88 <__aeabi_dmul+0x22c>
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0249      	lsls	r1, r1, #9
 8001e84:	468c      	mov	ip, r1
 8001e86:	4467      	add	r7, ip
 8001e88:	0c29      	lsrs	r1, r5, #16
 8001e8a:	468c      	mov	ip, r1
 8001e8c:	0039      	movs	r1, r7
 8001e8e:	0400      	lsls	r0, r0, #16
 8001e90:	0c00      	lsrs	r0, r0, #16
 8001e92:	042d      	lsls	r5, r5, #16
 8001e94:	182d      	adds	r5, r5, r0
 8001e96:	4461      	add	r1, ip
 8001e98:	44ab      	add	fp, r5
 8001e9a:	9105      	str	r1, [sp, #20]
 8001e9c:	4659      	mov	r1, fp
 8001e9e:	9104      	str	r1, [sp, #16]
 8001ea0:	9901      	ldr	r1, [sp, #4]
 8001ea2:	040f      	lsls	r7, r1, #16
 8001ea4:	0c3f      	lsrs	r7, r7, #16
 8001ea6:	0c08      	lsrs	r0, r1, #16
 8001ea8:	0039      	movs	r1, r7
 8001eaa:	4351      	muls	r1, r2
 8001eac:	4342      	muls	r2, r0
 8001eae:	4690      	mov	r8, r2
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	468c      	mov	ip, r1
 8001eb4:	0c09      	lsrs	r1, r1, #16
 8001eb6:	468b      	mov	fp, r1
 8001eb8:	4362      	muls	r2, r4
 8001eba:	437c      	muls	r4, r7
 8001ebc:	4444      	add	r4, r8
 8001ebe:	445c      	add	r4, fp
 8001ec0:	45a0      	cmp	r8, r4
 8001ec2:	d903      	bls.n	8001ecc <__aeabi_dmul+0x270>
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	4688      	mov	r8, r1
 8001eca:	4442      	add	r2, r8
 8001ecc:	0c21      	lsrs	r1, r4, #16
 8001ece:	4688      	mov	r8, r1
 8001ed0:	4661      	mov	r1, ip
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c09      	lsrs	r1, r1, #16
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	0039      	movs	r1, r7
 8001eda:	4359      	muls	r1, r3
 8001edc:	4343      	muls	r3, r0
 8001ede:	4370      	muls	r0, r6
 8001ee0:	437e      	muls	r6, r7
 8001ee2:	0c0f      	lsrs	r7, r1, #16
 8001ee4:	18f6      	adds	r6, r6, r3
 8001ee6:	0424      	lsls	r4, r4, #16
 8001ee8:	19be      	adds	r6, r7, r6
 8001eea:	4464      	add	r4, ip
 8001eec:	4442      	add	r2, r8
 8001eee:	468c      	mov	ip, r1
 8001ef0:	42b3      	cmp	r3, r6
 8001ef2:	d903      	bls.n	8001efc <__aeabi_dmul+0x2a0>
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	4698      	mov	r8, r3
 8001efa:	4440      	add	r0, r8
 8001efc:	9b02      	ldr	r3, [sp, #8]
 8001efe:	4661      	mov	r1, ip
 8001f00:	4698      	mov	r8, r3
 8001f02:	9b04      	ldr	r3, [sp, #16]
 8001f04:	0437      	lsls	r7, r6, #16
 8001f06:	4443      	add	r3, r8
 8001f08:	469b      	mov	fp, r3
 8001f0a:	45ab      	cmp	fp, r5
 8001f0c:	41ad      	sbcs	r5, r5
 8001f0e:	426b      	negs	r3, r5
 8001f10:	040d      	lsls	r5, r1, #16
 8001f12:	9905      	ldr	r1, [sp, #20]
 8001f14:	0c2d      	lsrs	r5, r5, #16
 8001f16:	468c      	mov	ip, r1
 8001f18:	197f      	adds	r7, r7, r5
 8001f1a:	4467      	add	r7, ip
 8001f1c:	18fd      	adds	r5, r7, r3
 8001f1e:	46a8      	mov	r8, r5
 8001f20:	465d      	mov	r5, fp
 8001f22:	192d      	adds	r5, r5, r4
 8001f24:	42a5      	cmp	r5, r4
 8001f26:	41a4      	sbcs	r4, r4
 8001f28:	4693      	mov	fp, r2
 8001f2a:	4264      	negs	r4, r4
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	44c3      	add	fp, r8
 8001f30:	44dc      	add	ip, fp
 8001f32:	428f      	cmp	r7, r1
 8001f34:	41bf      	sbcs	r7, r7
 8001f36:	4598      	cmp	r8, r3
 8001f38:	419b      	sbcs	r3, r3
 8001f3a:	4593      	cmp	fp, r2
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	45a4      	cmp	ip, r4
 8001f40:	41a4      	sbcs	r4, r4
 8001f42:	425b      	negs	r3, r3
 8001f44:	427f      	negs	r7, r7
 8001f46:	431f      	orrs	r7, r3
 8001f48:	0c36      	lsrs	r6, r6, #16
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	4264      	negs	r4, r4
 8001f4e:	19bf      	adds	r7, r7, r6
 8001f50:	4322      	orrs	r2, r4
 8001f52:	18bf      	adds	r7, r7, r2
 8001f54:	4662      	mov	r2, ip
 8001f56:	1838      	adds	r0, r7, r0
 8001f58:	0243      	lsls	r3, r0, #9
 8001f5a:	0dd2      	lsrs	r2, r2, #23
 8001f5c:	9903      	ldr	r1, [sp, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	026a      	lsls	r2, r5, #9
 8001f62:	430a      	orrs	r2, r1
 8001f64:	1e50      	subs	r0, r2, #1
 8001f66:	4182      	sbcs	r2, r0
 8001f68:	4661      	mov	r1, ip
 8001f6a:	0ded      	lsrs	r5, r5, #23
 8001f6c:	432a      	orrs	r2, r5
 8001f6e:	024e      	lsls	r6, r1, #9
 8001f70:	4332      	orrs	r2, r6
 8001f72:	01d9      	lsls	r1, r3, #7
 8001f74:	d400      	bmi.n	8001f78 <__aeabi_dmul+0x31c>
 8001f76:	e0b3      	b.n	80020e0 <__aeabi_dmul+0x484>
 8001f78:	2601      	movs	r6, #1
 8001f7a:	0850      	lsrs	r0, r2, #1
 8001f7c:	4032      	ands	r2, r6
 8001f7e:	4302      	orrs	r2, r0
 8001f80:	07de      	lsls	r6, r3, #31
 8001f82:	4332      	orrs	r2, r6
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	4c22      	ldr	r4, [pc, #136]	; (8002010 <__aeabi_dmul+0x3b4>)
 8001f88:	4454      	add	r4, sl
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	dd62      	ble.n	8002054 <__aeabi_dmul+0x3f8>
 8001f8e:	0751      	lsls	r1, r2, #29
 8001f90:	d009      	beq.n	8001fa6 <__aeabi_dmul+0x34a>
 8001f92:	200f      	movs	r0, #15
 8001f94:	4010      	ands	r0, r2
 8001f96:	2804      	cmp	r0, #4
 8001f98:	d005      	beq.n	8001fa6 <__aeabi_dmul+0x34a>
 8001f9a:	1d10      	adds	r0, r2, #4
 8001f9c:	4290      	cmp	r0, r2
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	4252      	negs	r2, r2
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	01d9      	lsls	r1, r3, #7
 8001fa8:	d504      	bpl.n	8001fb4 <__aeabi_dmul+0x358>
 8001faa:	2480      	movs	r4, #128	; 0x80
 8001fac:	4819      	ldr	r0, [pc, #100]	; (8002014 <__aeabi_dmul+0x3b8>)
 8001fae:	00e4      	lsls	r4, r4, #3
 8001fb0:	4003      	ands	r3, r0
 8001fb2:	4454      	add	r4, sl
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <__aeabi_dmul+0x3bc>)
 8001fb6:	4284      	cmp	r4, r0
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dmul+0x360>
 8001fba:	e727      	b.n	8001e0c <__aeabi_dmul+0x1b0>
 8001fbc:	075e      	lsls	r6, r3, #29
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	08d2      	lsrs	r2, r2, #3
 8001fc2:	0b1f      	lsrs	r7, r3, #12
 8001fc4:	0563      	lsls	r3, r4, #21
 8001fc6:	4316      	orrs	r6, r2
 8001fc8:	0d5b      	lsrs	r3, r3, #21
 8001fca:	e6b2      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4699      	mov	r9, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	2704      	movs	r7, #4
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	469b      	mov	fp, r3
 8001fd8:	e664      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	9701      	str	r7, [sp, #4]
 8001fde:	4681      	mov	r9, r0
 8001fe0:	270c      	movs	r7, #12
 8001fe2:	469b      	mov	fp, r3
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_dmul+0x48>
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	4317      	orrs	r7, r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	e676      	b.n	8001cde <__aeabi_dmul+0x82>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	431f      	orrs	r7, r3
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	e671      	b.n	8001cde <__aeabi_dmul+0x82>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff
 8002000:	fffffc01 	.word	0xfffffc01
 8002004:	080158e4 	.word	0x080158e4
 8002008:	800fffff 	.word	0x800fffff
 800200c:	fffffc0d 	.word	0xfffffc0d
 8002010:	000003ff 	.word	0x000003ff
 8002014:	feffffff 	.word	0xfeffffff
 8002018:	000007fe 	.word	0x000007fe
 800201c:	2300      	movs	r3, #0
 800201e:	2780      	movs	r7, #128	; 0x80
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	033f      	lsls	r7, r7, #12
 8002024:	2600      	movs	r6, #0
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <__aeabi_dmul+0x4d8>)
 8002028:	e683      	b.n	8001d32 <__aeabi_dmul+0xd6>
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	0032      	movs	r2, r6
 800202e:	46a4      	mov	ip, r4
 8002030:	4658      	mov	r0, fp
 8002032:	e670      	b.n	8001d16 <__aeabi_dmul+0xba>
 8002034:	46ac      	mov	ip, r5
 8002036:	e66e      	b.n	8001d16 <__aeabi_dmul+0xba>
 8002038:	2780      	movs	r7, #128	; 0x80
 800203a:	9901      	ldr	r1, [sp, #4]
 800203c:	033f      	lsls	r7, r7, #12
 800203e:	4239      	tst	r1, r7
 8002040:	d02d      	beq.n	800209e <__aeabi_dmul+0x442>
 8002042:	423b      	tst	r3, r7
 8002044:	d12b      	bne.n	800209e <__aeabi_dmul+0x442>
 8002046:	431f      	orrs	r7, r3
 8002048:	033f      	lsls	r7, r7, #12
 800204a:	0b3f      	lsrs	r7, r7, #12
 800204c:	9500      	str	r5, [sp, #0]
 800204e:	0016      	movs	r6, r2
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <__aeabi_dmul+0x4d8>)
 8002052:	e66e      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8002054:	2501      	movs	r5, #1
 8002056:	1b2d      	subs	r5, r5, r4
 8002058:	2d38      	cmp	r5, #56	; 0x38
 800205a:	dd00      	ble.n	800205e <__aeabi_dmul+0x402>
 800205c:	e666      	b.n	8001d2c <__aeabi_dmul+0xd0>
 800205e:	2d1f      	cmp	r5, #31
 8002060:	dc40      	bgt.n	80020e4 <__aeabi_dmul+0x488>
 8002062:	4835      	ldr	r0, [pc, #212]	; (8002138 <__aeabi_dmul+0x4dc>)
 8002064:	001c      	movs	r4, r3
 8002066:	4450      	add	r0, sl
 8002068:	0016      	movs	r6, r2
 800206a:	4082      	lsls	r2, r0
 800206c:	4084      	lsls	r4, r0
 800206e:	40ee      	lsrs	r6, r5
 8002070:	1e50      	subs	r0, r2, #1
 8002072:	4182      	sbcs	r2, r0
 8002074:	4334      	orrs	r4, r6
 8002076:	4314      	orrs	r4, r2
 8002078:	40eb      	lsrs	r3, r5
 800207a:	0762      	lsls	r2, r4, #29
 800207c:	d009      	beq.n	8002092 <__aeabi_dmul+0x436>
 800207e:	220f      	movs	r2, #15
 8002080:	4022      	ands	r2, r4
 8002082:	2a04      	cmp	r2, #4
 8002084:	d005      	beq.n	8002092 <__aeabi_dmul+0x436>
 8002086:	0022      	movs	r2, r4
 8002088:	1d14      	adds	r4, r2, #4
 800208a:	4294      	cmp	r4, r2
 800208c:	4180      	sbcs	r0, r0
 800208e:	4240      	negs	r0, r0
 8002090:	181b      	adds	r3, r3, r0
 8002092:	021a      	lsls	r2, r3, #8
 8002094:	d53e      	bpl.n	8002114 <__aeabi_dmul+0x4b8>
 8002096:	2301      	movs	r3, #1
 8002098:	2700      	movs	r7, #0
 800209a:	2600      	movs	r6, #0
 800209c:	e649      	b.n	8001d32 <__aeabi_dmul+0xd6>
 800209e:	2780      	movs	r7, #128	; 0x80
 80020a0:	9b01      	ldr	r3, [sp, #4]
 80020a2:	033f      	lsls	r7, r7, #12
 80020a4:	431f      	orrs	r7, r3
 80020a6:	033f      	lsls	r7, r7, #12
 80020a8:	0b3f      	lsrs	r7, r7, #12
 80020aa:	9400      	str	r4, [sp, #0]
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <__aeabi_dmul+0x4d8>)
 80020ae:	e640      	b.n	8001d32 <__aeabi_dmul+0xd6>
 80020b0:	0003      	movs	r3, r0
 80020b2:	465a      	mov	r2, fp
 80020b4:	3b28      	subs	r3, #40	; 0x28
 80020b6:	409a      	lsls	r2, r3
 80020b8:	2600      	movs	r6, #0
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	e66d      	b.n	8001d9a <__aeabi_dmul+0x13e>
 80020be:	4658      	mov	r0, fp
 80020c0:	f000 fcfe 	bl	8002ac0 <__clzsi2>
 80020c4:	3020      	adds	r0, #32
 80020c6:	e657      	b.n	8001d78 <__aeabi_dmul+0x11c>
 80020c8:	0003      	movs	r3, r0
 80020ca:	4652      	mov	r2, sl
 80020cc:	3b28      	subs	r3, #40	; 0x28
 80020ce:	409a      	lsls	r2, r3
 80020d0:	0013      	movs	r3, r2
 80020d2:	2200      	movs	r2, #0
 80020d4:	e693      	b.n	8001dfe <__aeabi_dmul+0x1a2>
 80020d6:	4650      	mov	r0, sl
 80020d8:	f000 fcf2 	bl	8002ac0 <__clzsi2>
 80020dc:	3020      	adds	r0, #32
 80020de:	e67b      	b.n	8001dd8 <__aeabi_dmul+0x17c>
 80020e0:	46ca      	mov	sl, r9
 80020e2:	e750      	b.n	8001f86 <__aeabi_dmul+0x32a>
 80020e4:	201f      	movs	r0, #31
 80020e6:	001e      	movs	r6, r3
 80020e8:	4240      	negs	r0, r0
 80020ea:	1b04      	subs	r4, r0, r4
 80020ec:	40e6      	lsrs	r6, r4
 80020ee:	2d20      	cmp	r5, #32
 80020f0:	d003      	beq.n	80020fa <__aeabi_dmul+0x49e>
 80020f2:	4c12      	ldr	r4, [pc, #72]	; (800213c <__aeabi_dmul+0x4e0>)
 80020f4:	4454      	add	r4, sl
 80020f6:	40a3      	lsls	r3, r4
 80020f8:	431a      	orrs	r2, r3
 80020fa:	1e50      	subs	r0, r2, #1
 80020fc:	4182      	sbcs	r2, r0
 80020fe:	4332      	orrs	r2, r6
 8002100:	2607      	movs	r6, #7
 8002102:	2700      	movs	r7, #0
 8002104:	4016      	ands	r6, r2
 8002106:	d009      	beq.n	800211c <__aeabi_dmul+0x4c0>
 8002108:	200f      	movs	r0, #15
 800210a:	2300      	movs	r3, #0
 800210c:	4010      	ands	r0, r2
 800210e:	0014      	movs	r4, r2
 8002110:	2804      	cmp	r0, #4
 8002112:	d1b9      	bne.n	8002088 <__aeabi_dmul+0x42c>
 8002114:	0022      	movs	r2, r4
 8002116:	075e      	lsls	r6, r3, #29
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	0b1f      	lsrs	r7, r3, #12
 800211c:	08d2      	lsrs	r2, r2, #3
 800211e:	4316      	orrs	r6, r2
 8002120:	2300      	movs	r3, #0
 8002122:	e606      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8002124:	2780      	movs	r7, #128	; 0x80
 8002126:	033f      	lsls	r7, r7, #12
 8002128:	431f      	orrs	r7, r3
 800212a:	033f      	lsls	r7, r7, #12
 800212c:	0b3f      	lsrs	r7, r7, #12
 800212e:	0016      	movs	r6, r2
 8002130:	4b00      	ldr	r3, [pc, #0]	; (8002134 <__aeabi_dmul+0x4d8>)
 8002132:	e5fe      	b.n	8001d32 <__aeabi_dmul+0xd6>
 8002134:	000007ff 	.word	0x000007ff
 8002138:	0000041e 	.word	0x0000041e
 800213c:	0000043e 	.word	0x0000043e

08002140 <__aeabi_dsub>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	4657      	mov	r7, sl
 8002144:	464e      	mov	r6, r9
 8002146:	4645      	mov	r5, r8
 8002148:	46de      	mov	lr, fp
 800214a:	000c      	movs	r4, r1
 800214c:	0309      	lsls	r1, r1, #12
 800214e:	b5e0      	push	{r5, r6, r7, lr}
 8002150:	0a49      	lsrs	r1, r1, #9
 8002152:	0f46      	lsrs	r6, r0, #29
 8002154:	005f      	lsls	r7, r3, #1
 8002156:	4331      	orrs	r1, r6
 8002158:	031e      	lsls	r6, r3, #12
 800215a:	0fdb      	lsrs	r3, r3, #31
 800215c:	0a76      	lsrs	r6, r6, #9
 800215e:	469b      	mov	fp, r3
 8002160:	0f53      	lsrs	r3, r2, #29
 8002162:	4333      	orrs	r3, r6
 8002164:	4ec8      	ldr	r6, [pc, #800]	; (8002488 <__aeabi_dsub+0x348>)
 8002166:	0065      	lsls	r5, r4, #1
 8002168:	00c0      	lsls	r0, r0, #3
 800216a:	0fe4      	lsrs	r4, r4, #31
 800216c:	00d2      	lsls	r2, r2, #3
 800216e:	0d6d      	lsrs	r5, r5, #21
 8002170:	46a2      	mov	sl, r4
 8002172:	4681      	mov	r9, r0
 8002174:	0d7f      	lsrs	r7, r7, #21
 8002176:	469c      	mov	ip, r3
 8002178:	4690      	mov	r8, r2
 800217a:	42b7      	cmp	r7, r6
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x40>
 800217e:	e0b9      	b.n	80022f4 <__aeabi_dsub+0x1b4>
 8002180:	465b      	mov	r3, fp
 8002182:	2601      	movs	r6, #1
 8002184:	4073      	eors	r3, r6
 8002186:	469b      	mov	fp, r3
 8002188:	1bee      	subs	r6, r5, r7
 800218a:	45a3      	cmp	fp, r4
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x50>
 800218e:	e083      	b.n	8002298 <__aeabi_dsub+0x158>
 8002190:	2e00      	cmp	r6, #0
 8002192:	dd63      	ble.n	800225c <__aeabi_dsub+0x11c>
 8002194:	2f00      	cmp	r7, #0
 8002196:	d000      	beq.n	800219a <__aeabi_dsub+0x5a>
 8002198:	e0b1      	b.n	80022fe <__aeabi_dsub+0x1be>
 800219a:	4663      	mov	r3, ip
 800219c:	4313      	orrs	r3, r2
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x62>
 80021a0:	e123      	b.n	80023ea <__aeabi_dsub+0x2aa>
 80021a2:	1e73      	subs	r3, r6, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d000      	beq.n	80021aa <__aeabi_dsub+0x6a>
 80021a8:	e1ba      	b.n	8002520 <__aeabi_dsub+0x3e0>
 80021aa:	1a86      	subs	r6, r0, r2
 80021ac:	4663      	mov	r3, ip
 80021ae:	42b0      	cmp	r0, r6
 80021b0:	4180      	sbcs	r0, r0
 80021b2:	2501      	movs	r5, #1
 80021b4:	1ac9      	subs	r1, r1, r3
 80021b6:	4240      	negs	r0, r0
 80021b8:	1a09      	subs	r1, r1, r0
 80021ba:	020b      	lsls	r3, r1, #8
 80021bc:	d400      	bmi.n	80021c0 <__aeabi_dsub+0x80>
 80021be:	e147      	b.n	8002450 <__aeabi_dsub+0x310>
 80021c0:	0249      	lsls	r1, r1, #9
 80021c2:	0a4b      	lsrs	r3, r1, #9
 80021c4:	4698      	mov	r8, r3
 80021c6:	4643      	mov	r3, r8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x8e>
 80021cc:	e189      	b.n	80024e2 <__aeabi_dsub+0x3a2>
 80021ce:	4640      	mov	r0, r8
 80021d0:	f000 fc76 	bl	8002ac0 <__clzsi2>
 80021d4:	0003      	movs	r3, r0
 80021d6:	3b08      	subs	r3, #8
 80021d8:	2b1f      	cmp	r3, #31
 80021da:	dd00      	ble.n	80021de <__aeabi_dsub+0x9e>
 80021dc:	e17c      	b.n	80024d8 <__aeabi_dsub+0x398>
 80021de:	2220      	movs	r2, #32
 80021e0:	0030      	movs	r0, r6
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	4641      	mov	r1, r8
 80021e6:	40d0      	lsrs	r0, r2
 80021e8:	4099      	lsls	r1, r3
 80021ea:	0002      	movs	r2, r0
 80021ec:	409e      	lsls	r6, r3
 80021ee:	430a      	orrs	r2, r1
 80021f0:	429d      	cmp	r5, r3
 80021f2:	dd00      	ble.n	80021f6 <__aeabi_dsub+0xb6>
 80021f4:	e16a      	b.n	80024cc <__aeabi_dsub+0x38c>
 80021f6:	1b5d      	subs	r5, r3, r5
 80021f8:	1c6b      	adds	r3, r5, #1
 80021fa:	2b1f      	cmp	r3, #31
 80021fc:	dd00      	ble.n	8002200 <__aeabi_dsub+0xc0>
 80021fe:	e194      	b.n	800252a <__aeabi_dsub+0x3ea>
 8002200:	2120      	movs	r1, #32
 8002202:	0010      	movs	r0, r2
 8002204:	0035      	movs	r5, r6
 8002206:	1ac9      	subs	r1, r1, r3
 8002208:	408e      	lsls	r6, r1
 800220a:	40da      	lsrs	r2, r3
 800220c:	4088      	lsls	r0, r1
 800220e:	40dd      	lsrs	r5, r3
 8002210:	1e71      	subs	r1, r6, #1
 8002212:	418e      	sbcs	r6, r1
 8002214:	0011      	movs	r1, r2
 8002216:	2207      	movs	r2, #7
 8002218:	4328      	orrs	r0, r5
 800221a:	2500      	movs	r5, #0
 800221c:	4306      	orrs	r6, r0
 800221e:	4032      	ands	r2, r6
 8002220:	2a00      	cmp	r2, #0
 8002222:	d009      	beq.n	8002238 <__aeabi_dsub+0xf8>
 8002224:	230f      	movs	r3, #15
 8002226:	4033      	ands	r3, r6
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <__aeabi_dsub+0xf8>
 800222c:	1d33      	adds	r3, r6, #4
 800222e:	42b3      	cmp	r3, r6
 8002230:	41b6      	sbcs	r6, r6
 8002232:	4276      	negs	r6, r6
 8002234:	1989      	adds	r1, r1, r6
 8002236:	001e      	movs	r6, r3
 8002238:	020b      	lsls	r3, r1, #8
 800223a:	d400      	bmi.n	800223e <__aeabi_dsub+0xfe>
 800223c:	e23d      	b.n	80026ba <__aeabi_dsub+0x57a>
 800223e:	1c6a      	adds	r2, r5, #1
 8002240:	4b91      	ldr	r3, [pc, #580]	; (8002488 <__aeabi_dsub+0x348>)
 8002242:	0555      	lsls	r5, r2, #21
 8002244:	0d6d      	lsrs	r5, r5, #21
 8002246:	429a      	cmp	r2, r3
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x10c>
 800224a:	e119      	b.n	8002480 <__aeabi_dsub+0x340>
 800224c:	4a8f      	ldr	r2, [pc, #572]	; (800248c <__aeabi_dsub+0x34c>)
 800224e:	08f6      	lsrs	r6, r6, #3
 8002250:	400a      	ands	r2, r1
 8002252:	0757      	lsls	r7, r2, #29
 8002254:	0252      	lsls	r2, r2, #9
 8002256:	4337      	orrs	r7, r6
 8002258:	0b12      	lsrs	r2, r2, #12
 800225a:	e09b      	b.n	8002394 <__aeabi_dsub+0x254>
 800225c:	2e00      	cmp	r6, #0
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x122>
 8002260:	e0c5      	b.n	80023ee <__aeabi_dsub+0x2ae>
 8002262:	1c6e      	adds	r6, r5, #1
 8002264:	0576      	lsls	r6, r6, #21
 8002266:	0d76      	lsrs	r6, r6, #21
 8002268:	2e01      	cmp	r6, #1
 800226a:	dc00      	bgt.n	800226e <__aeabi_dsub+0x12e>
 800226c:	e148      	b.n	8002500 <__aeabi_dsub+0x3c0>
 800226e:	4667      	mov	r7, ip
 8002270:	1a86      	subs	r6, r0, r2
 8002272:	1bcb      	subs	r3, r1, r7
 8002274:	42b0      	cmp	r0, r6
 8002276:	41bf      	sbcs	r7, r7
 8002278:	427f      	negs	r7, r7
 800227a:	46b8      	mov	r8, r7
 800227c:	001f      	movs	r7, r3
 800227e:	4643      	mov	r3, r8
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	003b      	movs	r3, r7
 8002284:	46b8      	mov	r8, r7
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	d500      	bpl.n	800228c <__aeabi_dsub+0x14c>
 800228a:	e15f      	b.n	800254c <__aeabi_dsub+0x40c>
 800228c:	4337      	orrs	r7, r6
 800228e:	d19a      	bne.n	80021c6 <__aeabi_dsub+0x86>
 8002290:	2200      	movs	r2, #0
 8002292:	2400      	movs	r4, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e079      	b.n	800238c <__aeabi_dsub+0x24c>
 8002298:	2e00      	cmp	r6, #0
 800229a:	dc00      	bgt.n	800229e <__aeabi_dsub+0x15e>
 800229c:	e0fa      	b.n	8002494 <__aeabi_dsub+0x354>
 800229e:	2f00      	cmp	r7, #0
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x164>
 80022a2:	e08d      	b.n	80023c0 <__aeabi_dsub+0x280>
 80022a4:	4b78      	ldr	r3, [pc, #480]	; (8002488 <__aeabi_dsub+0x348>)
 80022a6:	429d      	cmp	r5, r3
 80022a8:	d067      	beq.n	800237a <__aeabi_dsub+0x23a>
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	4667      	mov	r7, ip
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	431f      	orrs	r7, r3
 80022b2:	46bc      	mov	ip, r7
 80022b4:	2e38      	cmp	r6, #56	; 0x38
 80022b6:	dc00      	bgt.n	80022ba <__aeabi_dsub+0x17a>
 80022b8:	e152      	b.n	8002560 <__aeabi_dsub+0x420>
 80022ba:	4663      	mov	r3, ip
 80022bc:	4313      	orrs	r3, r2
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	4193      	sbcs	r3, r2
 80022c2:	181e      	adds	r6, r3, r0
 80022c4:	4286      	cmp	r6, r0
 80022c6:	4180      	sbcs	r0, r0
 80022c8:	4240      	negs	r0, r0
 80022ca:	1809      	adds	r1, r1, r0
 80022cc:	020b      	lsls	r3, r1, #8
 80022ce:	d400      	bmi.n	80022d2 <__aeabi_dsub+0x192>
 80022d0:	e0be      	b.n	8002450 <__aeabi_dsub+0x310>
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <__aeabi_dsub+0x348>)
 80022d4:	3501      	adds	r5, #1
 80022d6:	429d      	cmp	r5, r3
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x19c>
 80022da:	e0d2      	b.n	8002482 <__aeabi_dsub+0x342>
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <__aeabi_dsub+0x34c>)
 80022de:	0873      	lsrs	r3, r6, #1
 80022e0:	400a      	ands	r2, r1
 80022e2:	2101      	movs	r1, #1
 80022e4:	400e      	ands	r6, r1
 80022e6:	431e      	orrs	r6, r3
 80022e8:	0851      	lsrs	r1, r2, #1
 80022ea:	07d3      	lsls	r3, r2, #31
 80022ec:	2207      	movs	r2, #7
 80022ee:	431e      	orrs	r6, r3
 80022f0:	4032      	ands	r2, r6
 80022f2:	e795      	b.n	8002220 <__aeabi_dsub+0xe0>
 80022f4:	001e      	movs	r6, r3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x1bc>
 80022fa:	e745      	b.n	8002188 <__aeabi_dsub+0x48>
 80022fc:	e740      	b.n	8002180 <__aeabi_dsub+0x40>
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <__aeabi_dsub+0x348>)
 8002300:	429d      	cmp	r5, r3
 8002302:	d03a      	beq.n	800237a <__aeabi_dsub+0x23a>
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	4667      	mov	r7, ip
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431f      	orrs	r7, r3
 800230c:	46bc      	mov	ip, r7
 800230e:	2e38      	cmp	r6, #56	; 0x38
 8002310:	dd00      	ble.n	8002314 <__aeabi_dsub+0x1d4>
 8002312:	e0eb      	b.n	80024ec <__aeabi_dsub+0x3ac>
 8002314:	2e1f      	cmp	r6, #31
 8002316:	dc00      	bgt.n	800231a <__aeabi_dsub+0x1da>
 8002318:	e13a      	b.n	8002590 <__aeabi_dsub+0x450>
 800231a:	0033      	movs	r3, r6
 800231c:	4667      	mov	r7, ip
 800231e:	3b20      	subs	r3, #32
 8002320:	40df      	lsrs	r7, r3
 8002322:	003b      	movs	r3, r7
 8002324:	2e20      	cmp	r6, #32
 8002326:	d005      	beq.n	8002334 <__aeabi_dsub+0x1f4>
 8002328:	2740      	movs	r7, #64	; 0x40
 800232a:	1bbf      	subs	r7, r7, r6
 800232c:	4666      	mov	r6, ip
 800232e:	40be      	lsls	r6, r7
 8002330:	4332      	orrs	r2, r6
 8002332:	4690      	mov	r8, r2
 8002334:	4646      	mov	r6, r8
 8002336:	1e72      	subs	r2, r6, #1
 8002338:	4196      	sbcs	r6, r2
 800233a:	4333      	orrs	r3, r6
 800233c:	e0da      	b.n	80024f4 <__aeabi_dsub+0x3b4>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x204>
 8002342:	e214      	b.n	800276e <__aeabi_dsub+0x62e>
 8002344:	4663      	mov	r3, ip
 8002346:	4313      	orrs	r3, r2
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x20c>
 800234a:	e168      	b.n	800261e <__aeabi_dsub+0x4de>
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	074e      	lsls	r6, r1, #29
 8002350:	08c0      	lsrs	r0, r0, #3
 8002352:	08c9      	lsrs	r1, r1, #3
 8002354:	031b      	lsls	r3, r3, #12
 8002356:	4306      	orrs	r6, r0
 8002358:	4219      	tst	r1, r3
 800235a:	d008      	beq.n	800236e <__aeabi_dsub+0x22e>
 800235c:	4660      	mov	r0, ip
 800235e:	08c0      	lsrs	r0, r0, #3
 8002360:	4218      	tst	r0, r3
 8002362:	d104      	bne.n	800236e <__aeabi_dsub+0x22e>
 8002364:	4663      	mov	r3, ip
 8002366:	0001      	movs	r1, r0
 8002368:	08d2      	lsrs	r2, r2, #3
 800236a:	075e      	lsls	r6, r3, #29
 800236c:	4316      	orrs	r6, r2
 800236e:	00f3      	lsls	r3, r6, #3
 8002370:	4699      	mov	r9, r3
 8002372:	00c9      	lsls	r1, r1, #3
 8002374:	0f72      	lsrs	r2, r6, #29
 8002376:	4d44      	ldr	r5, [pc, #272]	; (8002488 <__aeabi_dsub+0x348>)
 8002378:	4311      	orrs	r1, r2
 800237a:	464b      	mov	r3, r9
 800237c:	08de      	lsrs	r6, r3, #3
 800237e:	4b42      	ldr	r3, [pc, #264]	; (8002488 <__aeabi_dsub+0x348>)
 8002380:	074f      	lsls	r7, r1, #29
 8002382:	4337      	orrs	r7, r6
 8002384:	08ca      	lsrs	r2, r1, #3
 8002386:	429d      	cmp	r5, r3
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x24c>
 800238a:	e06e      	b.n	800246a <__aeabi_dsub+0x32a>
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	056d      	lsls	r5, r5, #21
 8002390:	0b12      	lsrs	r2, r2, #12
 8002392:	0d6d      	lsrs	r5, r5, #21
 8002394:	2100      	movs	r1, #0
 8002396:	0312      	lsls	r2, r2, #12
 8002398:	0b13      	lsrs	r3, r2, #12
 800239a:	0d0a      	lsrs	r2, r1, #20
 800239c:	0512      	lsls	r2, r2, #20
 800239e:	431a      	orrs	r2, r3
 80023a0:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <__aeabi_dsub+0x350>)
 80023a2:	052d      	lsls	r5, r5, #20
 80023a4:	4013      	ands	r3, r2
 80023a6:	432b      	orrs	r3, r5
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	07e4      	lsls	r4, r4, #31
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	4323      	orrs	r3, r4
 80023b0:	0038      	movs	r0, r7
 80023b2:	0019      	movs	r1, r3
 80023b4:	bc3c      	pop	{r2, r3, r4, r5}
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	46a2      	mov	sl, r4
 80023bc:	46ab      	mov	fp, r5
 80023be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c0:	4663      	mov	r3, ip
 80023c2:	4313      	orrs	r3, r2
 80023c4:	d011      	beq.n	80023ea <__aeabi_dsub+0x2aa>
 80023c6:	1e73      	subs	r3, r6, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d000      	beq.n	80023ce <__aeabi_dsub+0x28e>
 80023cc:	e107      	b.n	80025de <__aeabi_dsub+0x49e>
 80023ce:	1886      	adds	r6, r0, r2
 80023d0:	4286      	cmp	r6, r0
 80023d2:	4180      	sbcs	r0, r0
 80023d4:	4461      	add	r1, ip
 80023d6:	4240      	negs	r0, r0
 80023d8:	1809      	adds	r1, r1, r0
 80023da:	2501      	movs	r5, #1
 80023dc:	020b      	lsls	r3, r1, #8
 80023de:	d537      	bpl.n	8002450 <__aeabi_dsub+0x310>
 80023e0:	2502      	movs	r5, #2
 80023e2:	e77b      	b.n	80022dc <__aeabi_dsub+0x19c>
 80023e4:	003e      	movs	r6, r7
 80023e6:	4661      	mov	r1, ip
 80023e8:	4691      	mov	r9, r2
 80023ea:	0035      	movs	r5, r6
 80023ec:	e7c5      	b.n	800237a <__aeabi_dsub+0x23a>
 80023ee:	465c      	mov	r4, fp
 80023f0:	2d00      	cmp	r5, #0
 80023f2:	d000      	beq.n	80023f6 <__aeabi_dsub+0x2b6>
 80023f4:	e0e1      	b.n	80025ba <__aeabi_dsub+0x47a>
 80023f6:	000b      	movs	r3, r1
 80023f8:	4303      	orrs	r3, r0
 80023fa:	d0f3      	beq.n	80023e4 <__aeabi_dsub+0x2a4>
 80023fc:	1c73      	adds	r3, r6, #1
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x2c2>
 8002400:	e1ac      	b.n	800275c <__aeabi_dsub+0x61c>
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <__aeabi_dsub+0x348>)
 8002404:	429f      	cmp	r7, r3
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x2ca>
 8002408:	e13a      	b.n	8002680 <__aeabi_dsub+0x540>
 800240a:	43f3      	mvns	r3, r6
 800240c:	2b38      	cmp	r3, #56	; 0x38
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0x2d2>
 8002410:	e16f      	b.n	80026f2 <__aeabi_dsub+0x5b2>
 8002412:	2b1f      	cmp	r3, #31
 8002414:	dd00      	ble.n	8002418 <__aeabi_dsub+0x2d8>
 8002416:	e18c      	b.n	8002732 <__aeabi_dsub+0x5f2>
 8002418:	2520      	movs	r5, #32
 800241a:	000e      	movs	r6, r1
 800241c:	1aed      	subs	r5, r5, r3
 800241e:	40ae      	lsls	r6, r5
 8002420:	46b0      	mov	r8, r6
 8002422:	0006      	movs	r6, r0
 8002424:	46aa      	mov	sl, r5
 8002426:	40de      	lsrs	r6, r3
 8002428:	4645      	mov	r5, r8
 800242a:	4335      	orrs	r5, r6
 800242c:	002e      	movs	r6, r5
 800242e:	4655      	mov	r5, sl
 8002430:	40d9      	lsrs	r1, r3
 8002432:	40a8      	lsls	r0, r5
 8002434:	4663      	mov	r3, ip
 8002436:	1e45      	subs	r5, r0, #1
 8002438:	41a8      	sbcs	r0, r5
 800243a:	1a5b      	subs	r3, r3, r1
 800243c:	469c      	mov	ip, r3
 800243e:	4330      	orrs	r0, r6
 8002440:	1a16      	subs	r6, r2, r0
 8002442:	42b2      	cmp	r2, r6
 8002444:	4192      	sbcs	r2, r2
 8002446:	4663      	mov	r3, ip
 8002448:	4252      	negs	r2, r2
 800244a:	1a99      	subs	r1, r3, r2
 800244c:	003d      	movs	r5, r7
 800244e:	e6b4      	b.n	80021ba <__aeabi_dsub+0x7a>
 8002450:	2207      	movs	r2, #7
 8002452:	4032      	ands	r2, r6
 8002454:	2a00      	cmp	r2, #0
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x31a>
 8002458:	e6e4      	b.n	8002224 <__aeabi_dsub+0xe4>
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <__aeabi_dsub+0x348>)
 800245c:	08f6      	lsrs	r6, r6, #3
 800245e:	074f      	lsls	r7, r1, #29
 8002460:	4337      	orrs	r7, r6
 8002462:	08ca      	lsrs	r2, r1, #3
 8002464:	429d      	cmp	r5, r3
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x32a>
 8002468:	e790      	b.n	800238c <__aeabi_dsub+0x24c>
 800246a:	003b      	movs	r3, r7
 800246c:	4313      	orrs	r3, r2
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x332>
 8002470:	e1a6      	b.n	80027c0 <__aeabi_dsub+0x680>
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	031b      	lsls	r3, r3, #12
 8002476:	431a      	orrs	r2, r3
 8002478:	0312      	lsls	r2, r2, #12
 800247a:	0b12      	lsrs	r2, r2, #12
 800247c:	4d02      	ldr	r5, [pc, #8]	; (8002488 <__aeabi_dsub+0x348>)
 800247e:	e789      	b.n	8002394 <__aeabi_dsub+0x254>
 8002480:	0015      	movs	r5, r2
 8002482:	2200      	movs	r2, #0
 8002484:	2700      	movs	r7, #0
 8002486:	e785      	b.n	8002394 <__aeabi_dsub+0x254>
 8002488:	000007ff 	.word	0x000007ff
 800248c:	ff7fffff 	.word	0xff7fffff
 8002490:	800fffff 	.word	0x800fffff
 8002494:	2e00      	cmp	r6, #0
 8002496:	d000      	beq.n	800249a <__aeabi_dsub+0x35a>
 8002498:	e0c7      	b.n	800262a <__aeabi_dsub+0x4ea>
 800249a:	1c6b      	adds	r3, r5, #1
 800249c:	055e      	lsls	r6, r3, #21
 800249e:	0d76      	lsrs	r6, r6, #21
 80024a0:	2e01      	cmp	r6, #1
 80024a2:	dc00      	bgt.n	80024a6 <__aeabi_dsub+0x366>
 80024a4:	e0f0      	b.n	8002688 <__aeabi_dsub+0x548>
 80024a6:	4dc8      	ldr	r5, [pc, #800]	; (80027c8 <__aeabi_dsub+0x688>)
 80024a8:	42ab      	cmp	r3, r5
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x36e>
 80024ac:	e0b9      	b.n	8002622 <__aeabi_dsub+0x4e2>
 80024ae:	1885      	adds	r5, r0, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	4285      	cmp	r5, r0
 80024b4:	4189      	sbcs	r1, r1
 80024b6:	4462      	add	r2, ip
 80024b8:	4249      	negs	r1, r1
 80024ba:	1851      	adds	r1, r2, r1
 80024bc:	2207      	movs	r2, #7
 80024be:	07ce      	lsls	r6, r1, #31
 80024c0:	086d      	lsrs	r5, r5, #1
 80024c2:	432e      	orrs	r6, r5
 80024c4:	0849      	lsrs	r1, r1, #1
 80024c6:	4032      	ands	r2, r6
 80024c8:	001d      	movs	r5, r3
 80024ca:	e6a9      	b.n	8002220 <__aeabi_dsub+0xe0>
 80024cc:	49bf      	ldr	r1, [pc, #764]	; (80027cc <__aeabi_dsub+0x68c>)
 80024ce:	1aed      	subs	r5, r5, r3
 80024d0:	4011      	ands	r1, r2
 80024d2:	2207      	movs	r2, #7
 80024d4:	4032      	ands	r2, r6
 80024d6:	e6a3      	b.n	8002220 <__aeabi_dsub+0xe0>
 80024d8:	0032      	movs	r2, r6
 80024da:	3828      	subs	r0, #40	; 0x28
 80024dc:	4082      	lsls	r2, r0
 80024de:	2600      	movs	r6, #0
 80024e0:	e686      	b.n	80021f0 <__aeabi_dsub+0xb0>
 80024e2:	0030      	movs	r0, r6
 80024e4:	f000 faec 	bl	8002ac0 <__clzsi2>
 80024e8:	3020      	adds	r0, #32
 80024ea:	e673      	b.n	80021d4 <__aeabi_dsub+0x94>
 80024ec:	4663      	mov	r3, ip
 80024ee:	4313      	orrs	r3, r2
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	4193      	sbcs	r3, r2
 80024f4:	1ac6      	subs	r6, r0, r3
 80024f6:	42b0      	cmp	r0, r6
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4240      	negs	r0, r0
 80024fc:	1a09      	subs	r1, r1, r0
 80024fe:	e65c      	b.n	80021ba <__aeabi_dsub+0x7a>
 8002500:	000e      	movs	r6, r1
 8002502:	4667      	mov	r7, ip
 8002504:	4306      	orrs	r6, r0
 8002506:	4317      	orrs	r7, r2
 8002508:	2d00      	cmp	r5, #0
 800250a:	d15e      	bne.n	80025ca <__aeabi_dsub+0x48a>
 800250c:	2e00      	cmp	r6, #0
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x3d2>
 8002510:	e0f3      	b.n	80026fa <__aeabi_dsub+0x5ba>
 8002512:	2f00      	cmp	r7, #0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x3d8>
 8002516:	e11e      	b.n	8002756 <__aeabi_dsub+0x616>
 8002518:	465c      	mov	r4, fp
 800251a:	4661      	mov	r1, ip
 800251c:	4691      	mov	r9, r2
 800251e:	e72c      	b.n	800237a <__aeabi_dsub+0x23a>
 8002520:	4fa9      	ldr	r7, [pc, #676]	; (80027c8 <__aeabi_dsub+0x688>)
 8002522:	42be      	cmp	r6, r7
 8002524:	d07b      	beq.n	800261e <__aeabi_dsub+0x4de>
 8002526:	001e      	movs	r6, r3
 8002528:	e6f1      	b.n	800230e <__aeabi_dsub+0x1ce>
 800252a:	0010      	movs	r0, r2
 800252c:	3d1f      	subs	r5, #31
 800252e:	40e8      	lsrs	r0, r5
 8002530:	2b20      	cmp	r3, #32
 8002532:	d003      	beq.n	800253c <__aeabi_dsub+0x3fc>
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	1acb      	subs	r3, r1, r3
 8002538:	409a      	lsls	r2, r3
 800253a:	4316      	orrs	r6, r2
 800253c:	1e73      	subs	r3, r6, #1
 800253e:	419e      	sbcs	r6, r3
 8002540:	2207      	movs	r2, #7
 8002542:	4306      	orrs	r6, r0
 8002544:	4032      	ands	r2, r6
 8002546:	2100      	movs	r1, #0
 8002548:	2500      	movs	r5, #0
 800254a:	e783      	b.n	8002454 <__aeabi_dsub+0x314>
 800254c:	1a16      	subs	r6, r2, r0
 800254e:	4663      	mov	r3, ip
 8002550:	42b2      	cmp	r2, r6
 8002552:	4180      	sbcs	r0, r0
 8002554:	1a59      	subs	r1, r3, r1
 8002556:	4240      	negs	r0, r0
 8002558:	1a0b      	subs	r3, r1, r0
 800255a:	4698      	mov	r8, r3
 800255c:	465c      	mov	r4, fp
 800255e:	e632      	b.n	80021c6 <__aeabi_dsub+0x86>
 8002560:	2e1f      	cmp	r6, #31
 8002562:	dd00      	ble.n	8002566 <__aeabi_dsub+0x426>
 8002564:	e0ab      	b.n	80026be <__aeabi_dsub+0x57e>
 8002566:	2720      	movs	r7, #32
 8002568:	1bbb      	subs	r3, r7, r6
 800256a:	469a      	mov	sl, r3
 800256c:	4663      	mov	r3, ip
 800256e:	4657      	mov	r7, sl
 8002570:	40bb      	lsls	r3, r7
 8002572:	4699      	mov	r9, r3
 8002574:	0013      	movs	r3, r2
 8002576:	464f      	mov	r7, r9
 8002578:	40f3      	lsrs	r3, r6
 800257a:	431f      	orrs	r7, r3
 800257c:	003b      	movs	r3, r7
 800257e:	4657      	mov	r7, sl
 8002580:	40ba      	lsls	r2, r7
 8002582:	1e57      	subs	r7, r2, #1
 8002584:	41ba      	sbcs	r2, r7
 8002586:	4313      	orrs	r3, r2
 8002588:	4662      	mov	r2, ip
 800258a:	40f2      	lsrs	r2, r6
 800258c:	1889      	adds	r1, r1, r2
 800258e:	e698      	b.n	80022c2 <__aeabi_dsub+0x182>
 8002590:	2720      	movs	r7, #32
 8002592:	1bbb      	subs	r3, r7, r6
 8002594:	469a      	mov	sl, r3
 8002596:	4663      	mov	r3, ip
 8002598:	4657      	mov	r7, sl
 800259a:	40bb      	lsls	r3, r7
 800259c:	4699      	mov	r9, r3
 800259e:	0013      	movs	r3, r2
 80025a0:	464f      	mov	r7, r9
 80025a2:	40f3      	lsrs	r3, r6
 80025a4:	431f      	orrs	r7, r3
 80025a6:	003b      	movs	r3, r7
 80025a8:	4657      	mov	r7, sl
 80025aa:	40ba      	lsls	r2, r7
 80025ac:	1e57      	subs	r7, r2, #1
 80025ae:	41ba      	sbcs	r2, r7
 80025b0:	4313      	orrs	r3, r2
 80025b2:	4662      	mov	r2, ip
 80025b4:	40f2      	lsrs	r2, r6
 80025b6:	1a89      	subs	r1, r1, r2
 80025b8:	e79c      	b.n	80024f4 <__aeabi_dsub+0x3b4>
 80025ba:	4b83      	ldr	r3, [pc, #524]	; (80027c8 <__aeabi_dsub+0x688>)
 80025bc:	429f      	cmp	r7, r3
 80025be:	d05f      	beq.n	8002680 <__aeabi_dsub+0x540>
 80025c0:	2580      	movs	r5, #128	; 0x80
 80025c2:	042d      	lsls	r5, r5, #16
 80025c4:	4273      	negs	r3, r6
 80025c6:	4329      	orrs	r1, r5
 80025c8:	e720      	b.n	800240c <__aeabi_dsub+0x2cc>
 80025ca:	2e00      	cmp	r6, #0
 80025cc:	d10c      	bne.n	80025e8 <__aeabi_dsub+0x4a8>
 80025ce:	2f00      	cmp	r7, #0
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x494>
 80025d2:	e0d0      	b.n	8002776 <__aeabi_dsub+0x636>
 80025d4:	465c      	mov	r4, fp
 80025d6:	4661      	mov	r1, ip
 80025d8:	4691      	mov	r9, r2
 80025da:	4d7b      	ldr	r5, [pc, #492]	; (80027c8 <__aeabi_dsub+0x688>)
 80025dc:	e6cd      	b.n	800237a <__aeabi_dsub+0x23a>
 80025de:	4f7a      	ldr	r7, [pc, #488]	; (80027c8 <__aeabi_dsub+0x688>)
 80025e0:	42be      	cmp	r6, r7
 80025e2:	d01c      	beq.n	800261e <__aeabi_dsub+0x4de>
 80025e4:	001e      	movs	r6, r3
 80025e6:	e665      	b.n	80022b4 <__aeabi_dsub+0x174>
 80025e8:	2f00      	cmp	r7, #0
 80025ea:	d018      	beq.n	800261e <__aeabi_dsub+0x4de>
 80025ec:	08c0      	lsrs	r0, r0, #3
 80025ee:	074e      	lsls	r6, r1, #29
 80025f0:	4306      	orrs	r6, r0
 80025f2:	2080      	movs	r0, #128	; 0x80
 80025f4:	08c9      	lsrs	r1, r1, #3
 80025f6:	0300      	lsls	r0, r0, #12
 80025f8:	4201      	tst	r1, r0
 80025fa:	d008      	beq.n	800260e <__aeabi_dsub+0x4ce>
 80025fc:	4663      	mov	r3, ip
 80025fe:	08dc      	lsrs	r4, r3, #3
 8002600:	4204      	tst	r4, r0
 8002602:	d104      	bne.n	800260e <__aeabi_dsub+0x4ce>
 8002604:	0021      	movs	r1, r4
 8002606:	46da      	mov	sl, fp
 8002608:	08d2      	lsrs	r2, r2, #3
 800260a:	075e      	lsls	r6, r3, #29
 800260c:	4316      	orrs	r6, r2
 800260e:	00f3      	lsls	r3, r6, #3
 8002610:	4699      	mov	r9, r3
 8002612:	2401      	movs	r4, #1
 8002614:	4653      	mov	r3, sl
 8002616:	00c9      	lsls	r1, r1, #3
 8002618:	0f72      	lsrs	r2, r6, #29
 800261a:	4311      	orrs	r1, r2
 800261c:	401c      	ands	r4, r3
 800261e:	4d6a      	ldr	r5, [pc, #424]	; (80027c8 <__aeabi_dsub+0x688>)
 8002620:	e6ab      	b.n	800237a <__aeabi_dsub+0x23a>
 8002622:	001d      	movs	r5, r3
 8002624:	2200      	movs	r2, #0
 8002626:	2700      	movs	r7, #0
 8002628:	e6b4      	b.n	8002394 <__aeabi_dsub+0x254>
 800262a:	2d00      	cmp	r5, #0
 800262c:	d159      	bne.n	80026e2 <__aeabi_dsub+0x5a2>
 800262e:	000b      	movs	r3, r1
 8002630:	4303      	orrs	r3, r0
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x4f6>
 8002634:	e6d6      	b.n	80023e4 <__aeabi_dsub+0x2a4>
 8002636:	1c73      	adds	r3, r6, #1
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x4fc>
 800263a:	e0b2      	b.n	80027a2 <__aeabi_dsub+0x662>
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <__aeabi_dsub+0x688>)
 800263e:	429f      	cmp	r7, r3
 8002640:	d01e      	beq.n	8002680 <__aeabi_dsub+0x540>
 8002642:	43f3      	mvns	r3, r6
 8002644:	2b38      	cmp	r3, #56	; 0x38
 8002646:	dc6f      	bgt.n	8002728 <__aeabi_dsub+0x5e8>
 8002648:	2b1f      	cmp	r3, #31
 800264a:	dd00      	ble.n	800264e <__aeabi_dsub+0x50e>
 800264c:	e097      	b.n	800277e <__aeabi_dsub+0x63e>
 800264e:	2520      	movs	r5, #32
 8002650:	000e      	movs	r6, r1
 8002652:	1aed      	subs	r5, r5, r3
 8002654:	40ae      	lsls	r6, r5
 8002656:	46b0      	mov	r8, r6
 8002658:	0006      	movs	r6, r0
 800265a:	46aa      	mov	sl, r5
 800265c:	40de      	lsrs	r6, r3
 800265e:	4645      	mov	r5, r8
 8002660:	4335      	orrs	r5, r6
 8002662:	002e      	movs	r6, r5
 8002664:	4655      	mov	r5, sl
 8002666:	40a8      	lsls	r0, r5
 8002668:	40d9      	lsrs	r1, r3
 800266a:	1e45      	subs	r5, r0, #1
 800266c:	41a8      	sbcs	r0, r5
 800266e:	448c      	add	ip, r1
 8002670:	4306      	orrs	r6, r0
 8002672:	18b6      	adds	r6, r6, r2
 8002674:	4296      	cmp	r6, r2
 8002676:	4192      	sbcs	r2, r2
 8002678:	4251      	negs	r1, r2
 800267a:	4461      	add	r1, ip
 800267c:	003d      	movs	r5, r7
 800267e:	e625      	b.n	80022cc <__aeabi_dsub+0x18c>
 8002680:	003d      	movs	r5, r7
 8002682:	4661      	mov	r1, ip
 8002684:	4691      	mov	r9, r2
 8002686:	e678      	b.n	800237a <__aeabi_dsub+0x23a>
 8002688:	000b      	movs	r3, r1
 800268a:	4303      	orrs	r3, r0
 800268c:	2d00      	cmp	r5, #0
 800268e:	d000      	beq.n	8002692 <__aeabi_dsub+0x552>
 8002690:	e655      	b.n	800233e <__aeabi_dsub+0x1fe>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f5      	beq.n	8002682 <__aeabi_dsub+0x542>
 8002696:	4663      	mov	r3, ip
 8002698:	4313      	orrs	r3, r2
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x55e>
 800269c:	e66d      	b.n	800237a <__aeabi_dsub+0x23a>
 800269e:	1886      	adds	r6, r0, r2
 80026a0:	4286      	cmp	r6, r0
 80026a2:	4180      	sbcs	r0, r0
 80026a4:	4461      	add	r1, ip
 80026a6:	4240      	negs	r0, r0
 80026a8:	1809      	adds	r1, r1, r0
 80026aa:	2200      	movs	r2, #0
 80026ac:	020b      	lsls	r3, r1, #8
 80026ae:	d400      	bmi.n	80026b2 <__aeabi_dsub+0x572>
 80026b0:	e6d0      	b.n	8002454 <__aeabi_dsub+0x314>
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <__aeabi_dsub+0x68c>)
 80026b4:	3501      	adds	r5, #1
 80026b6:	4019      	ands	r1, r3
 80026b8:	e5b2      	b.n	8002220 <__aeabi_dsub+0xe0>
 80026ba:	46b1      	mov	r9, r6
 80026bc:	e65d      	b.n	800237a <__aeabi_dsub+0x23a>
 80026be:	0033      	movs	r3, r6
 80026c0:	4667      	mov	r7, ip
 80026c2:	3b20      	subs	r3, #32
 80026c4:	40df      	lsrs	r7, r3
 80026c6:	003b      	movs	r3, r7
 80026c8:	2e20      	cmp	r6, #32
 80026ca:	d005      	beq.n	80026d8 <__aeabi_dsub+0x598>
 80026cc:	2740      	movs	r7, #64	; 0x40
 80026ce:	1bbf      	subs	r7, r7, r6
 80026d0:	4666      	mov	r6, ip
 80026d2:	40be      	lsls	r6, r7
 80026d4:	4332      	orrs	r2, r6
 80026d6:	4690      	mov	r8, r2
 80026d8:	4646      	mov	r6, r8
 80026da:	1e72      	subs	r2, r6, #1
 80026dc:	4196      	sbcs	r6, r2
 80026de:	4333      	orrs	r3, r6
 80026e0:	e5ef      	b.n	80022c2 <__aeabi_dsub+0x182>
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <__aeabi_dsub+0x688>)
 80026e4:	429f      	cmp	r7, r3
 80026e6:	d0cb      	beq.n	8002680 <__aeabi_dsub+0x540>
 80026e8:	2580      	movs	r5, #128	; 0x80
 80026ea:	042d      	lsls	r5, r5, #16
 80026ec:	4273      	negs	r3, r6
 80026ee:	4329      	orrs	r1, r5
 80026f0:	e7a8      	b.n	8002644 <__aeabi_dsub+0x504>
 80026f2:	4308      	orrs	r0, r1
 80026f4:	1e41      	subs	r1, r0, #1
 80026f6:	4188      	sbcs	r0, r1
 80026f8:	e6a2      	b.n	8002440 <__aeabi_dsub+0x300>
 80026fa:	2f00      	cmp	r7, #0
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x5c0>
 80026fe:	e63c      	b.n	800237a <__aeabi_dsub+0x23a>
 8002700:	4663      	mov	r3, ip
 8002702:	1a86      	subs	r6, r0, r2
 8002704:	1acf      	subs	r7, r1, r3
 8002706:	42b0      	cmp	r0, r6
 8002708:	419b      	sbcs	r3, r3
 800270a:	425b      	negs	r3, r3
 800270c:	1afb      	subs	r3, r7, r3
 800270e:	4698      	mov	r8, r3
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	d54e      	bpl.n	80027b2 <__aeabi_dsub+0x672>
 8002714:	1a16      	subs	r6, r2, r0
 8002716:	4663      	mov	r3, ip
 8002718:	42b2      	cmp	r2, r6
 800271a:	4192      	sbcs	r2, r2
 800271c:	1a59      	subs	r1, r3, r1
 800271e:	4252      	negs	r2, r2
 8002720:	1a89      	subs	r1, r1, r2
 8002722:	465c      	mov	r4, fp
 8002724:	2200      	movs	r2, #0
 8002726:	e57b      	b.n	8002220 <__aeabi_dsub+0xe0>
 8002728:	4301      	orrs	r1, r0
 800272a:	000e      	movs	r6, r1
 800272c:	1e71      	subs	r1, r6, #1
 800272e:	418e      	sbcs	r6, r1
 8002730:	e79f      	b.n	8002672 <__aeabi_dsub+0x532>
 8002732:	001d      	movs	r5, r3
 8002734:	000e      	movs	r6, r1
 8002736:	3d20      	subs	r5, #32
 8002738:	40ee      	lsrs	r6, r5
 800273a:	46b0      	mov	r8, r6
 800273c:	2b20      	cmp	r3, #32
 800273e:	d004      	beq.n	800274a <__aeabi_dsub+0x60a>
 8002740:	2540      	movs	r5, #64	; 0x40
 8002742:	1aeb      	subs	r3, r5, r3
 8002744:	4099      	lsls	r1, r3
 8002746:	4308      	orrs	r0, r1
 8002748:	4681      	mov	r9, r0
 800274a:	4648      	mov	r0, r9
 800274c:	4643      	mov	r3, r8
 800274e:	1e41      	subs	r1, r0, #1
 8002750:	4188      	sbcs	r0, r1
 8002752:	4318      	orrs	r0, r3
 8002754:	e674      	b.n	8002440 <__aeabi_dsub+0x300>
 8002756:	2200      	movs	r2, #0
 8002758:	2400      	movs	r4, #0
 800275a:	e617      	b.n	800238c <__aeabi_dsub+0x24c>
 800275c:	1a16      	subs	r6, r2, r0
 800275e:	4663      	mov	r3, ip
 8002760:	42b2      	cmp	r2, r6
 8002762:	4192      	sbcs	r2, r2
 8002764:	1a59      	subs	r1, r3, r1
 8002766:	4252      	negs	r2, r2
 8002768:	1a89      	subs	r1, r1, r2
 800276a:	003d      	movs	r5, r7
 800276c:	e525      	b.n	80021ba <__aeabi_dsub+0x7a>
 800276e:	4661      	mov	r1, ip
 8002770:	4691      	mov	r9, r2
 8002772:	4d15      	ldr	r5, [pc, #84]	; (80027c8 <__aeabi_dsub+0x688>)
 8002774:	e601      	b.n	800237a <__aeabi_dsub+0x23a>
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	2400      	movs	r4, #0
 800277a:	0312      	lsls	r2, r2, #12
 800277c:	e679      	b.n	8002472 <__aeabi_dsub+0x332>
 800277e:	001d      	movs	r5, r3
 8002780:	000e      	movs	r6, r1
 8002782:	3d20      	subs	r5, #32
 8002784:	40ee      	lsrs	r6, r5
 8002786:	46b0      	mov	r8, r6
 8002788:	2b20      	cmp	r3, #32
 800278a:	d004      	beq.n	8002796 <__aeabi_dsub+0x656>
 800278c:	2540      	movs	r5, #64	; 0x40
 800278e:	1aeb      	subs	r3, r5, r3
 8002790:	4099      	lsls	r1, r3
 8002792:	4308      	orrs	r0, r1
 8002794:	4681      	mov	r9, r0
 8002796:	464e      	mov	r6, r9
 8002798:	4643      	mov	r3, r8
 800279a:	1e71      	subs	r1, r6, #1
 800279c:	418e      	sbcs	r6, r1
 800279e:	431e      	orrs	r6, r3
 80027a0:	e767      	b.n	8002672 <__aeabi_dsub+0x532>
 80027a2:	1886      	adds	r6, r0, r2
 80027a4:	4296      	cmp	r6, r2
 80027a6:	419b      	sbcs	r3, r3
 80027a8:	4461      	add	r1, ip
 80027aa:	425b      	negs	r3, r3
 80027ac:	18c9      	adds	r1, r1, r3
 80027ae:	003d      	movs	r5, r7
 80027b0:	e58c      	b.n	80022cc <__aeabi_dsub+0x18c>
 80027b2:	4647      	mov	r7, r8
 80027b4:	4337      	orrs	r7, r6
 80027b6:	d0ce      	beq.n	8002756 <__aeabi_dsub+0x616>
 80027b8:	2207      	movs	r2, #7
 80027ba:	4641      	mov	r1, r8
 80027bc:	4032      	ands	r2, r6
 80027be:	e649      	b.n	8002454 <__aeabi_dsub+0x314>
 80027c0:	2700      	movs	r7, #0
 80027c2:	003a      	movs	r2, r7
 80027c4:	e5e6      	b.n	8002394 <__aeabi_dsub+0x254>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	000007ff 	.word	0x000007ff
 80027cc:	ff7fffff 	.word	0xff7fffff

080027d0 <__aeabi_d2iz>:
 80027d0:	b530      	push	{r4, r5, lr}
 80027d2:	4d14      	ldr	r5, [pc, #80]	; (8002824 <__aeabi_d2iz+0x54>)
 80027d4:	030a      	lsls	r2, r1, #12
 80027d6:	004b      	lsls	r3, r1, #1
 80027d8:	0b12      	lsrs	r2, r2, #12
 80027da:	0d5b      	lsrs	r3, r3, #21
 80027dc:	0fc9      	lsrs	r1, r1, #31
 80027de:	2400      	movs	r4, #0
 80027e0:	42ab      	cmp	r3, r5
 80027e2:	dd11      	ble.n	8002808 <__aeabi_d2iz+0x38>
 80027e4:	4c10      	ldr	r4, [pc, #64]	; (8002828 <__aeabi_d2iz+0x58>)
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	dc10      	bgt.n	800280c <__aeabi_d2iz+0x3c>
 80027ea:	2480      	movs	r4, #128	; 0x80
 80027ec:	0364      	lsls	r4, r4, #13
 80027ee:	4322      	orrs	r2, r4
 80027f0:	4c0e      	ldr	r4, [pc, #56]	; (800282c <__aeabi_d2iz+0x5c>)
 80027f2:	1ae4      	subs	r4, r4, r3
 80027f4:	2c1f      	cmp	r4, #31
 80027f6:	dd0c      	ble.n	8002812 <__aeabi_d2iz+0x42>
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <__aeabi_d2iz+0x60>)
 80027fa:	1ac3      	subs	r3, r0, r3
 80027fc:	40da      	lsrs	r2, r3
 80027fe:	0013      	movs	r3, r2
 8002800:	425c      	negs	r4, r3
 8002802:	2900      	cmp	r1, #0
 8002804:	d100      	bne.n	8002808 <__aeabi_d2iz+0x38>
 8002806:	001c      	movs	r4, r3
 8002808:	0020      	movs	r0, r4
 800280a:	bd30      	pop	{r4, r5, pc}
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <__aeabi_d2iz+0x64>)
 800280e:	18cc      	adds	r4, r1, r3
 8002810:	e7fa      	b.n	8002808 <__aeabi_d2iz+0x38>
 8002812:	4d09      	ldr	r5, [pc, #36]	; (8002838 <__aeabi_d2iz+0x68>)
 8002814:	40e0      	lsrs	r0, r4
 8002816:	46ac      	mov	ip, r5
 8002818:	4463      	add	r3, ip
 800281a:	409a      	lsls	r2, r3
 800281c:	0013      	movs	r3, r2
 800281e:	4303      	orrs	r3, r0
 8002820:	e7ee      	b.n	8002800 <__aeabi_d2iz+0x30>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	000003fe 	.word	0x000003fe
 8002828:	0000041d 	.word	0x0000041d
 800282c:	00000433 	.word	0x00000433
 8002830:	00000413 	.word	0x00000413
 8002834:	7fffffff 	.word	0x7fffffff
 8002838:	fffffbed 	.word	0xfffffbed

0800283c <__aeabi_i2d>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	2800      	cmp	r0, #0
 8002840:	d02d      	beq.n	800289e <__aeabi_i2d+0x62>
 8002842:	17c3      	asrs	r3, r0, #31
 8002844:	18c5      	adds	r5, r0, r3
 8002846:	405d      	eors	r5, r3
 8002848:	0fc4      	lsrs	r4, r0, #31
 800284a:	0028      	movs	r0, r5
 800284c:	f000 f938 	bl	8002ac0 <__clzsi2>
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <__aeabi_i2d+0x6c>)
 8002852:	1a1b      	subs	r3, r3, r0
 8002854:	055b      	lsls	r3, r3, #21
 8002856:	0d5b      	lsrs	r3, r3, #21
 8002858:	280a      	cmp	r0, #10
 800285a:	dd15      	ble.n	8002888 <__aeabi_i2d+0x4c>
 800285c:	380b      	subs	r0, #11
 800285e:	4085      	lsls	r5, r0
 8002860:	2200      	movs	r2, #0
 8002862:	032d      	lsls	r5, r5, #12
 8002864:	0b2d      	lsrs	r5, r5, #12
 8002866:	2100      	movs	r1, #0
 8002868:	0010      	movs	r0, r2
 800286a:	032d      	lsls	r5, r5, #12
 800286c:	0d0a      	lsrs	r2, r1, #20
 800286e:	0b2d      	lsrs	r5, r5, #12
 8002870:	0512      	lsls	r2, r2, #20
 8002872:	432a      	orrs	r2, r5
 8002874:	4d0d      	ldr	r5, [pc, #52]	; (80028ac <__aeabi_i2d+0x70>)
 8002876:	051b      	lsls	r3, r3, #20
 8002878:	402a      	ands	r2, r5
 800287a:	4313      	orrs	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	07e4      	lsls	r4, r4, #31
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	4323      	orrs	r3, r4
 8002884:	0019      	movs	r1, r3
 8002886:	bd70      	pop	{r4, r5, r6, pc}
 8002888:	0002      	movs	r2, r0
 800288a:	0029      	movs	r1, r5
 800288c:	3215      	adds	r2, #21
 800288e:	4091      	lsls	r1, r2
 8002890:	000a      	movs	r2, r1
 8002892:	210b      	movs	r1, #11
 8002894:	1a08      	subs	r0, r1, r0
 8002896:	40c5      	lsrs	r5, r0
 8002898:	032d      	lsls	r5, r5, #12
 800289a:	0b2d      	lsrs	r5, r5, #12
 800289c:	e7e3      	b.n	8002866 <__aeabi_i2d+0x2a>
 800289e:	2400      	movs	r4, #0
 80028a0:	2300      	movs	r3, #0
 80028a2:	2500      	movs	r5, #0
 80028a4:	2200      	movs	r2, #0
 80028a6:	e7de      	b.n	8002866 <__aeabi_i2d+0x2a>
 80028a8:	0000041e 	.word	0x0000041e
 80028ac:	800fffff 	.word	0x800fffff

080028b0 <__aeabi_ui2d>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	1e04      	subs	r4, r0, #0
 80028b4:	d025      	beq.n	8002902 <__aeabi_ui2d+0x52>
 80028b6:	f000 f903 	bl	8002ac0 <__clzsi2>
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <__aeabi_ui2d+0x5c>)
 80028bc:	1a1b      	subs	r3, r3, r0
 80028be:	055b      	lsls	r3, r3, #21
 80028c0:	0d5b      	lsrs	r3, r3, #21
 80028c2:	280a      	cmp	r0, #10
 80028c4:	dd12      	ble.n	80028ec <__aeabi_ui2d+0x3c>
 80028c6:	380b      	subs	r0, #11
 80028c8:	4084      	lsls	r4, r0
 80028ca:	2200      	movs	r2, #0
 80028cc:	0324      	lsls	r4, r4, #12
 80028ce:	0b24      	lsrs	r4, r4, #12
 80028d0:	2100      	movs	r1, #0
 80028d2:	0010      	movs	r0, r2
 80028d4:	0324      	lsls	r4, r4, #12
 80028d6:	0d0a      	lsrs	r2, r1, #20
 80028d8:	0b24      	lsrs	r4, r4, #12
 80028da:	0512      	lsls	r2, r2, #20
 80028dc:	4322      	orrs	r2, r4
 80028de:	4c0c      	ldr	r4, [pc, #48]	; (8002910 <__aeabi_ui2d+0x60>)
 80028e0:	051b      	lsls	r3, r3, #20
 80028e2:	4022      	ands	r2, r4
 80028e4:	4313      	orrs	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	0859      	lsrs	r1, r3, #1
 80028ea:	bd10      	pop	{r4, pc}
 80028ec:	0002      	movs	r2, r0
 80028ee:	0021      	movs	r1, r4
 80028f0:	3215      	adds	r2, #21
 80028f2:	4091      	lsls	r1, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	210b      	movs	r1, #11
 80028f8:	1a08      	subs	r0, r1, r0
 80028fa:	40c4      	lsrs	r4, r0
 80028fc:	0324      	lsls	r4, r4, #12
 80028fe:	0b24      	lsrs	r4, r4, #12
 8002900:	e7e6      	b.n	80028d0 <__aeabi_ui2d+0x20>
 8002902:	2300      	movs	r3, #0
 8002904:	2400      	movs	r4, #0
 8002906:	2200      	movs	r2, #0
 8002908:	e7e2      	b.n	80028d0 <__aeabi_ui2d+0x20>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	0000041e 	.word	0x0000041e
 8002910:	800fffff 	.word	0x800fffff

08002914 <__aeabi_f2d>:
 8002914:	0041      	lsls	r1, r0, #1
 8002916:	0e09      	lsrs	r1, r1, #24
 8002918:	1c4b      	adds	r3, r1, #1
 800291a:	b570      	push	{r4, r5, r6, lr}
 800291c:	b2db      	uxtb	r3, r3
 800291e:	0246      	lsls	r6, r0, #9
 8002920:	0a75      	lsrs	r5, r6, #9
 8002922:	0fc4      	lsrs	r4, r0, #31
 8002924:	2b01      	cmp	r3, #1
 8002926:	dd14      	ble.n	8002952 <__aeabi_f2d+0x3e>
 8002928:	23e0      	movs	r3, #224	; 0xe0
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	076d      	lsls	r5, r5, #29
 800292e:	0b36      	lsrs	r6, r6, #12
 8002930:	18cb      	adds	r3, r1, r3
 8002932:	2100      	movs	r1, #0
 8002934:	0d0a      	lsrs	r2, r1, #20
 8002936:	0028      	movs	r0, r5
 8002938:	0512      	lsls	r2, r2, #20
 800293a:	4d1c      	ldr	r5, [pc, #112]	; (80029ac <__aeabi_f2d+0x98>)
 800293c:	4332      	orrs	r2, r6
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	402a      	ands	r2, r5
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	4313      	orrs	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	07e4      	lsls	r4, r4, #31
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	4323      	orrs	r3, r4
 800294e:	0019      	movs	r1, r3
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	2900      	cmp	r1, #0
 8002954:	d114      	bne.n	8002980 <__aeabi_f2d+0x6c>
 8002956:	2d00      	cmp	r5, #0
 8002958:	d01e      	beq.n	8002998 <__aeabi_f2d+0x84>
 800295a:	0028      	movs	r0, r5
 800295c:	f000 f8b0 	bl	8002ac0 <__clzsi2>
 8002960:	280a      	cmp	r0, #10
 8002962:	dc1c      	bgt.n	800299e <__aeabi_f2d+0x8a>
 8002964:	230b      	movs	r3, #11
 8002966:	002a      	movs	r2, r5
 8002968:	1a1b      	subs	r3, r3, r0
 800296a:	40da      	lsrs	r2, r3
 800296c:	0003      	movs	r3, r0
 800296e:	3315      	adds	r3, #21
 8002970:	409d      	lsls	r5, r3
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <__aeabi_f2d+0x9c>)
 8002974:	0312      	lsls	r2, r2, #12
 8002976:	1a1b      	subs	r3, r3, r0
 8002978:	055b      	lsls	r3, r3, #21
 800297a:	0b16      	lsrs	r6, r2, #12
 800297c:	0d5b      	lsrs	r3, r3, #21
 800297e:	e7d8      	b.n	8002932 <__aeabi_f2d+0x1e>
 8002980:	2d00      	cmp	r5, #0
 8002982:	d006      	beq.n	8002992 <__aeabi_f2d+0x7e>
 8002984:	0b32      	lsrs	r2, r6, #12
 8002986:	2680      	movs	r6, #128	; 0x80
 8002988:	0336      	lsls	r6, r6, #12
 800298a:	076d      	lsls	r5, r5, #29
 800298c:	4316      	orrs	r6, r2
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <__aeabi_f2d+0xa0>)
 8002990:	e7cf      	b.n	8002932 <__aeabi_f2d+0x1e>
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <__aeabi_f2d+0xa0>)
 8002994:	2600      	movs	r6, #0
 8002996:	e7cc      	b.n	8002932 <__aeabi_f2d+0x1e>
 8002998:	2300      	movs	r3, #0
 800299a:	2600      	movs	r6, #0
 800299c:	e7c9      	b.n	8002932 <__aeabi_f2d+0x1e>
 800299e:	0003      	movs	r3, r0
 80029a0:	002a      	movs	r2, r5
 80029a2:	3b0b      	subs	r3, #11
 80029a4:	409a      	lsls	r2, r3
 80029a6:	2500      	movs	r5, #0
 80029a8:	e7e3      	b.n	8002972 <__aeabi_f2d+0x5e>
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	800fffff 	.word	0x800fffff
 80029b0:	00000389 	.word	0x00000389
 80029b4:	000007ff 	.word	0x000007ff

080029b8 <__aeabi_d2f>:
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	004c      	lsls	r4, r1, #1
 80029bc:	0d64      	lsrs	r4, r4, #21
 80029be:	030b      	lsls	r3, r1, #12
 80029c0:	1c62      	adds	r2, r4, #1
 80029c2:	0a5b      	lsrs	r3, r3, #9
 80029c4:	0f46      	lsrs	r6, r0, #29
 80029c6:	0552      	lsls	r2, r2, #21
 80029c8:	0fc9      	lsrs	r1, r1, #31
 80029ca:	431e      	orrs	r6, r3
 80029cc:	00c5      	lsls	r5, r0, #3
 80029ce:	0d52      	lsrs	r2, r2, #21
 80029d0:	2a01      	cmp	r2, #1
 80029d2:	dd29      	ble.n	8002a28 <__aeabi_d2f+0x70>
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <__aeabi_d2f+0xfc>)
 80029d6:	18e7      	adds	r7, r4, r3
 80029d8:	2ffe      	cmp	r7, #254	; 0xfe
 80029da:	dc1c      	bgt.n	8002a16 <__aeabi_d2f+0x5e>
 80029dc:	2f00      	cmp	r7, #0
 80029de:	dd3b      	ble.n	8002a58 <__aeabi_d2f+0xa0>
 80029e0:	0180      	lsls	r0, r0, #6
 80029e2:	1e43      	subs	r3, r0, #1
 80029e4:	4198      	sbcs	r0, r3
 80029e6:	2207      	movs	r2, #7
 80029e8:	00f3      	lsls	r3, r6, #3
 80029ea:	0f6d      	lsrs	r5, r5, #29
 80029ec:	4303      	orrs	r3, r0
 80029ee:	432b      	orrs	r3, r5
 80029f0:	401a      	ands	r2, r3
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	d004      	beq.n	8002a00 <__aeabi_d2f+0x48>
 80029f6:	220f      	movs	r2, #15
 80029f8:	401a      	ands	r2, r3
 80029fa:	2a04      	cmp	r2, #4
 80029fc:	d000      	beq.n	8002a00 <__aeabi_d2f+0x48>
 80029fe:	3304      	adds	r3, #4
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	04d2      	lsls	r2, r2, #19
 8002a04:	401a      	ands	r2, r3
 8002a06:	d024      	beq.n	8002a52 <__aeabi_d2f+0x9a>
 8002a08:	3701      	adds	r7, #1
 8002a0a:	b2fa      	uxtb	r2, r7
 8002a0c:	2fff      	cmp	r7, #255	; 0xff
 8002a0e:	d002      	beq.n	8002a16 <__aeabi_d2f+0x5e>
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	0a58      	lsrs	r0, r3, #9
 8002a14:	e001      	b.n	8002a1a <__aeabi_d2f+0x62>
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	2000      	movs	r0, #0
 8002a1a:	0240      	lsls	r0, r0, #9
 8002a1c:	05d2      	lsls	r2, r2, #23
 8002a1e:	0a40      	lsrs	r0, r0, #9
 8002a20:	07c9      	lsls	r1, r1, #31
 8002a22:	4310      	orrs	r0, r2
 8002a24:	4308      	orrs	r0, r1
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a28:	4335      	orrs	r5, r6
 8002a2a:	2c00      	cmp	r4, #0
 8002a2c:	d104      	bne.n	8002a38 <__aeabi_d2f+0x80>
 8002a2e:	2d00      	cmp	r5, #0
 8002a30:	d10a      	bne.n	8002a48 <__aeabi_d2f+0x90>
 8002a32:	2200      	movs	r2, #0
 8002a34:	2000      	movs	r0, #0
 8002a36:	e7f0      	b.n	8002a1a <__aeabi_d2f+0x62>
 8002a38:	2d00      	cmp	r5, #0
 8002a3a:	d0ec      	beq.n	8002a16 <__aeabi_d2f+0x5e>
 8002a3c:	2080      	movs	r0, #128	; 0x80
 8002a3e:	03c0      	lsls	r0, r0, #15
 8002a40:	4330      	orrs	r0, r6
 8002a42:	22ff      	movs	r2, #255	; 0xff
 8002a44:	e7e9      	b.n	8002a1a <__aeabi_d2f+0x62>
 8002a46:	2400      	movs	r4, #0
 8002a48:	2300      	movs	r3, #0
 8002a4a:	025b      	lsls	r3, r3, #9
 8002a4c:	0a58      	lsrs	r0, r3, #9
 8002a4e:	b2e2      	uxtb	r2, r4
 8002a50:	e7e3      	b.n	8002a1a <__aeabi_d2f+0x62>
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	003c      	movs	r4, r7
 8002a56:	e7f8      	b.n	8002a4a <__aeabi_d2f+0x92>
 8002a58:	003b      	movs	r3, r7
 8002a5a:	3317      	adds	r3, #23
 8002a5c:	dbf3      	blt.n	8002a46 <__aeabi_d2f+0x8e>
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	4333      	orrs	r3, r6
 8002a64:	261e      	movs	r6, #30
 8002a66:	1bf6      	subs	r6, r6, r7
 8002a68:	2e1f      	cmp	r6, #31
 8002a6a:	dd14      	ble.n	8002a96 <__aeabi_d2f+0xde>
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4252      	negs	r2, r2
 8002a70:	1bd7      	subs	r7, r2, r7
 8002a72:	001a      	movs	r2, r3
 8002a74:	40fa      	lsrs	r2, r7
 8002a76:	0017      	movs	r7, r2
 8002a78:	2e20      	cmp	r6, #32
 8002a7a:	d004      	beq.n	8002a86 <__aeabi_d2f+0xce>
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <__aeabi_d2f+0x100>)
 8002a7e:	4694      	mov	ip, r2
 8002a80:	4464      	add	r4, ip
 8002a82:	40a3      	lsls	r3, r4
 8002a84:	431d      	orrs	r5, r3
 8002a86:	002b      	movs	r3, r5
 8002a88:	1e5d      	subs	r5, r3, #1
 8002a8a:	41ab      	sbcs	r3, r5
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	433b      	orrs	r3, r7
 8002a90:	401a      	ands	r2, r3
 8002a92:	2700      	movs	r7, #0
 8002a94:	e7ad      	b.n	80029f2 <__aeabi_d2f+0x3a>
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <__aeabi_d2f+0x104>)
 8002a98:	0028      	movs	r0, r5
 8002a9a:	18a2      	adds	r2, r4, r2
 8002a9c:	4095      	lsls	r5, r2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	1e6c      	subs	r4, r5, #1
 8002aa2:	41a5      	sbcs	r5, r4
 8002aa4:	40f0      	lsrs	r0, r6
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	432b      	orrs	r3, r5
 8002aaa:	4303      	orrs	r3, r0
 8002aac:	401a      	ands	r2, r3
 8002aae:	2700      	movs	r7, #0
 8002ab0:	e79f      	b.n	80029f2 <__aeabi_d2f+0x3a>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	fffffc80 	.word	0xfffffc80
 8002ab8:	fffffca2 	.word	0xfffffca2
 8002abc:	fffffc82 	.word	0xfffffc82

08002ac0 <__clzsi2>:
 8002ac0:	211c      	movs	r1, #28
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	4298      	cmp	r0, r3
 8002ac8:	d301      	bcc.n	8002ace <__clzsi2+0xe>
 8002aca:	0c00      	lsrs	r0, r0, #16
 8002acc:	3910      	subs	r1, #16
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	4298      	cmp	r0, r3
 8002ad2:	d301      	bcc.n	8002ad8 <__clzsi2+0x18>
 8002ad4:	0a00      	lsrs	r0, r0, #8
 8002ad6:	3908      	subs	r1, #8
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d301      	bcc.n	8002ae2 <__clzsi2+0x22>
 8002ade:	0900      	lsrs	r0, r0, #4
 8002ae0:	3904      	subs	r1, #4
 8002ae2:	a202      	add	r2, pc, #8	; (adr r2, 8002aec <__clzsi2+0x2c>)
 8002ae4:	5c10      	ldrb	r0, [r2, r0]
 8002ae6:	1840      	adds	r0, r0, r1
 8002ae8:	4770      	bx	lr
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	02020304 	.word	0x02020304
 8002af0:	01010101 	.word	0x01010101
	...

08002afc <minArr>:
 -----------------------------------------------------------------------
 */

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
 */
uint8_t minArr(uint8_t *arr, uint8_t *Q) {
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest = 0xFF;
	uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8002afe:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF;
 8002b00:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <minArr+0xc>
		smallest = arr[0];
 8002b06:	7804      	ldrb	r4, [r0, #0]

	for (int i = 0; i < N; i++) {
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <minArr+0x38>)
 8002b0a:	781d      	ldrb	r5, [r3, #0]
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	dd0e      	ble.n	8002b2e <minArr+0x32>
 8002b10:	2300      	movs	r3, #0
 8002b12:	2700      	movs	r7, #0
 8002b14:	e002      	b.n	8002b1c <minArr+0x20>
 8002b16:	3301      	adds	r3, #1
 8002b18:	42ab      	cmp	r3, r5
 8002b1a:	da09      	bge.n	8002b30 <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 8002b1c:	5cc2      	ldrb	r2, [r0, r3]
 8002b1e:	42a2      	cmp	r2, r4
 8002b20:	d2f9      	bcs.n	8002b16 <minArr+0x1a>
 8002b22:	5cce      	ldrb	r6, [r1, r3]
 8002b24:	2e00      	cmp	r6, #0
 8002b26:	d1f6      	bne.n	8002b16 <minArr+0x1a>
			smallest = arr[i];
			index = i;
 8002b28:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 8002b2a:	0014      	movs	r4, r2
 8002b2c:	e7f3      	b.n	8002b16 <minArr+0x1a>
	for (int i = 0; i < N; i++) {
 8002b2e:	2700      	movs	r7, #0
		}
	}

	return index;
}
 8002b30:	0038      	movs	r0, r7
 8002b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b34:	2000001c 	.word	0x2000001c

08002b38 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
 */
uint8_t QnotEmpty(uint8_t *Q) {
	char temp = 1;

	for (int i = 0; i < N; i++) {
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <QnotEmpty+0x20>)
 8002b3a:	7819      	ldrb	r1, [r3, #0]
 8002b3c:	2900      	cmp	r1, #0
 8002b3e:	d008      	beq.n	8002b52 <QnotEmpty+0x1a>
 8002b40:	0003      	movs	r3, r0
 8002b42:	1841      	adds	r1, r0, r1
	char temp = 1;
 8002b44:	2001      	movs	r0, #1
		temp &= Q[i];
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	4010      	ands	r0, r2
 8002b4a:	3301      	adds	r3, #1
	for (int i = 0; i < N; i++) {
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	d1fa      	bne.n	8002b46 <QnotEmpty+0xe>
	}

	return temp;
}
 8002b50:	4770      	bx	lr
	char temp = 1;
 8002b52:	2001      	movs	r0, #1
 8002b54:	e7fc      	b.n	8002b50 <QnotEmpty+0x18>
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	2000001c 	.word	0x2000001c

08002b5c <LoadROsnippets>:

/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
 */
uint8_t LoadROsnippets(void) {
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	46de      	mov	lr, fp
 8002b60:	4657      	mov	r7, sl
 8002b62:	464e      	mov	r6, r9
 8002b64:	b5c0      	push	{r6, r7, lr}
 8002b66:	b082      	sub	sp, #8
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char*) malloc(cmdMAX_INPUT_SIZE);
 8002b68:	2032      	movs	r0, #50	; 0x32
 8002b6a:	f010 faf7 	bl	801315c <malloc>
 8002b6e:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)
 8002b70:	d100      	bne.n	8002b74 <LoadROsnippets+0x18>
 8002b72:	e071      	b.n	8002c58 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;

	// Exit if no recorded Snippets
	if (*(uint8_t*) currentAdd != 0xFE)
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <LoadROsnippets+0x100>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8002b78:	20ff      	movs	r0, #255	; 0xff
	if (*(uint8_t*) currentAdd != 0xFE)
 8002b7a:	2bfe      	cmp	r3, #254	; 0xfe
 8002b7c:	d166      	bne.n	8002c4c <LoadROsnippets+0xf0>
 8002b7e:	4e38      	ldr	r6, [pc, #224]	; (8002c60 <LoadROsnippets+0x104>)
 8002b80:	3b9a      	subs	r3, #154	; 0x9a
 8002b82:	469b      	mov	fp, r3
 8002b84:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8002b86:	4d35      	ldr	r5, [pc, #212]	; (8002c5c <LoadROsnippets+0x100>)
	/* Load Snippets */
	for (uint8_t s = 0; s < MAX_SNIPPETS; s++) {
		// Load conditions starting at RO_MID_ADDRESS
		for (i = 0; i < sizeof(snippet_t); i++)
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
		memcpy((uint8_t*) &snippets[s], (uint8_t*) &snipBuffer[1],
 8002b88:	1c7b      	adds	r3, r7, #1
 8002b8a:	9301      	str	r3, [sp, #4]
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		} else {
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <LoadROsnippets+0x108>)
 8002b8e:	4699      	mov	r9, r3
 8002b90:	e023      	b.n	8002bda <LoadROsnippets+0x7e>
		i = 0;
 8002b92:	2400      	movs	r4, #0
		if (snipBuffer[i - 1] != 0)
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	3b01      	subs	r3, #1
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8002b9e:	3401      	adds	r4, #1
 8002ba0:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char*) malloc(i);
 8002ba2:	0020      	movs	r0, r4
 8002ba4:	f010 fada 	bl	801315c <malloc>
 8002ba8:	4653      	mov	r3, sl
 8002baa:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d03f      	beq.n	8002c30 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 8002bb0:	0022      	movs	r2, r4
 8002bb2:	0039      	movs	r1, r7
 8002bb4:	f010 fb07 	bl	80131c6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8002bb8:	464b      	mov	r3, r9
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	464a      	mov	r2, r9
 8002bc0:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);
 8002bc2:	0022      	movs	r2, r4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	0038      	movs	r0, r7
 8002bc8:	f010 fb06 	bl	80131d8 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t*) currentAdd != 0xFE)
 8002bcc:	9b00      	ldr	r3, [sp, #0]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2bfe      	cmp	r3, #254	; 0xfe
 8002bd2:	d137      	bne.n	8002c44 <LoadROsnippets+0xe8>
 8002bd4:	3614      	adds	r6, #20
	for (uint8_t s = 0; s < MAX_SNIPPETS; s++) {
 8002bd6:	455e      	cmp	r6, fp
 8002bd8:	d034      	beq.n	8002c44 <LoadROsnippets+0xe8>
 8002bda:	0028      	movs	r0, r5
 8002bdc:	3014      	adds	r0, #20
uint8_t LoadROsnippets(void) {
 8002bde:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
 8002be0:	1b79      	subs	r1, r7, r5
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	54ca      	strb	r2, [r1, r3]
 8002be6:	3301      	adds	r3, #1
		for (i = 0; i < sizeof(snippet_t); i++)
 8002be8:	4283      	cmp	r3, r0
 8002bea:	d1fa      	bne.n	8002be2 <LoadROsnippets+0x86>
 8002bec:	3514      	adds	r5, #20
		memcpy((uint8_t*) &snippets[s], (uint8_t*) &snipBuffer[1],
 8002bee:	46b2      	mov	sl, r6
 8002bf0:	2214      	movs	r2, #20
 8002bf2:	9901      	ldr	r1, [sp, #4]
 8002bf4:	0030      	movs	r0, r6
 8002bf6:	f010 fae6 	bl	80131c6 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t));
 8002bfa:	2214      	movs	r2, #20
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	0038      	movs	r0, r7
 8002c00:	f010 faea 	bl	80131d8 <memset>
		while (*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002c04:	9500      	str	r5, [sp, #0]
 8002c06:	782a      	ldrb	r2, [r5, #0]
 8002c08:	1c93      	adds	r3, r2, #2
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d9c0      	bls.n	8002b92 <LoadROsnippets+0x36>
 8002c10:	0039      	movs	r1, r7
		i = 0;
 8002c12:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t*) currentAdd;
 8002c14:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8002c16:	3501      	adds	r5, #1
			++i;
 8002c18:	3401      	adds	r4, #1
 8002c1a:	b2e4      	uxtb	r4, r4
		while (*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002c1c:	9500      	str	r5, [sp, #0]
 8002c1e:	782a      	ldrb	r2, [r5, #0]
 8002c20:	1c93      	adds	r3, r2, #2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d9b5      	bls.n	8002b94 <LoadROsnippets+0x38>
 8002c28:	3101      	adds	r1, #1
				&& i < cmdMAX_INPUT_SIZE) {
 8002c2a:	2c32      	cmp	r4, #50	; 0x32
 8002c2c:	d1f2      	bne.n	8002c14 <LoadROsnippets+0xb8>
 8002c2e:	e7b1      	b.n	8002b94 <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t));
 8002c30:	2214      	movs	r2, #20
 8002c32:	2100      	movs	r1, #0
 8002c34:	4650      	mov	r0, sl
 8002c36:	f010 facf 	bl	80131d8 <memset>
			free(snipBuffer);
 8002c3a:	0038      	movs	r0, r7
 8002c3c:	f010 fa98 	bl	8013170 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8002c40:	200e      	movs	r0, #14
 8002c42:	e003      	b.n	8002c4c <LoadROsnippets+0xf0>
			break;
	}

	free(snipBuffer);
 8002c44:	0038      	movs	r0, r7
 8002c46:	f010 fa93 	bl	8013170 <free>
	return BOS_OK;
 8002c4a:	2000      	movs	r0, #0
}
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bc1c      	pop	{r2, r3, r4}
 8002c50:	4691      	mov	r9, r2
 8002c52:	469a      	mov	sl, r3
 8002c54:	46a3      	mov	fp, r4
 8002c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8002c58:	20fb      	movs	r0, #251	; 0xfb
 8002c5a:	e7f7      	b.n	8002c4c <LoadROsnippets+0xf0>
 8002c5c:	0801dc00 	.word	0x0801dc00
 8002c60:	2000614c 	.word	0x2000614c
 8002c64:	20000a07 	.word	0x20000a07

08002c68 <LoadROtopology>:

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- 
 */
uint8_t LoadROtopology(void) {
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	uint16_t add = 2, temp = 0;

	/* Load number of modules */
	temp = (*(__IO uint16_t*) (RO_START_ADDRESS));
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <LoadROtopology+0x94>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3

	if (temp == 0xFFFF)				// Memory has been erased
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <LoadROtopology+0x98>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d033      	beq.n	8002ce0 <LoadROtopology+0x78>
			{
		N = 1;
		myID = 0;
		return BOS_MEM_ERASED;
	} else {
		N = (uint8_t) (temp >> 8);
 8002c78:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)
 8002c7a:	d039      	beq.n	8002cf0 <LoadROtopology+0x88>
		N = (uint8_t) (temp >> 8);
 8002c7c:	4921      	ldr	r1, [pc, #132]	; (8002d04 <LoadROtopology+0x9c>)
 8002c7e:	700a      	strb	r2, [r1, #0]
			N = 1;
		myID = (uint8_t) temp;
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <LoadROtopology+0xa0>)
 8002c82:	7013      	strb	r3, [r2, #0]

		/* Load topology */
		for (uint8_t i = 1; i <= N; i++) {
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <LoadROtopology+0x9c>)
 8002c86:	781e      	ldrb	r6, [r3, #0]
 8002c88:	2e00      	cmp	r6, #0
 8002c8a:	d035      	beq.n	8002cf8 <LoadROtopology+0x90>
 8002c8c:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8002c8e:	2202      	movs	r2, #2
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002c90:	466b      	mov	r3, sp
 8002c92:	1dd9      	adds	r1, r3, #7
 8002c94:	2300      	movs	r3, #0
 8002c96:	469c      	mov	ip, r3
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 8002c98:	4d1c      	ldr	r5, [pc, #112]	; (8002d0c <LoadROtopology+0xa4>)
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002c9a:	4663      	mov	r3, ip
 8002c9c:	700b      	strb	r3, [r1, #0]
 8002c9e:	780b      	ldrb	r3, [r1, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b0a      	cmp	r3, #10
 8002ca4:	d815      	bhi.n	8002cd2 <LoadROtopology+0x6a>
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 8002ca6:	1e63      	subs	r3, r4, #1
 8002ca8:	0098      	lsls	r0, r3, #2
 8002caa:	18c0      	adds	r0, r0, r3
 8002cac:	0040      	lsls	r0, r0, #1
 8002cae:	18c0      	adds	r0, r0, r3
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <LoadROtopology+0x94>)
 8002cb2:	18d7      	adds	r7, r2, r3
 8002cb4:	780b      	ldrb	r3, [r1, #0]
 8002cb6:	883f      	ldrh	r7, [r7, #0]
 8002cb8:	181b      	adds	r3, r3, r0
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	52ef      	strh	r7, [r5, r3]
				add += 2;
 8002cbe:	3202      	adds	r2, #2
 8002cc0:	b292      	uxth	r2, r2
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002cc2:	780b      	ldrb	r3, [r1, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	700b      	strb	r3, [r1, #0]
 8002cca:	780b      	ldrb	r3, [r1, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d9ee      	bls.n	8002cb0 <LoadROtopology+0x48>
		for (uint8_t i = 1; i <= N; i++) {
 8002cd2:	3401      	adds	r4, #1
 8002cd4:	b2e4      	uxtb	r4, r4
 8002cd6:	42b4      	cmp	r4, r6
 8002cd8:	d9df      	bls.n	8002c9a <LoadROtopology+0x32>
			}
		}
	}

	return result;
 8002cda:	2000      	movs	r0, #0
}
 8002cdc:	b003      	add	sp, #12
 8002cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <LoadROtopology+0x9c>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <LoadROtopology+0xa0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002cec:	20fa      	movs	r0, #250	; 0xfa
 8002cee:	e7f5      	b.n	8002cdc <LoadROtopology+0x74>
			N = 1;
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <LoadROtopology+0x9c>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	7011      	strb	r1, [r2, #0]
 8002cf6:	e7c3      	b.n	8002c80 <LoadROtopology+0x18>
	return result;
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e7ef      	b.n	8002cdc <LoadROtopology+0x74>
 8002cfc:	0801d800 	.word	0x0801d800
 8002d00:	0000ffff 	.word	0x0000ffff
 8002d04:	2000001c 	.word	0x2000001c
 8002d08:	20000866 	.word	0x20000866
 8002d0c:	200002a0 	.word	0x200002a0

08002d10 <SaveEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Save array ports directions in EEPROM ---
 */
BOS_Status SaveEEportsDir(void) {
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;

	for (uint8_t i = 1; i <= N; i++) {
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <SaveEEportsDir+0x4c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01a      	beq.n	8002d52 <SaveEEportsDir+0x42>
 8002d1c:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i - 1])
 8002d22:	4e0f      	ldr	r6, [pc, #60]	; (8002d60 <SaveEEportsDir+0x50>)
	for (uint8_t i = 1; i <= N; i++) {
 8002d24:	4f0d      	ldr	r7, [pc, #52]	; (8002d5c <SaveEEportsDir+0x4c>)
 8002d26:	e008      	b.n	8002d3a <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1, arrayPortsDir[i - 1]);
 8002d28:	1c60      	adds	r0, r4, #1
 8002d2a:	f004 fc43 	bl	80075b4 <EE_WriteVariable>
 8002d2e:	e00a      	b.n	8002d46 <SaveEEportsDir+0x36>
	for (uint8_t i = 1; i <= N; i++) {
 8002d30:	3401      	adds	r4, #1
 8002d32:	b2e4      	uxtb	r4, r4
 8002d34:	783b      	ldrb	r3, [r7, #0]
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	d30d      	bcc.n	8002d56 <SaveEEportsDir+0x46>
		if (arrayPortsDir[i - 1])
 8002d3a:	0025      	movs	r5, r4
 8002d3c:	1e63      	subs	r3, r4, #1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	5b99      	ldrh	r1, [r3, r6]
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d1f0      	bne.n	8002d28 <SaveEEportsDir+0x18>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002d46:	3502      	adds	r5, #2
 8002d48:	2d1b      	cmp	r5, #27
 8002d4a:	ddf1      	ble.n	8002d30 <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 8002d4c:	230a      	movs	r3, #10
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	e7ee      	b.n	8002d30 <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	9301      	str	r3, [sp, #4]
	}

	return result;
}
 8002d56:	9801      	ldr	r0, [sp, #4]
 8002d58:	b003      	add	sp, #12
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5c:	2000001c 	.word	0x2000001c
 8002d60:	200065d8 	.word	0x200065d8

08002d64 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
 */
BOS_Status ClearEEportsDir(void) {
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d66:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;

	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8002d68:	2234      	movs	r2, #52	; 0x34
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4813      	ldr	r0, [pc, #76]	; (8002dbc <ClearEEportsDir+0x58>)
 8002d6e:	f010 fa33 	bl	80131d8 <memset>

	for (uint8_t i = 1; i <= N; i++) {
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <ClearEEportsDir+0x5c>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <ClearEEportsDir+0x4c>
 8002d7a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i - 1])
 8002d80:	4e0e      	ldr	r6, [pc, #56]	; (8002dbc <ClearEEportsDir+0x58>)
	for (uint8_t i = 1; i <= N; i++) {
 8002d82:	4f0f      	ldr	r7, [pc, #60]	; (8002dc0 <ClearEEportsDir+0x5c>)
 8002d84:	e008      	b.n	8002d98 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1, arrayPortsDir[i - 1]);
 8002d86:	1c60      	adds	r0, r4, #1
 8002d88:	f004 fc14 	bl	80075b4 <EE_WriteVariable>
 8002d8c:	e00a      	b.n	8002da4 <ClearEEportsDir+0x40>
	for (uint8_t i = 1; i <= N; i++) {
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	783b      	ldrb	r3, [r7, #0]
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	d30d      	bcc.n	8002db4 <ClearEEportsDir+0x50>
		if (arrayPortsDir[i - 1])
 8002d98:	0025      	movs	r5, r4
 8002d9a:	1e63      	subs	r3, r4, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	5b99      	ldrh	r1, [r3, r6]
 8002da0:	2900      	cmp	r1, #0
 8002da2:	d1f0      	bne.n	8002d86 <ClearEEportsDir+0x22>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002da4:	3502      	adds	r5, #2
 8002da6:	2d1b      	cmp	r5, #27
 8002da8:	ddf1      	ble.n	8002d8e <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 8002daa:	230a      	movs	r3, #10
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	e7ee      	b.n	8002d8e <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	9301      	str	r3, [sp, #4]
	}

	return result;
}
 8002db4:	9801      	ldr	r0, [sp, #4]
 8002db6:	b003      	add	sp, #12
 8002db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	200065d8 	.word	0x200065d8
 8002dc0:	2000001c 	.word	0x2000001c

08002dc4 <LoadEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
 */
BOS_Status LoadEEportsDir(void) {
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;

	for (uint8_t i = 1; i <= N; i++) {
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <LoadEEportsDir+0x40>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
 8002dca:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 8002dd0:	490d      	ldr	r1, [pc, #52]	; (8002e08 <LoadEEportsDir+0x44>)
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f004 fbbe 	bl	8007554 <EE_ReadVariable>
	for (uint8_t i = 1; i <= N; i++) {
 8002dd8:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002dda:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 8002ddc:	4f09      	ldr	r7, [pc, #36]	; (8002e04 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 8002dde:	4e0a      	ldr	r6, [pc, #40]	; (8002e08 <LoadEEportsDir+0x44>)
	for (uint8_t i = 1; i <= N; i++) {
 8002de0:	3401      	adds	r4, #1
 8002de2:	b2e4      	uxtb	r4, r4
 8002de4:	783b      	ldrb	r3, [r7, #0]
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	d30a      	bcc.n	8002e00 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 8002dea:	1e61      	subs	r1, r4, #1
 8002dec:	0049      	lsls	r1, r1, #1
 8002dee:	1989      	adds	r1, r1, r6
 8002df0:	1c60      	adds	r0, r4, #1
 8002df2:	f004 fbaf 	bl	8007554 <EE_ReadVariable>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002df6:	1ca3      	adds	r3, r4, #2
 8002df8:	2b1b      	cmp	r3, #27
 8002dfa:	ddf1      	ble.n	8002de0 <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8002dfc:	250a      	movs	r5, #10
 8002dfe:	e7ef      	b.n	8002de0 <LoadEEportsDir+0x1c>
	}

	return result;
}
 8002e00:	0028      	movs	r0, r5
 8002e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e04:	2000001c 	.word	0x2000001c
 8002e08:	200065d8 	.word	0x200065d8

08002e0c <SaveEEalias>:

/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
 */
BOS_Status SaveEEalias(void) {
 8002e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e0e:	46d6      	mov	lr, sl
 8002e10:	464f      	mov	r7, r9
 8002e12:	4646      	mov	r6, r8
 8002e14:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;

	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8002e16:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	4698      	mov	r8, r3
			{
		if (moduleAlias[i][0]) {
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <SaveEEalias+0x7c>)
 8002e1e:	469a      	mov	sl, r3
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <SaveEEalias+0x80>)
 8002e22:	4699      	mov	r9, r3
 8002e24:	e005      	b.n	8002e32 <SaveEEalias+0x26>
 8002e26:	3601      	adds	r6, #1
 8002e28:	b2f6      	uxtb	r6, r6
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	42b3      	cmp	r3, r6
 8002e30:	d324      	bcc.n	8002e7c <SaveEEalias+0x70>
		if (moduleAlias[i][0]) {
 8002e32:	00b3      	lsls	r3, r6, #2
 8002e34:	199b      	adds	r3, r3, r6
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4652      	mov	r2, sl
 8002e3a:	5c9b      	ldrb	r3, [r3, r2]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f2      	beq.n	8002e26 <SaveEEalias+0x1a>
 8002e40:	00b5      	lsls	r5, r6, #2
 8002e42:	19ad      	adds	r5, r5, r6
 8002e44:	006d      	lsls	r5, r5, #1
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <SaveEEalias+0x7c>)
 8002e48:	469c      	mov	ip, r3
 8002e4a:	4465      	add	r5, ip
 8002e4c:	4644      	mov	r4, r8
 8002e4e:	341c      	adds	r4, #28
 8002e50:	b2a4      	uxth	r4, r4
 8002e52:	4647      	mov	r7, r8
 8002e54:	3721      	adds	r7, #33	; 0x21
 8002e56:	b2bf      	uxth	r7, r7
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
				temp = (uint16_t) (moduleAlias[i][j - 1] << 8)
 8002e58:	782b      	ldrb	r3, [r5, #0]
 8002e5a:	021b      	lsls	r3, r3, #8
						+ moduleAlias[i][j];
 8002e5c:	7869      	ldrb	r1, [r5, #1]
				temp = (uint16_t) (moduleAlias[i][j - 1] << 8)
 8002e5e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add, temp);
 8002e60:	b289      	uxth	r1, r1
 8002e62:	0020      	movs	r0, r4
 8002e64:	f004 fba6 	bl	80075b4 <EE_WriteVariable>
 8002e68:	3502      	adds	r5, #2
 8002e6a:	3401      	adds	r4, #1
 8002e6c:	b2a4      	uxth	r4, r4
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 8002e6e:	42bc      	cmp	r4, r7
 8002e70:	d1f2      	bne.n	8002e58 <SaveEEalias+0x4c>
 8002e72:	4643      	mov	r3, r8
 8002e74:	3305      	adds	r3, #5
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4698      	mov	r8, r3
 8002e7a:	e7d4      	b.n	8002e26 <SaveEEalias+0x1a>
			}
		}
	}

	return result;
}
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	bc1c      	pop	{r2, r3, r4}
 8002e80:	4690      	mov	r8, r2
 8002e82:	4699      	mov	r9, r3
 8002e84:	46a2      	mov	sl, r4
 8002e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e88:	20000758 	.word	0x20000758
 8002e8c:	2000001c 	.word	0x2000001c

08002e90 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
 */
BOS_Status LoadEEalias(void) {
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	46de      	mov	lr, fp
 8002e94:	4657      	mov	r7, sl
 8002e96:	464e      	mov	r6, r9
 8002e98:	4645      	mov	r5, r8
 8002e9a:	b5e0      	push	{r5, r6, r7, lr}
 8002e9c:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;
 8002e9e:	466b      	mov	r3, sp
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	80da      	strh	r2, [r3, #6]
 8002ea4:	241c      	movs	r4, #28

	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8002ea6:	2700      	movs	r7, #0
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <LoadEEalias+0x7c>)
 8002eaa:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j - 1] = (uint8_t) (temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8002eac:	469b      	mov	fp, r3
 8002eae:	e00c      	b.n	8002eca <LoadEEalias+0x3a>
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	444b      	add	r3, r9
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	445b      	add	r3, fp
 8002eba:	2200      	movs	r2, #0
 8002ebc:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8002ebe:	3701      	adds	r7, #1
 8002ec0:	b2ff      	uxtb	r7, r7
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <LoadEEalias+0x80>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	42bb      	cmp	r3, r7
 8002ec8:	d317      	bcc.n	8002efa <LoadEEalias+0x6a>
 8002eca:	00bd      	lsls	r5, r7, #2
 8002ecc:	19ed      	adds	r5, r5, r7
 8002ece:	006d      	lsls	r5, r5, #1
 8002ed0:	4455      	add	r5, sl
 8002ed2:	1d63      	adds	r3, r4, #5
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
 8002ed8:	466b      	mov	r3, sp
 8002eda:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8002edc:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
 8002ede:	0031      	movs	r1, r6
 8002ee0:	0020      	movs	r0, r4
 8002ee2:	f004 fb37 	bl	8007554 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8002ee6:	8833      	ldrh	r3, [r6, #0]
 8002ee8:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] = (uint8_t) (temp >> 8);
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	702b      	strb	r3, [r5, #0]
 8002eee:	3401      	adds	r4, #1
 8002ef0:	b2a4      	uxth	r4, r4
 8002ef2:	3502      	adds	r5, #2
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 8002ef4:	45a0      	cmp	r8, r4
 8002ef6:	d1f2      	bne.n	8002ede <LoadEEalias+0x4e>
 8002ef8:	e7da      	b.n	8002eb0 <LoadEEalias+0x20>
	}

	return result;
}
 8002efa:	2000      	movs	r0, #0
 8002efc:	b003      	add	sp, #12
 8002efe:	bc3c      	pop	{r2, r3, r4, r5}
 8002f00:	4690      	mov	r8, r2
 8002f02:	4699      	mov	r9, r3
 8002f04:	46a2      	mov	sl, r4
 8002f06:	46ab      	mov	fp, r5
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	20000758 	.word	0x20000758
 8002f10:	2000001c 	.word	0x2000001c

08002f14 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
 */
BOS_Status LoadEEgroup(void) {
 8002f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f16:	46d6      	mov	lr, sl
 8002f18:	464f      	mov	r7, r9
 8002f1a:	4646      	mov	r6, r8
 8002f1c:	b5c0      	push	{r6, r7, lr}
 8002f1e:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;
 8002f20:	466b      	mov	r3, sp
 8002f22:	2200      	movs	r2, #0
 8002f24:	80da      	strh	r2, [r3, #6]
	uint8_t i = 0;

	/* Load group members */
	for (i = 0; i < N; i++)			// N modules
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <LoadEEgroup+0x9c>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01d      	beq.n	8002f6a <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0;
 8002f2e:	2500      	movs	r5, #0
			{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add, &groupModules[i]);
 8002f30:	4e20      	ldr	r6, [pc, #128]	; (8002fb4 <LoadEEgroup+0xa0>)
	for (i = 0; i < N; i++)			// N modules
 8002f32:	4c1f      	ldr	r4, [pc, #124]	; (8002fb0 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add, &groupModules[i]);
 8002f34:	b2e9      	uxtb	r1, r5
 8002f36:	0049      	lsls	r1, r1, #1
 8002f38:	1871      	adds	r1, r6, r1
 8002f3a:	0028      	movs	r0, r5
 8002f3c:	30cb      	adds	r0, #203	; 0xcb
 8002f3e:	b280      	uxth	r0, r0
 8002f40:	f004 fb08 	bl	8007554 <EE_ReadVariable>
		add++;
 8002f44:	3501      	adds	r5, #1
 8002f46:	b2ad      	uxth	r5, r5
	for (i = 0; i < N; i++)			// N modules
 8002f48:	7822      	ldrb	r2, [r4, #0]
 8002f4a:	b2eb      	uxtb	r3, r5
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d8f1      	bhi.n	8002f34 <LoadEEgroup+0x20>
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <LoadEEgroup+0xa4>)
 8002f52:	4699      	mov	r9, r3
 8002f54:	002c      	movs	r4, r5
 8002f56:	3499      	adds	r4, #153	; 0x99
 8002f58:	b2a4      	uxth	r4, r4
 8002f5a:	35cb      	adds	r5, #203	; 0xcb
 8002f5c:	b2ab      	uxth	r3, r5
 8002f5e:	4698      	mov	r8, r3

	/* Load group alias */
	for (i = 0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
			{
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add, &temp);
 8002f60:	466b      	mov	r3, sp
 8002f62:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j - 1] = (uint8_t) (temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002f64:	2300      	movs	r3, #0
 8002f66:	469a      	mov	sl, r3
 8002f68:	e009      	b.n	8002f7e <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0;
 8002f6a:	2500      	movs	r5, #0
 8002f6c:	e7f0      	b.n	8002f50 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002f6e:	464b      	mov	r3, r9
 8002f70:	4652      	mov	r2, sl
 8002f72:	725a      	strb	r2, [r3, #9]
 8002f74:	230a      	movs	r3, #10
 8002f76:	469c      	mov	ip, r3
 8002f78:	44e1      	add	r9, ip
	for (i = 0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f7a:	4544      	cmp	r4, r8
 8002f7c:	d010      	beq.n	8002fa0 <LoadEEgroup+0x8c>
 8002f7e:	1d67      	adds	r7, r4, #5
 8002f80:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0;
 8002f82:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add, &temp);
 8002f84:	0031      	movs	r1, r6
 8002f86:	0020      	movs	r0, r4
 8002f88:	f004 fae4 	bl	8007554 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8002f8c:	8833      	ldrh	r3, [r6, #0]
 8002f8e:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] = (uint8_t) (temp >> 8);
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	702b      	strb	r3, [r5, #0]
 8002f94:	3401      	adds	r4, #1
 8002f96:	b2a4      	uxth	r4, r4
 8002f98:	3502      	adds	r5, #2
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 8002f9a:	42bc      	cmp	r4, r7
 8002f9c:	d1f2      	bne.n	8002f84 <LoadEEgroup+0x70>
 8002f9e:	e7e6      	b.n	8002f6e <LoadEEgroup+0x5a>
	}

	return result;
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bc1c      	pop	{r2, r3, r4}
 8002fa6:	4690      	mov	r8, r2
 8002fa8:	4699      	mov	r9, r3
 8002faa:	46a2      	mov	sl, r4
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	2000001c 	.word	0x2000001c
 8002fb4:	200006b0 	.word	0x200006b0
 8002fb8:	2000064c 	.word	0x2000064c

08002fbc <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
 */
BOS_Status LoadEEstreams(void) {
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK;
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0;
 8002fc0:	210e      	movs	r1, #14
 8002fc2:	4469      	add	r1, sp
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	800b      	strh	r3, [r1, #0]
 8002fc8:	aa03      	add	r2, sp, #12
 8002fca:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0;
	uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;

	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8002fcc:	20e4      	movs	r0, #228	; 0xe4
 8002fce:	f004 fac1 	bl	8007554 <EE_ReadVariable>
	uint8_t direction = 0;
 8002fd2:	2600      	movs	r6, #0
	if (!status1) {
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d102      	bne.n	8002fde <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8002fd8:	230e      	movs	r3, #14
 8002fda:	446b      	add	r3, sp
 8002fdc:	781e      	ldrb	r6, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 1, &temp1);
 8002fde:	210e      	movs	r1, #14
 8002fe0:	4469      	add	r1, sp
 8002fe2:	20e5      	movs	r0, #229	; 0xe5
 8002fe4:	f004 fab6 	bl	8007554 <EE_ReadVariable>
 8002fe8:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 2, &temp2);
 8002fea:	a903      	add	r1, sp, #12
 8002fec:	20e6      	movs	r0, #230	; 0xe6
 8002fee:	f004 fab1 	bl	8007554 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002ff2:	4304      	orrs	r4, r0
 8002ff4:	b2a4      	uxth	r4, r4
	uint32_t count = 0, timeout = 0;
 8002ff6:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 8002ff8:	2c00      	cmp	r4, #0
 8002ffa:	d106      	bne.n	800300a <LoadEEstreams+0x4e>
		count = ((uint32_t) temp1 << 16) + temp2;
 8002ffc:	230e      	movs	r3, #14
 8002ffe:	446b      	add	r3, sp
 8003000:	881d      	ldrh	r5, [r3, #0]
 8003002:	042d      	lsls	r5, r5, #16
 8003004:	ab03      	add	r3, sp, #12
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	18ed      	adds	r5, r5, r3
	}

	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 3, &temp1);
 800300a:	210e      	movs	r1, #14
 800300c:	4469      	add	r1, sp
 800300e:	20e7      	movs	r0, #231	; 0xe7
 8003010:	f004 faa0 	bl	8007554 <EE_ReadVariable>
 8003014:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 4, &temp2);
 8003016:	a903      	add	r1, sp, #12
 8003018:	20e8      	movs	r0, #232	; 0xe8
 800301a:	f004 fa9b 	bl	8007554 <EE_ReadVariable>
	if (!status1 && !status2) {
 800301e:	4320      	orrs	r0, r4
 8003020:	b280      	uxth	r0, r0
	uint32_t count = 0, timeout = 0;
 8003022:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8003024:	2800      	cmp	r0, #0
 8003026:	d106      	bne.n	8003036 <LoadEEstreams+0x7a>
		timeout = ((uint32_t) temp1 << 16) + temp2;
 8003028:	230e      	movs	r3, #14
 800302a:	446b      	add	r3, sp
 800302c:	881c      	ldrh	r4, [r3, #0]
 800302e:	0424      	lsls	r4, r4, #16
 8003030:	ab03      	add	r3, sp, #12
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	18e4      	adds	r4, r4, r3
	}

	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 5, &temp1);
 8003036:	210e      	movs	r1, #14
 8003038:	4469      	add	r1, sp
 800303a:	20e9      	movs	r0, #233	; 0xe9
 800303c:	f004 fa8a 	bl	8007554 <EE_ReadVariable>
	if (!status1) {
 8003040:	2800      	cmp	r0, #0
 8003042:	d107      	bne.n	8003054 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8003044:	230e      	movs	r3, #14
 8003046:	446b      	add	r3, sp
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	0a19      	lsrs	r1, r3, #8
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <LoadEEstreams+0x134>)
 800304e:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8003050:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <LoadEEstreams+0x138>)
 8003052:	7013      	strb	r3, [r2, #0]
	}

	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 6, &temp1);
 8003054:	210e      	movs	r1, #14
 8003056:	4469      	add	r1, sp
 8003058:	20ea      	movs	r0, #234	; 0xea
 800305a:	f004 fa7b 	bl	8007554 <EE_ReadVariable>
	if (!status1) {
 800305e:	2800      	cmp	r0, #0
 8003060:	d107      	bne.n	8003072 <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 8003062:	230e      	movs	r3, #14
 8003064:	446b      	add	r3, sp
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	0a19      	lsrs	r1, r3, #8
 800306a:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <LoadEEstreams+0x13c>)
 800306c:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;
 800306e:	4a23      	ldr	r2, [pc, #140]	; (80030fc <LoadEEstreams+0x140>)
 8003070:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 7, &temp1);
 8003072:	210e      	movs	r1, #14
 8003074:	4469      	add	r1, sp
 8003076:	20eb      	movs	r0, #235	; 0xeb
 8003078:	f004 fa6c 	bl	8007554 <EE_ReadVariable>
	if (!status1) {
 800307c:	2800      	cmp	r0, #0
 800307e:	d107      	bne.n	8003090 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8003080:	230e      	movs	r3, #14
 8003082:	446b      	add	r3, sp
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	0a19      	lsrs	r1, r3, #8
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <LoadEEstreams+0x144>)
 800308a:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <LoadEEstreams+0x148>)
 800308e:	7013      	strb	r3, [r2, #0]
	}

	/* Activate the DMA streams */
	if (src1 && dst1)
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <LoadEEstreams+0x134>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <LoadEEstreams+0xe4>
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <LoadEEstreams+0x138>)
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	2a00      	cmp	r2, #0
 800309e:	d112      	bne.n	80030c6 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <LoadEEstreams+0x13c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <LoadEEstreams+0xf4>
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <LoadEEstreams+0x140>)
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d111      	bne.n	80030d4 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <LoadEEstreams+0x144>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <LoadEEstreams+0x104>
 80030b8:	4a12      	ldr	r2, [pc, #72]	; (8003104 <LoadEEstreams+0x148>)
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	2a00      	cmp	r2, #0
 80030be:	d110      	bne.n	80030e2 <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);

	return result;
}
 80030c0:	2000      	movs	r0, #0
 80030c2:	b004      	add	sp, #16
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 80030c6:	9200      	str	r2, [sp, #0]
 80030c8:	0022      	movs	r2, r4
 80030ca:	0029      	movs	r1, r5
 80030cc:	0030      	movs	r0, r6
 80030ce:	f005 fe77 	bl	8008dc0 <SetupDMAStreams>
 80030d2:	e7e5      	b.n	80030a0 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 80030d4:	9200      	str	r2, [sp, #0]
 80030d6:	0022      	movs	r2, r4
 80030d8:	0029      	movs	r1, r5
 80030da:	0030      	movs	r0, r6
 80030dc:	f005 fe70 	bl	8008dc0 <SetupDMAStreams>
 80030e0:	e7e6      	b.n	80030b0 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 80030e2:	9200      	str	r2, [sp, #0]
 80030e4:	0022      	movs	r2, r4
 80030e6:	0029      	movs	r1, r5
 80030e8:	0030      	movs	r0, r6
 80030ea:	f005 fe69 	bl	8008dc0 <SetupDMAStreams>
 80030ee:	e7e7      	b.n	80030c0 <LoadEEstreams+0x104>
 80030f0:	20000932 	.word	0x20000932
 80030f4:	20000649 	.word	0x20000649
 80030f8:	20000933 	.word	0x20000933
 80030fc:	2000064a 	.word	0x2000064a
 8003100:	20000934 	.word	0x20000934
 8003104:	2000064b 	.word	0x2000064b

08003108 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
 */
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout,
		uint8_t src1, uint8_t dst1, uint8_t src2, uint8_t dst2, uint8_t src3,
		uint8_t dst3) {
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	46de      	mov	lr, fp
 800310c:	4657      	mov	r7, sl
 800310e:	464e      	mov	r6, r9
 8003110:	4645      	mov	r5, r8
 8003112:	b5e0      	push	{r5, r6, r7, lr}
 8003114:	000f      	movs	r7, r1
 8003116:	0016      	movs	r6, r2
 8003118:	4699      	mov	r9, r3
 800311a:	ab0a      	add	r3, sp, #40	; 0x28
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	469b      	mov	fp, r3
 8003120:	ab0b      	add	r3, sp, #44	; 0x2c
 8003122:	781d      	ldrb	r5, [r3, #0]
 8003124:	ab0c      	add	r3, sp, #48	; 0x30
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	469a      	mov	sl, r3
 800312a:	ab0d      	add	r3, sp, #52	; 0x34
 800312c:	781c      	ldrb	r4, [r3, #0]
 800312e:	ab0e      	add	r3, sp, #56	; 0x38
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK;

	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction); /* Direction */
 8003134:	b281      	uxth	r1, r0
 8003136:	20e4      	movs	r0, #228	; 0xe4
 8003138:	f004 fa3c 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1, ((uint16_t) (count >> 8))); /* Count high half-word */
 800313c:	0a39      	lsrs	r1, r7, #8
 800313e:	b289      	uxth	r1, r1
 8003140:	20e5      	movs	r0, #229	; 0xe5
 8003142:	f004 fa37 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2, ((uint16_t) count)); /* Count low half-word */
 8003146:	b2b9      	uxth	r1, r7
 8003148:	20e6      	movs	r0, #230	; 0xe6
 800314a:	f004 fa33 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3, ((uint16_t) (timeout >> 8))); /* Timeout high half-word */
 800314e:	0a31      	lsrs	r1, r6, #8
 8003150:	b289      	uxth	r1, r1
 8003152:	20e7      	movs	r0, #231	; 0xe7
 8003154:	f004 fa2e 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4, ((uint16_t) timeout)); /* Timeout low half-word */
 8003158:	b2b1      	uxth	r1, r6
 800315a:	20e8      	movs	r0, #232	; 0xe8
 800315c:	f004 fa2a 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
			((uint16_t) (src1 << 8)) + (uint16_t) dst1); /* src1 | dst1 */
 8003160:	464b      	mov	r3, r9
 8003162:	0219      	lsls	r1, r3, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 8003164:	4459      	add	r1, fp
 8003166:	b289      	uxth	r1, r1
 8003168:	20e9      	movs	r0, #233	; 0xe9
 800316a:	f004 fa23 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
			((uint16_t) (src2 << 8)) + (uint16_t) dst2); /* src1 | dst1 */
 800316e:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 8003170:	4455      	add	r5, sl
 8003172:	b2a9      	uxth	r1, r5
 8003174:	20ea      	movs	r0, #234	; 0xea
 8003176:	f004 fa1d 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
			((uint16_t) (src3 << 8)) + (uint16_t) dst3); /* src1 | dst1 */
 800317a:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 800317c:	4444      	add	r4, r8
 800317e:	b2a1      	uxth	r1, r4
 8003180:	20eb      	movs	r0, #235	; 0xeb
 8003182:	f004 fa17 	bl	80075b4 <EE_WriteVariable>

	return result;
}
 8003186:	2000      	movs	r0, #0
 8003188:	bc3c      	pop	{r2, r3, r4, r5}
 800318a:	4690      	mov	r8, r2
 800318c:	4699      	mov	r9, r3
 800318e:	46a2      	mov	sl, r4
 8003190:	46ab      	mov	fp, r5
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003194 <LoadEEparams>:

/*-----------------------------------------------------------*/

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
 */
BOS_Status LoadEEparams(void) {
 8003194:	b510      	push	{r4, lr}
 8003196:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK;
	uint16_t temp1, temp2, status1, status2;

	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8003198:	208a      	movs	r0, #138	; 0x8a
 800319a:	466b      	mov	r3, sp
 800319c:	1d99      	adds	r1, r3, #6
 800319e:	0040      	lsls	r0, r0, #1
 80031a0:	f004 f9d8 	bl	8007554 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d000      	beq.n	80031aa <LoadEEparams+0x16>
 80031a8:	e064      	b.n	8003274 <LoadEEparams+0xe0>
		BOS.response = (uint8_t) temp1;
 80031aa:	466b      	mov	r3, sp
 80031ac:	3306      	adds	r3, #6
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	4a49      	ldr	r2, [pc, #292]	; (80032d8 <LoadEEparams+0x144>)
 80031b2:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t) (temp1 >> 8);
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}

	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 80031b8:	2016      	movs	r0, #22
 80031ba:	466b      	mov	r3, sp
 80031bc:	1d99      	adds	r1, r3, #6
 80031be:	30ff      	adds	r0, #255	; 0xff
 80031c0:	f004 f9c8 	bl	8007554 <EE_ReadVariable>
	if (!status1)
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d15c      	bne.n	8003282 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 80031c8:	466b      	mov	r3, sp
 80031ca:	88da      	ldrh	r2, [r3, #6]
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <LoadEEparams+0x144>)
 80031ce:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 80031d0:	208b      	movs	r0, #139	; 0x8b
 80031d2:	466b      	mov	r3, sp
 80031d4:	1d99      	adds	r1, r3, #6
 80031d6:	0040      	lsls	r0, r0, #1
 80031d8:	f004 f9bc 	bl	8007554 <EE_ReadVariable>
	if (!status1)
 80031dc:	2800      	cmp	r0, #0
 80031de:	d155      	bne.n	800328c <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 80031e0:	466b      	mov	r3, sp
 80031e2:	88da      	ldrh	r2, [r3, #6]
 80031e4:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <LoadEEparams+0x144>)
 80031e6:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 80031e8:	2018      	movs	r0, #24
 80031ea:	466b      	mov	r3, sp
 80031ec:	1d99      	adds	r1, r3, #6
 80031ee:	30ff      	adds	r0, #255	; 0xff
 80031f0:	f004 f9b0 	bl	8007554 <EE_ReadVariable>
	if (!status1) {
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d14e      	bne.n	8003296 <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t) temp1;
 80031f8:	466b      	mov	r3, sp
 80031fa:	3306      	adds	r3, #6
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	4a36      	ldr	r2, [pc, #216]	; (80032d8 <LoadEEparams+0x144>)
 8003200:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t) (temp1 >> 8);
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;
	}

	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8003206:	208c      	movs	r0, #140	; 0x8c
 8003208:	466b      	mov	r3, sp
 800320a:	1d99      	adds	r1, r3, #6
 800320c:	0040      	lsls	r0, r0, #1
 800320e:	f004 f9a1 	bl	8007554 <EE_ReadVariable>
 8003212:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD + 1, &temp2);
 8003214:	201a      	movs	r0, #26
 8003216:	a901      	add	r1, sp, #4
 8003218:	30ff      	adds	r0, #255	; 0xff
 800321a:	f004 f99b 	bl	8007554 <EE_ReadVariable>
	if (!status1 && !status2) {
 800321e:	4304      	orrs	r4, r0
 8003220:	b2a4      	uxth	r4, r4
 8003222:	2c00      	cmp	r4, #0
 8003224:	d13e      	bne.n	80032a4 <LoadEEparams+0x110>
		BOS.clibaudrate = (uint32_t) temp1 | (((uint32_t) temp2) << 16);
 8003226:	ab01      	add	r3, sp, #4
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	466a      	mov	r2, sp
 800322e:	3206      	adds	r2, #6
 8003230:	8812      	ldrh	r2, [r2, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <LoadEEparams+0x144>)
 8003236:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;

	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003238:	208d      	movs	r0, #141	; 0x8d
 800323a:	466b      	mov	r3, sp
 800323c:	1d99      	adds	r1, r3, #6
 800323e:	0040      	lsls	r0, r0, #1
 8003240:	f004 f988 	bl	8007554 <EE_ReadVariable>
	if (!status1) {
 8003244:	2800      	cmp	r0, #0
 8003246:	d13b      	bne.n	80032c0 <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t) temp1;
 8003248:	466b      	mov	r3, sp
 800324a:	3306      	adds	r3, #6
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <LoadEEparams+0x144>)
 8003250:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t) (temp1 >> 8);
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}

	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003256:	201c      	movs	r0, #28
 8003258:	466b      	mov	r3, sp
 800325a:	1d99      	adds	r1, r3, #6
 800325c:	30ff      	adds	r0, #255	; 0xff
 800325e:	f004 f979 	bl	8007554 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003262:	2800      	cmp	r0, #0
 8003264:	d032      	beq.n	80032cc <LoadEEparams+0x138>
		BOS.disableCLI = (uint8_t) temp1;
		/* Couldn't find the variable, load default config */
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <LoadEEparams+0x148>)
 8003268:	7eda      	ldrb	r2, [r3, #27]
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <LoadEEparams+0x144>)
 800326c:	76da      	strb	r2, [r3, #27]
	}

	return result;
}
 800326e:	2000      	movs	r0, #0
 8003270:	b002      	add	sp, #8
 8003272:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <LoadEEparams+0x144>)
 8003276:	4a19      	ldr	r2, [pc, #100]	; (80032dc <LoadEEparams+0x148>)
 8003278:	7991      	ldrb	r1, [r2, #6]
 800327a:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 800327c:	79d2      	ldrb	r2, [r2, #7]
 800327e:	71da      	strb	r2, [r3, #7]
 8003280:	e79a      	b.n	80031b8 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <LoadEEparams+0x148>)
 8003284:	881a      	ldrh	r2, [r3, #0]
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <LoadEEparams+0x144>)
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	e7a1      	b.n	80031d0 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <LoadEEparams+0x148>)
 800328e:	885a      	ldrh	r2, [r3, #2]
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <LoadEEparams+0x144>)
 8003292:	805a      	strh	r2, [r3, #2]
 8003294:	e7a8      	b.n	80031e8 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <LoadEEparams+0x144>)
 8003298:	4a10      	ldr	r2, [pc, #64]	; (80032dc <LoadEEparams+0x148>)
 800329a:	7911      	ldrb	r1, [r2, #4]
 800329c:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;
 800329e:	7952      	ldrb	r2, [r2, #5]
 80032a0:	715a      	strb	r2, [r3, #5]
 80032a2:	e7b0      	b.n	8003206 <LoadEEparams+0x72>
	} else if (CLI_LOW_Baudrate_Flag)
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <LoadEEparams+0x14c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d004      	beq.n	80032b6 <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <LoadEEparams+0x144>)
 80032ae:	22e1      	movs	r2, #225	; 0xe1
 80032b0:	0252      	lsls	r2, r2, #9
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e7c0      	b.n	8003238 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <LoadEEparams+0x148>)
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <LoadEEparams+0x144>)
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	e7bb      	b.n	8003238 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <LoadEEparams+0x144>)
 80032c2:	2218      	movs	r2, #24
 80032c4:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 80032c6:	2200      	movs	r2, #0
 80032c8:	731a      	strb	r2, [r3, #12]
 80032ca:	e7c4      	b.n	8003256 <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t) temp1;
 80032cc:	466b      	mov	r3, sp
 80032ce:	88da      	ldrh	r2, [r3, #6]
 80032d0:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <LoadEEparams+0x144>)
 80032d2:	76da      	strb	r2, [r3, #27]
 80032d4:	e7cb      	b.n	800326e <LoadEEparams+0xda>
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	20006130 	.word	0x20006130
 80032dc:	20000000 	.word	0x20000000
 80032e0:	2000029e 	.word	0x2000029e

080032e4 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. --- 
 */
BOS_Status SaveEEparams(void) {
 80032e4:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,
			((uint16_t) BOS.trace << 5) | (uint16_t) BOS.response);
 80032e6:	4c1a      	ldr	r4, [pc, #104]	; (8003350 <SaveEEparams+0x6c>)
 80032e8:	79e3      	ldrb	r3, [r4, #7]
 80032ea:	015b      	lsls	r3, r3, #5
 80032ec:	79a1      	ldrb	r1, [r4, #6]
	EE_WriteVariable(_EE_PARAMS_BASE,
 80032ee:	4319      	orrs	r1, r3
 80032f0:	208a      	movs	r0, #138	; 0x8a
 80032f2:	0040      	lsls	r0, r0, #1
 80032f4:	f004 f95e 	bl	80075b4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 80032f8:	8821      	ldrh	r1, [r4, #0]
 80032fa:	2016      	movs	r0, #22
 80032fc:	30ff      	adds	r0, #255	; 0xff
 80032fe:	f004 f959 	bl	80075b4 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8003302:	8861      	ldrh	r1, [r4, #2]
 8003304:	208b      	movs	r0, #139	; 0x8b
 8003306:	0040      	lsls	r0, r0, #1
 8003308:	f004 f954 	bl	80075b4 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
			((uint16_t) BOS.buttons.maxInterClickTime << 8)
 800330c:	7963      	ldrb	r3, [r4, #5]
 800330e:	021b      	lsls	r3, r3, #8
					| (uint16_t) BOS.daylightsaving);
 8003310:	7b21      	ldrb	r1, [r4, #12]
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 8003312:	4319      	orrs	r1, r3
 8003314:	2018      	movs	r0, #24
 8003316:	30ff      	adds	r0, #255	; 0xff
 8003318:	f004 f94c 	bl	80075b4 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t) BOS.clibaudrate);
 800331c:	8921      	ldrh	r1, [r4, #8]
 800331e:	208c      	movs	r0, #140	; 0x8c
 8003320:	0040      	lsls	r0, r0, #1
 8003322:	f004 f947 	bl	80075b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1, (uint16_t) (BOS.clibaudrate >> 16));
 8003326:	8961      	ldrh	r1, [r4, #10]
 8003328:	201a      	movs	r0, #26
 800332a:	30ff      	adds	r0, #255	; 0xff
 800332c:	f004 f942 	bl	80075b4 <EE_WriteVariable>

	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC,
			((uint16_t) BOS.hourformat << 8)
 8003330:	7b63      	ldrb	r3, [r4, #13]
 8003332:	021b      	lsls	r3, r3, #8
					| (uint16_t) BOS.buttons.minInterClickTime);
 8003334:	7921      	ldrb	r1, [r4, #4]
	EE_WriteVariable(_EE_PARAMS_RTC,
 8003336:	4319      	orrs	r1, r3
 8003338:	208d      	movs	r0, #141	; 0x8d
 800333a:	0040      	lsls	r0, r0, #1
 800333c:	f004 f93a 	bl	80075b4 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t) BOS.disableCLI);
 8003340:	7ee1      	ldrb	r1, [r4, #27]
 8003342:	201c      	movs	r0, #28
 8003344:	30ff      	adds	r0, #255	; 0xff
 8003346:	f004 f935 	bl	80075b4 <EE_WriteVariable>

	return result;
}
 800334a:	2000      	movs	r0, #0
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	20006130 	.word	0x20006130

08003354 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- 
 */
BOS_Status LoadEEbuttons(void) {
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	46ce      	mov	lr, r9
 8003358:	4647      	mov	r7, r8
 800335a:	b580      	push	{r7, lr}
 800335c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	uint16_t temp16 = 0, status1 = 0;
 800335e:	231e      	movs	r3, #30
 8003360:	446b      	add	r3, sp
 8003362:	2200      	movs	r2, #0
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	2501      	movs	r5, #1
 8003368:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 = 0;

	for (uint8_t i = 0; i <= NumOfPorts; i++) {
		status1 = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i), &temp16);
 800336a:	001e      	movs	r6, r3
 800336c:	230f      	movs	r3, #15
 800336e:	4698      	mov	r8, r3
 8003370:	e004      	b.n	800337c <LoadEEbuttons+0x28>
 8003372:	3404      	adds	r4, #4
 8003374:	b2a4      	uxth	r4, r4
 8003376:	3501      	adds	r5, #1
	for (uint8_t i = 0; i <= NumOfPorts; i++) {
 8003378:	2d07      	cmp	r5, #7
 800337a:	d058      	beq.n	800342e <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i), &temp16);
 800337c:	0031      	movs	r1, r6
 800337e:	0020      	movs	r0, r4
 8003380:	f004 f8e8 	bl	8007554 <EE_ReadVariable>

		if (!status1)									// This variable exists
 8003384:	2800      	cmp	r0, #0
 8003386:	d1f4      	bne.n	8003372 <LoadEEbuttons+0x1e>
		{
			temp8 = (uint8_t) (temp16 >> 8);
 8003388:	8831      	ldrh	r1, [r6, #0]
 800338a:	0a0b      	lsrs	r3, r1, #8
			if (((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))// This is same port and button type is not none
 800338c:	091a      	lsrs	r2, r3, #4
 800338e:	42aa      	cmp	r2, r5
 8003390:	d1ef      	bne.n	8003372 <LoadEEbuttons+0x1e>
 8003392:	4640      	mov	r0, r8
 8003394:	4003      	ands	r3, r0
 8003396:	d0ec      	beq.n	8003372 <LoadEEbuttons+0x1e>
					{
				button[i + 1].type = temp8 & 0x0F;
 8003398:	00d0      	lsls	r0, r2, #3
 800339a:	1882      	adds	r2, r0, r2
 800339c:	4827      	ldr	r0, [pc, #156]	; (800343c <LoadEEbuttons+0xe8>)
 800339e:	4681      	mov	r9, r0
 80033a0:	4491      	add	r9, r2
 80033a2:	464a      	mov	r2, r9
 80033a4:	7053      	strb	r3, [r2, #1]
				button[i + 1].events = (uint8_t) temp16;
 80033a6:	7211      	strb	r1, [r2, #8]
 80033a8:	00af      	lsls	r7, r5, #2
 80033aa:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1, &temp16);
 80033ac:	0038      	movs	r0, r7
 80033ae:	30e9      	adds	r0, #233	; 0xe9
 80033b0:	b280      	uxth	r0, r0
 80033b2:	0031      	movs	r1, r6
 80033b4:	f004 f8ce 	bl	8007554 <EE_ReadVariable>
				button[i + 1].pressedX1Sec = (uint8_t) (temp16 >> 8);
 80033b8:	8833      	ldrh	r3, [r6, #0]
 80033ba:	0a1a      	lsrs	r2, r3, #8
 80033bc:	4649      	mov	r1, r9
 80033be:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec = (uint8_t) temp16;
 80033c0:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2, &temp16);
 80033c2:	0038      	movs	r0, r7
 80033c4:	30ea      	adds	r0, #234	; 0xea
 80033c6:	b280      	uxth	r0, r0
 80033c8:	0031      	movs	r1, r6
 80033ca:	f004 f8c3 	bl	8007554 <EE_ReadVariable>
				button[i + 1].pressedX2Sec = (uint8_t) (temp16 >> 8);
 80033ce:	8833      	ldrh	r3, [r6, #0]
 80033d0:	0a1a      	lsrs	r2, r3, #8
 80033d2:	4649      	mov	r1, r9
 80033d4:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec = (uint8_t) temp16;
 80033d6:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3, &temp16);
 80033d8:	37eb      	adds	r7, #235	; 0xeb
 80033da:	b2b8      	uxth	r0, r7
 80033dc:	0031      	movs	r1, r6
 80033de:	f004 f8b9 	bl	8007554 <EE_ReadVariable>
				button[i + 1].pressedX3Sec = (uint8_t) (temp16 >> 8);
 80033e2:	8833      	ldrh	r3, [r6, #0]
 80033e4:	0a1a      	lsrs	r2, r3, #8
 80033e6:	4649      	mov	r1, r9
 80033e8:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec = (uint8_t) temp16;
 80033ea:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type, i + 1);
 80033ec:	b2ef      	uxtb	r7, r5
 80033ee:	7848      	ldrb	r0, [r1, #1]
 80033f0:	0039      	movs	r1, r7
 80033f2:	f004 fdab 	bl	8007f4c <AddPortButton>
				SetButtonEvents(i + 1,
						(button[i + 1].events & BUTTON_EVENT_CLICKED),
 80033f6:	464b      	mov	r3, r9
 80033f8:	7a19      	ldrb	r1, [r3, #8]
				SetButtonEvents(i + 1,
 80033fa:	789b      	ldrb	r3, [r3, #2]
						((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),
 80033fc:	104a      	asrs	r2, r1, #1
				SetButtonEvents(i + 1,
 80033fe:	2001      	movs	r0, #1
 8003400:	4002      	ands	r2, r0
 8003402:	4001      	ands	r1, r0
 8003404:	2000      	movs	r0, #0
 8003406:	9005      	str	r0, [sp, #20]
 8003408:	4648      	mov	r0, r9
 800340a:	79c0      	ldrb	r0, [r0, #7]
 800340c:	9004      	str	r0, [sp, #16]
 800340e:	4648      	mov	r0, r9
 8003410:	7980      	ldrb	r0, [r0, #6]
 8003412:	9003      	str	r0, [sp, #12]
 8003414:	4648      	mov	r0, r9
 8003416:	7940      	ldrb	r0, [r0, #5]
 8003418:	9002      	str	r0, [sp, #8]
 800341a:	4648      	mov	r0, r9
 800341c:	7900      	ldrb	r0, [r0, #4]
 800341e:	9001      	str	r0, [sp, #4]
 8003420:	4648      	mov	r0, r9
 8003422:	78c0      	ldrb	r0, [r0, #3]
 8003424:	9000      	str	r0, [sp, #0]
 8003426:	0038      	movs	r0, r7
 8003428:	f004 fea8 	bl	800817c <SetButtonEvents>
 800342c:	e7a1      	b.n	8003372 <LoadEEbuttons+0x1e>
			}
		}
	}

	return result;
}
 800342e:	2000      	movs	r0, #0
 8003430:	b009      	add	sp, #36	; 0x24
 8003432:	bc0c      	pop	{r2, r3}
 8003434:	4690      	mov	r8, r2
 8003436:	4699      	mov	r9, r3
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	20000cb4 	.word	0x20000cb4

08003440 <LoadEEvars>:
void LoadEEvars(void) {
 8003440:	b510      	push	{r4, lr}
	LoadROtopology();
 8003442:	f7ff fc11 	bl	8002c68 <LoadROtopology>
	LoadEEportsDir();
 8003446:	f7ff fcbd 	bl	8002dc4 <LoadEEportsDir>
	LoadEEalias();
 800344a:	f7ff fd21 	bl	8002e90 <LoadEEalias>
	LoadEEgroup();
 800344e:	f7ff fd61 	bl	8002f14 <LoadEEgroup>
	LoadEEstreams();
 8003452:	f7ff fdb3 	bl	8002fbc <LoadEEstreams>
	LoadEEparams();
 8003456:	f7ff fe9d 	bl	8003194 <LoadEEparams>
	LoadEEbuttons();
 800345a:	f7ff ff7b 	bl	8003354 <LoadEEbuttons>
	LoadROsnippets();
 800345e:	f7ff fb7d 	bl	8002b5c <LoadROsnippets>
}
 8003462:	bd10      	pop	{r4, pc}

08003464 <IsLowerCLIbaud>:
/*-----------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void) {
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;

	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003468:	2512      	movs	r5, #18
 800346a:	446d      	add	r5, sp
 800346c:	ab04      	add	r3, sp, #16
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	ab07      	add	r3, sp, #28
 8003472:	002a      	movs	r2, r5
 8003474:	a908      	add	r1, sp, #32
 8003476:	2001      	movs	r0, #1
 8003478:	f009 fd50 	bl	800cf1c <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 800347c:	ac03      	add	r4, sp, #12
 800347e:	9400      	str	r4, [sp, #0]
 8003480:	ab05      	add	r3, sp, #20
 8003482:	220e      	movs	r2, #14
 8003484:	446a      	add	r2, sp
 8003486:	a906      	add	r1, sp, #24
 8003488:	2002      	movs	r0, #2
 800348a:	f009 fd47 	bl	800cf1c <GetPortGPIOs>

	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348e:	2301      	movs	r3, #1
 8003490:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2600      	movs	r6, #0
 8003494:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003496:	882b      	ldrh	r3, [r5, #0]
 8003498:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P1_TX_Port, &GPIO_InitStruct);
 800349a:	a909      	add	r1, sp, #36	; 0x24
 800349c:	9808      	ldr	r0, [sp, #32]
 800349e:	f00d ff09 	bl	80112b4 <HAL_GPIO_Init>

	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a2:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034a4:	2302      	movs	r3, #2
 80034a6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 80034a8:	8823      	ldrh	r3, [r4, #0]
 80034aa:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P2_RX_Port, &GPIO_InitStruct);
 80034ac:	a909      	add	r1, sp, #36	; 0x24
 80034ae:	9805      	ldr	r0, [sp, #20]
 80034b0:	f00d ff00 	bl	80112b4 <HAL_GPIO_Init>

	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port, P1_TX_Pin, GPIO_PIN_RESET);
 80034b4:	8829      	ldrh	r1, [r5, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	9808      	ldr	r0, [sp, #32]
 80034ba:	f00e f86f 	bl	801159c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80034be:	2005      	movs	r0, #5
 80034c0:	f00a f8d0 	bl	800d664 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == RESET) {
 80034c4:	8821      	ldrh	r1, [r4, #0]
 80034c6:	9805      	ldr	r0, [sp, #20]
 80034c8:	f00e f862 	bl	8011590 <HAL_GPIO_ReadPin>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == SET) {
			return 1;
		}
	}

	return 0;
 80034cc:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == RESET) {
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d002      	beq.n	80034d8 <IsLowerCLIbaud+0x74>
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	b00e      	add	sp, #56	; 0x38
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port, P1_TX_Pin, GPIO_PIN_SET);
 80034d8:	3312      	adds	r3, #18
 80034da:	446b      	add	r3, sp
 80034dc:	8819      	ldrh	r1, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	9808      	ldr	r0, [sp, #32]
 80034e2:	f00e f85b 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80034e6:	2005      	movs	r0, #5
 80034e8:	f00a f8bc 	bl	800d664 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == SET) {
 80034ec:	ab03      	add	r3, sp, #12
 80034ee:	8819      	ldrh	r1, [r3, #0]
 80034f0:	9805      	ldr	r0, [sp, #20]
 80034f2:	f00e f84d 	bl	8011590 <HAL_GPIO_ReadPin>
 80034f6:	3801      	subs	r0, #1
 80034f8:	4243      	negs	r3, r0
 80034fa:	4143      	adcs	r3, r0
			return 1;
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e7e8      	b.n	80034d2 <IsLowerCLIbaud+0x6e>

08003500 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

/* --- Format emulated EEPROM for a factory reset
 */
void EE_FormatForFactoryReset(void) {
 8003500:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long*) 0x20007FF0) == 0xBEEFDEAD) {
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <EE_FormatForFactoryReset+0x1c>)
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <EE_FormatForFactoryReset+0x20>)
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d006      	beq.n	800351a <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	} else {
		if (EE_Format() == HAL_OK) {
 800350c:	f004 f8fa 	bl	8007704 <EE_Format>
 8003510:	2800      	cmp	r0, #0
 8003512:	d102      	bne.n	800351a <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long*) 0x20007FF0) = 0xBEEFDEAD;
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <EE_FormatForFactoryReset+0x20>)
 8003516:	4a01      	ldr	r2, [pc, #4]	; (800351c <EE_FormatForFactoryReset+0x1c>)
 8003518:	601a      	str	r2, [r3, #0]
		}
	}

}
 800351a:	bd10      	pop	{r4, pc}
 800351c:	beefdead 	.word	0xbeefdead
 8003520:	20007ff0 	.word	0x20007ff0

08003524 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port) {
 8003524:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003526:	f00a fa2f 	bl	800d988 <GetUart>
 800352a:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 800352c:	23e1      	movs	r3, #225	; 0xe1
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800353e:	f00f fc63 	bl	8012e08 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	2120      	movs	r1, #32
 8003548:	430b      	orrs	r3, r1
 800354a:	6013      	str	r3, [r2, #0]
}
 800354c:	bd10      	pop	{r4, pc}
	...

08003550 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name) {
 8003550:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < NUM_MODULE_PARAMS; i++) {
		if (!strcmp(name, (const char*) (modParam[i].paramName)))
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <IsModuleParameter+0x14>)
 8003554:	6899      	ldr	r1, [r3, #8]
 8003556:	f7fc fdd5 	bl	8000104 <strcmp>
 800355a:	4243      	negs	r3, r0
 800355c:	4158      	adcs	r0, r3
 800355e:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 8003560:	bd10      	pop	{r4, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000088 	.word	0x20000088

08003568 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string) {
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	0004      	movs	r4, r0
	for (uint8_t i = 0; i < NUM_MATH_OPERATORS; i++) {
		if (!strcmp(string, "="))
 800356c:	491b      	ldr	r1, [pc, #108]	; (80035dc <IsMathOperator+0x74>)
 800356e:	f7fc fdc9 	bl	8000104 <strcmp>
 8003572:	0006      	movs	r6, r0
 8003574:	2506      	movs	r5, #6
 8003576:	2e00      	cmp	r6, #0
 8003578:	d023      	beq.n	80035c2 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 800357a:	4919      	ldr	r1, [pc, #100]	; (80035e0 <IsMathOperator+0x78>)
 800357c:	0020      	movs	r0, r4
 800357e:	f7fc fdc1 	bl	8000104 <strcmp>
 8003582:	2800      	cmp	r0, #0
 8003584:	d01f      	beq.n	80035c6 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003586:	4917      	ldr	r1, [pc, #92]	; (80035e4 <IsMathOperator+0x7c>)
 8003588:	0020      	movs	r0, r4
 800358a:	f7fc fdbb 	bl	8000104 <strcmp>
 800358e:	2800      	cmp	r0, #0
 8003590:	d01b      	beq.n	80035ca <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003592:	4915      	ldr	r1, [pc, #84]	; (80035e8 <IsMathOperator+0x80>)
 8003594:	0020      	movs	r0, r4
 8003596:	f7fc fdb5 	bl	8000104 <strcmp>
 800359a:	2800      	cmp	r0, #0
 800359c:	d017      	beq.n	80035ce <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 800359e:	4913      	ldr	r1, [pc, #76]	; (80035ec <IsMathOperator+0x84>)
 80035a0:	0020      	movs	r0, r4
 80035a2:	f7fc fdaf 	bl	8000104 <strcmp>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d013      	beq.n	80035d2 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 80035aa:	4911      	ldr	r1, [pc, #68]	; (80035f0 <IsMathOperator+0x88>)
 80035ac:	0020      	movs	r0, r4
 80035ae:	f7fc fda9 	bl	8000104 <strcmp>
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d00f      	beq.n	80035d6 <IsMathOperator+0x6e>
 80035b6:	3d01      	subs	r5, #1
 80035b8:	b2ed      	uxtb	r5, r5
	for (uint8_t i = 0; i < NUM_MATH_OPERATORS; i++) {
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	d1db      	bne.n	8003576 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80035be:	2000      	movs	r0, #0
}
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80035c2:	2001      	movs	r0, #1
 80035c4:	e7fc      	b.n	80035c0 <IsMathOperator+0x58>
			return MATH_GREATER;
 80035c6:	2002      	movs	r0, #2
 80035c8:	e7fa      	b.n	80035c0 <IsMathOperator+0x58>
			return MATH_SMALLER;
 80035ca:	2003      	movs	r0, #3
 80035cc:	e7f8      	b.n	80035c0 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80035ce:	2004      	movs	r0, #4
 80035d0:	e7f6      	b.n	80035c0 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80035d2:	2005      	movs	r0, #5
 80035d4:	e7f4      	b.n	80035c0 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 80035d6:	2006      	movs	r0, #6
 80035d8:	e7f2      	b.n	80035c0 <IsMathOperator+0x58>
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	08015b90 	.word	0x08015b90
 80035e0:	08015b94 	.word	0x08015b94
 80035e4:	08015b98 	.word	0x08015b98
 80035e8:	08015b9c 	.word	0x08015b9c
 80035ec:	08015ba0 	.word	0x08015ba0
 80035f0:	08015ba4 	.word	0x08015ba4

080035f4 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore) {
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	b083      	sub	sp, #12
 80035f8:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK;

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 80035fa:	2401      	movs	r4, #1
		if (port != ignore) {
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 80035fc:	4d0d      	ldr	r5, [pc, #52]	; (8003634 <ExploreNeighbors+0x40>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 80035fe:	2603      	movs	r6, #3
		if (port != ignore) {
 8003600:	42a7      	cmp	r7, r4
 8003602:	d00f      	beq.n	8003624 <ExploreNeighbors+0x30>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <ExploreNeighbors+0x44>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	0a1a      	lsrs	r2, r3, #8
 800360a:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 800360c:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 800360e:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003610:	9600      	str	r6, [sp, #0]
 8003612:	230a      	movs	r3, #10
 8003614:	2200      	movs	r2, #0
 8003616:	2100      	movs	r1, #0
 8003618:	0020      	movs	r0, r4
 800361a:	f005 fce9 	bl	8008ff0 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800361e:	200a      	movs	r0, #10
 8003620:	f00a fafd 	bl	800dc1e <osDelay>
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8003624:	3401      	adds	r4, #1
 8003626:	b2e4      	uxtb	r4, r4
 8003628:	2c06      	cmp	r4, #6
 800362a:	d1e9      	bne.n	8003600 <ExploreNeighbors+0xc>
		}
	}

	return result;
}
 800362c:	2000      	movs	r0, #0
 800362e:	b003      	add	sp, #12
 8003630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	20000728 	.word	0x20000728
 8003638:	20000050 	.word	0x20000050

0800363c <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src) {
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363e:	46de      	mov	lr, fp
 8003640:	4657      	mov	r7, sl
 8003642:	464e      	mov	r6, r9
 8003644:	4645      	mov	r5, r8
 8003646:	b5e0      	push	{r5, r6, r7, lr}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK;
	uint8_t p = 0, m = 0, level = 0, untaged = 0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800364c:	4b49      	ldr	r3, [pc, #292]	; (8003774 <FindBroadcastRoutes+0x138>)
 800364e:	781d      	ldrb	r5, [r3, #0]
 8003650:	1deb      	adds	r3, r5, #7
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	466a      	mov	r2, sp
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	469d      	mov	sp, r3
 800365c:	466c      	mov	r4, sp

	/* 1. Initialize modules list and broadcast routes */

	for (m = 0; m < N; m++) {
 800365e:	2d00      	cmp	r5, #0
 8003660:	d00b      	beq.n	800367a <FindBroadcastRoutes+0x3e>
 8003662:	4a45      	ldr	r2, [pc, #276]	; (8003778 <FindBroadcastRoutes+0x13c>)
 8003664:	1e6e      	subs	r6, r5, #1
 8003666:	b2f6      	uxtb	r6, r6
 8003668:	3601      	adds	r6, #1
 800366a:	1936      	adds	r6, r6, r4
		modules[m] = 0;
 800366c:	2100      	movs	r1, #0
 800366e:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 8003670:	8011      	strh	r1, [r2, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	3202      	adds	r2, #2
	for (m = 0; m < N; m++) {
 8003676:	42b3      	cmp	r3, r6
 8003678:	d1f9      	bne.n	800366e <FindBroadcastRoutes+0x32>
	}
	modules[src - 1] = ++level;					// Tag the source
 800367a:	3801      	subs	r0, #1
 800367c:	2301      	movs	r3, #1
 800367e:	5423      	strb	r3, [r4, r0]
 8003680:	2216      	movs	r2, #22
 8003682:	4342      	muls	r2, r0
 8003684:	3202      	adds	r2, #2
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <FindBroadcastRoutes+0x140>)
 8003688:	18d2      	adds	r2, r2, r3
 800368a:	2100      	movs	r1, #0

	++level;												// Move one level

	for (p = 1; p <= NumOfPorts; p++) {
		if (array[src - 1][p]) {
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 800368c:	4e3a      	ldr	r6, [pc, #232]	; (8003778 <FindBroadcastRoutes+0x13c>)
 800368e:	0040      	lsls	r0, r0, #1
 8003690:	2301      	movs	r3, #1
 8003692:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 8003694:	3301      	adds	r3, #1
 8003696:	469c      	mov	ip, r3
 8003698:	60fd      	str	r5, [r7, #12]
 800369a:	46a3      	mov	fp, r4
 800369c:	e003      	b.n	80036a6 <FindBroadcastRoutes+0x6a>
 800369e:	3101      	adds	r1, #1
 80036a0:	3202      	adds	r2, #2
	for (p = 1; p <= NumOfPorts; p++) {
 80036a2:	2905      	cmp	r1, #5
 80036a4:	d011      	beq.n	80036ca <FindBroadcastRoutes+0x8e>
		if (array[src - 1][p]) {
 80036a6:	8813      	ldrh	r3, [r2, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f8      	beq.n	800369e <FindBroadcastRoutes+0x62>
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 80036ac:	5b85      	ldrh	r5, [r0, r6]
 80036ae:	46a9      	mov	r9, r5
 80036b0:	4645      	mov	r5, r8
 80036b2:	408d      	lsls	r5, r1
 80036b4:	46aa      	mov	sl, r5
 80036b6:	464d      	mov	r5, r9
 80036b8:	4654      	mov	r4, sl
 80036ba:	4325      	orrs	r5, r4
 80036bc:	5385      	strh	r5, [r0, r6]
			modules[(array[src - 1][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 80036be:	08db      	lsrs	r3, r3, #3
 80036c0:	445b      	add	r3, fp
 80036c2:	3b01      	subs	r3, #1
 80036c4:	4664      	mov	r4, ip
 80036c6:	701c      	strb	r4, [r3, #0]
 80036c8:	e7e9      	b.n	800369e <FindBroadcastRoutes+0x62>
 80036ca:	68fd      	ldr	r5, [r7, #12]
 80036cc:	465c      	mov	r4, fp
	++level;												// Move one level
 80036ce:	2302      	movs	r3, #2
 80036d0:	4699      	mov	r9, r3

	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do {
		untaged = 0;								// Reset the untaged counter
		++level;											// Move one level
 80036d2:	464b      	mov	r3, r9
 80036d4:	3301      	adds	r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4699      	mov	r9, r3

		for (m = 0; m < N; m++)					// Scan all modules in the list
 80036da:	2d00      	cmp	r5, #0
 80036dc:	d040      	beq.n	8003760 <FindBroadcastRoutes+0x124>
 80036de:	4827      	ldr	r0, [pc, #156]	; (800377c <FindBroadcastRoutes+0x140>)
 80036e0:	2100      	movs	r1, #0
		untaged = 0;								// Reset the untaged counter
 80036e2:	2600      	movs	r6, #0
				{
			if (modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 80036e4:	2301      	movs	r3, #1
 80036e6:	425b      	negs	r3, r3
 80036e8:	444b      	add	r3, r9
 80036ea:	469c      	mov	ip, r3
 80036ec:	e02c      	b.n	8003748 <FindBroadcastRoutes+0x10c>
 80036ee:	3201      	adds	r2, #1
					{
				for (p = 1; p <= NumOfPorts; p++)// Check all neighbors if they're not already broadcasted-to
 80036f0:	2a06      	cmp	r2, #6
 80036f2:	d021      	beq.n	8003738 <FindBroadcastRoutes+0xfc>
						{
					if (array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 80036f4:	0053      	lsls	r3, r2, #1
 80036f6:	5ac3      	ldrh	r3, [r0, r3]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f8      	beq.n	80036ee <FindBroadcastRoutes+0xb2>
 80036fc:	08db      	lsrs	r3, r3, #3
 80036fe:	3b01      	subs	r3, #1
 8003700:	5ce1      	ldrb	r1, [r4, r3]
 8003702:	2900      	cmp	r1, #0
 8003704:	d1f3      	bne.n	80036ee <FindBroadcastRoutes+0xb2>
							{
						bcastRoutes[m] |= (0x01 << (p - 1));
 8003706:	1e51      	subs	r1, r2, #1
 8003708:	468a      	mov	sl, r1
 800370a:	2101      	movs	r1, #1
 800370c:	4655      	mov	r5, sl
 800370e:	40a9      	lsls	r1, r5
 8003710:	468a      	mov	sl, r1
 8003712:	4919      	ldr	r1, [pc, #100]	; (8003778 <FindBroadcastRoutes+0x13c>)
 8003714:	4645      	mov	r5, r8
 8003716:	5a69      	ldrh	r1, [r5, r1]
 8003718:	468b      	mov	fp, r1
 800371a:	4651      	mov	r1, sl
 800371c:	465d      	mov	r5, fp
 800371e:	4329      	orrs	r1, r5
 8003720:	468a      	mov	sl, r1
 8003722:	4915      	ldr	r1, [pc, #84]	; (8003778 <FindBroadcastRoutes+0x13c>)
 8003724:	4645      	mov	r5, r8
 8003726:	4656      	mov	r6, sl
 8003728:	526e      	strh	r6, [r5, r1]
						modules[(array[m][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 800372a:	4649      	mov	r1, r9
 800372c:	54e1      	strb	r1, [r4, r3]
						++untaged;
 800372e:	68fe      	ldr	r6, [r7, #12]
 8003730:	3601      	adds	r6, #1
 8003732:	b2f3      	uxtb	r3, r6
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e7da      	b.n	80036ee <FindBroadcastRoutes+0xb2>
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68fe      	ldr	r6, [r7, #12]
 800373c:	687d      	ldr	r5, [r7, #4]
 800373e:	3101      	adds	r1, #1
 8003740:	3016      	adds	r0, #22
		for (m = 0; m < N; m++)					// Scan all modules in the list
 8003742:	b2cb      	uxtb	r3, r1
 8003744:	42ab      	cmp	r3, r5
 8003746:	d209      	bcs.n	800375c <FindBroadcastRoutes+0x120>
			if (modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 8003748:	5c63      	ldrb	r3, [r4, r1]
 800374a:	4563      	cmp	r3, ip
 800374c:	d1f7      	bne.n	800373e <FindBroadcastRoutes+0x102>
 800374e:	004b      	lsls	r3, r1, #1
 8003750:	4698      	mov	r8, r3
 8003752:	2201      	movs	r2, #1
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	60fe      	str	r6, [r7, #12]
 8003758:	607d      	str	r5, [r7, #4]
 800375a:	e7cb      	b.n	80036f4 <FindBroadcastRoutes+0xb8>
					}
				}
			}
		}
	} while (untaged);
 800375c:	2e00      	cmp	r6, #0
 800375e:	d1b8      	bne.n	80036d2 <FindBroadcastRoutes+0x96>

	return result;
}
 8003760:	2000      	movs	r0, #0
 8003762:	46bd      	mov	sp, r7
 8003764:	b005      	add	sp, #20
 8003766:	bc3c      	pop	{r2, r3, r4, r5}
 8003768:	4690      	mov	r8, r2
 800376a:	4699      	mov	r9, r3
 800376c:	46a2      	mov	sl, r4
 800376e:	46ab      	mov	fp, r5
 8003770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	2000001c 	.word	0x2000001c
 8003778:	200004e0 	.word	0x200004e0
 800377c:	200002a0 	.word	0x200002a0

08003780 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID) {
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	46de      	mov	lr, fp
 8003784:	4657      	mov	r7, sl
 8003786:	464e      	mov	r6, r9
 8003788:	4645      	mov	r5, r8
 800378a:	b5e0      	push	{r5, r6, r7, lr}
 800378c:	b08f      	sub	sp, #60	; 0x3c
 800378e:	0005      	movs	r5, r0
 8003790:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = { 0 };		// All nodes initially in Q (unvisited nodes)
 8003792:	2232      	movs	r2, #50	; 0x32
 8003794:	2100      	movs	r1, #0
 8003796:	a801      	add	r0, sp, #4
 8003798:	f00f fd1e 	bl	80131d8 <memset>
	uint8_t alt = 0;
	uint8_t u = 0;
	uint8_t v = 0;
	uint8_t j = 0;

	memset(route, 0, sizeof(route));
 800379c:	221a      	movs	r2, #26
 800379e:	2100      	movs	r1, #0
 80037a0:	485a      	ldr	r0, [pc, #360]	; (800390c <FindRoute+0x18c>)
 80037a2:	f00f fd19 	bl	80131d8 <memset>
	routeDist[sourceID - 1] = 0;               // Distance from source to source
 80037a6:	0029      	movs	r1, r5
 80037a8:	1e68      	subs	r0, r5, #1
 80037aa:	2300      	movs	r3, #0
 80037ac:	4a58      	ldr	r2, [pc, #352]	; (8003910 <FindRoute+0x190>)
 80037ae:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] = 0; // Previous node in optimal path initialization undefined
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <FindRoute+0x194>)
 80037b2:	5413      	strb	r3, [r2, r0]
 80037b4:	2516      	movs	r5, #22
 80037b6:	4345      	muls	r5, r0
 80037b8:	3502      	adds	r5, #2
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <FindRoute+0x198>)
 80037bc:	18ed      	adds	r5, r5, r3
 80037be:	002a      	movs	r2, r5

	/* Check adjacent neighbors first! */
	for (int col = 1; col <= 6; col++) {
 80037c0:	2001      	movs	r0, #1
		if (array[sourceID - 1][col]
				&& ((array[sourceID - 1][col] >> 3) == desID)) {
 80037c2:	4653      	mov	r3, sl
 80037c4:	b29c      	uxth	r4, r3
 80037c6:	e003      	b.n	80037d0 <FindRoute+0x50>
	for (int col = 1; col <= 6; col++) {
 80037c8:	3001      	adds	r0, #1
 80037ca:	3202      	adds	r2, #2
 80037cc:	2807      	cmp	r0, #7
 80037ce:	d00f      	beq.n	80037f0 <FindRoute+0x70>
		if (array[sourceID - 1][col]
 80037d0:	8813      	ldrh	r3, [r2, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f8      	beq.n	80037c8 <FindRoute+0x48>
				&& ((array[sourceID - 1][col] >> 3) == desID)) {
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	42a3      	cmp	r3, r4
 80037da:	d1f5      	bne.n	80037c8 <FindRoute+0x48>
			routeDist[desID - 1] = 1;
 80037dc:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <FindRoute+0x190>)
 80037de:	4453      	add	r3, sl
 80037e0:	3b01      	subs	r3, #1
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 80037e6:	4b49      	ldr	r3, [pc, #292]	; (800390c <FindRoute+0x18c>)
 80037e8:	4652      	mov	r2, sl
 80037ea:	701a      	strb	r2, [r3, #0]
			return col;
 80037ec:	b2c0      	uxtb	r0, r0
 80037ee:	e085      	b.n	80038fc <FindRoute+0x17c>
		}
	}

	/* Initialization */
	for (int i = 1; i <= N; i++) {
 80037f0:	4b4a      	ldr	r3, [pc, #296]	; (800391c <FindRoute+0x19c>)
 80037f2:	781e      	ldrb	r6, [r3, #0]
 80037f4:	2e00      	cmp	r6, #0
 80037f6:	dd11      	ble.n	800381c <FindRoute+0x9c>
 80037f8:	2301      	movs	r3, #1
		if (i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
				{
			routeDist[i - 1] = 0xFF; // Unknown distance function from source to i
 80037fa:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] = 0;   // Previous node in optimal path from source
 80037fc:	4f45      	ldr	r7, [pc, #276]	; (8003914 <FindRoute+0x194>)
 80037fe:	2000      	movs	r0, #0
 8003800:	46ac      	mov	ip, r5
 8003802:	e002      	b.n	800380a <FindRoute+0x8a>
	for (int i = 1; i <= N; i++) {
 8003804:	3301      	adds	r3, #1
 8003806:	42b3      	cmp	r3, r6
 8003808:	dc07      	bgt.n	800381a <FindRoute+0x9a>
		if (i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 800380a:	4299      	cmp	r1, r3
 800380c:	d0fa      	beq.n	8003804 <FindRoute+0x84>
			routeDist[i - 1] = 0xFF; // Unknown distance function from source to i
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	4d3f      	ldr	r5, [pc, #252]	; (8003910 <FindRoute+0x190>)
 8003812:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] = 0;   // Previous node in optimal path from source
 8003814:	18ba      	adds	r2, r7, r2
 8003816:	7010      	strb	r0, [r2, #0]
 8003818:	e7f4      	b.n	8003804 <FindRoute+0x84>
 800381a:	4665      	mov	r5, ip
	uint8_t u = 0;
 800381c:	2400      	movs	r4, #0
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <FindRoute+0x198>)
 8003820:	4698      	mov	r8, r3
 8003822:	230e      	movs	r3, #14
 8003824:	4443      	add	r3, r8
 8003826:	4656      	mov	r6, sl
 8003828:	469b      	mov	fp, r3
 800382a:	46a9      	mov	r9, r5
 800382c:	e01d      	b.n	800386a <FindRoute+0xea>
 800382e:	464d      	mov	r5, r9
 8003830:	46b2      	mov	sl, r6
		}
	}

	/* Algorithm */
	while (!QnotEmpty(Q)) {
		u = minArr(routeDist, Q) + 1;				// Source node in first case
 8003832:	0034      	movs	r4, r6
 8003834:	e034      	b.n	80038a0 <FindRoute+0x120>
 8003836:	3102      	adds	r1, #2
			goto finishedRoute;
		} else
			Q[u - 1] = 1;									// Remove u from Q

		/* For each neighbor v where v is still in Q. */
		for (uint8_t n = 1; n <= 6; n++)      		// Check all module ports
 8003838:	4281      	cmp	r1, r0
 800383a:	d015      	beq.n	8003868 <FindRoute+0xe8>
				{
			if (array[u - 1][n])		// There's a neighbor v at this port n
 800383c:	880b      	ldrh	r3, [r1, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f9      	beq.n	8003836 <FindRoute+0xb6>
			{
				v = (array[u - 1][n] >> 3);
 8003842:	08db      	lsrs	r3, r3, #3
				if (!Q[v - 1])								// v is still in Q
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	5cd7      	ldrb	r7, [r2, r3]
 800384a:	2f00      	cmp	r7, #0
 800384c:	d1f3      	bne.n	8003836 <FindRoute+0xb6>
				{
					alt = routeDist[u - 1] + 1;					// Add one hop
 800384e:	4f30      	ldr	r7, [pc, #192]	; (8003910 <FindRoute+0x190>)
 8003850:	5d7f      	ldrb	r7, [r7, r5]
 8003852:	3701      	adds	r7, #1
 8003854:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v - 1]) // A shorter path to v has been found
 8003856:	4e2e      	ldr	r6, [pc, #184]	; (8003910 <FindRoute+0x190>)
 8003858:	5cf6      	ldrb	r6, [r6, r3]
 800385a:	42be      	cmp	r6, r7
 800385c:	d9eb      	bls.n	8003836 <FindRoute+0xb6>
							{
						routeDist[v - 1] = alt;
 800385e:	4e2c      	ldr	r6, [pc, #176]	; (8003910 <FindRoute+0x190>)
 8003860:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] = u;
 8003862:	4e2c      	ldr	r6, [pc, #176]	; (8003914 <FindRoute+0x194>)
 8003864:	54f4      	strb	r4, [r6, r3]
 8003866:	e7e6      	b.n	8003836 <FindRoute+0xb6>
 8003868:	4656      	mov	r6, sl
	while (!QnotEmpty(Q)) {
 800386a:	a801      	add	r0, sp, #4
 800386c:	f7ff f964 	bl	8002b38 <QnotEmpty>
 8003870:	2800      	cmp	r0, #0
 8003872:	d113      	bne.n	800389c <FindRoute+0x11c>
		u = minArr(routeDist, Q) + 1;				// Source node in first case
 8003874:	a901      	add	r1, sp, #4
 8003876:	4826      	ldr	r0, [pc, #152]	; (8003910 <FindRoute+0x190>)
 8003878:	f7ff f940 	bl	8002afc <minArr>
 800387c:	3001      	adds	r0, #1
 800387e:	b2c4      	uxtb	r4, r0
		if (u == desID) {
 8003880:	42b4      	cmp	r4, r6
 8003882:	d0d4      	beq.n	800382e <FindRoute+0xae>
			Q[u - 1] = 1;									// Remove u from Q
 8003884:	1e65      	subs	r5, r4, #1
 8003886:	ab01      	add	r3, sp, #4
 8003888:	2201      	movs	r2, #1
 800388a:	555a      	strb	r2, [r3, r5]
 800388c:	2016      	movs	r0, #22
 800388e:	4368      	muls	r0, r5
 8003890:	1c81      	adds	r1, r0, #2
 8003892:	4441      	add	r1, r8
 8003894:	4458      	add	r0, fp
				if (!Q[v - 1])								// v is still in Q
 8003896:	001a      	movs	r2, r3
 8003898:	46b2      	mov	sl, r6
 800389a:	e7cf      	b.n	800383c <FindRoute+0xbc>
 800389c:	464d      	mov	r5, r9
 800389e:	46b2      	mov	sl, r6
	}

	finishedRoute:

	/* Build the virtual route */
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <FindRoute+0x194>)
 80038a2:	191b      	adds	r3, r3, r4
 80038a4:	3b01      	subs	r3, #1
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d00e      	beq.n	80038cc <FindRoute+0x14c>
	{
		route[j++] = u;          			// Push the vertex onto the stack
 80038ae:	4917      	ldr	r1, [pc, #92]	; (800390c <FindRoute+0x18c>)
 80038b0:	468c      	mov	ip, r1
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 80038b2:	4e18      	ldr	r6, [pc, #96]	; (8003914 <FindRoute+0x194>)
 80038b4:	e000      	b.n	80038b8 <FindRoute+0x138>
 80038b6:	000a      	movs	r2, r1
		route[j++] = u;          			// Push the vertex onto the stack
 80038b8:	1c58      	adds	r0, r3, #1
 80038ba:	4661      	mov	r1, ip
 80038bc:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 80038be:	18b3      	adds	r3, r6, r2
 80038c0:	3b01      	subs	r3, #1
 80038c2:	7819      	ldrb	r1, [r3, #0]
 80038c4:	0014      	movs	r4, r2
		route[j++] = u;          			// Push the vertex onto the stack
 80038c6:	b2c3      	uxtb	r3, r0
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d1f4      	bne.n	80038b6 <FindRoute+0x136>
		u = routePrev[u - 1];           	// Traverse from target to source
	}

	/* Check which port leads to the correct module */
	for (int col = 1; col <= 6; col++) {
 80038cc:	2001      	movs	r0, #1
		if (array[sourceID - 1][col]
				&& ((array[sourceID - 1][col] >> 3)
						== route[routeDist[desID - 1] - 1])) {
 80038ce:	490f      	ldr	r1, [pc, #60]	; (800390c <FindRoute+0x18c>)
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <FindRoute+0x190>)
 80038d2:	4453      	add	r3, sl
 80038d4:	001f      	movs	r7, r3
 80038d6:	3f01      	subs	r7, #1
 80038d8:	e003      	b.n	80038e2 <FindRoute+0x162>
	for (int col = 1; col <= 6; col++) {
 80038da:	3001      	adds	r0, #1
 80038dc:	3502      	adds	r5, #2
 80038de:	2807      	cmp	r0, #7
 80038e0:	d00b      	beq.n	80038fa <FindRoute+0x17a>
		if (array[sourceID - 1][col]
 80038e2:	882b      	ldrh	r3, [r5, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f8      	beq.n	80038da <FindRoute+0x15a>
						== route[routeDist[desID - 1] - 1])) {
 80038e8:	783a      	ldrb	r2, [r7, #0]
 80038ea:	188a      	adds	r2, r1, r2
 80038ec:	3a01      	subs	r2, #1
				&& ((array[sourceID - 1][col] >> 3)
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d1f1      	bne.n	80038da <FindRoute+0x15a>
			return col;
 80038f6:	b2c0      	uxtb	r0, r0
 80038f8:	e000      	b.n	80038fc <FindRoute+0x17c>
		}
	}

	return 0;
 80038fa:	2000      	movs	r0, #0
}
 80038fc:	b00f      	add	sp, #60	; 0x3c
 80038fe:	bc3c      	pop	{r2, r3, r4, r5}
 8003900:	4690      	mov	r8, r2
 8003902:	4699      	mov	r9, r3
 8003904:	46a2      	mov	sl, r4
 8003906:	46ab      	mov	fp, r5
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	20006234 	.word	0x20006234
 8003910:	200008fc 	.word	0x200008fc
 8003914:	20000918 	.word	0x20000918
 8003918:	200002a0 	.word	0x200002a0
 800391c:	2000001c 	.word	0x2000001c

08003920 <remoteBootloaderUpdate>:
		uint8_t outport) {
 8003920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003922:	b087      	sub	sp, #28
 8003924:	0007      	movs	r7, r0
 8003926:	000e      	movs	r6, r1
 8003928:	9205      	str	r2, [sp, #20]
 800392a:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 800392c:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <remoteBootloaderUpdate+0xec>)
 800392e:	7818      	ldrb	r0, [r3, #0]
 8003930:	f7ff ff26 	bl	8003780 <FindRoute>
 8003934:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) { /* This is a 'via port' update and I'm the last module */
 8003936:	2d00      	cmp	r5, #0
 8003938:	d020      	beq.n	800397c <remoteBootloaderUpdate+0x5c>
 800393a:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <remoteBootloaderUpdate+0xec>)
 800393c:	781c      	ldrb	r4, [r3, #0]
 800393e:	42b4      	cmp	r4, r6
 8003940:	d05f      	beq.n	8003a02 <remoteBootloaderUpdate+0xe2>
	if (src == myID) {
 8003942:	42bc      	cmp	r4, r7
 8003944:	d034      	beq.n	80039b0 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport = 0, lastModule = 0;
 8003946:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003948:	9805      	ldr	r0, [sp, #20]
 800394a:	f7ff fdeb 	bl	8003524 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800394e:	9804      	ldr	r0, [sp, #16]
 8003950:	f7ff fde8 	bl	8003524 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003954:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <remoteBootloaderUpdate+0xec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	42a3      	cmp	r3, r4
 800395a:	d046      	beq.n	80039ea <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL,
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <remoteBootloaderUpdate+0xec>)
 800395e:	7819      	ldrb	r1, [r3, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	9303      	str	r3, [sp, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	3303      	adds	r3, #3
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	000b      	movs	r3, r1
 8003970:	9a04      	ldr	r2, [sp, #16]
 8003972:	9805      	ldr	r0, [sp, #20]
 8003974:	f005 fd8a 	bl	800948c <StartScastDMAStream>
}
 8003978:	b007      	add	sp, #28
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst)== 1)
 800397c:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <remoteBootloaderUpdate+0xf0>)
 800397e:	199b      	adds	r3, r3, r6
 8003980:	3b01      	subs	r3, #1
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	2a01      	cmp	r2, #1
 8003986:	d010      	beq.n	80039aa <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003988:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <remoteBootloaderUpdate+0xf4>)
 800398a:	189b      	adds	r3, r3, r2
 800398c:	3b01      	subs	r3, #1
 800398e:	781c      	ldrb	r4, [r3, #0]
	if (src == myID) {
 8003990:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <remoteBootloaderUpdate+0xec>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	42bb      	cmp	r3, r7
 8003996:	d1d7      	bne.n	8003948 <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003998:	f00a fa56 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 800399c:	0007      	movs	r7, r0
			sprintf((char*) pcOutputString, pcRemoteBootloaderUpdateMessage,
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <remoteBootloaderUpdate+0xf8>)
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	0032      	movs	r2, r6
 80039a4:	f00f fd16 	bl	80133d4 <siprintf>
 80039a8:	e00d      	b.n	80039c6 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <remoteBootloaderUpdate+0xec>)
 80039ac:	781c      	ldrb	r4, [r3, #0]
 80039ae:	e7ef      	b.n	8003990 <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80039b0:	f00a fa4a 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 80039b4:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0;
 80039b6:	2400      	movs	r4, #0
			sprintf((char*) pcOutputString,
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <remoteBootloaderUpdate+0xfc>)
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	002b      	movs	r3, r5
 80039be:	0032      	movs	r2, r6
 80039c0:	0038      	movs	r0, r7
 80039c2:	f00f fd07 	bl	80133d4 <siprintf>
		strcat((char*) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <remoteBootloaderUpdate+0x100>)
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	0038      	movs	r0, r7
 80039cc:	f00f fd22 	bl	8013414 <strcat>
				strlen((char*) pcOutputString), cmd50ms);
 80039d0:	0038      	movs	r0, r7
 80039d2:	f7fc fba1 	bl	8000118 <strlen>
		writePxITMutex(inport, (char*) pcOutputString,
 80039d6:	b282      	uxth	r2, r0
 80039d8:	2332      	movs	r3, #50	; 0x32
 80039da:	0039      	movs	r1, r7
 80039dc:	9805      	ldr	r0, [sp, #20]
 80039de:	f00a f819 	bl	800da14 <writePxITMutex>
		Delay_ms(100);
 80039e2:	2064      	movs	r0, #100	; 0x64
 80039e4:	f00c f946 	bl	800fc74 <HAL_Delay>
 80039e8:	e7ae      	b.n	8003948 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 80039ea:	9804      	ldr	r0, [sp, #16]
 80039ec:	f009 ffcc 	bl	800d988 <GetUart>
 80039f0:	2101      	movs	r1, #1
 80039f2:	f00a f85f 	bl	800dab4 <SwapUartPins>
 80039f6:	e7b1      	b.n	800395c <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80039f8:	f00a fa26 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 80039fc:	0007      	movs	r7, r0
		myOutport = outport;
 80039fe:	9504      	str	r5, [sp, #16]
 8003a00:	e7da      	b.n	80039b8 <remoteBootloaderUpdate+0x98>
	if (src == myID) {
 8003a02:	42bc      	cmp	r4, r7
 8003a04:	d0f8      	beq.n	80039f8 <remoteBootloaderUpdate+0xd8>
		myOutport = outport;
 8003a06:	9504      	str	r5, [sp, #16]
 8003a08:	e79e      	b.n	8003948 <remoteBootloaderUpdate+0x28>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000866 	.word	0x20000866
 8003a10:	200008fc 	.word	0x200008fc
 8003a14:	20006234 	.word	0x20006234
 8003a18:	20000078 	.word	0x20000078
 8003a1c:	2000007c 	.word	0x2000007c
 8003a20:	20000080 	.word	0x20000080

08003a24 <DisplayTopology>:

/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port) {
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	46d6      	mov	lr, sl
 8003a28:	464f      	mov	r7, r9
 8003a2a:	4646      	mov	r6, r8
 8003a2c:	b5c0      	push	{r6, r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	0005      	movs	r5, r0
 8003a32:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003a34:	4c56      	ldr	r4, [pc, #344]	; (8003b90 <DisplayTopology+0x16c>)
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <DisplayTopology+0x170>)
 8003a38:	0022      	movs	r2, r4
 8003a3a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a3c:	c243      	stmia	r2!, {r0, r1, r6}
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	889b      	ldrh	r3, [r3, #4]
 8003a44:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003a46:	0020      	movs	r0, r4
 8003a48:	f7fc fb66 	bl	8000118 <strlen>
 8003a4c:	b282      	uxth	r2, r0
 8003a4e:	2301      	movs	r3, #1
 8003a50:	425b      	negs	r3, r3
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	3333      	adds	r3, #51	; 0x33
 8003a56:	0021      	movs	r1, r4
 8003a58:	0028      	movs	r0, r5
 8003a5a:	f009 ffb3 	bl	800d9c4 <writePxMutex>
 8003a5e:	2401      	movs	r4, #1
			HAL_MAX_DELAY);
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
		sprintf(pcUserMessage, "P%d\t", i);
 8003a60:	4f4d      	ldr	r7, [pc, #308]	; (8003b98 <DisplayTopology+0x174>)
 8003a62:	4d4b      	ldr	r5, [pc, #300]	; (8003b90 <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003a64:	2601      	movs	r6, #1
 8003a66:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8003a68:	0022      	movs	r2, r4
 8003a6a:	0039      	movs	r1, r7
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	f00f fcb1 	bl	80133d4 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003a72:	0028      	movs	r0, r5
 8003a74:	f7fc fb50 	bl	8000118 <strlen>
 8003a78:	b282      	uxth	r2, r0
 8003a7a:	9600      	str	r6, [sp, #0]
 8003a7c:	2332      	movs	r3, #50	; 0x32
 8003a7e:	0029      	movs	r1, r5
 8003a80:	9803      	ldr	r0, [sp, #12]
 8003a82:	f009 ff9f 	bl	800d9c4 <writePxMutex>
 8003a86:	3401      	adds	r4, #1
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8003a88:	2c06      	cmp	r4, #6
 8003a8a:	d1ed      	bne.n	8003a68 <DisplayTopology+0x44>
				HAL_MAX_DELAY);
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	425b      	negs	r3, r3
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	3333      	adds	r3, #51	; 0x33
 8003a94:	2203      	movs	r2, #3
 8003a96:	4941      	ldr	r1, [pc, #260]	; (8003b9c <DisplayTopology+0x178>)
 8003a98:	9803      	ldr	r0, [sp, #12]
 8003a9a:	f009 ff93 	bl	800d9c4 <writePxMutex>

	/* Print each row */
	for (uint8_t row = 0; row < N; row++) {
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <DisplayTopology+0x17c>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d065      	beq.n	8003b72 <DisplayTopology+0x14e>
 8003aa6:	2600      	movs	r6, #0
		sprintf(pcUserMessage, "Module %d:\t", row + 1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003aa8:	2701      	movs	r7, #1
 8003aaa:	427f      	negs	r7, r7
				HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003aac:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <DisplayTopology+0x180>)
 8003aae:	4699      	mov	r9, r3
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	444b      	add	r3, r9
 8003ab4:	469a      	mov	sl, r3
 8003ab6:	e02a      	b.n	8003b0e <DisplayTopology+0xea>
		/* Connections */
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t", 0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col] >> 3),
 8003ab8:	2307      	movs	r3, #7
 8003aba:	4013      	ands	r3, r2
 8003abc:	08d2      	lsrs	r2, r2, #3
 8003abe:	493a      	ldr	r1, [pc, #232]	; (8003ba8 <DisplayTopology+0x184>)
 8003ac0:	4833      	ldr	r0, [pc, #204]	; (8003b90 <DisplayTopology+0x16c>)
 8003ac2:	f00f fc87 	bl	80133d4 <siprintf>
						(array[row][col] & 0x07));
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003ac6:	4d32      	ldr	r5, [pc, #200]	; (8003b90 <DisplayTopology+0x16c>)
 8003ac8:	0028      	movs	r0, r5
 8003aca:	f7fc fb25 	bl	8000118 <strlen>
 8003ace:	b282      	uxth	r2, r0
 8003ad0:	9700      	str	r7, [sp, #0]
 8003ad2:	2332      	movs	r3, #50	; 0x32
 8003ad4:	0029      	movs	r1, r5
 8003ad6:	9803      	ldr	r0, [sp, #12]
 8003ad8:	f009 ff74 	bl	800d9c4 <writePxMutex>
 8003adc:	3402      	adds	r4, #2
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
 8003ade:	42b4      	cmp	r4, r6
 8003ae0:	d007      	beq.n	8003af2 <DisplayTopology+0xce>
			if (!array[row][col])
 8003ae2:	8822      	ldrh	r2, [r4, #0]
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d1e7      	bne.n	8003ab8 <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t", 0);
 8003ae8:	4930      	ldr	r1, [pc, #192]	; (8003bac <DisplayTopology+0x188>)
 8003aea:	4829      	ldr	r0, [pc, #164]	; (8003b90 <DisplayTopology+0x16c>)
 8003aec:	f00f fc72 	bl	80133d4 <siprintf>
 8003af0:	e7e9      	b.n	8003ac6 <DisplayTopology+0xa2>
 8003af2:	4646      	mov	r6, r8
					HAL_MAX_DELAY);
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8003af4:	9700      	str	r7, [sp, #0]
 8003af6:	2332      	movs	r3, #50	; 0x32
 8003af8:	2202      	movs	r2, #2
 8003afa:	492d      	ldr	r1, [pc, #180]	; (8003bb0 <DisplayTopology+0x18c>)
 8003afc:	9803      	ldr	r0, [sp, #12]
 8003afe:	f009 ff61 	bl	800d9c4 <writePxMutex>
	for (uint8_t row = 0; row < N; row++) {
 8003b02:	3601      	adds	r6, #1
 8003b04:	b2f6      	uxtb	r6, r6
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <DisplayTopology+0x17c>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	42b3      	cmp	r3, r6
 8003b0c:	d931      	bls.n	8003b72 <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t", row + 1);
 8003b0e:	1c72      	adds	r2, r6, #1
 8003b10:	4c1f      	ldr	r4, [pc, #124]	; (8003b90 <DisplayTopology+0x16c>)
 8003b12:	4928      	ldr	r1, [pc, #160]	; (8003bb4 <DisplayTopology+0x190>)
 8003b14:	0020      	movs	r0, r4
 8003b16:	f00f fc5d 	bl	80133d4 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003b1a:	0020      	movs	r0, r4
 8003b1c:	f7fc fafc 	bl	8000118 <strlen>
 8003b20:	b282      	uxth	r2, r0
 8003b22:	9700      	str	r7, [sp, #0]
 8003b24:	2332      	movs	r3, #50	; 0x32
 8003b26:	0021      	movs	r1, r4
 8003b28:	9803      	ldr	r0, [sp, #12]
 8003b2a:	f009 ff4b 	bl	800d9c4 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003b2e:	2516      	movs	r5, #22
 8003b30:	4375      	muls	r5, r6
 8003b32:	464b      	mov	r3, r9
 8003b34:	5aeb      	ldrh	r3, [r5, r3]
 8003b36:	0059      	lsls	r1, r3, #1
 8003b38:	18c9      	adds	r1, r1, r3
 8003b3a:	0049      	lsls	r1, r1, #1
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <DisplayTopology+0x194>)
 8003b3e:	18c9      	adds	r1, r1, r3
 8003b40:	2205      	movs	r2, #5
 8003b42:	0020      	movs	r0, r4
 8003b44:	f00f fc9b 	bl	801347e <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8003b48:	9700      	str	r7, [sp, #0]
 8003b4a:	2332      	movs	r3, #50	; 0x32
 8003b4c:	2205      	movs	r2, #5
 8003b4e:	0021      	movs	r1, r4
 8003b50:	9c03      	ldr	r4, [sp, #12]
 8003b52:	0020      	movs	r0, r4
 8003b54:	f009 ff36 	bl	800d9c4 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8003b58:	9700      	str	r7, [sp, #0]
 8003b5a:	2332      	movs	r3, #50	; 0x32
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4917      	ldr	r1, [pc, #92]	; (8003bbc <DisplayTopology+0x198>)
 8003b60:	0020      	movs	r0, r4
 8003b62:	f009 ff2f 	bl	800d9c4 <writePxMutex>
 8003b66:	1cac      	adds	r4, r5, #2
 8003b68:	444c      	add	r4, r9
 8003b6a:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t", 0);
 8003b6c:	46b0      	mov	r8, r6
 8003b6e:	002e      	movs	r6, r5
 8003b70:	e7b7      	b.n	8003ae2 <DisplayTopology+0xbe>
	}

	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003b72:	2301      	movs	r3, #1
 8003b74:	425b      	negs	r3, r3
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	3333      	adds	r3, #51	; 0x33
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4910      	ldr	r1, [pc, #64]	; (8003bc0 <DisplayTopology+0x19c>)
 8003b7e:	9803      	ldr	r0, [sp, #12]
 8003b80:	f009 ff20 	bl	800d9c4 <writePxMutex>
}
 8003b84:	b004      	add	sp, #16
 8003b86:	bc1c      	pop	{r2, r3, r4}
 8003b88:	4690      	mov	r8, r2
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	46a2      	mov	sl, r4
 8003b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b90:	20000890 	.word	0x20000890
 8003b94:	08015b54 	.word	0x08015b54
 8003b98:	08015b68 	.word	0x08015b68
 8003b9c:	08016fc8 	.word	0x08016fc8
 8003ba0:	2000001c 	.word	0x2000001c
 8003ba4:	200002a0 	.word	0x200002a0
 8003ba8:	08015b80 	.word	0x08015b80
 8003bac:	08015b7c 	.word	0x08015b7c
 8003bb0:	080159fc 	.word	0x080159fc
 8003bb4:	08015b70 	.word	0x08015b70
 8003bb8:	08015bbc 	.word	0x08015bbc
 8003bbc:	08015b64 	.word	0x08015b64
 8003bc0:	08018678 	.word	0x08018678

08003bc4 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port) {
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	46c6      	mov	lr, r8
 8003bc8:	b500      	push	{lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	0005      	movs	r5, r0
 8003bce:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8003bd0:	4c30      	ldr	r4, [pc, #192]	; (8003c94 <DisplayPortsDir+0xd0>)
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <DisplayPortsDir+0xd4>)
 8003bd4:	0022      	movs	r2, r4
 8003bd6:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003bd8:	c243      	stmia	r2!, {r0, r1, r6}
 8003bda:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003bdc:	c243      	stmia	r2!, {r0, r1, r6}
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003be2:	0020      	movs	r0, r4
 8003be4:	f7fc fa98 	bl	8000118 <strlen>
 8003be8:	b282      	uxth	r2, r0
 8003bea:	2301      	movs	r3, #1
 8003bec:	425b      	negs	r3, r3
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	3333      	adds	r3, #51	; 0x33
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	f009 fee5 	bl	800d9c4 <writePxMutex>
			HAL_MAX_DELAY);

	for (uint8_t i = 1; i <= N; i++) {
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <DisplayPortsDir+0xd8>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4690      	mov	r8, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d02c      	beq.n	8003c60 <DisplayPortsDir+0x9c>
		for (uint8_t p = 1; p <= MaxNumOfPorts; p++) {
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003c06:	4e26      	ldr	r6, [pc, #152]	; (8003ca0 <DisplayPortsDir+0xdc>)
 8003c08:	e025      	b.n	8003c56 <DisplayPortsDir+0x92>
 8003c0a:	0023      	movs	r3, r4
		for (uint8_t p = 1; p <= MaxNumOfPorts; p++) {
 8003c0c:	2c0a      	cmp	r4, #10
 8003c0e:	d01a      	beq.n	8003c46 <DisplayPortsDir+0x82>
 8003c10:	1c5c      	adds	r4, r3, #1
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003c12:	5ba9      	ldrh	r1, [r5, r6]
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	0212      	lsls	r2, r2, #8
 8003c18:	411a      	asrs	r2, r3
 8003c1a:	420a      	tst	r2, r1
 8003c1c:	d0f5      	beq.n	8003c0a <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8003c1e:	4f1d      	ldr	r7, [pc, #116]	; (8003c94 <DisplayPortsDir+0xd0>)
 8003c20:	0023      	movs	r3, r4
 8003c22:	4642      	mov	r2, r8
 8003c24:	491f      	ldr	r1, [pc, #124]	; (8003ca4 <DisplayPortsDir+0xe0>)
 8003c26:	0038      	movs	r0, r7
 8003c28:	f00f fbd4 	bl	80133d4 <siprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage),
 8003c2c:	0038      	movs	r0, r7
 8003c2e:	f7fc fa73 	bl	8000118 <strlen>
 8003c32:	b282      	uxth	r2, r0
 8003c34:	2301      	movs	r3, #1
 8003c36:	425b      	negs	r3, r3
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	3333      	adds	r3, #51	; 0x33
 8003c3c:	0039      	movs	r1, r7
 8003c3e:	9803      	ldr	r0, [sp, #12]
 8003c40:	f009 fec0 	bl	800d9c4 <writePxMutex>
 8003c44:	e7e1      	b.n	8003c0a <DisplayPortsDir+0x46>
	for (uint8_t i = 1; i <= N; i++) {
 8003c46:	4643      	mov	r3, r8
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	4698      	mov	r8, r3
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <DisplayPortsDir+0xd8>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	4543      	cmp	r3, r8
 8003c54:	d304      	bcc.n	8003c60 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port) {
 8003c56:	2300      	movs	r3, #0
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003c58:	4642      	mov	r2, r8
 8003c5a:	1e55      	subs	r5, r2, #1
 8003c5c:	006d      	lsls	r5, r5, #1
 8003c5e:	e7d7      	b.n	8003c10 <DisplayPortsDir+0x4c>
						cmd50ms, HAL_MAX_DELAY);
			}
		}
	}

	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8003c60:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <DisplayPortsDir+0xd0>)
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <DisplayPortsDir+0xe4>)
 8003c64:	0022      	movs	r2, r4
 8003c66:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c68:	c223      	stmia	r2!, {r0, r1, r5}
 8003c6a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c6c:	c223      	stmia	r2!, {r0, r1, r5}
 8003c6e:	cb03      	ldmia	r3!, {r0, r1}
 8003c70:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003c72:	0020      	movs	r0, r4
 8003c74:	f7fc fa50 	bl	8000118 <strlen>
 8003c78:	b282      	uxth	r2, r0
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	3333      	adds	r3, #51	; 0x33
 8003c82:	0021      	movs	r1, r4
 8003c84:	9803      	ldr	r0, [sp, #12]
 8003c86:	f009 fe9d 	bl	800d9c4 <writePxMutex>
			HAL_MAX_DELAY);
}
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bc04      	pop	{r2}
 8003c8e:	4690      	mov	r8, r2
 8003c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000890 	.word	0x20000890
 8003c98:	08015b04 	.word	0x08015b04
 8003c9c:	2000001c 	.word	0x2000001c
 8003ca0:	200065d8 	.word	0x200065d8
 8003ca4:	08015b20 	.word	0x08015b20
 8003ca8:	08015b34 	.word	0x08015b34

08003cac <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port) {
 8003cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cae:	46d6      	mov	lr, sl
 8003cb0:	b500      	push	{lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp = 0;

	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003cb6:	f00a f8c7 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 8003cba:	0004      	movs	r4, r0

	strcpy((char*) pcOutputString, "");
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	7003      	strb	r3, [r0, #0]

	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8003cc0:	4b8d      	ldr	r3, [pc, #564]	; (8003ef8 <DisplayModuleStatus+0x24c>)
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	4d8d      	ldr	r5, [pc, #564]	; (8003efc <DisplayModuleStatus+0x250>)
 8003cc6:	498e      	ldr	r1, [pc, #568]	; (8003f00 <DisplayModuleStatus+0x254>)
 8003cc8:	0028      	movs	r0, r5
 8003cca:	f00f fb83 	bl	80133d4 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003cce:	0029      	movs	r1, r5
 8003cd0:	0020      	movs	r0, r4
 8003cd2:	f00f fb9f 	bl	8013414 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8003cd6:	4b8b      	ldr	r3, [pc, #556]	; (8003f04 <DisplayModuleStatus+0x258>)
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	498b      	ldr	r1, [pc, #556]	; (8003f08 <DisplayModuleStatus+0x25c>)
 8003cdc:	0028      	movs	r0, r5
 8003cde:	f00f fb79 	bl	80133d4 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003ce2:	0029      	movs	r1, r5
 8003ce4:	0020      	movs	r0, r4
 8003ce6:	f00f fb95 	bl	8013414 <strcat>

	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor,
 8003cea:	2304      	movs	r3, #4
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	3b02      	subs	r3, #2
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4986      	ldr	r1, [pc, #536]	; (8003f0c <DisplayModuleStatus+0x260>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f00f fb6d 	bl	80133d4 <siprintf>
			_firmMinor, _firmPatch);
	strcat((char*) pcOutputString, pcUserMessage);
 8003cfa:	0029      	movs	r1, r5
 8003cfc:	0020      	movs	r0, r4
 8003cfe:	f00f fb89 	bl	8013414 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8003d02:	4a83      	ldr	r2, [pc, #524]	; (8003f10 <DisplayModuleStatus+0x264>)
 8003d04:	4983      	ldr	r1, [pc, #524]	; (8003f14 <DisplayModuleStatus+0x268>)
 8003d06:	0028      	movs	r0, r5
 8003d08:	f00f fb64 	bl	80133d4 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003d0c:	0029      	movs	r1, r5
 8003d0e:	0020      	movs	r0, r4
 8003d10:	f00f fb80 	bl	8013414 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8003d14:	4a80      	ldr	r2, [pc, #512]	; (8003f18 <DisplayModuleStatus+0x26c>)
 8003d16:	4981      	ldr	r1, [pc, #516]	; (8003f1c <DisplayModuleStatus+0x270>)
 8003d18:	0028      	movs	r0, r5
 8003d1a:	f00f fb5b 	bl	80133d4 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003d1e:	0029      	movs	r1, r5
 8003d20:	0020      	movs	r0, r4
 8003d22:	f00f fb77 	bl	8013414 <strcat>

	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8003d26:	4b7e      	ldr	r3, [pc, #504]	; (8003f20 <DisplayModuleStatus+0x274>)
 8003d28:	002a      	movs	r2, r5
 8003d2a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003d2c:	c243      	stmia	r2!, {r0, r1, r6}
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	8899      	ldrh	r1, [r3, #4]
 8003d34:	8091      	strh	r1, [r2, #4]
 8003d36:	799b      	ldrb	r3, [r3, #6]
 8003d38:	7193      	strb	r3, [r2, #6]
	strcat((char*) pcOutputString, pcUserMessage);
 8003d3a:	0029      	movs	r1, r5
 8003d3c:	0020      	movs	r0, r4
 8003d3e:	f00f fb69 	bl	8013414 <strcat>
 8003d42:	2601      	movs	r6, #1
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
		sprintf(pcUserMessage, "P%d: ", i);
 8003d44:	4d6d      	ldr	r5, [pc, #436]	; (8003efc <DisplayModuleStatus+0x250>)
		strcat((char*) pcOutputString, pcUserMessage);
		switch (portStatus[i]) {
 8003d46:	4b77      	ldr	r3, [pc, #476]	; (8003f24 <DisplayModuleStatus+0x278>)
 8003d48:	469a      	mov	sl, r3
 8003d4a:	e00e      	b.n	8003d6a <DisplayModuleStatus+0xbe>
		case FREE:
			sprintf(pcUserMessage, "Free\n\r");
 8003d4c:	4b6b      	ldr	r3, [pc, #428]	; (8003efc <DisplayModuleStatus+0x250>)
 8003d4e:	4a76      	ldr	r2, [pc, #472]	; (8003f28 <DisplayModuleStatus+0x27c>)
 8003d50:	6811      	ldr	r1, [r2, #0]
 8003d52:	6019      	str	r1, [r3, #0]
 8003d54:	8891      	ldrh	r1, [r2, #4]
 8003d56:	8099      	strh	r1, [r3, #4]
 8003d58:	7992      	ldrb	r2, [r2, #6]
 8003d5a:	719a      	strb	r2, [r3, #6]
			sprintf(pcUserMessage, "Connected to a button/switch\n\r");
			break;
		default:
			break;
		}
		strcat((char*) pcOutputString, pcUserMessage);
 8003d5c:	4967      	ldr	r1, [pc, #412]	; (8003efc <DisplayModuleStatus+0x250>)
 8003d5e:	0020      	movs	r0, r4
 8003d60:	f00f fb58 	bl	8013414 <strcat>
 8003d64:	3601      	adds	r6, #1
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8003d66:	2e06      	cmp	r6, #6
 8003d68:	d039      	beq.n	8003dde <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 8003d6a:	0032      	movs	r2, r6
 8003d6c:	496f      	ldr	r1, [pc, #444]	; (8003f2c <DisplayModuleStatus+0x280>)
 8003d6e:	0028      	movs	r0, r5
 8003d70:	f00f fb30 	bl	80133d4 <siprintf>
		strcat((char*) pcOutputString, pcUserMessage);
 8003d74:	0029      	movs	r1, r5
 8003d76:	0020      	movs	r0, r4
 8003d78:	f00f fb4c 	bl	8013414 <strcat>
		switch (portStatus[i]) {
 8003d7c:	4653      	mov	r3, sl
 8003d7e:	5cf3      	ldrb	r3, [r6, r3]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d8eb      	bhi.n	8003d5c <DisplayModuleStatus+0xb0>
 8003d84:	4653      	mov	r3, sl
 8003d86:	5cf3      	ldrb	r3, [r6, r3]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a69      	ldr	r2, [pc, #420]	; (8003f30 <DisplayModuleStatus+0x284>)
 8003d8c:	58d3      	ldr	r3, [r2, r3]
 8003d8e:	469f      	mov	pc, r3
			sprintf(pcUserMessage, "Receiving messages\n\r");
 8003d90:	495a      	ldr	r1, [pc, #360]	; (8003efc <DisplayModuleStatus+0x250>)
 8003d92:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <DisplayModuleStatus+0x288>)
 8003d94:	000a      	movs	r2, r1
 8003d96:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003d98:	c283      	stmia	r2!, {r0, r1, r7}
 8003d9a:	cb03      	ldmia	r3!, {r0, r1}
 8003d9c:	c203      	stmia	r2!, {r0, r1}
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	7013      	strb	r3, [r2, #0]
			break;
 8003da2:	e7db      	b.n	8003d5c <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage, "Streaming\n\r");
 8003da4:	4a55      	ldr	r2, [pc, #340]	; (8003efc <DisplayModuleStatus+0x250>)
 8003da6:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <DisplayModuleStatus+0x28c>)
 8003da8:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003daa:	c283      	stmia	r2!, {r0, r1, r7}
			break;
 8003dac:	e7d6      	b.n	8003d5c <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage, "Receiving user commands\n\r");
 8003dae:	4953      	ldr	r1, [pc, #332]	; (8003efc <DisplayModuleStatus+0x250>)
 8003db0:	4b62      	ldr	r3, [pc, #392]	; (8003f3c <DisplayModuleStatus+0x290>)
 8003db2:	000a      	movs	r2, r1
 8003db4:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003db6:	c283      	stmia	r2!, {r0, r1, r7}
 8003db8:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003dba:	c283      	stmia	r2!, {r0, r1, r7}
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	8013      	strh	r3, [r2, #0]
			break;
 8003dc0:	e7cc      	b.n	8003d5c <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage, "Connected to a button/switch\n\r");
 8003dc2:	494e      	ldr	r1, [pc, #312]	; (8003efc <DisplayModuleStatus+0x250>)
 8003dc4:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <DisplayModuleStatus+0x294>)
 8003dc6:	000a      	movs	r2, r1
 8003dc8:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003dca:	c283      	stmia	r2!, {r0, r1, r7}
 8003dcc:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003dce:	c283      	stmia	r2!, {r0, r1, r7}
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	6011      	str	r1, [r2, #0]
 8003dd4:	8899      	ldrh	r1, [r3, #4]
 8003dd6:	8091      	strh	r1, [r2, #4]
 8003dd8:	799b      	ldrb	r3, [r3, #6]
 8003dda:	7193      	strb	r3, [r2, #6]
			break;
 8003ddc:	e7be      	b.n	8003d5c <DisplayModuleStatus+0xb0>
	}

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8003dde:	4947      	ldr	r1, [pc, #284]	; (8003efc <DisplayModuleStatus+0x250>)
 8003de0:	4b58      	ldr	r3, [pc, #352]	; (8003f44 <DisplayModuleStatus+0x298>)
 8003de2:	000a      	movs	r2, r1
 8003de4:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003de6:	c261      	stmia	r2!, {r0, r5, r6}
 8003de8:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003dea:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char*) pcOutputString, pcUserMessage);
 8003dec:	0020      	movs	r0, r4
 8003dee:	f00f fb11 	bl	8013414 <strcat>
 8003df2:	4e55      	ldr	r6, [pc, #340]	; (8003f48 <DisplayModuleStatus+0x29c>)
 8003df4:	2701      	movs	r7, #1
 8003df6:	e00d      	b.n	8003e14 <DisplayModuleStatus+0x168>
	for (char i = 1; i <= 6; i++) {
		if (streamDMA[i - 1].Instance == 0) {
			sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8003df8:	4d40      	ldr	r5, [pc, #256]	; (8003efc <DisplayModuleStatus+0x250>)
 8003dfa:	003a      	movs	r2, r7
 8003dfc:	4953      	ldr	r1, [pc, #332]	; (8003f4c <DisplayModuleStatus+0x2a0>)
 8003dfe:	0028      	movs	r0, r5
 8003e00:	f00f fae8 	bl	80133d4 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8003e04:	0029      	movs	r1, r5
 8003e06:	0020      	movs	r0, r4
 8003e08:	f00f fb04 	bl	8013414 <strcat>
 8003e0c:	3701      	adds	r7, #1
 8003e0e:	3638      	adds	r6, #56	; 0x38
	for (char i = 1; i <= 6; i++) {
 8003e10:	2f07      	cmp	r7, #7
 8003e12:	d018      	beq.n	8003e46 <DisplayModuleStatus+0x19a>
		if (streamDMA[i - 1].Instance == 0) {
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ee      	beq.n	8003df8 <DisplayModuleStatus+0x14c>
		} else {
			sprintf(pcUserMessage,
					"\n\rStreaming DMA %d is streaming from P%d to P%d", i,
					GetPort(streamDMA[i - 1].Parent),
 8003e1a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003e1c:	f007 fb82 	bl	800b524 <GetPort>
 8003e20:	0005      	movs	r5, r0
					GetPort(dmaStreamDst[i - 1]));
 8003e22:	00bb      	lsls	r3, r7, #2
 8003e24:	3b04      	subs	r3, #4
 8003e26:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <DisplayModuleStatus+0x2a4>)
 8003e28:	58d0      	ldr	r0, [r2, r3]
 8003e2a:	f007 fb7b 	bl	800b524 <GetPort>
			sprintf(pcUserMessage,
 8003e2e:	9000      	str	r0, [sp, #0]
 8003e30:	002b      	movs	r3, r5
 8003e32:	003a      	movs	r2, r7
 8003e34:	4947      	ldr	r1, [pc, #284]	; (8003f54 <DisplayModuleStatus+0x2a8>)
 8003e36:	4831      	ldr	r0, [pc, #196]	; (8003efc <DisplayModuleStatus+0x250>)
 8003e38:	f00f facc 	bl	80133d4 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8003e3c:	492f      	ldr	r1, [pc, #188]	; (8003efc <DisplayModuleStatus+0x250>)
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f00f fae8 	bl	8013414 <strcat>
 8003e44:	e7e2      	b.n	8003e0c <DisplayModuleStatus+0x160>
		}
	}
	strcat((char*) pcOutputString, "\n\r");
 8003e46:	0020      	movs	r0, r4
 8003e48:	f7fc f966 	bl	8000118 <strlen>
 8003e4c:	1820      	adds	r0, r4, r0
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4941      	ldr	r1, [pc, #260]	; (8003f58 <DisplayModuleStatus+0x2ac>)
 8003e52:	f00f f9b8 	bl	80131c6 <memcpy>

	/* Ports direction */
	strcat((char*) pcOutputString, "\n\rThese ports are reversed: ");
 8003e56:	0020      	movs	r0, r4
 8003e58:	f7fc f95e 	bl	8000118 <strlen>
 8003e5c:	1820      	adds	r0, r4, r0
 8003e5e:	221d      	movs	r2, #29
 8003e60:	493e      	ldr	r1, [pc, #248]	; (8003f5c <DisplayModuleStatus+0x2b0>)
 8003e62:	f00f f9b0 	bl	80131c6 <memcpy>
	temp = strlen((char*) pcOutputString);
 8003e66:	0020      	movs	r0, r4
 8003e68:	f7fc f956 	bl	8000118 <strlen>
 8003e6c:	4682      	mov	sl, r0
 8003e6e:	2200      	movs	r2, #0
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
		if ((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e70:	4e3b      	ldr	r6, [pc, #236]	; (8003f60 <DisplayModuleStatus+0x2b4>)
 8003e72:	4f21      	ldr	r7, [pc, #132]	; (8003ef8 <DisplayModuleStatus+0x24c>)
 8003e74:	e002      	b.n	8003e7c <DisplayModuleStatus+0x1d0>
 8003e76:	002a      	movs	r2, r5
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8003e78:	2d05      	cmp	r5, #5
 8003e7a:	d013      	beq.n	8003ea4 <DisplayModuleStatus+0x1f8>
 8003e7c:	1c55      	adds	r5, r2, #1
		if ((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e7e:	783b      	ldrb	r3, [r7, #0]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	5b99      	ldrh	r1, [r3, r6]
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	4113      	asrs	r3, r2
 8003e8c:	420b      	tst	r3, r1
 8003e8e:	d0f2      	beq.n	8003e76 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8003e90:	002a      	movs	r2, r5
 8003e92:	4934      	ldr	r1, [pc, #208]	; (8003f64 <DisplayModuleStatus+0x2b8>)
 8003e94:	4819      	ldr	r0, [pc, #100]	; (8003efc <DisplayModuleStatus+0x250>)
 8003e96:	f00f fa9d 	bl	80133d4 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8003e9a:	4918      	ldr	r1, [pc, #96]	; (8003efc <DisplayModuleStatus+0x250>)
 8003e9c:	0020      	movs	r0, r4
 8003e9e:	f00f fab9 	bl	8013414 <strcat>
 8003ea2:	e7e8      	b.n	8003e76 <DisplayModuleStatus+0x1ca>
		}
	}
	if (temp == strlen((char*) pcOutputString)) { /* All ports are normal */
 8003ea4:	0020      	movs	r0, r4
 8003ea6:	f7fc f937 	bl	8000118 <strlen>
 8003eaa:	4653      	mov	r3, sl
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	4298      	cmp	r0, r3
 8003eb2:	d00e      	beq.n	8003ed2 <DisplayModuleStatus+0x226>
		strcat((char*) pcOutputString, "None");
	}
	strcat((char*) pcOutputString, "\n\r");
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	f7fc f92f 	bl	8000118 <strlen>
 8003eba:	1820      	adds	r0, r4, r0
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4926      	ldr	r1, [pc, #152]	; (8003f58 <DisplayModuleStatus+0x2ac>)
 8003ec0:	f00f f981 	bl	80131c6 <memcpy>

	/* Display output */
	if (port)
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <DisplayModuleStatus+0x232>
		writePxMutex(port, (char*) pcOutputString,
				strlen((char*) pcOutputString), cmd50ms, HAL_MAX_DELAY);

}
 8003eca:	b004      	add	sp, #16
 8003ecc:	bc04      	pop	{r2}
 8003ece:	4692      	mov	sl, r2
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char*) pcOutputString, "None");
 8003ed2:	1820      	adds	r0, r4, r0
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	4924      	ldr	r1, [pc, #144]	; (8003f68 <DisplayModuleStatus+0x2bc>)
 8003ed8:	f00f f975 	bl	80131c6 <memcpy>
 8003edc:	e7ea      	b.n	8003eb4 <DisplayModuleStatus+0x208>
				strlen((char*) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fc f91a 	bl	8000118 <strlen>
		writePxMutex(port, (char*) pcOutputString,
 8003ee4:	b282      	uxth	r2, r0
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	425b      	negs	r3, r3
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	3333      	adds	r3, #51	; 0x33
 8003eee:	0021      	movs	r1, r4
 8003ef0:	9803      	ldr	r0, [sp, #12]
 8003ef2:	f009 fd67 	bl	800d9c4 <writePxMutex>
}
 8003ef6:	e7e8      	b.n	8003eca <DisplayModuleStatus+0x21e>
 8003ef8:	20000866 	.word	0x20000866
 8003efc:	20000890 	.word	0x20000890
 8003f00:	08015948 	.word	0x08015948
 8003f04:	2000029f 	.word	0x2000029f
 8003f08:	08015964 	.word	0x08015964
 8003f0c:	08015980 	.word	0x08015980
 8003f10:	080159a0 	.word	0x080159a0
 8003f14:	080159ac 	.word	0x080159ac
 8003f18:	080159c4 	.word	0x080159c4
 8003f1c:	080159d0 	.word	0x080159d0
 8003f20:	080159ec 	.word	0x080159ec
 8003f24:	200008e0 	.word	0x200008e0
 8003f28:	08015a08 	.word	0x08015a08
 8003f2c:	08015a00 	.word	0x08015a00
 8003f30:	08015924 	.word	0x08015924
 8003f34:	08015a10 	.word	0x08015a10
 8003f38:	08015a28 	.word	0x08015a28
 8003f3c:	08015a34 	.word	0x08015a34
 8003f40:	08015a50 	.word	0x08015a50
 8003f44:	08015a70 	.word	0x08015a70
 8003f48:	2000112c 	.word	0x2000112c
 8003f4c:	08015a88 	.word	0x08015a88
 8003f50:	20000c4c 	.word	0x20000c4c
 8003f54:	08015aa4 	.word	0x08015aa4
 8003f58:	080159fc 	.word	0x080159fc
 8003f5c:	08015ad4 	.word	0x08015ad4
 8003f60:	200065d8 	.word	0x200065d8
 8003f64:	08015af4 	.word	0x08015af4
 8003f68:	08015afc 	.word	0x08015afc

08003f6c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string) {
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6e:	46c6      	mov	lr, r8
 8003f70:	b500      	push	{lr}
 8003f72:	0005      	movs	r5, r0
	uint8_t id = 0, i = 0;

	if (!strcmp(string, "me")) /* Check keywords */
 8003f74:	4929      	ldr	r1, [pc, #164]	; (800401c <GetID+0xb0>)
 8003f76:	f7fc f8c5 	bl	8000104 <strcmp>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d010      	beq.n	8003fa0 <GetID+0x34>
		return myID;
	else if (!strcmp(string, "all"))
 8003f7e:	4928      	ldr	r1, [pc, #160]	; (8004020 <GetID+0xb4>)
 8003f80:	0028      	movs	r0, r5
 8003f82:	f7fc f8bf 	bl	8000104 <strcmp>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d045      	beq.n	8004016 <GetID+0xaa>
		return BOS_BROADCAST;
	else if (string[0] == '#') /* Check IDs */
 8003f8a:	782b      	ldrb	r3, [r5, #0]
 8003f8c:	4698      	mov	r8, r3
 8003f8e:	2b23      	cmp	r3, #35	; 0x23
 8003f90:	d00b      	beq.n	8003faa <GetID+0x3e>
		else
			return BOS_ERR_WrongID;
	} else /* Check alias */
	{
		/* Check module alias */
		for (i = 0; i < N; i++) {
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <GetID+0xb8>)
 8003f94:	781f      	ldrb	r7, [r3, #0]
 8003f96:	2f00      	cmp	r7, #0
 8003f98:	d02a      	beq.n	8003ff0 <GetID+0x84>
 8003f9a:	4e23      	ldr	r6, [pc, #140]	; (8004028 <GetID+0xbc>)
 8003f9c:	2400      	movs	r4, #0
 8003f9e:	e01c      	b.n	8003fda <GetID+0x6e>
		return myID;
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <GetID+0xc0>)
 8003fa2:	7818      	ldrb	r0, [r3, #0]
		}

		return BOS_ERR_WrongName;
	}

}
 8003fa4:	bc04      	pop	{r2}
 8003fa6:	4690      	mov	r8, r2
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string + 1);
 8003faa:	1c68      	adds	r0, r5, #1
 8003fac:	f00f f899 	bl	80130e2 <atol>
 8003fb0:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <GetID+0x52>
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <GetID+0xb8>)
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d206      	bcs.n	8003fcc <GetID+0x60>
		else if (id == myID)
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	; (800402c <GetID+0xc0>)
 8003fc0:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 8003fc2:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1ed      	bne.n	8003fa4 <GetID+0x38>
			return myID;
 8003fc8:	b210      	sxth	r0, r2
 8003fca:	e7eb      	b.n	8003fa4 <GetID+0x38>
			return id;
 8003fcc:	b218      	sxth	r0, r3
 8003fce:	e7e9      	b.n	8003fa4 <GetID+0x38>
		for (i = 0; i < N; i++) {
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	b2e4      	uxtb	r4, r4
 8003fd4:	360a      	adds	r6, #10
 8003fd6:	42bc      	cmp	r4, r7
 8003fd8:	d00a      	beq.n	8003ff0 <GetID+0x84>
			if (!strcmp(string, moduleAlias[i]) && (*string != 0))
 8003fda:	0031      	movs	r1, r6
 8003fdc:	0028      	movs	r0, r5
 8003fde:	f7fc f891 	bl	8000104 <strcmp>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d1f4      	bne.n	8003fd0 <GetID+0x64>
 8003fe6:	4643      	mov	r3, r8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f1      	beq.n	8003fd0 <GetID+0x64>
				return (i);
 8003fec:	b220      	sxth	r0, r4
 8003fee:	e7d9      	b.n	8003fa4 <GetID+0x38>
 8003ff0:	4f0f      	ldr	r7, [pc, #60]	; (8004030 <GetID+0xc4>)
		for (i = 0; i < N; i++) {
 8003ff2:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))
 8003ff4:	0039      	movs	r1, r7
 8003ff6:	0028      	movs	r0, r5
 8003ff8:	f7fc f884 	bl	8000104 <strcmp>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d005      	beq.n	800400c <GetID+0xa0>
 8004000:	3601      	adds	r6, #1
 8004002:	370a      	adds	r7, #10
		for (i = 0; i < MaxNumOfGroups; i++) {
 8004004:	2e0a      	cmp	r6, #10
 8004006:	d1f5      	bne.n	8003ff4 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004008:	2064      	movs	r0, #100	; 0x64
 800400a:	e7cb      	b.n	8003fa4 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 800400c:	0234      	lsls	r4, r6, #8
 800400e:	20fe      	movs	r0, #254	; 0xfe
 8004010:	4320      	orrs	r0, r4
 8004012:	b200      	sxth	r0, r0
 8004014:	e7c6      	b.n	8003fa4 <GetID+0x38>
		return BOS_BROADCAST;
 8004016:	20ff      	movs	r0, #255	; 0xff
 8004018:	e7c4      	b.n	8003fa4 <GetID+0x38>
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	08015b88 	.word	0x08015b88
 8004020:	08015b8c 	.word	0x08015b8c
 8004024:	2000001c 	.word	0x2000001c
 8004028:	20000758 	.word	0x20000758
 800402c:	20000866 	.word	0x20000866
 8004030:	2000064c 	.word	0x2000064c

08004034 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module, char *alias) {
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	b083      	sub	sp, #12
 8004038:	9001      	str	r0, [sp, #4]
 800403a:	000d      	movs	r5, r1
 800403c:	4c2a      	ldr	r4, [pc, #168]	; (80040e8 <NameModule+0xb4>)
 800403e:	0027      	movs	r7, r4
 8004040:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for (i = 0; i < NumOfKeywords; i++) {
		if (!strcmp(alias, BOSkeywords[i]))
 8004042:	0021      	movs	r1, r4
 8004044:	0028      	movs	r0, r5
 8004046:	f7fc f85d 	bl	8000104 <strcmp>
 800404a:	2800      	cmp	r0, #0
 800404c:	d043      	beq.n	80040d6 <NameModule+0xa2>
 800404e:	3404      	adds	r4, #4
	for (i = 0; i < NumOfKeywords; i++) {
 8004050:	42bc      	cmp	r4, r7
 8004052:	d1f6      	bne.n	8004042 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}

	/* 2. Check module alias with other module aliases */
	for (i = 1; i < N; i++) {
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <NameModule+0xb8>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d90f      	bls.n	800407c <NameModule+0x48>
 800405c:	4c24      	ldr	r4, [pc, #144]	; (80040f0 <NameModule+0xbc>)
 800405e:	009f      	lsls	r7, r3, #2
 8004060:	18ff      	adds	r7, r7, r3
 8004062:	007f      	lsls	r7, r7, #1
 8004064:	0023      	movs	r3, r4
 8004066:	3b0a      	subs	r3, #10
 8004068:	18ff      	adds	r7, r7, r3
		if (!strcmp(alias, moduleAlias[i]))
 800406a:	0021      	movs	r1, r4
 800406c:	0028      	movs	r0, r5
 800406e:	f7fc f849 	bl	8000104 <strcmp>
 8004072:	2800      	cmp	r0, #0
 8004074:	d031      	beq.n	80040da <NameModule+0xa6>
 8004076:	340a      	adds	r4, #10
	for (i = 1; i < N; i++) {
 8004078:	42bc      	cmp	r4, r7
 800407a:	d1f6      	bne.n	800406a <NameModule+0x36>
 800407c:	4c1d      	ldr	r4, [pc, #116]	; (80040f4 <NameModule+0xc0>)
 800407e:	0027      	movs	r7, r4
 8004080:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check module alias with group aliases */
	for (i = 0; i < MaxNumOfGroups; i++) {
		if (!strcmp(alias, groupAlias[i]))
 8004082:	0021      	movs	r1, r4
 8004084:	0028      	movs	r0, r5
 8004086:	f7fc f83d 	bl	8000104 <strcmp>
 800408a:	2800      	cmp	r0, #0
 800408c:	d028      	beq.n	80040e0 <NameModule+0xac>
 800408e:	340a      	adds	r4, #10
	for (i = 0; i < MaxNumOfGroups; i++) {
 8004090:	42bc      	cmp	r4, r7
 8004092:	d1f6      	bne.n	8004082 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}

	/* 4. Check alias with BOS and module commands */
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8004094:	4c18      	ldr	r4, [pc, #96]	; (80040f8 <NameModule+0xc4>)
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <NameModule+0xc8>)
 8004098:	601c      	str	r4, [r3, #0]
 800409a:	001e      	movs	r6, r3
			pxCommand->pxNext) {
		pcRegisteredCommandString =
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	681f      	ldr	r7, [r3, #0]
				pxCommand->pxCommandLineDefinition->pcCommand;
		xCommandStringLength = strlen((const char*) pcRegisteredCommandString);
 80040a0:	0038      	movs	r0, r7
 80040a2:	f7fc f839 	bl	8000118 <strlen>
 80040a6:	0002      	movs	r2, r0

		if (!strncmp(alias, (const char*) pcRegisteredCommandString,
 80040a8:	0039      	movs	r1, r7
 80040aa:	0028      	movs	r0, r5
 80040ac:	f00f f9d6 	bl	801345c <strncmp>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d017      	beq.n	80040e4 <NameModule+0xb0>
			pxCommand->pxNext) {
 80040b4:	6864      	ldr	r4, [r4, #4]
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 80040b6:	6034      	str	r4, [r6, #0]
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d1ef      	bne.n	800409c <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}

	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	0098      	lsls	r0, r3, #2
 80040c0:	469c      	mov	ip, r3
 80040c2:	4460      	add	r0, ip
 80040c4:	0040      	lsls	r0, r0, #1
 80040c6:	4e0e      	ldr	r6, [pc, #56]	; (8004100 <NameModule+0xcc>)
 80040c8:	1980      	adds	r0, r0, r6
 80040ca:	0029      	movs	r1, r5
 80040cc:	f00f f9be 	bl	801344c <strcpy>

	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 80040d0:	f7fe fe9c 	bl	8002e0c <SaveEEalias>

	return result;
 80040d4:	e002      	b.n	80040dc <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80040d6:	2006      	movs	r0, #6
 80040d8:	e000      	b.n	80040dc <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80040da:	2007      	movs	r0, #7
}
 80040dc:	b003      	add	sp, #12
 80040de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80040e0:	2007      	movs	r0, #7
 80040e2:	e7fb      	b.n	80040dc <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80040e4:	2008      	movs	r0, #8
 80040e6:	e7f9      	b.n	80040dc <NameModule+0xa8>
 80040e8:	08015938 	.word	0x08015938
 80040ec:	2000001c 	.word	0x2000001c
 80040f0:	20000762 	.word	0x20000762
 80040f4:	2000064c 	.word	0x2000064c
 80040f8:	2000009c 	.word	0x2000009c
 80040fc:	200008e8 	.word	0x200008e8
 8004100:	20000758 	.word	0x20000758

08004104 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module, char *group) {
 8004104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004106:	46c6      	mov	lr, r8
 8004108:	b500      	push	{lr}
 800410a:	0007      	movs	r7, r0
 800410c:	000e      	movs	r6, r1
 800410e:	4d3a      	ldr	r5, [pc, #232]	; (80041f8 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */

	for (i = 0; i < MaxNumOfGroups; i++) {
 8004110:	2400      	movs	r4, #0
		/* This group already exists */
		if (!strcmp(group, groupAlias[i])) {
 8004112:	0029      	movs	r1, r5
 8004114:	0030      	movs	r0, r6
 8004116:	f7fb fff5 	bl	8000104 <strcmp>
 800411a:	2800      	cmp	r0, #0
 800411c:	d050      	beq.n	80041c0 <AddModuleToGroup+0xbc>
	for (i = 0; i < MaxNumOfGroups; i++) {
 800411e:	3401      	adds	r4, #1
 8004120:	350a      	adds	r5, #10
 8004122:	2c0a      	cmp	r4, #10
 8004124:	d1f5      	bne.n	8004112 <AddModuleToGroup+0xe>
 8004126:	4c35      	ldr	r4, [pc, #212]	; (80041fc <AddModuleToGroup+0xf8>)
 8004128:	0025      	movs	r5, r4
 800412a:	3510      	adds	r5, #16

	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for (j = 0; j < NumOfKeywords; j++) {
		if (!strcmp(group, BOSkeywords[j]))
 800412c:	0021      	movs	r1, r4
 800412e:	0030      	movs	r0, r6
 8004130:	f7fb ffe8 	bl	8000104 <strcmp>
 8004134:	2800      	cmp	r0, #0
 8004136:	d058      	beq.n	80041ea <AddModuleToGroup+0xe6>
 8004138:	3404      	adds	r4, #4
	for (j = 0; j < NumOfKeywords; j++) {
 800413a:	42ac      	cmp	r4, r5
 800413c:	d1f6      	bne.n	800412c <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}

	/* 2. Check group alias with module aliases */
	for (j = 1; j < N; j++) {
 800413e:	4b30      	ldr	r3, [pc, #192]	; (8004200 <AddModuleToGroup+0xfc>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d90f      	bls.n	8004166 <AddModuleToGroup+0x62>
 8004146:	4c2f      	ldr	r4, [pc, #188]	; (8004204 <AddModuleToGroup+0x100>)
 8004148:	009d      	lsls	r5, r3, #2
 800414a:	18ed      	adds	r5, r5, r3
 800414c:	006d      	lsls	r5, r5, #1
 800414e:	0023      	movs	r3, r4
 8004150:	3b0a      	subs	r3, #10
 8004152:	18ed      	adds	r5, r5, r3
		if (!strcmp(group, moduleAlias[j]))
 8004154:	0021      	movs	r1, r4
 8004156:	0030      	movs	r0, r6
 8004158:	f7fb ffd4 	bl	8000104 <strcmp>
 800415c:	2800      	cmp	r0, #0
 800415e:	d046      	beq.n	80041ee <AddModuleToGroup+0xea>
 8004160:	340a      	adds	r4, #10
	for (j = 1; j < N; j++) {
 8004162:	42ac      	cmp	r4, r5
 8004164:	d1f6      	bne.n	8004154 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check group alias with BOS and module commands */
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8004166:	4c28      	ldr	r4, [pc, #160]	; (8004208 <AddModuleToGroup+0x104>)
 8004168:	4b28      	ldr	r3, [pc, #160]	; (800420c <AddModuleToGroup+0x108>)
 800416a:	601c      	str	r4, [r3, #0]
 800416c:	4698      	mov	r8, r3
			pxCommand->pxNext) {
		pcRegisteredCommandString =
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	681d      	ldr	r5, [r3, #0]
				pxCommand->pxCommandLineDefinition->pcCommand;
		xCommandStringLength = strlen((const char*) pcRegisteredCommandString);
 8004172:	0028      	movs	r0, r5
 8004174:	f7fb ffd0 	bl	8000118 <strlen>
 8004178:	0002      	movs	r2, r0

		if (!strncmp(group, (const char*) pcRegisteredCommandString,
 800417a:	0029      	movs	r1, r5
 800417c:	0030      	movs	r0, r6
 800417e:	f00f f96d 	bl	801345c <strncmp>
 8004182:	2800      	cmp	r0, #0
 8004184:	d035      	beq.n	80041f2 <AddModuleToGroup+0xee>
			pxCommand->pxNext) {
 8004186:	6864      	ldr	r4, [r4, #4]
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8004188:	4643      	mov	r3, r8
 800418a:	601c      	str	r4, [r3, #0]
 800418c:	2c00      	cmp	r4, #0
 800418e:	d1ee      	bne.n	800416e <AddModuleToGroup+0x6a>
		}
	}

	/* 4. Group alias is unique - copy to first empty location */
	for (i = 0; i < MaxNumOfGroups; i++) {
		if (!groupAlias[i][0]) {
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <AddModuleToGroup+0xf4>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01e      	beq.n	80041d6 <AddModuleToGroup+0xd2>
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <AddModuleToGroup+0xf4>)
 800419a:	330a      	adds	r3, #10
	for (i = 0; i < MaxNumOfGroups; i++) {
 800419c:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	d019      	beq.n	80041d8 <AddModuleToGroup+0xd4>
	for (i = 0; i < MaxNumOfGroups; i++) {
 80041a4:	3401      	adds	r4, #1
 80041a6:	330a      	adds	r3, #10
 80041a8:	2c0a      	cmp	r4, #10
 80041aa:	d1f8      	bne.n	800419e <AddModuleToGroup+0x9a>
			break;
		}
	}

	/* 5. Add this module to the new group */
	groupModules[module - 1] |= (0x0001 << i);
 80041ac:	3f01      	subs	r7, #1
 80041ae:	4918      	ldr	r1, [pc, #96]	; (8004210 <AddModuleToGroup+0x10c>)
 80041b0:	007f      	lsls	r7, r7, #1
 80041b2:	2201      	movs	r2, #1
 80041b4:	40a2      	lsls	r2, r4
 80041b6:	5a7b      	ldrh	r3, [r7, r1]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	527b      	strh	r3, [r7, r1]

	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80041bc:	2000      	movs	r0, #0
 80041be:	e007      	b.n	80041d0 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |= (0x0001 << i);
 80041c0:	3f01      	subs	r7, #1
 80041c2:	4913      	ldr	r1, [pc, #76]	; (8004210 <AddModuleToGroup+0x10c>)
 80041c4:	007f      	lsls	r7, r7, #1
 80041c6:	2201      	movs	r2, #1
 80041c8:	40a2      	lsls	r2, r4
 80041ca:	5a7b      	ldrh	r3, [r7, r1]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	527b      	strh	r3, [r7, r1]
}
 80041d0:	bc04      	pop	{r2}
 80041d2:	4690      	mov	r8, r2
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < MaxNumOfGroups; i++) {
 80041d6:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);
 80041d8:	00a0      	lsls	r0, r4, #2
 80041da:	1900      	adds	r0, r0, r4
 80041dc:	0040      	lsls	r0, r0, #1
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <AddModuleToGroup+0xf4>)
 80041e0:	1818      	adds	r0, r3, r0
 80041e2:	0031      	movs	r1, r6
 80041e4:	f00f f932 	bl	801344c <strcpy>
			break;
 80041e8:	e7e0      	b.n	80041ac <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 80041ea:	2006      	movs	r0, #6
 80041ec:	e7f0      	b.n	80041d0 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 80041ee:	2007      	movs	r0, #7
 80041f0:	e7ee      	b.n	80041d0 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80041f2:	2008      	movs	r0, #8
 80041f4:	e7ec      	b.n	80041d0 <AddModuleToGroup+0xcc>
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	2000064c 	.word	0x2000064c
 80041fc:	08015938 	.word	0x08015938
 8004200:	2000001c 	.word	0x2000001c
 8004204:	20000762 	.word	0x20000762
 8004208:	2000009c 	.word	0x2000009c
 800420c:	200008ec 	.word	0x200008ec
 8004210:	200006b0 	.word	0x200006b0

08004214 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void) {
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	46ce      	mov	lr, r9
 8004218:	4647      	mov	r7, r8
 800421a:	b580      	push	{r7, lr}
 800421c:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;

	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <ReadPortsDir+0x9c>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03c      	beq.n	80042a0 <ReadPortsDir+0x8c>
 8004226:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 800422c:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <ReadPortsDir+0xa0>)
 800422e:	4699      	mov	r9, r3
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <ReadPortsDir+0xa4>)
 8004232:	4698      	mov	r8, r3
 8004234:	e021      	b.n	800427a <ReadPortsDir+0x66>
 8004236:	2600      	movs	r6, #0
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8004238:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800423a:	2780      	movs	r7, #128	; 0x80
 800423c:	023f      	lsls	r7, r7, #8
 800423e:	e004      	b.n	800424a <ReadPortsDir+0x36>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8004240:	3401      	adds	r4, #1
 8004242:	b2e4      	uxtb	r4, r4
 8004244:	3601      	adds	r6, #1
 8004246:	2c06      	cmp	r4, #6
 8004248:	d011      	beq.n	800426e <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800424a:	0020      	movs	r0, r4
 800424c:	f009 fb9c 	bl	800d988 <GetUart>
 8004250:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004252:	42bb      	cmp	r3, r7
 8004254:	d1f4      	bne.n	8004240 <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <ReadPortsDir+0xa0>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	3b01      	subs	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4642      	mov	r2, r8
 8004260:	5a9a      	ldrh	r2, [r3, r2]
 8004262:	0039      	movs	r1, r7
 8004264:	4131      	asrs	r1, r6
 8004266:	430a      	orrs	r2, r1
 8004268:	4641      	mov	r1, r8
 800426a:	525a      	strh	r2, [r3, r1]
 800426c:	e7e8      	b.n	8004240 <ReadPortsDir+0x2c>
	for (uint8_t i = 1; i <= N; i++) {
 800426e:	3501      	adds	r5, #1
 8004270:	b2ed      	uxtb	r5, r5
 8004272:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <ReadPortsDir+0x9c>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	42ab      	cmp	r3, r5
 8004278:	d314      	bcc.n	80042a4 <ReadPortsDir+0x90>
		if (i != myID) {
 800427a:	464b      	mov	r3, r9
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	42ab      	cmp	r3, r5
 8004280:	d0d9      	beq.n	8004236 <ReadPortsDir+0x22>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2113      	movs	r1, #19
 8004286:	0028      	movs	r0, r5
 8004288:	f005 f8da 	bl	8009440 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800428c:	2032      	movs	r0, #50	; 0x32
 800428e:	f009 f9e9 	bl	800d664 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <ReadPortsDir+0xa8>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0e9      	beq.n	800426e <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 800429a:	2302      	movs	r3, #2
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	e7e6      	b.n	800426e <ReadPortsDir+0x5a>
	BOS_Status result = BOS_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	9301      	str	r3, [sp, #4]
			}
		}
	}

	return result;
}
 80042a4:	9801      	ldr	r0, [sp, #4]
 80042a6:	b003      	add	sp, #12
 80042a8:	bc0c      	pop	{r2, r3}
 80042aa:	4690      	mov	r8, r2
 80042ac:	4699      	mov	r9, r3
 80042ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b0:	2000001c 	.word	0x2000001c
 80042b4:	20000866 	.word	0x20000866
 80042b8:	200065d8 	.word	0x200065d8
 80042bc:	200008f8 	.word	0x200008f8

080042c0 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void) {
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c2:	46c6      	mov	lr, r8
 80042c4:	b500      	push	{lr}
 80042c6:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 80042c8:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <UpdateMyPortsDir+0x54>)
 80042cc:	4698      	mov	r8, r3
 80042ce:	4f12      	ldr	r7, [pc, #72]	; (8004318 <UpdateMyPortsDir+0x58>)
 80042d0:	2680      	movs	r6, #128	; 0x80
 80042d2:	0236      	lsls	r6, r6, #8
 80042d4:	e00a      	b.n	80042ec <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 80042d6:	0020      	movs	r0, r4
 80042d8:	f009 fb56 	bl	800d988 <GetUart>
 80042dc:	2101      	movs	r1, #1
 80042de:	f009 fbe9 	bl	800dab4 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 80042e2:	3401      	adds	r4, #1
 80042e4:	b2e4      	uxtb	r4, r4
 80042e6:	3501      	adds	r5, #1
 80042e8:	2c06      	cmp	r4, #6
 80042ea:	d00f      	beq.n	800430c <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80042ec:	783b      	ldrb	r3, [r7, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4642      	mov	r2, r8
 80042f4:	5a9b      	ldrh	r3, [r3, r2]
 80042f6:	0032      	movs	r2, r6
 80042f8:	412a      	asrs	r2, r5
 80042fa:	421a      	tst	r2, r3
 80042fc:	d1eb      	bne.n	80042d6 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 80042fe:	0020      	movs	r0, r4
 8004300:	f009 fb42 	bl	800d988 <GetUart>
 8004304:	2100      	movs	r1, #0
 8004306:	f009 fbd5 	bl	800dab4 <SwapUartPins>
 800430a:	e7ea      	b.n	80042e2 <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 800430c:	2000      	movs	r0, #0
 800430e:	bc04      	pop	{r2}
 8004310:	4690      	mov	r8, r2
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004314:	200065d8 	.word	0x200065d8
 8004318:	20000866 	.word	0x20000866

0800431c <BOS_Init>:
void BOS_Init(void) {
 800431c:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800431e:	f009 f859 	bl	800d3d4 <RTC_Init>
	GetTimeDate();
 8004322:	f009 f8f7 	bl	800d514 <GetTimeDate>
	EE_Init();
 8004326:	f003 fa51 	bl	80077cc <EE_Init>
	GPIO_Init();
 800432a:	f008 fdc1 	bl	800ceb0 <GPIO_Init>
	DMA_Init();
 800432e:	f007 fd55 	bl	800bddc <DMA_Init>
	TIM_USEC_Init();
 8004332:	f009 f923 	bl	800d57c <TIM_USEC_Init>
	CRC_Init();
 8004336:	f008 fd67 	bl	800ce08 <CRC_Init>
	TIM_MSEC_Init();
 800433a:	f009 f951 	bl	800d5e0 <TIM_MSEC_Init>
	if (IsFactoryReset()) {
 800433e:	f008 fe4b 	bl	800cfd8 <IsFactoryReset>
 8004342:	2800      	cmp	r0, #0
 8004344:	d11a      	bne.n	800437c <BOS_Init+0x60>
	if (IsLowerCLIbaud()) {
 8004346:	f7ff f88d 	bl	8003464 <IsLowerCLIbaud>
 800434a:	2800      	cmp	r0, #0
 800434c:	d021      	beq.n	8004392 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 800434e:	4b3e      	ldr	r3, [pc, #248]	; (8004448 <BOS_Init+0x12c>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 8004354:	2032      	movs	r0, #50	; 0x32
 8004356:	f009 f985 	bl	800d664 <StartMilliDelay>
		Module_Init();
 800435a:	f007 f8a1 	bl	800b4a0 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <BOS_Init+0x130>)
 8004360:	22e1      	movs	r2, #225	; 0xe1
 8004362:	0252      	lsls	r2, r2, #9
 8004364:	609a      	str	r2, [r3, #8]
		for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8004366:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 8004368:	001d      	movs	r5, r3
 800436a:	68a9      	ldr	r1, [r5, #8]
 800436c:	0020      	movs	r0, r4
 800436e:	f009 fb97 	bl	800daa0 <UpdateBaudrate>
		for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8004372:	3401      	adds	r4, #1
 8004374:	b2e4      	uxtb	r4, r4
 8004376:	2c06      	cmp	r4, #6
 8004378:	d1f7      	bne.n	800436a <BOS_Init+0x4e>
 800437a:	e00f      	b.n	800439c <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 800437c:	f7ff f8c0 	bl	8003500 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004380:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004384:	4b32      	ldr	r3, [pc, #200]	; (8004450 <BOS_Init+0x134>)
 8004386:	4a33      	ldr	r2, [pc, #204]	; (8004454 <BOS_Init+0x138>)
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	e7fd      	b.n	800438e <BOS_Init+0x72>
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 8004392:	2032      	movs	r0, #50	; 0x32
 8004394:	f009 f966 	bl	800d664 <StartMilliDelay>
		Module_Init();
 8004398:	f007 f882 	bl	800b4a0 <Module_Init>
	LoadEEvars();
 800439c:	f7ff f850 	bl	8003440 <LoadEEvars>
	UpdateMyPortsDir();
 80043a0:	f7ff ff8e 	bl	80042c0 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80043a4:	f008 f97a 	bl	800c69c <SetupMessagingRxDMAs>
	if (myID == 0) /* Native module */
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <BOS_Init+0x13c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d037      	beq.n	8004420 <BOS_Init+0x104>
		IND_ON();
 80043b0:	2580      	movs	r5, #128	; 0x80
 80043b2:	012d      	lsls	r5, r5, #4
 80043b4:	2490      	movs	r4, #144	; 0x90
 80043b6:	05e4      	lsls	r4, r4, #23
 80043b8:	2201      	movs	r2, #1
 80043ba:	0029      	movs	r1, r5
 80043bc:	0020      	movs	r0, r4
 80043be:	f00d f8ed 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80043c2:	20fa      	movs	r0, #250	; 0xfa
 80043c4:	0040      	lsls	r0, r0, #1
 80043c6:	f009 f94d 	bl	800d664 <StartMilliDelay>
		IND_OFF();
 80043ca:	2200      	movs	r2, #0
 80043cc:	0029      	movs	r1, r5
 80043ce:	0020      	movs	r0, r4
 80043d0:	f00d f8e4 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80043d4:	2064      	movs	r0, #100	; 0x64
 80043d6:	f009 f945 	bl	800d664 <StartMilliDelay>
		IND_ON();
 80043da:	2201      	movs	r2, #1
 80043dc:	0029      	movs	r1, r5
 80043de:	0020      	movs	r0, r4
 80043e0:	f00d f8dc 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80043e4:	2064      	movs	r0, #100	; 0x64
 80043e6:	f009 f93d 	bl	800d664 <StartMilliDelay>
		IND_OFF();
 80043ea:	2200      	movs	r2, #0
 80043ec:	0029      	movs	r1, r5
 80043ee:	0020      	movs	r0, r4
 80043f0:	f00d f8d4 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80043f4:	2064      	movs	r0, #100	; 0x64
 80043f6:	f009 f935 	bl	800d664 <StartMilliDelay>
		IND_ON();
 80043fa:	2201      	movs	r2, #1
 80043fc:	0029      	movs	r1, r5
 80043fe:	0020      	movs	r0, r4
 8004400:	f00d f8cc 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);IND_OFF();
 8004404:	2064      	movs	r0, #100	; 0x64
 8004406:	f009 f92d 	bl	800d664 <StartMilliDelay>
 800440a:	2200      	movs	r2, #0
 800440c:	0029      	movs	r1, r5
 800440e:	0020      	movs	r0, r4
 8004410:	f00d f8c4 	bl	801159c <HAL_GPIO_WritePin>
	ResetUartORE();
 8004414:	f003 f81c 	bl	8007450 <ResetUartORE>
	BOS_initialized = 1;
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <BOS_Init+0x140>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
}
 800441e:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 8004420:	2580      	movs	r5, #128	; 0x80
 8004422:	012d      	lsls	r5, r5, #4
 8004424:	2490      	movs	r4, #144	; 0x90
 8004426:	05e4      	lsls	r4, r4, #23
 8004428:	2201      	movs	r2, #1
 800442a:	0029      	movs	r1, r5
 800442c:	0020      	movs	r0, r4
 800442e:	f00d f8b5 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004432:	20fa      	movs	r0, #250	; 0xfa
 8004434:	0040      	lsls	r0, r0, #1
 8004436:	f009 f915 	bl	800d664 <StartMilliDelay>
 800443a:	2200      	movs	r2, #0
 800443c:	0029      	movs	r1, r5
 800443e:	0020      	movs	r0, r4
 8004440:	f00d f8ac 	bl	801159c <HAL_GPIO_WritePin>
 8004444:	e7e6      	b.n	8004414 <BOS_Init+0xf8>
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	2000029e 	.word	0x2000029e
 800444c:	20006130 	.word	0x20006130
 8004450:	e000ed00 	.word	0xe000ed00
 8004454:	05fa0004 	.word	0x05fa0004
 8004458:	20000866 	.word	0x20000866
 800445c:	2000029d 	.word	0x2000029d

08004460 <GetDateString>:

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
 */
char* GetDateString(void) {
 8004460:	b510      	push	{r4, lr}
 8004462:	b082      	sub	sp, #8
	static const char formatDateStr[] = "%s %02d/%02d/%04d";
	char *buffer = malloc(30 * sizeof(int8_t));
 8004464:	201e      	movs	r0, #30
 8004466:	f00e fe79 	bl	801315c <malloc>
 800446a:	0004      	movs	r4, r0
	memset(buffer, 0x00, 30 * sizeof(int8_t));
 800446c:	221e      	movs	r2, #30
 800446e:	2100      	movs	r1, #0
 8004470:	f00e feb2 	bl	80131d8 <memset>
	sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday - 1],
			BOS.date.month, BOS.date.day, BOS.date.year);
 8004474:	4908      	ldr	r1, [pc, #32]	; (8004498 <GetDateString+0x38>)
	sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday - 1],
 8004476:	7d8b      	ldrb	r3, [r1, #22]
 8004478:	7d0a      	ldrb	r2, [r1, #20]
 800447a:	3a01      	subs	r2, #1
 800447c:	0092      	lsls	r2, r2, #2
 800447e:	4807      	ldr	r0, [pc, #28]	; (800449c <GetDateString+0x3c>)
 8004480:	5812      	ldr	r2, [r2, r0]
 8004482:	8b08      	ldrh	r0, [r1, #24]
 8004484:	9001      	str	r0, [sp, #4]
 8004486:	7d49      	ldrb	r1, [r1, #21]
 8004488:	9100      	str	r1, [sp, #0]
 800448a:	4905      	ldr	r1, [pc, #20]	; (80044a0 <GetDateString+0x40>)
 800448c:	0020      	movs	r0, r4
 800448e:	f00e ffa1 	bl	80133d4 <siprintf>
	return buffer;
}
 8004492:	0020      	movs	r0, r4
 8004494:	b002      	add	sp, #8
 8004496:	bd10      	pop	{r4, pc}
 8004498:	20006130 	.word	0x20006130
 800449c:	08015e7c 	.word	0x08015e7c
 80044a0:	08015ba8 	.word	0x08015ba8

080044a4 <Bridge>:

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
 */
BOS_Status Bridge(uint8_t port1, uint8_t port2) {
 80044a4:	b500      	push	{lr}
 80044a6:	b085      	sub	sp, #20
 80044a8:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL,
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <Bridge+0x24>)
 80044ac:	7819      	ldrb	r1, [r3, #0]
 80044ae:	2301      	movs	r3, #1
 80044b0:	9303      	str	r3, [sp, #12]
 80044b2:	3b02      	subs	r3, #2
 80044b4:	9302      	str	r3, [sp, #8]
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	3303      	adds	r3, #3
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	000b      	movs	r3, r1
 80044be:	f004 ffe5 	bl	800948c <StartScastDMAStream>
			0xFFFFFFFF, 0xFFFFFFFF, true);
}
 80044c2:	b005      	add	sp, #20
 80044c4:	bd00      	pop	{pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	20000866 	.word	0x20000866

080044cc <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
 */
BOS_Status Unbridge(uint8_t port1, uint8_t port2) {
 80044cc:	b530      	push	{r4, r5, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	0004      	movs	r4, r0
 80044d2:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80044d4:	2300      	movs	r3, #0
 80044d6:	9304      	str	r3, [sp, #16]
 80044d8:	9303      	str	r3, [sp, #12]
 80044da:	9302      	str	r3, [sp, #8]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	2000      	movs	r0, #0
 80044e6:	f7fe fe0f 	bl	8003108 <SaveEEstreams>

	// Stop the DMA streams and enable messaging back on these ports
	if (streamDMA[port1 - 1].Instance != 0
 80044ea:	1e62      	subs	r2, r4, #1
 80044ec:	00d3      	lsls	r3, r2, #3
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <Unbridge+0x78>)
 80044f4:	589b      	ldr	r3, [r3, r2]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <Unbridge+0x5a>
			&& streamDMA[port2 - 1].Instance != 0) {
 80044fa:	1e6a      	subs	r2, r5, #1
 80044fc:	00d3      	lsls	r3, r2, #3
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <Unbridge+0x78>)
 8004504:	589b      	ldr	r3, [r3, r2]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	} else if (streamDMA[port1 - 1].Instance != 0) {
		SwitchStreamDMAToMsg(port1);
 800450a:	0020      	movs	r0, r4
 800450c:	f002 ff14 	bl	8007338 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004510:	2000      	movs	r0, #0
 8004512:	e006      	b.n	8004522 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004514:	0020      	movs	r0, r4
 8004516:	f002 ff0f 	bl	8007338 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800451a:	0028      	movs	r0, r5
 800451c:	f002 ff0c 	bl	8007338 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004520:	2000      	movs	r0, #0
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	} else {
		return BOS_ERR_WrongValue;
	}
}
 8004522:	b007      	add	sp, #28
 8004524:	bd30      	pop	{r4, r5, pc}
	} else if (streamDMA[port2 - 1].Instance != 0) {
 8004526:	1e6a      	subs	r2, r5, #1
 8004528:	00d3      	lsls	r3, r2, #3
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <Unbridge+0x78>)
 8004530:	589b      	ldr	r3, [r3, r2]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 8004536:	0028      	movs	r0, r5
 8004538:	f002 fefe 	bl	8007338 <SwitchStreamDMAToMsg>
		return BOS_OK;
 800453c:	2000      	movs	r0, #0
 800453e:	e7f0      	b.n	8004522 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004540:	2068      	movs	r0, #104	; 0x68
 8004542:	e7ee      	b.n	8004522 <Unbridge+0x56>
 8004544:	2000112c 	.word	0x2000112c

08004548 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 800454c:	7804      	ldrb	r4, [r0, #0]
 800454e:	2c00      	cmp	r4, #0
 8004550:	d010      	beq.n	8004574 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8004552:	2603      	movs	r6, #3
 8004554:	e004      	b.n	8004560 <StringToLowerCase+0x18>
 8004556:	702a      	strb	r2, [r5, #0]
 8004558:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 800455a:	782c      	ldrb	r4, [r5, #0]
 800455c:	2c00      	cmp	r4, #0
 800455e:	d009      	beq.n	8004574 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8004560:	f00e fdee 	bl	8013140 <__locale_ctype_ptr>
 8004564:	1900      	adds	r0, r0, r4
 8004566:	7843      	ldrb	r3, [r0, #1]
 8004568:	4033      	ands	r3, r6
 800456a:	0022      	movs	r2, r4
 800456c:	2b01      	cmp	r3, #1
 800456e:	d1f2      	bne.n	8004556 <StringToLowerCase+0xe>
 8004570:	3220      	adds	r2, #32
 8004572:	e7f0      	b.n	8004556 <StringToLowerCase+0xe>
	}
}
 8004574:	bd70      	pop	{r4, r5, r6, pc}
	...

08004578 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	46c6      	mov	lr, r8
 800457c:	b500      	push	{lr}
 800457e:	b088      	sub	sp, #32
 8004580:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004582:	4bdc      	ldr	r3, [pc, #880]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004584:	781c      	ldrb	r4, [r3, #0]
 8004586:	2c05      	cmp	r4, #5
 8004588:	d100      	bne.n	800458c <ParseSnippetCondition+0x14>
 800458a:	e210      	b.n	80049ae <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 800458c:	49da      	ldr	r1, [pc, #872]	; (80048f8 <ParseSnippetCondition+0x380>)
 800458e:	00a3      	lsls	r3, r4, #2
 8004590:	191a      	adds	r2, r3, r4
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	2000      	movs	r0, #0
 8004596:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004598:	191a      	adds	r2, r3, r4
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	188a      	adds	r2, r1, r2
 800459e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 80045a0:	1918      	adds	r0, r3, r4
 80045a2:	0080      	lsls	r0, r0, #2
 80045a4:	3002      	adds	r0, #2
 80045a6:	1840      	adds	r0, r0, r1
 80045a8:	2204      	movs	r2, #4
 80045aa:	2100      	movs	r1, #0
 80045ac:	f00e fe14 	bl	80131d8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 80045b0:	782b      	ldrb	r3, [r5, #0]
 80045b2:	2b62      	cmp	r3, #98	; 0x62
 80045b4:	d102      	bne.n	80045bc <ParseSnippetCondition+0x44>
 80045b6:	78ab      	ldrb	r3, [r5, #2]
 80045b8:	2b2e      	cmp	r3, #46	; 0x2e
 80045ba:	d032      	beq.n	8004622 <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 80045bc:	4ecf      	ldr	r6, [pc, #828]	; (80048fc <ParseSnippetCondition+0x384>)
 80045be:	0029      	movs	r1, r5
 80045c0:	0030      	movs	r0, r6
 80045c2:	f00e ff43 	bl	801344c <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 80045c6:	4cce      	ldr	r4, [pc, #824]	; (8004900 <ParseSnippetCondition+0x388>)
 80045c8:	0021      	movs	r1, r4
 80045ca:	0030      	movs	r0, r6
 80045cc:	f00f fdbe 	bl	801414c <strtok>
 80045d0:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 80045d2:	0021      	movs	r1, r4
 80045d4:	2000      	movs	r0, #0
 80045d6:	f00f fdb9 	bl	801414c <strtok>
 80045da:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 80045dc:	0021      	movs	r1, r4
 80045de:	2000      	movs	r0, #0
 80045e0:	f00f fdb4 	bl	801414c <strtok>
 80045e4:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	d100      	bne.n	80045ec <ParseSnippetCondition+0x74>
 80045ea:	e1e5      	b.n	80049b8 <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 80045ec:	0028      	movs	r0, r5
 80045ee:	f7fe ffaf 	bl	8003550 <IsModuleParameter>
 80045f2:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80045f4:	d100      	bne.n	80045f8 <ParseSnippetCondition+0x80>
 80045f6:	e18f      	b.n	8004918 <ParseSnippetCondition+0x3a0>
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	d000      	beq.n	80045fe <ParseSnippetCondition+0x86>
 80045fc:	e18e      	b.n	800491c <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 80045fe:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004600:	2c00      	cmp	r4, #0
 8004602:	d000      	beq.n	8004606 <ParseSnippetCondition+0x8e>
 8004604:	e1d4      	b.n	80049b0 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004606:	4cbb      	ldr	r4, [pc, #748]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004608:	7823      	ldrb	r3, [r4, #0]
 800460a:	49bb      	ldr	r1, [pc, #748]	; (80048f8 <ParseSnippetCondition+0x380>)
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	18d0      	adds	r0, r2, r3
 8004610:	0080      	lsls	r0, r0, #2
 8004612:	3602      	adds	r6, #2
 8004614:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004616:	180a      	adds	r2, r1, r0
 8004618:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800461a:	3301      	adds	r3, #1
 800461c:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 800461e:	2000      	movs	r0, #0
 8004620:	e1c6      	b.n	80049b0 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004622:	786e      	ldrb	r6, [r5, #1]
 8004624:	3e30      	subs	r6, #48	; 0x30
 8004626:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 8004628:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 800462a:	2e05      	cmp	r6, #5
 800462c:	d900      	bls.n	8004630 <ParseSnippetCondition+0xb8>
 800462e:	e1bf      	b.n	80049b0 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004630:	4ab1      	ldr	r2, [pc, #708]	; (80048f8 <ParseSnippetCondition+0x380>)
 8004632:	00a3      	lsls	r3, r4, #2
 8004634:	1919      	adds	r1, r3, r4
 8004636:	0089      	lsls	r1, r1, #2
 8004638:	3001      	adds	r0, #1
 800463a:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 800463c:	1853      	adds	r3, r2, r1
 800463e:	2200      	movs	r2, #0
 8004640:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004642:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004644:	1cef      	adds	r7, r5, #3
 8004646:	3207      	adds	r2, #7
 8004648:	49ae      	ldr	r1, [pc, #696]	; (8004904 <ParseSnippetCondition+0x38c>)
 800464a:	0038      	movs	r0, r7
 800464c:	f00e ff06 	bl	801345c <strncmp>
 8004650:	2800      	cmp	r0, #0
 8004652:	d121      	bne.n	8004698 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004654:	00a3      	lsls	r3, r4, #2
 8004656:	191c      	adds	r4, r3, r4
 8004658:	00a4      	lsls	r4, r4, #2
 800465a:	4ba7      	ldr	r3, [pc, #668]	; (80048f8 <ParseSnippetCondition+0x380>)
 800465c:	191c      	adds	r4, r3, r4
 800465e:	2305      	movs	r3, #5
 8004660:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004662:	00f2      	lsls	r2, r6, #3
 8004664:	1992      	adds	r2, r2, r6
 8004666:	4ba8      	ldr	r3, [pc, #672]	; (8004908 <ParseSnippetCondition+0x390>)
 8004668:	189b      	adds	r3, r3, r2
 800466a:	7a1b      	ldrb	r3, [r3, #8]
 800466c:	07db      	lsls	r3, r3, #31
 800466e:	d504      	bpl.n	800467a <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004670:	4aa0      	ldr	r2, [pc, #640]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004672:	7813      	ldrb	r3, [r2, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	7013      	strb	r3, [r2, #0]
 8004678:	e19a      	b.n	80049b0 <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 800467a:	2301      	movs	r3, #1
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	2300      	movs	r3, #0
 8004680:	9304      	str	r3, [sp, #16]
 8004682:	9303      	str	r3, [sp, #12]
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	2101      	movs	r1, #1
 800468e:	0030      	movs	r0, r6
 8004690:	f003 fd74 	bl	800817c <SetButtonEvents>
				status = BOS_OK;
 8004694:	2000      	movs	r0, #0
 8004696:	e7eb      	b.n	8004670 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004698:	220e      	movs	r2, #14
 800469a:	499c      	ldr	r1, [pc, #624]	; (800490c <ParseSnippetCondition+0x394>)
 800469c:	0038      	movs	r0, r7
 800469e:	f00e fedd 	bl	801345c <strncmp>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d11c      	bne.n	80046e0 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 80046a6:	00a3      	lsls	r3, r4, #2
 80046a8:	191c      	adds	r4, r3, r4
 80046aa:	00a4      	lsls	r4, r4, #2
 80046ac:	4b92      	ldr	r3, [pc, #584]	; (80048f8 <ParseSnippetCondition+0x380>)
 80046ae:	191c      	adds	r4, r3, r4
 80046b0:	2306      	movs	r3, #6
 80046b2:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80046b4:	00f2      	lsls	r2, r6, #3
 80046b6:	1992      	adds	r2, r2, r6
 80046b8:	4b93      	ldr	r3, [pc, #588]	; (8004908 <ParseSnippetCondition+0x390>)
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	7a1b      	ldrb	r3, [r3, #8]
 80046be:	079b      	lsls	r3, r3, #30
 80046c0:	d4d6      	bmi.n	8004670 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80046c2:	2301      	movs	r3, #1
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	9302      	str	r3, [sp, #8]
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	2100      	movs	r1, #0
 80046d6:	0030      	movs	r0, r6
 80046d8:	f003 fd50 	bl	800817c <SetButtonEvents>
				status = BOS_OK;					
 80046dc:	2000      	movs	r0, #0
 80046de:	e7c7      	b.n	8004670 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 80046e0:	220c      	movs	r2, #12
 80046e2:	498b      	ldr	r1, [pc, #556]	; (8004910 <ParseSnippetCondition+0x398>)
 80046e4:	0038      	movs	r0, r7
 80046e6:	f00e feb9 	bl	801345c <strncmp>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d17a      	bne.n	80047e4 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 80046ee:	00f2      	lsls	r2, r6, #3
 80046f0:	1992      	adds	r2, r2, r6
 80046f2:	4b85      	ldr	r3, [pc, #532]	; (8004908 <ParseSnippetCondition+0x390>)
 80046f4:	189b      	adds	r3, r3, r2
 80046f6:	789b      	ldrb	r3, [r3, #2]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d030      	beq.n	800475e <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 80046fc:	00f2      	lsls	r2, r6, #3
 80046fe:	1992      	adds	r2, r2, r6
 8004700:	4b81      	ldr	r3, [pc, #516]	; (8004908 <ParseSnippetCondition+0x390>)
 8004702:	189b      	adds	r3, r3, r2
 8004704:	78db      	ldrb	r3, [r3, #3]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04a      	beq.n	80047a0 <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 800470a:	00f2      	lsls	r2, r6, #3
 800470c:	1992      	adds	r2, r2, r6
 800470e:	4b7e      	ldr	r3, [pc, #504]	; (8004908 <ParseSnippetCondition+0x390>)
 8004710:	189b      	adds	r3, r3, r2
 8004712:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004714:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1aa      	bne.n	8004670 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 800471a:	4f77      	ldr	r7, [pc, #476]	; (80048f8 <ParseSnippetCondition+0x380>)
 800471c:	00a3      	lsls	r3, r4, #2
 800471e:	191b      	adds	r3, r3, r4
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	220b      	movs	r2, #11
 8004726:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004728:	0028      	movs	r0, r5
 800472a:	300f      	adds	r0, #15
 800472c:	f00e fcd3 	bl	80130d6 <atoi>
 8004730:	b2c0      	uxtb	r0, r0
 8004732:	4b70      	ldr	r3, [pc, #448]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	0093      	lsls	r3, r2, #2
 8004738:	189b      	adds	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	18ff      	adds	r7, r7, r3
 800473e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004740:	2301      	movs	r3, #1
 8004742:	9305      	str	r3, [sp, #20]
 8004744:	2300      	movs	r3, #0
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	9303      	str	r3, [sp, #12]
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	9001      	str	r0, [sp, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	0030      	movs	r0, r6
 8004756:	f003 fd11 	bl	800817c <SetButtonEvents>
					status = BOS_OK;	
 800475a:	2000      	movs	r0, #0
 800475c:	e788      	b.n	8004670 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 800475e:	4f66      	ldr	r7, [pc, #408]	; (80048f8 <ParseSnippetCondition+0x380>)
 8004760:	00a3      	lsls	r3, r4, #2
 8004762:	191b      	adds	r3, r3, r4
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2209      	movs	r2, #9
 800476a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800476c:	0028      	movs	r0, r5
 800476e:	300f      	adds	r0, #15
 8004770:	f00e fcb1 	bl	80130d6 <atoi>
 8004774:	b2c3      	uxtb	r3, r0
 8004776:	4a5f      	ldr	r2, [pc, #380]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004778:	7811      	ldrb	r1, [r2, #0]
 800477a:	008a      	lsls	r2, r1, #2
 800477c:	1852      	adds	r2, r2, r1
 800477e:	0092      	lsls	r2, r2, #2
 8004780:	18bf      	adds	r7, r7, r2
 8004782:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004784:	2201      	movs	r2, #1
 8004786:	9205      	str	r2, [sp, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	9204      	str	r2, [sp, #16]
 800478c:	9203      	str	r2, [sp, #12]
 800478e:	9202      	str	r2, [sp, #8]
 8004790:	9201      	str	r2, [sp, #4]
 8004792:	9200      	str	r2, [sp, #0]
 8004794:	2100      	movs	r1, #0
 8004796:	0030      	movs	r0, r6
 8004798:	f003 fcf0 	bl	800817c <SetButtonEvents>
					status = BOS_OK;
 800479c:	2000      	movs	r0, #0
 800479e:	e767      	b.n	8004670 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 80047a0:	4f55      	ldr	r7, [pc, #340]	; (80048f8 <ParseSnippetCondition+0x380>)
 80047a2:	00a3      	lsls	r3, r4, #2
 80047a4:	191b      	adds	r3, r3, r4
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	220a      	movs	r2, #10
 80047ac:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80047ae:	0028      	movs	r0, r5
 80047b0:	300f      	adds	r0, #15
 80047b2:	f00e fc90 	bl	80130d6 <atoi>
 80047b6:	b2c0      	uxtb	r0, r0
 80047b8:	4b4e      	ldr	r3, [pc, #312]	; (80048f4 <ParseSnippetCondition+0x37c>)
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	0093      	lsls	r3, r2, #2
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	18ff      	adds	r7, r7, r3
 80047c4:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80047c6:	2301      	movs	r3, #1
 80047c8:	9305      	str	r3, [sp, #20]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	9303      	str	r3, [sp, #12]
 80047d0:	9302      	str	r3, [sp, #8]
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	9000      	str	r0, [sp, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	0030      	movs	r0, r6
 80047dc:	f003 fcce 	bl	800817c <SetButtonEvents>
					status = BOS_OK;		
 80047e0:	2000      	movs	r0, #0
 80047e2:	e745      	b.n	8004670 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 80047e4:	220d      	movs	r2, #13
 80047e6:	494b      	ldr	r1, [pc, #300]	; (8004914 <ParseSnippetCondition+0x39c>)
 80047e8:	0038      	movs	r0, r7
 80047ea:	f00e fe37 	bl	801345c <strncmp>
 80047ee:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 80047f0:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d000      	beq.n	80047f8 <ParseSnippetCondition+0x280>
 80047f6:	e73b      	b.n	8004670 <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 80047f8:	00f2      	lsls	r2, r6, #3
 80047fa:	1992      	adds	r2, r2, r6
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <ParseSnippetCondition+0x390>)
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	795b      	ldrb	r3, [r3, #5]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d031      	beq.n	800486a <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 8004806:	00f2      	lsls	r2, r6, #3
 8004808:	1992      	adds	r2, r2, r6
 800480a:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <ParseSnippetCondition+0x390>)
 800480c:	189b      	adds	r3, r3, r2
 800480e:	799b      	ldrb	r3, [r3, #6]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d04c      	beq.n	80048ae <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 8004814:	00f2      	lsls	r2, r6, #3
 8004816:	1992      	adds	r2, r2, r6
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <ParseSnippetCondition+0x390>)
 800481a:	189b      	adds	r3, r3, r2
 800481c:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 800481e:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 8004820:	2b00      	cmp	r3, #0
 8004822:	d000      	beq.n	8004826 <ParseSnippetCondition+0x2ae>
 8004824:	e724      	b.n	8004670 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004826:	4f34      	ldr	r7, [pc, #208]	; (80048f8 <ParseSnippetCondition+0x380>)
 8004828:	3314      	adds	r3, #20
 800482a:	4698      	mov	r8, r3
 800482c:	435c      	muls	r4, r3
 800482e:	193c      	adds	r4, r7, r4
 8004830:	3b06      	subs	r3, #6
 8004832:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004834:	0028      	movs	r0, r5
 8004836:	3010      	adds	r0, #16
 8004838:	f00e fc4d 	bl	80130d6 <atoi>
 800483c:	b2c0      	uxtb	r0, r0
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4642      	mov	r2, r8
 8004844:	4353      	muls	r3, r2
 8004846:	18ff      	adds	r7, r7, r3
 8004848:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 800484a:	2301      	movs	r3, #1
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	9004      	str	r0, [sp, #16]
 8004850:	2400      	movs	r4, #0
 8004852:	9403      	str	r4, [sp, #12]
 8004854:	9402      	str	r4, [sp, #8]
 8004856:	9401      	str	r4, [sp, #4]
 8004858:	9400      	str	r4, [sp, #0]
 800485a:	0023      	movs	r3, r4
 800485c:	0022      	movs	r2, r4
 800485e:	0021      	movs	r1, r4
 8004860:	0030      	movs	r0, r6
 8004862:	f003 fc8b 	bl	800817c <SetButtonEvents>
					status = BOS_OK;	
 8004866:	0020      	movs	r0, r4
 8004868:	e702      	b.n	8004670 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 800486a:	4f23      	ldr	r7, [pc, #140]	; (80048f8 <ParseSnippetCondition+0x380>)
 800486c:	00a3      	lsls	r3, r4, #2
 800486e:	191b      	adds	r3, r3, r4
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	220c      	movs	r2, #12
 8004876:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004878:	0028      	movs	r0, r5
 800487a:	3010      	adds	r0, #16
 800487c:	f00e fc2b 	bl	80130d6 <atoi>
 8004880:	b2c0      	uxtb	r0, r0
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <ParseSnippetCondition+0x37c>)
 8004884:	781a      	ldrb	r2, [r3, #0]
 8004886:	0093      	lsls	r3, r2, #2
 8004888:	189b      	adds	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	18ff      	adds	r7, r7, r3
 800488e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004890:	2301      	movs	r3, #1
 8004892:	9305      	str	r3, [sp, #20]
 8004894:	2300      	movs	r3, #0
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	9002      	str	r0, [sp, #8]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2100      	movs	r1, #0
 80048a4:	0030      	movs	r0, r6
 80048a6:	f003 fc69 	bl	800817c <SetButtonEvents>
					status = BOS_OK;
 80048aa:	2000      	movs	r0, #0
 80048ac:	e6e0      	b.n	8004670 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 80048ae:	4f12      	ldr	r7, [pc, #72]	; (80048f8 <ParseSnippetCondition+0x380>)
 80048b0:	00a3      	lsls	r3, r4, #2
 80048b2:	191b      	adds	r3, r3, r4
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	220d      	movs	r2, #13
 80048ba:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80048bc:	0028      	movs	r0, r5
 80048be:	3010      	adds	r0, #16
 80048c0:	f00e fc09 	bl	80130d6 <atoi>
 80048c4:	b2c0      	uxtb	r0, r0
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <ParseSnippetCondition+0x37c>)
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	0093      	lsls	r3, r2, #2
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	18ff      	adds	r7, r7, r3
 80048d2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 80048d4:	2301      	movs	r3, #1
 80048d6:	9305      	str	r3, [sp, #20]
 80048d8:	2300      	movs	r3, #0
 80048da:	9304      	str	r3, [sp, #16]
 80048dc:	9003      	str	r0, [sp, #12]
 80048de:	9302      	str	r3, [sp, #8]
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	0030      	movs	r0, r6
 80048ea:	f003 fc47 	bl	800817c <SetButtonEvents>
					status = BOS_OK;		
 80048ee:	2000      	movs	r0, #0
 80048f0:	e6be      	b.n	8004670 <ParseSnippetCondition+0xf8>
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	20000a07 	.word	0x20000a07
 80048f8:	2000614c 	.word	0x2000614c
 80048fc:	2000096c 	.word	0x2000096c
 8004900:	08015a04 	.word	0x08015a04
 8004904:	08016ffc 	.word	0x08016ffc
 8004908:	20000cb4 	.word	0x20000cb4
 800490c:	08016080 	.word	0x08016080
 8004910:	08016090 	.word	0x08016090
 8004914:	080160a0 	.word	0x080160a0
			else if (secondPart != NULL && thirdPart != NULL) 
 8004918:	2e00      	cmp	r6, #0
 800491a:	d04f      	beq.n	80049bc <ParseSnippetCondition+0x444>
 800491c:	2c00      	cmp	r4, #0
 800491e:	d04f      	beq.n	80049c0 <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8004920:	0020      	movs	r0, r4
 8004922:	f7fe fe15 	bl	8003550 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004926:	2800      	cmp	r0, #0
 8004928:	d024      	beq.n	8004974 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 800492a:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <ParseSnippetCondition+0x450>)
 800492c:	781c      	ldrb	r4, [r3, #0]
 800492e:	4a27      	ldr	r2, [pc, #156]	; (80049cc <ParseSnippetCondition+0x454>)
 8004930:	00a3      	lsls	r3, r4, #2
 8004932:	1919      	adds	r1, r3, r4
 8004934:	0089      	lsls	r1, r1, #2
 8004936:	2704      	movs	r7, #4
 8004938:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800493a:	1919      	adds	r1, r3, r4
 800493c:	0089      	lsls	r1, r1, #2
 800493e:	1851      	adds	r1, r2, r1
 8004940:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004942:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004944:	4d20      	ldr	r5, [pc, #128]	; (80049c8 <ParseSnippetCondition+0x450>)
 8004946:	782c      	ldrb	r4, [r5, #0]
 8004948:	0030      	movs	r0, r6
 800494a:	f7fe fe0d 	bl	8003568 <IsMathOperator>
 800494e:	491f      	ldr	r1, [pc, #124]	; (80049cc <ParseSnippetCondition+0x454>)
 8004950:	00a3      	lsls	r3, r4, #2
 8004952:	191b      	adds	r3, r3, r4
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	18cb      	adds	r3, r1, r3
 8004958:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 800495a:	782a      	ldrb	r2, [r5, #0]
 800495c:	0093      	lsls	r3, r2, #2
 800495e:	189b      	adds	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	18cb      	adds	r3, r1, r3
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02c      	beq.n	80049c4 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 800496a:	3201      	adds	r2, #1
 800496c:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <ParseSnippetCondition+0x450>)
 800496e:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8004970:	2000      	movs	r0, #0
 8004972:	e01d      	b.n	80049b0 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <ParseSnippetCondition+0x450>)
 8004976:	4698      	mov	r8, r3
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	4f14      	ldr	r7, [pc, #80]	; (80049cc <ParseSnippetCondition+0x454>)
 800497c:	0093      	lsls	r3, r2, #2
 800497e:	1899      	adds	r1, r3, r2
 8004980:	0089      	lsls	r1, r1, #2
 8004982:	2003      	movs	r0, #3
 8004984:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004986:	187b      	adds	r3, r7, r1
 8004988:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 800498a:	0020      	movs	r0, r4
 800498c:	f00e fb9e 	bl	80130cc <atof>
 8004990:	f7fe f812 	bl	80029b8 <__aeabi_d2f>
 8004994:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004996:	4643      	mov	r3, r8
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	0098      	lsls	r0, r3, #2
 800499c:	18c0      	adds	r0, r0, r3
 800499e:	0080      	lsls	r0, r0, #2
 80049a0:	3006      	adds	r0, #6
 80049a2:	19c0      	adds	r0, r0, r7
 80049a4:	2204      	movs	r2, #4
 80049a6:	a907      	add	r1, sp, #28
 80049a8:	f00e fc0d 	bl	80131c6 <memcpy>
 80049ac:	e7ca      	b.n	8004944 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 80049ae:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049b0:	b008      	add	sp, #32
 80049b2:	bc04      	pop	{r2}
 80049b4:	4690      	mov	r8, r2
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 80049b8:	2067      	movs	r0, #103	; 0x67
 80049ba:	e7f9      	b.n	80049b0 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 80049bc:	2067      	movs	r0, #103	; 0x67
 80049be:	e7f7      	b.n	80049b0 <ParseSnippetCondition+0x438>
 80049c0:	2067      	movs	r0, #103	; 0x67
 80049c2:	e7f5      	b.n	80049b0 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 80049c4:	2067      	movs	r0, #103	; 0x67
 80049c6:	e7f3      	b.n	80049b0 <ParseSnippetCondition+0x438>
 80049c8:	20000a07 	.word	0x20000a07
 80049cc:	2000614c 	.word	0x2000614c

080049d0 <AddSnippet>:
{
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	000c      	movs	r4, r1
	switch (code)
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d017      	beq.n	8004a08 <AddSnippet+0x38>
 80049d8:	2803      	cmp	r0, #3
 80049da:	d003      	beq.n	80049e4 <AddSnippet+0x14>
 80049dc:	2801      	cmp	r0, #1
 80049de:	d00f      	beq.n	8004a00 <AddSnippet+0x30>
	return BOS_OK;
 80049e0:	2000      	movs	r0, #0
 80049e2:	e00c      	b.n	80049fe <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <AddSnippet+0xec>)
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	3a01      	subs	r2, #1
 80049ea:	0093      	lsls	r3, r2, #2
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4a33      	ldr	r2, [pc, #204]	; (8004ac0 <AddSnippet+0xf0>)
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	2201      	movs	r2, #1
 80049f6:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 80049f8:	f006 fc34 	bl	800b264 <SaveToRO>
	return BOS_OK;
 80049fc:	2000      	movs	r0, #0
}
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004a00:	0008      	movs	r0, r1
 8004a02:	f7ff fdb9 	bl	8004578 <ParseSnippetCondition>
 8004a06:	e7fa      	b.n	80049fe <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004a08:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <AddSnippet+0xec>)
 8004a0a:	781d      	ldrb	r5, [r3, #0]
 8004a0c:	3d01      	subs	r5, #1
 8004a0e:	00ab      	lsls	r3, r5, #2
 8004a10:	195b      	adds	r3, r3, r5
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <AddSnippet+0xf0>)
 8004a16:	18d3      	adds	r3, r2, r3
 8004a18:	68de      	ldr	r6, [r3, #12]
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	d03d      	beq.n	8004a9a <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004a1e:	0030      	movs	r0, r6
 8004a20:	f7fb fb7a 	bl	8000118 <strlen>
 8004a24:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004a26:	0020      	movs	r0, r4
 8004a28:	f7fb fb76 	bl	8000118 <strlen>
 8004a2c:	1839      	adds	r1, r7, r0
 8004a2e:	3102      	adds	r1, #2
 8004a30:	0030      	movs	r0, r6
 8004a32:	f00e fcb3 	bl	801339c <realloc>
 8004a36:	4e22      	ldr	r6, [pc, #136]	; (8004ac0 <AddSnippet+0xf0>)
 8004a38:	00ab      	lsls	r3, r5, #2
 8004a3a:	195d      	adds	r5, r3, r5
 8004a3c:	00ad      	lsls	r5, r5, #2
 8004a3e:	1975      	adds	r5, r6, r5
 8004a40:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8004a42:	4d1e      	ldr	r5, [pc, #120]	; (8004abc <AddSnippet+0xec>)
 8004a44:	782a      	ldrb	r2, [r5, #0]
 8004a46:	3a01      	subs	r2, #1
 8004a48:	0093      	lsls	r3, r2, #2
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	18f3      	adds	r3, r6, r3
 8004a50:	1c7a      	adds	r2, r7, #1
 8004a52:	68d8      	ldr	r0, [r3, #12]
 8004a54:	1880      	adds	r0, r0, r2
 8004a56:	0021      	movs	r1, r4
 8004a58:	f00e fcf8 	bl	801344c <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8004a5c:	782a      	ldrb	r2, [r5, #0]
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0093      	lsls	r3, r2, #2
 8004a62:	189b      	adds	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	18f6      	adds	r6, r6, r3
 8004a68:	68f3      	ldr	r3, [r6, #12]
 8004a6a:	2213      	movs	r2, #19
 8004a6c:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <AddSnippet+0xec>)
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	3a01      	subs	r2, #1
 8004a74:	0093      	lsls	r3, r2, #2
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4911      	ldr	r1, [pc, #68]	; (8004ac0 <AddSnippet+0xf0>)
 8004a7c:	18cb      	adds	r3, r1, r3
 8004a7e:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004a80:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1bb      	bne.n	80049fe <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004a86:	0090      	lsls	r0, r2, #2
 8004a88:	1880      	adds	r0, r0, r2
 8004a8a:	0080      	lsls	r0, r0, #2
 8004a8c:	1840      	adds	r0, r0, r1
 8004a8e:	2214      	movs	r2, #20
 8004a90:	2100      	movs	r1, #0
 8004a92:	f00e fba1 	bl	80131d8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004a96:	200e      	movs	r0, #14
 8004a98:	e7b1      	b.n	80049fe <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004a9a:	0008      	movs	r0, r1
 8004a9c:	f7fb fb3c 	bl	8000118 <strlen>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f00e fb5b 	bl	801315c <malloc>
 8004aa6:	00ab      	lsls	r3, r5, #2
 8004aa8:	195d      	adds	r5, r3, r5
 8004aaa:	00ad      	lsls	r5, r5, #2
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <AddSnippet+0xf0>)
 8004aae:	195d      	adds	r5, r3, r5
 8004ab0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004ab2:	0021      	movs	r1, r4
 8004ab4:	f00e fcca 	bl	801344c <strcpy>
 8004ab8:	e7d9      	b.n	8004a6e <AddSnippet+0x9e>
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	20000a07 	.word	0x20000a07
 8004ac0:	2000614c 	.word	0x2000614c

08004ac4 <CLI_CommandParser>:
{
 8004ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac6:	46de      	mov	lr, fp
 8004ac8:	4657      	mov	r7, sl
 8004aca:	464e      	mov	r6, r9
 8004acc:	4645      	mov	r5, r8
 8004ace:	b5e0      	push	{r5, r6, r7, lr}
 8004ad0:	b08b      	sub	sp, #44	; 0x2c
 8004ad2:	9004      	str	r0, [sp, #16]
 8004ad4:	4688      	mov	r8, r1
 8004ad6:	9203      	str	r2, [sp, #12]
 8004ad8:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8004ada:	2209      	movs	r2, #9
 8004adc:	2100      	movs	r1, #0
 8004ade:	a807      	add	r0, sp, #28
 8004ae0:	f00e fb7a 	bl	80131d8 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004ae4:	4fd5      	ldr	r7, [pc, #852]	; (8004e3c <CLI_CommandParser+0x378>)
				if (id == myID) {
 8004ae6:	002e      	movs	r6, r5
 8004ae8:	e034      	b.n	8004b54 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004aea:	2252      	movs	r2, #82	; 0x52
 8004aec:	49d4      	ldr	r1, [pc, #848]	; (8004e40 <CLI_CommandParser+0x37c>)
 8004aee:	0020      	movs	r0, r4
 8004af0:	f00e fb69 	bl	80131c6 <memcpy>
				recordSnippet = 0;
 8004af4:	4bd1      	ldr	r3, [pc, #836]	; (8004e3c <CLI_CommandParser+0x378>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	e044      	b.n	8004b86 <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8004afc:	2206      	movs	r2, #6
 8004afe:	49d1      	ldr	r1, [pc, #836]	; (8004e44 <CLI_CommandParser+0x380>)
 8004b00:	9803      	ldr	r0, [sp, #12]
 8004b02:	f00e fcab 	bl	801345c <strncmp>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d053      	beq.n	8004bb2 <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8004b0a:	2d02      	cmp	r5, #2
 8004b0c:	d05e      	beq.n	8004bcc <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 8004b0e:	212e      	movs	r1, #46	; 0x2e
 8004b10:	9803      	ldr	r0, [sp, #12]
 8004b12:	f00e fc8d 	bl	8013430 <strchr>
 8004b16:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004b18:	d006      	beq.n	8004b28 <CLI_CommandParser+0x64>
 8004b1a:	3803      	subs	r0, #3
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	49ca      	ldr	r1, [pc, #808]	; (8004e48 <CLI_CommandParser+0x384>)
 8004b20:	f00e fc9c 	bl	801345c <strncmp>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d160      	bne.n	8004bea <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004b28:	2299      	movs	r2, #153	; 0x99
 8004b2a:	0092      	lsls	r2, r2, #2
 8004b2c:	0021      	movs	r1, r4
 8004b2e:	9803      	ldr	r0, [sp, #12]
 8004b30:	f009 f90c 	bl	800dd4c <FreeRTOS_CLIProcessCommand>
 8004b34:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004b36:	7823      	ldrb	r3, [r4, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d000      	beq.n	8004b3e <CLI_CommandParser+0x7a>
 8004b3c:	e16f      	b.n	8004e1e <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004b3e:	0020      	movs	r0, r4
 8004b40:	f7fb faea 	bl	8000118 <strlen>
 8004b44:	0002      	movs	r2, r0
 8004b46:	2100      	movs	r1, #0
 8004b48:	0020      	movs	r0, r4
 8004b4a:	f00e fb45 	bl	80131d8 <memset>
	} while( xReturned != pdFALSE );
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d100      	bne.n	8004b54 <CLI_CommandParser+0x90>
 8004b52:	e1ab      	b.n	8004eac <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 8004b54:	9803      	ldr	r0, [sp, #12]
 8004b56:	f7ff fcf7 	bl	8004548 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004b5a:	783d      	ldrb	r5, [r7, #0]
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	d1cd      	bne.n	8004afc <CLI_CommandParser+0x38>
 8004b60:	2203      	movs	r2, #3
 8004b62:	49ba      	ldr	r1, [pc, #744]	; (8004e4c <CLI_CommandParser+0x388>)
 8004b64:	9803      	ldr	r0, [sp, #12]
 8004b66:	f00e fc79 	bl	801345c <strncmp>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d1cf      	bne.n	8004b0e <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	1cd9      	adds	r1, r3, #3
 8004b72:	3001      	adds	r0, #1
 8004b74:	f7ff ff2c 	bl	80049d0 <AddSnippet>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1b6      	bne.n	8004aea <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004b7c:	4baf      	ldr	r3, [pc, #700]	; (8004e3c <CLI_CommandParser+0x378>)
 8004b7e:	2202      	movs	r2, #2
 8004b80:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8004b82:	230d      	movs	r3, #13
 8004b84:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004b86:	7823      	ldrb	r3, [r4, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d100      	bne.n	8004b8e <CLI_CommandParser+0xca>
 8004b8c:	e186      	b.n	8004e9c <CLI_CommandParser+0x3d8>
 8004b8e:	4643      	mov	r3, r8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d100      	bne.n	8004b96 <CLI_CommandParser+0xd2>
 8004b94:	e19d      	b.n	8004ed2 <CLI_CommandParser+0x40e>
 8004b96:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004b98:	0020      	movs	r0, r4
 8004b9a:	f7fb fabd 	bl	8000118 <strlen>
 8004b9e:	b282      	uxth	r2, r0
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	425b      	negs	r3, r3
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	3333      	adds	r3, #51	; 0x33
 8004ba8:	0021      	movs	r1, r4
 8004baa:	9804      	ldr	r0, [sp, #16]
 8004bac:	f008 ff0a 	bl	800d9c4 <writePxMutex>
 8004bb0:	e7c5      	b.n	8004b3e <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 8004bb2:	4ba2      	ldr	r3, [pc, #648]	; (8004e3c <CLI_CommandParser+0x378>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8004bb8:	49a5      	ldr	r1, [pc, #660]	; (8004e50 <CLI_CommandParser+0x38c>)
 8004bba:	3003      	adds	r0, #3
 8004bbc:	f7ff ff08 	bl	80049d0 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8004bc0:	2241      	movs	r2, #65	; 0x41
 8004bc2:	49a4      	ldr	r1, [pc, #656]	; (8004e54 <CLI_CommandParser+0x390>)
 8004bc4:	0020      	movs	r0, r4
 8004bc6:	f00e fafe 	bl	80131c6 <memcpy>
			xReturned = pdFALSE;
 8004bca:	e7dc      	b.n	8004b86 <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8004bcc:	9903      	ldr	r1, [sp, #12]
 8004bce:	2002      	movs	r0, #2
 8004bd0:	f7ff fefe 	bl	80049d0 <AddSnippet>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d102      	bne.n	8004bde <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 8004bd8:	230d      	movs	r3, #13
 8004bda:	7023      	strb	r3, [r4, #0]
 8004bdc:	e7d3      	b.n	8004b86 <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004bde:	2252      	movs	r2, #82	; 0x52
 8004be0:	4997      	ldr	r1, [pc, #604]	; (8004e40 <CLI_CommandParser+0x37c>)
 8004be2:	0020      	movs	r0, r4
 8004be4:	f00e faef 	bl	80131c6 <memcpy>
 8004be8:	e7cd      	b.n	8004b86 <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004bea:	f00e faa9 	bl	8013140 <__locale_ctype_ptr>
 8004bee:	786b      	ldrb	r3, [r5, #1]
 8004bf0:	18c0      	adds	r0, r0, r3
 8004bf2:	7843      	ldrb	r3, [r0, #1]
 8004bf4:	075b      	lsls	r3, r3, #29
 8004bf6:	d497      	bmi.n	8004b28 <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8004bf8:	9903      	ldr	r1, [sp, #12]
 8004bfa:	1a6a      	subs	r2, r5, r1
 8004bfc:	a807      	add	r0, sp, #28
 8004bfe:	f00e fc3e 	bl	801347e <strncpy>
				id = GetID(idString);
 8004c02:	a807      	add	r0, sp, #28
 8004c04:	f7ff f9b2 	bl	8003f6c <GetID>
 8004c08:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8004c0a:	4a93      	ldr	r2, [pc, #588]	; (8004e58 <CLI_CommandParser+0x394>)
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4693      	mov	fp, r2
 8004c10:	4290      	cmp	r0, r2
 8004c12:	d03d      	beq.n	8004c90 <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 8004c14:	2864      	cmp	r0, #100	; 0x64
 8004c16:	d043      	beq.n	8004ca0 <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 8004c18:	2866      	cmp	r0, #102	; 0x66
 8004c1a:	d047      	beq.n	8004cac <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 8004c1c:	28ff      	cmp	r0, #255	; 0xff
 8004c1e:	d04b      	beq.n	8004cb8 <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8004c20:	466b      	mov	r3, sp
 8004c22:	7d1b      	ldrb	r3, [r3, #20]
 8004c24:	469a      	mov	sl, r3
 8004c26:	2bfe      	cmp	r3, #254	; 0xfe
 8004c28:	d078      	beq.n	8004d1c <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8004c2a:	3501      	adds	r5, #1
 8004c2c:	2206      	movs	r2, #6
 8004c2e:	498b      	ldr	r1, [pc, #556]	; (8004e5c <CLI_CommandParser+0x398>)
 8004c30:	0028      	movs	r0, r5
 8004c32:	f00e fc13 	bl	801345c <strncmp>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d000      	beq.n	8004c3c <CLI_CommandParser+0x178>
 8004c3a:	e0b4      	b.n	8004da6 <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 8004c3c:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <CLI_CommandParser+0x39c>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004c42:	2119      	movs	r1, #25
 8004c44:	4650      	mov	r0, sl
 8004c46:	f004 fbfb 	bl	8009440 <SendMessageToModule>
						osDelay(100);
 8004c4a:	2064      	movs	r0, #100	; 0x64
 8004c4c:	f008 ffe7 	bl	800dc1e <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8004c50:	4b84      	ldr	r3, [pc, #528]	; (8004e64 <CLI_CommandParser+0x3a0>)
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	4b80      	ldr	r3, [pc, #512]	; (8004e58 <CLI_CommandParser+0x394>)
 8004c56:	7818      	ldrb	r0, [r3, #0]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	f7fe fe60 	bl	8003920 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8004c60:	4b7f      	ldr	r3, [pc, #508]	; (8004e60 <CLI_CommandParser+0x39c>)
 8004c62:	799b      	ldrb	r3, [r3, #6]
 8004c64:	2b60      	cmp	r3, #96	; 0x60
 8004c66:	d18e      	bne.n	8004b86 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8004c68:	21fa      	movs	r1, #250	; 0xfa
 8004c6a:	0089      	lsls	r1, r1, #2
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f00a fba9 	bl	800f3c4 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8004c72:	4b7d      	ldr	r3, [pc, #500]	; (8004e68 <CLI_CommandParser+0x3a4>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d085      	beq.n	8004b86 <CLI_CommandParser+0xc2>
									++timedoutMsg;
 8004c7a:	4a7c      	ldr	r2, [pc, #496]	; (8004e6c <CLI_CommandParser+0x3a8>)
 8004c7c:	8813      	ldrh	r3, [r2, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8004c82:	9b05      	ldr	r3, [sp, #20]
 8004c84:	0022      	movs	r2, r4
 8004c86:	497a      	ldr	r1, [pc, #488]	; (8004e70 <CLI_CommandParser+0x3ac>)
 8004c88:	0020      	movs	r0, r4
 8004c8a:	f00e fba3 	bl	80133d4 <siprintf>
 8004c8e:	e77a      	b.n	8004b86 <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004c90:	2299      	movs	r2, #153	; 0x99
 8004c92:	1c68      	adds	r0, r5, #1
 8004c94:	0092      	lsls	r2, r2, #2
 8004c96:	0021      	movs	r1, r4
 8004c98:	f009 f858 	bl	800dd4c <FreeRTOS_CLIProcessCommand>
 8004c9c:	0006      	movs	r6, r0
 8004c9e:	e74a      	b.n	8004b36 <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8004ca0:	2227      	movs	r2, #39	; 0x27
 8004ca2:	4974      	ldr	r1, [pc, #464]	; (8004e74 <CLI_CommandParser+0x3b0>)
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	f00e fa8e 	bl	80131c6 <memcpy>
 8004caa:	e76c      	b.n	8004b86 <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 8004cac:	2225      	movs	r2, #37	; 0x25
 8004cae:	4972      	ldr	r1, [pc, #456]	; (8004e78 <CLI_CommandParser+0x3b4>)
 8004cb0:	0020      	movs	r0, r4
 8004cb2:	f00e fa88 	bl	80131c6 <memcpy>
 8004cb6:	e766      	b.n	8004b86 <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004cb8:	221a      	movs	r2, #26
 8004cba:	2100      	movs	r1, #0
 8004cbc:	486f      	ldr	r0, [pc, #444]	; (8004e7c <CLI_CommandParser+0x3b8>)
 8004cbe:	f00e fa8b 	bl	80131d8 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004cc2:	3501      	adds	r5, #1
 8004cc4:	9803      	ldr	r0, [sp, #12]
 8004cc6:	f7fb fa27 	bl	8000118 <strlen>
 8004cca:	0006      	movs	r6, r0
 8004ccc:	ab07      	add	r3, sp, #28
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7fb fa22 	bl	8000118 <strlen>
 8004cd4:	1e72      	subs	r2, r6, #1
 8004cd6:	1a12      	subs	r2, r2, r0
 8004cd8:	0029      	movs	r1, r5
 8004cda:	4869      	ldr	r0, [pc, #420]	; (8004e80 <CLI_CommandParser+0x3bc>)
 8004cdc:	f00e fbcf 	bl	801347e <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004ce0:	9803      	ldr	r0, [sp, #12]
 8004ce2:	f7fb fa19 	bl	8000118 <strlen>
 8004ce6:	0006      	movs	r6, r0
 8004ce8:	a807      	add	r0, sp, #28
 8004cea:	f7fb fa15 	bl	8000118 <strlen>
 8004cee:	1a33      	subs	r3, r6, r0
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2217      	movs	r2, #23
 8004cf4:	21ff      	movs	r1, #255	; 0xff
 8004cf6:	4658      	mov	r0, fp
 8004cf8:	f004 fb7a 	bl	80093f0 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004cfc:	2299      	movs	r2, #153	; 0x99
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	0021      	movs	r1, r4
 8004d02:	0028      	movs	r0, r5
 8004d04:	f009 f822 	bl	800dd4c <FreeRTOS_CLIProcessCommand>
 8004d08:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8004d0a:	0020      	movs	r0, r4
 8004d0c:	f7fb fa04 	bl	8000118 <strlen>
 8004d10:	1820      	adds	r0, r4, r0
 8004d12:	221d      	movs	r2, #29
 8004d14:	495b      	ldr	r1, [pc, #364]	; (8004e84 <CLI_CommandParser+0x3c0>)
 8004d16:	f00e fa56 	bl	80131c6 <memcpy>
 8004d1a:	e70c      	b.n	8004b36 <CLI_CommandParser+0x72>
					group = id >> 8;
 8004d1c:	9b05      	ldr	r3, [sp, #20]
 8004d1e:	121b      	asrs	r3, r3, #8
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	469a      	mov	sl, r3
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <CLI_CommandParser+0x3c4>)
 8004d26:	4699      	mov	r9, r3
 8004d28:	4652      	mov	r2, sl
 8004d2a:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004d2c:	221a      	movs	r2, #26
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4852      	ldr	r0, [pc, #328]	; (8004e7c <CLI_CommandParser+0x3b8>)
 8004d32:	f00e fa51 	bl	80131d8 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004d36:	1c6b      	adds	r3, r5, #1
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	9803      	ldr	r0, [sp, #12]
 8004d3c:	f7fb f9ec 	bl	8000118 <strlen>
 8004d40:	0005      	movs	r5, r0
 8004d42:	aa07      	add	r2, sp, #28
 8004d44:	0010      	movs	r0, r2
 8004d46:	f7fb f9e7 	bl	8000118 <strlen>
 8004d4a:	3d01      	subs	r5, #1
 8004d4c:	1a2a      	subs	r2, r5, r0
 8004d4e:	9905      	ldr	r1, [sp, #20]
 8004d50:	484b      	ldr	r0, [pc, #300]	; (8004e80 <CLI_CommandParser+0x3bc>)
 8004d52:	f00e fb94 	bl	801347e <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004d56:	9803      	ldr	r0, [sp, #12]
 8004d58:	f7fb f9de 	bl	8000118 <strlen>
 8004d5c:	0005      	movs	r5, r0
 8004d5e:	a807      	add	r0, sp, #28
 8004d60:	f7fb f9da 	bl	8000118 <strlen>
 8004d64:	1a2b      	subs	r3, r5, r0
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2217      	movs	r2, #23
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	4658      	mov	r0, fp
 8004d6e:	f004 fb3f 	bl	80093f0 <BroadcastMessage>
					if (InGroup(myID, group))
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <CLI_CommandParser+0x394>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4a44      	ldr	r2, [pc, #272]	; (8004e8c <CLI_CommandParser+0x3c8>)
 8004d7c:	5a9b      	ldrh	r3, [r3, r2]
 8004d7e:	464a      	mov	r2, r9
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	4113      	asrs	r3, r2
 8004d84:	07db      	lsls	r3, r3, #31
 8004d86:	d406      	bmi.n	8004d96 <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8004d88:	ab07      	add	r3, sp, #28
 8004d8a:	0022      	movs	r2, r4
 8004d8c:	4940      	ldr	r1, [pc, #256]	; (8004e90 <CLI_CommandParser+0x3cc>)
 8004d8e:	0020      	movs	r0, r4
 8004d90:	f00e fb20 	bl	80133d4 <siprintf>
 8004d94:	e6cf      	b.n	8004b36 <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004d96:	2299      	movs	r2, #153	; 0x99
 8004d98:	0092      	lsls	r2, r2, #2
 8004d9a:	0021      	movs	r1, r4
 8004d9c:	9805      	ldr	r0, [sp, #20]
 8004d9e:	f008 ffd5 	bl	800dd4c <FreeRTOS_CLIProcessCommand>
 8004da2:	0006      	movs	r6, r0
 8004da4:	e7f0      	b.n	8004d88 <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8004da6:	9803      	ldr	r0, [sp, #12]
 8004da8:	f7fb f9b6 	bl	8000118 <strlen>
 8004dac:	0006      	movs	r6, r0
 8004dae:	ab07      	add	r3, sp, #28
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fb f9b1 	bl	8000118 <strlen>
 8004db6:	1e72      	subs	r2, r6, #1
 8004db8:	1a12      	subs	r2, r2, r0
 8004dba:	0029      	movs	r1, r5
 8004dbc:	4830      	ldr	r0, [pc, #192]	; (8004e80 <CLI_CommandParser+0x3bc>)
 8004dbe:	f00e fb5e 	bl	801347e <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8004dc2:	9803      	ldr	r0, [sp, #12]
 8004dc4:	f7fb f9a8 	bl	8000118 <strlen>
 8004dc8:	0005      	movs	r5, r0
 8004dca:	a807      	add	r0, sp, #28
 8004dcc:	f7fb f9a4 	bl	8000118 <strlen>
 8004dd0:	3d01      	subs	r5, #1
 8004dd2:	1a2a      	subs	r2, r5, r0
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	2117      	movs	r1, #23
 8004dd8:	4650      	mov	r0, sl
 8004dda:	f004 fb31 	bl	8009440 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8004dde:	9a05      	ldr	r2, [sp, #20]
 8004de0:	492c      	ldr	r1, [pc, #176]	; (8004e94 <CLI_CommandParser+0x3d0>)
 8004de2:	0020      	movs	r0, r4
 8004de4:	f00e faf6 	bl	80133d4 <siprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 8004de8:	7823      	ldrb	r3, [r4, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <CLI_CommandParser+0x330>
 8004dee:	4643      	mov	r3, r8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004df4:	0020      	movs	r0, r4
 8004df6:	f7fb f98f 	bl	8000118 <strlen>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	0020      	movs	r0, r4
 8004e00:	f00e f9ea 	bl	80131d8 <memset>
 8004e04:	e72c      	b.n	8004c60 <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 8004e06:	0020      	movs	r0, r4
 8004e08:	f7fb f986 	bl	8000118 <strlen>
 8004e0c:	b282      	uxth	r2, r0
 8004e0e:	2301      	movs	r3, #1
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	3331      	adds	r3, #49	; 0x31
 8004e14:	0021      	movs	r1, r4
 8004e16:	9804      	ldr	r0, [sp, #16]
 8004e18:	f008 fdd4 	bl	800d9c4 <writePxMutex>
 8004e1c:	e7ea      	b.n	8004df4 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004e1e:	4643      	mov	r3, r8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d100      	bne.n	8004e26 <CLI_CommandParser+0x362>
 8004e24:	e68b      	b.n	8004b3e <CLI_CommandParser+0x7a>
 8004e26:	e6b7      	b.n	8004b98 <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004e28:	2301      	movs	r3, #1
 8004e2a:	425b      	negs	r3, r3
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	3333      	adds	r3, #51	; 0x33
 8004e30:	2238      	movs	r2, #56	; 0x38
 8004e32:	4919      	ldr	r1, [pc, #100]	; (8004e98 <CLI_CommandParser+0x3d4>)
 8004e34:	9804      	ldr	r0, [sp, #16]
 8004e36:	f008 fdc5 	bl	800d9c4 <writePxMutex>
}
 8004e3a:	e043      	b.n	8004ec4 <CLI_CommandParser+0x400>
 8004e3c:	20000a34 	.word	0x20000a34
 8004e40:	08015eb8 	.word	0x08015eb8
 8004e44:	08015f0c 	.word	0x08015f0c
 8004e48:	08015f58 	.word	0x08015f58
 8004e4c:	08015eb4 	.word	0x08015eb4
 8004e50:	08015b6c 	.word	0x08015b6c
 8004e54:	08015f14 	.word	0x08015f14
 8004e58:	20000866 	.word	0x20000866
 8004e5c:	08015ff8 	.word	0x08015ff8
 8004e60:	20006130 	.word	0x20006130
 8004e64:	2000029f 	.word	0x2000029f
 8004e68:	200008f8 	.word	0x200008f8
 8004e6c:	20000f1a 	.word	0x20000f1a
 8004e70:	08016024 	.word	0x08016024
 8004e74:	08015f5c 	.word	0x08015f5c
 8004e78:	08015f84 	.word	0x08015f84
 8004e7c:	20000514 	.word	0x20000514
 8004e80:	20000728 	.word	0x20000728
 8004e84:	08015fac 	.word	0x08015fac
 8004e88:	20000a06 	.word	0x20000a06
 8004e8c:	200006b0 	.word	0x200006b0
 8004e90:	08015fcc 	.word	0x08015fcc
 8004e94:	08016000 	.word	0x08016000
 8004e98:	08016044 	.word	0x08016044
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004e9c:	0020      	movs	r0, r4
 8004e9e:	f7fb f93b 	bl	8000118 <strlen>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	0020      	movs	r0, r4
 8004ea8:	f00e f996 	bl	80131d8 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8004eac:	2209      	movs	r2, #9
 8004eae:	2100      	movs	r1, #0
 8004eb0:	a807      	add	r0, sp, #28
 8004eb2:	f00e f991 	bl	80131d8 <memset>
	if(!recordSnippet && enableOutput)
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <CLI_CommandParser+0x420>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <CLI_CommandParser+0x400>
 8004ebe:	4643      	mov	r3, r8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1b1      	bne.n	8004e28 <CLI_CommandParser+0x364>
}
 8004ec4:	b00b      	add	sp, #44	; 0x2c
 8004ec6:	bc3c      	pop	{r2, r3, r4, r5}
 8004ec8:	4690      	mov	r8, r2
 8004eca:	4699      	mov	r9, r3
 8004ecc:	46a2      	mov	sl, r4
 8004ece:	46ab      	mov	fp, r5
 8004ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004ed2:	0020      	movs	r0, r4
 8004ed4:	f7fb f920 	bl	8000118 <strlen>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	2100      	movs	r1, #0
 8004edc:	0020      	movs	r0, r4
 8004ede:	f00e f97b 	bl	80131d8 <memset>
 8004ee2:	e7e3      	b.n	8004eac <CLI_CommandParser+0x3e8>
 8004ee4:	20000a34 	.word	0x20000a34

08004ee8 <prvCLITask>:
{
 8004ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eea:	46de      	mov	lr, fp
 8004eec:	4657      	mov	r7, sl
 8004eee:	464e      	mov	r6, r9
 8004ef0:	b5c0      	push	{r6, r7, lr}
 8004ef2:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4249      	negs	r1, r1
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f00a fa63 	bl	800f3c4 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8004efe:	230f      	movs	r3, #15
 8004f00:	aa02      	add	r2, sp, #8
 8004f02:	4694      	mov	ip, r2
 8004f04:	4463      	add	r3, ip
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004f0a:	f008 ff9d 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 8004f0e:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8004f10:	23e1      	movs	r3, #225	; 0xe1
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	4a60      	ldr	r2, [pc, #384]	; (8005098 <prvCLITask+0x1b0>)
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d00f      	beq.n	8004f3c <prvCLITask+0x54>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004f1c:	2401      	movs	r4, #1
			if (port != PcPort)
 8004f1e:	4e5f      	ldr	r6, [pc, #380]	; (800509c <prvCLITask+0x1b4>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004f20:	001d      	movs	r5, r3
 8004f22:	e003      	b.n	8004f2c <prvCLITask+0x44>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004f24:	3401      	adds	r4, #1
 8004f26:	b2e4      	uxtb	r4, r4
 8004f28:	2c06      	cmp	r4, #6
 8004f2a:	d007      	beq.n	8004f3c <prvCLITask+0x54>
			if (port != PcPort)
 8004f2c:	7833      	ldrb	r3, [r6, #0]
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	d0f8      	beq.n	8004f24 <prvCLITask+0x3c>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004f32:	0029      	movs	r1, r5
 8004f34:	0020      	movs	r0, r4
 8004f36:	f008 fdb3 	bl	800daa0 <UpdateBaudrate>
 8004f3a:	e7f3      	b.n	8004f24 <prvCLITask+0x3c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8004f3c:	4b58      	ldr	r3, [pc, #352]	; (80050a0 <prvCLITask+0x1b8>)
 8004f3e:	881a      	ldrh	r2, [r3, #0]
 8004f40:	0053      	lsls	r3, r2, #1
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4a57      	ldr	r2, [pc, #348]	; (80050a4 <prvCLITask+0x1bc>)
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	4a57      	ldr	r2, [pc, #348]	; (80050a8 <prvCLITask+0x1c0>)
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	4c57      	ldr	r4, [pc, #348]	; (80050ac <prvCLITask+0x1c4>)
 8004f50:	4d52      	ldr	r5, [pc, #328]	; (800509c <prvCLITask+0x1b4>)
 8004f52:	7829      	ldrb	r1, [r5, #0]
 8004f54:	9100      	str	r1, [sp, #0]
 8004f56:	4956      	ldr	r1, [pc, #344]	; (80050b0 <prvCLITask+0x1c8>)
 8004f58:	0020      	movs	r0, r4
 8004f5a:	f00e fa3b 	bl	80133d4 <siprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8004f5e:	22a4      	movs	r2, #164	; 0xa4
 8004f60:	7828      	ldrb	r0, [r5, #0]
 8004f62:	230a      	movs	r3, #10
 8004f64:	0092      	lsls	r2, r2, #2
 8004f66:	4953      	ldr	r1, [pc, #332]	; (80050b4 <prvCLITask+0x1cc>)
 8004f68:	f008 fd54 	bl	800da14 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 8004f6c:	0020      	movs	r0, r4
 8004f6e:	f7fb f8d3 	bl	8000118 <strlen>
 8004f72:	b282      	uxth	r2, r0
 8004f74:	7828      	ldrb	r0, [r5, #0]
 8004f76:	230a      	movs	r3, #10
 8004f78:	0021      	movs	r1, r4
 8004f7a:	f008 fd4b 	bl	800da14 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8004f7e:	2300      	movs	r3, #0
 8004f80:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <prvCLITask+0x1b4>)
 8004f84:	469a      	mov	sl, r3
 8004f86:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <prvCLITask+0x1d0>)
 8004f88:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004f8a:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 8004f8c:	4656      	mov	r6, sl
 8004f8e:	e061      	b.n	8005054 <prvCLITask+0x16c>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8004f90:	200f      	movs	r0, #15
 8004f92:	ad02      	add	r5, sp, #8
 8004f94:	46ac      	mov	ip, r5
 8004f96:	4460      	add	r0, ip
 8004f98:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 8004f9a:	0198      	lsls	r0, r3, #6
 8004f9c:	4a47      	ldr	r2, [pc, #284]	; (80050bc <prvCLITask+0x1d4>)
 8004f9e:	1812      	adds	r2, r2, r0
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 8004fa4:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <prvCLITask+0x1d0>)
 8004fa6:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 8004fa8:	240f      	movs	r4, #15
 8004faa:	ab02      	add	r3, sp, #8
 8004fac:	469c      	mov	ip, r3
 8004fae:	4464      	add	r4, ip
 8004fb0:	4b3a      	ldr	r3, [pc, #232]	; (800509c <prvCLITask+0x1b4>)
 8004fb2:	7818      	ldrb	r0, [r3, #0]
 8004fb4:	230a      	movs	r3, #10
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	0021      	movs	r1, r4
 8004fba:	f008 fd2b 	bl	800da14 <writePxITMutex>
		if( cRxedChar == '\r' )
 8004fbe:	7823      	ldrb	r3, [r4, #0]
 8004fc0:	2b0d      	cmp	r3, #13
 8004fc2:	d028      	beq.n	8005016 <prvCLITask+0x12e>
			if( cRxedChar == '\n' )
 8004fc4:	2b0a      	cmp	r3, #10
 8004fc6:	d043      	beq.n	8005050 <prvCLITask+0x168>
			else if( cRxedChar == '\b' )
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d059      	beq.n	8005080 <prvCLITask+0x198>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8004fcc:	001a      	movs	r2, r3
 8004fce:	3a20      	subs	r2, #32
 8004fd0:	2a5e      	cmp	r2, #94	; 0x5e
 8004fd2:	d83d      	bhi.n	8005050 <prvCLITask+0x168>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8004fd4:	465a      	mov	r2, fp
 8004fd6:	2a31      	cmp	r2, #49	; 0x31
 8004fd8:	dc3a      	bgt.n	8005050 <prvCLITask+0x168>
						cInputString[ cInputIndex ] = cRxedChar;
 8004fda:	4a39      	ldr	r2, [pc, #228]	; (80050c0 <prvCLITask+0x1d8>)
 8004fdc:	4659      	mov	r1, fp
 8004fde:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8004fe0:	465b      	mov	r3, fp
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	b25b      	sxtb	r3, r3
 8004fe6:	469b      	mov	fp, r3
 8004fe8:	e032      	b.n	8005050 <prvCLITask+0x168>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004fea:	2200      	movs	r2, #0
 8004fec:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8004fee:	f00a fcc3 	bl	800f978 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004ff2:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8004ff4:	7833      	ldrb	r3, [r6, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	0021      	movs	r1, r4
 8004ffa:	019a      	lsls	r2, r3, #6
 8004ffc:	18aa      	adds	r2, r5, r2
 8004ffe:	5d12      	ldrb	r2, [r2, r4]
 8005000:	2a00      	cmp	r2, #0
 8005002:	d1c5      	bne.n	8004f90 <prvCLITask+0xa8>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005004:	2c3f      	cmp	r4, #63	; 0x3f
 8005006:	d0f0      	beq.n	8004fea <prvCLITask+0x102>
			taskYIELD();
 8005008:	f00a fcb6 	bl	800f978 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800500c:	3401      	adds	r4, #1
 800500e:	b2a4      	uxth	r4, r4
 8005010:	2c3f      	cmp	r4, #63	; 0x3f
 8005012:	d9ef      	bls.n	8004ff4 <prvCLITask+0x10c>
 8005014:	e7c8      	b.n	8004fa8 <prvCLITask+0xc0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <prvCLITask+0x1b4>)
 8005018:	7818      	ldrb	r0, [r3, #0]
 800501a:	230a      	movs	r3, #10
 800501c:	2202      	movs	r2, #2
 800501e:	4929      	ldr	r1, [pc, #164]	; (80050c4 <prvCLITask+0x1dc>)
 8005020:	f008 fcf8 	bl	800da14 <writePxITMutex>
			if( cInputIndex == 0 )
 8005024:	465b      	mov	r3, fp
 8005026:	2b00      	cmp	r3, #0
 8005028:	d025      	beq.n	8005076 <prvCLITask+0x18e>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800502a:	4c25      	ldr	r4, [pc, #148]	; (80050c0 <prvCLITask+0x1d8>)
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <prvCLITask+0x1b4>)
 800502e:	7818      	ldrb	r0, [r3, #0]
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	0022      	movs	r2, r4
 8005034:	2101      	movs	r1, #1
 8005036:	f7ff fd45 	bl	8004ac4 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800503a:	0021      	movs	r1, r4
 800503c:	4822      	ldr	r0, [pc, #136]	; (80050c8 <prvCLITask+0x1e0>)
 800503e:	f00e fa05 	bl	801344c <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8005042:	2232      	movs	r2, #50	; 0x32
 8005044:	2100      	movs	r1, #0
 8005046:	0020      	movs	r0, r4
 8005048:	f00e f8c6 	bl	80131d8 <memset>
			cInputIndex = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	469b      	mov	fp, r3
		taskYIELD();
 8005050:	f00a fc92 	bl	800f978 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005054:	4653      	mov	r3, sl
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	3b01      	subs	r3, #1
 800505a:	464a      	mov	r2, r9
 800505c:	5cd2      	ldrb	r2, [r2, r3]
 800505e:	b294      	uxth	r4, r2
 8005060:	2c3f      	cmp	r4, #63	; 0x3f
 8005062:	d8a1      	bhi.n	8004fa8 <prvCLITask+0xc0>
			if (UARTRxBuf[PcPort-1][chr]) {
 8005064:	0011      	movs	r1, r2
 8005066:	019d      	lsls	r5, r3, #6
 8005068:	4814      	ldr	r0, [pc, #80]	; (80050bc <prvCLITask+0x1d4>)
 800506a:	1940      	adds	r0, r0, r5
 800506c:	5c82      	ldrb	r2, [r0, r2]
 800506e:	2a00      	cmp	r2, #0
 8005070:	d18e      	bne.n	8004f90 <prvCLITask+0xa8>
 8005072:	4d12      	ldr	r5, [pc, #72]	; (80050bc <prvCLITask+0x1d4>)
 8005074:	e7c6      	b.n	8005004 <prvCLITask+0x11c>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8005076:	4914      	ldr	r1, [pc, #80]	; (80050c8 <prvCLITask+0x1e0>)
 8005078:	4811      	ldr	r0, [pc, #68]	; (80050c0 <prvCLITask+0x1d8>)
 800507a:	f00e f9e7 	bl	801344c <strcpy>
 800507e:	e7d4      	b.n	800502a <prvCLITask+0x142>
				if( cInputIndex > 0 )
 8005080:	465b      	mov	r3, fp
 8005082:	2b00      	cmp	r3, #0
 8005084:	dde4      	ble.n	8005050 <prvCLITask+0x168>
					cInputIndex--;
 8005086:	3b01      	subs	r3, #1
 8005088:	b25b      	sxtb	r3, r3
 800508a:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <prvCLITask+0x1d8>)
 800508e:	2200      	movs	r2, #0
 8005090:	4659      	mov	r1, fp
 8005092:	545a      	strb	r2, [r3, r1]
 8005094:	e7dc      	b.n	8005050 <prvCLITask+0x168>
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20006130 	.word	0x20006130
 800509c:	2000029f 	.word	0x2000029f
 80050a0:	20000050 	.word	0x20000050
 80050a4:	08015bbc 	.word	0x08015bbc
 80050a8:	20000866 	.word	0x20000866
 80050ac:	20000a08 	.word	0x20000a08
 80050b0:	080160b0 	.word	0x080160b0
 80050b4:	080160dc 	.word	0x080160dc
 80050b8:	20000bf8 	.word	0x20000bf8
 80050bc:	20000ab8 	.word	0x20000ab8
 80050c0:	20000938 	.word	0x20000938
 80050c4:	080176f8 	.word	0x080176f8
 80050c8:	200009d4 	.word	0x200009d4

080050cc <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 80050d0:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <ParseSnippetCommand+0x78>)
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	3a01      	subs	r2, #1
 80050d6:	0093      	lsls	r3, r2, #2
 80050d8:	189b      	adds	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <ParseSnippetCommand+0x7c>)
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02c      	beq.n	8005140 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <ParseSnippetCommand+0x80>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d014      	beq.n	8005118 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <ParseSnippetCommand+0x80>)
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	782b      	ldrb	r3, [r5, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d012      	beq.n	800511e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 80050f8:	2113      	movs	r1, #19
 80050fa:	0028      	movs	r0, r5
 80050fc:	f00e f998 	bl	8013430 <strchr>
 8005100:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 8005102:	d011      	beq.n	8005128 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8005104:	1b42      	subs	r2, r0, r5
 8005106:	0029      	movs	r1, r5
 8005108:	0020      	movs	r0, r4
 800510a:	f00e f9b8 	bl	801347e <strncpy>
		ptrStart = ptrEnd+1;
 800510e:	3601      	adds	r6, #1
 8005110:	4b0e      	ldr	r3, [pc, #56]	; (800514c <ParseSnippetCommand+0x80>)
 8005112:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8005114:	2001      	movs	r0, #1
 8005116:	e006      	b.n	8005126 <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <ParseSnippetCommand+0x80>)
 800511a:	6018      	str	r0, [r3, #0]
 800511c:	e7e7      	b.n	80050ee <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <ParseSnippetCommand+0x80>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
		return false;
 8005124:	2000      	movs	r0, #0
}
 8005126:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 8005128:	0029      	movs	r1, r5
 800512a:	0020      	movs	r0, r4
 800512c:	f00e f98e 	bl	801344c <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8005130:	0020      	movs	r0, r4
 8005132:	f7fa fff1 	bl	8000118 <strlen>
 8005136:	182d      	adds	r5, r5, r0
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <ParseSnippetCommand+0x80>)
 800513a:	601d      	str	r5, [r3, #0]
	return true;
 800513c:	2001      	movs	r0, #1
 800513e:	e7f2      	b.n	8005126 <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005140:	2000      	movs	r0, #0
 8005142:	e7f0      	b.n	8005126 <ParseSnippetCommand+0x5a>
 8005144:	20000a07 	.word	0x20000a07
 8005148:	2000614c 	.word	0x2000614c
 800514c:	20000a30 	.word	0x20000a30

08005150 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b083      	sub	sp, #12
 8005154:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 8005156:	0083      	lsls	r3, r0, #2
 8005158:	181b      	adds	r3, r3, r0
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4a3f      	ldr	r2, [pc, #252]	; (800525c <CheckSnippetCondition+0x10c>)
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d003      	beq.n	800516c <CheckSnippetCondition+0x1c>
 8005164:	2b03      	cmp	r3, #3
 8005166:	d015      	beq.n	8005194 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 8005168:	2000      	movs	r0, #0
 800516a:	e011      	b.n	8005190 <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 800516c:	493b      	ldr	r1, [pc, #236]	; (800525c <CheckSnippetCondition+0x10c>)
 800516e:	0083      	lsls	r3, r0, #2
 8005170:	181a      	adds	r2, r3, r0
 8005172:	0092      	lsls	r2, r2, #2
 8005174:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8005176:	7890      	ldrb	r0, [r2, #2]
 8005178:	00c2      	lsls	r2, r0, #3
 800517a:	1812      	adds	r2, r2, r0
 800517c:	191b      	adds	r3, r3, r4
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	18cb      	adds	r3, r1, r3
 8005182:	4937      	ldr	r1, [pc, #220]	; (8005260 <CheckSnippetCondition+0x110>)
 8005184:	5c50      	ldrb	r0, [r2, r1]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	1ac0      	subs	r0, r0, r3
 800518a:	4243      	negs	r3, r0
 800518c:	4158      	adcs	r0, r3
 800518e:	b2c0      	uxtb	r0, r0
}
 8005190:	b003      	add	sp, #12
 8005192:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8005194:	4e31      	ldr	r6, [pc, #196]	; (800525c <CheckSnippetCondition+0x10c>)
 8005196:	0085      	lsls	r5, r0, #2
 8005198:	182b      	adds	r3, r5, r0
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	18f3      	adds	r3, r6, r3
 800519e:	78da      	ldrb	r2, [r3, #3]
 80051a0:	3a01      	subs	r2, #1
 80051a2:	0053      	lsls	r3, r2, #1
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <CheckSnippetCondition+0x114>)
 80051aa:	589b      	ldr	r3, [r3, r2]
 80051ac:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80051ae:	1829      	adds	r1, r5, r0
 80051b0:	0089      	lsls	r1, r1, #2
 80051b2:	3106      	adds	r1, #6
 80051b4:	1989      	adds	r1, r1, r6
 80051b6:	2204      	movs	r2, #4
 80051b8:	a801      	add	r0, sp, #4
 80051ba:	f00e f804 	bl	80131c6 <memcpy>
			switch (snippets[index].cond.mathOperator)
 80051be:	192d      	adds	r5, r5, r4
 80051c0:	00ad      	lsls	r5, r5, #2
 80051c2:	1975      	adds	r5, r6, r5
 80051c4:	786b      	ldrb	r3, [r5, #1]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d83f      	bhi.n	800524a <CheckSnippetCondition+0xfa>
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <CheckSnippetCondition+0x118>)
 80051ce:	58d3      	ldr	r3, [r2, r3]
 80051d0:	469f      	mov	pc, r3
      	case MATH_EQUAL:				if (flt1 == flt2)	return true;	break;
 80051d2:	1c39      	adds	r1, r7, #0
 80051d4:	9801      	ldr	r0, [sp, #4]
 80051d6:	f7fb f971 	bl	80004bc <__aeabi_fcmpeq>
 80051da:	1e43      	subs	r3, r0, #1
 80051dc:	4198      	sbcs	r0, r3
 80051de:	e7d7      	b.n	8005190 <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 80051e0:	1c39      	adds	r1, r7, #0
 80051e2:	9801      	ldr	r0, [sp, #4]
 80051e4:	f7fb f970 	bl	80004c8 <__aeabi_fcmplt>
 80051e8:	1e43      	subs	r3, r0, #1
 80051ea:	4198      	sbcs	r0, r3
 80051ec:	e7d0      	b.n	8005190 <CheckSnippetCondition+0x40>
		case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 80051ee:	1c39      	adds	r1, r7, #0
 80051f0:	9801      	ldr	r0, [sp, #4]
 80051f2:	f7fb f97d 	bl	80004f0 <__aeabi_fcmpgt>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d029      	beq.n	800524e <CheckSnippetCondition+0xfe>
 80051fa:	2100      	movs	r1, #0
 80051fc:	1c38      	adds	r0, r7, #0
 80051fe:	f7fb f95d 	bl	80004bc <__aeabi_fcmpeq>
 8005202:	4243      	negs	r3, r0
 8005204:	4158      	adcs	r0, r3
 8005206:	e7c3      	b.n	8005190 <CheckSnippetCondition+0x40>
	    case MATH_GREATER_EQUAL:	    if (flt1 >= flt2)	return true;	break;
 8005208:	1c39      	adds	r1, r7, #0
 800520a:	9801      	ldr	r0, [sp, #4]
 800520c:	f7fb f966 	bl	80004dc <__aeabi_fcmple>
 8005210:	1e43      	subs	r3, r0, #1
 8005212:	4198      	sbcs	r0, r3
 8005214:	e7bc      	b.n	8005190 <CheckSnippetCondition+0x40>
	    case MATH_SMALLER_EQUAL:	    if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8005216:	1c39      	adds	r1, r7, #0
 8005218:	9801      	ldr	r0, [sp, #4]
 800521a:	f7fb f973 	bl	8000504 <__aeabi_fcmpge>
 800521e:	2800      	cmp	r0, #0
 8005220:	d017      	beq.n	8005252 <CheckSnippetCondition+0x102>
 8005222:	2100      	movs	r1, #0
 8005224:	1c38      	adds	r0, r7, #0
 8005226:	f7fb f949 	bl	80004bc <__aeabi_fcmpeq>
 800522a:	4243      	negs	r3, r0
 800522c:	4158      	adcs	r0, r3
 800522e:	e7af      	b.n	8005190 <CheckSnippetCondition+0x40>
		case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8005230:	1c39      	adds	r1, r7, #0
 8005232:	9801      	ldr	r0, [sp, #4]
 8005234:	f7fb f942 	bl	80004bc <__aeabi_fcmpeq>
 8005238:	2800      	cmp	r0, #0
 800523a:	d10c      	bne.n	8005256 <CheckSnippetCondition+0x106>
 800523c:	2100      	movs	r1, #0
 800523e:	1c38      	adds	r0, r7, #0
 8005240:	f7fb f93c 	bl	80004bc <__aeabi_fcmpeq>
 8005244:	4243      	negs	r3, r0
 8005246:	4158      	adcs	r0, r3
 8005248:	e7a2      	b.n	8005190 <CheckSnippetCondition+0x40>
	return false;
 800524a:	2000      	movs	r0, #0
 800524c:	e7a0      	b.n	8005190 <CheckSnippetCondition+0x40>
 800524e:	2000      	movs	r0, #0
 8005250:	e79e      	b.n	8005190 <CheckSnippetCondition+0x40>
 8005252:	2000      	movs	r0, #0
 8005254:	e79c      	b.n	8005190 <CheckSnippetCondition+0x40>
 8005256:	2000      	movs	r0, #0
 8005258:	e79a      	b.n	8005190 <CheckSnippetCondition+0x40>
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	2000614c 	.word	0x2000614c
 8005260:	20000cb4 	.word	0x20000cb4
 8005264:	20000088 	.word	0x20000088
 8005268:	08015e98 	.word	0x08015e98

0800526c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 800526e:	f008 fdeb 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 8005272:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <ExecuteSnippet+0x7c>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d032      	beq.n	80052e2 <ExecuteSnippet+0x76>
 800527c:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 800527e:	4f1b      	ldr	r7, [pc, #108]	; (80052ec <ExecuteSnippet+0x80>)
 8005280:	e01a      	b.n	80052b8 <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <ExecuteSnippet+0x84>)
 8005284:	7818      	ldrb	r0, [r3, #0]
 8005286:	002b      	movs	r3, r5
 8005288:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <ExecuteSnippet+0x88>)
 800528a:	2100      	movs	r1, #0
 800528c:	f7ff fc1a 	bl	8004ac4 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8005290:	0028      	movs	r0, r5
 8005292:	f7fa ff41 	bl	8000118 <strlen>
 8005296:	0002      	movs	r2, r0
 8005298:	2100      	movs	r1, #0
 800529a:	0028      	movs	r0, r5
 800529c:	f00d ff9c 	bl	80131d8 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80052a0:	4914      	ldr	r1, [pc, #80]	; (80052f4 <ExecuteSnippet+0x88>)
 80052a2:	68f0      	ldr	r0, [r6, #12]
 80052a4:	f7ff ff12 	bl	80050cc <ParseSnippetCommand>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d1ea      	bne.n	8005282 <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80052ac:	3401      	adds	r4, #1
 80052ae:	b2a4      	uxth	r4, r4
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <ExecuteSnippet+0x7c>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d914      	bls.n	80052e2 <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 80052b8:	00a3      	lsls	r3, r4, #2
 80052ba:	191b      	adds	r3, r3, r4
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	7c1b      	ldrb	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f2      	beq.n	80052ac <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 80052c6:	b2e0      	uxtb	r0, r4
 80052c8:	f7ff ff42 	bl	8005150 <CheckSnippetCondition>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0ed      	beq.n	80052ac <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <ExecuteSnippet+0x8c>)
 80052d2:	2220      	movs	r2, #32
 80052d4:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80052d6:	00a3      	lsls	r3, r4, #2
 80052d8:	191e      	adds	r6, r3, r4
 80052da:	00b6      	lsls	r6, r6, #2
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <ExecuteSnippet+0x80>)
 80052de:	199e      	adds	r6, r3, r6
 80052e0:	e7de      	b.n	80052a0 <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 80052e2:	2000      	movs	r0, #0
 80052e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	20000a07 	.word	0x20000a07
 80052ec:	2000614c 	.word	0x2000614c
 80052f0:	2000029f 	.word	0x2000029f
 80052f4:	200009a0 	.word	0x200009a0
 80052f8:	20006130 	.word	0x20006130

080052fc <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80052fc:	2000      	movs	r0, #0
 80052fe:	4770      	bx	lr

08005300 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	0004      	movs	r4, r0
 8005306:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 800530c:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800530e:	2800      	cmp	r0, #0
 8005310:	d101      	bne.n	8005316 <setBaudrateCommand+0x16>
 8005312:	b672      	cpsid	i
 8005314:	e7fe      	b.n	8005314 <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005316:	aa01      	add	r2, sp, #4
 8005318:	2101      	movs	r1, #1
 800531a:	0028      	movs	r0, r5
 800531c:	f008 fd98 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005320:	2300      	movs	r3, #0
 8005322:	56c3      	ldrsb	r3, [r0, r3]
 8005324:	2b70      	cmp	r3, #112	; 0x70
 8005326:	d00c      	beq.n	8005342 <setBaudrateCommand+0x42>
		port = (uint8_t) atol((char*) pcParameterString1 + 1);
	} else {
		result = BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8005328:	466a      	mov	r2, sp
 800532a:	2102      	movs	r1, #2
 800532c:	0028      	movs	r0, r5
 800532e:	f008 fd8f 	bl	800de50 <FreeRTOS_CLIGetParameter>
	baudrate = (uint32_t) atol((char*) pcParameterString2);
 8005332:	f00d fed6 	bl	80130e2 <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 8005336:	2213      	movs	r2, #19
 8005338:	490f      	ldr	r1, [pc, #60]	; (8005378 <setBaudrateCommand+0x78>)
 800533a:	0020      	movs	r0, r4
 800533c:	f00d ff43 	bl	80131c6 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, baudrate, port);
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005340:	e016      	b.n	8005370 <setBaudrateCommand+0x70>
		port = (uint8_t) atol((char*) pcParameterString1 + 1);
 8005342:	3001      	adds	r0, #1
 8005344:	f00d fecd 	bl	80130e2 <atol>
 8005348:	0006      	movs	r6, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 800534a:	466a      	mov	r2, sp
 800534c:	2102      	movs	r1, #2
 800534e:	0028      	movs	r0, r5
 8005350:	f008 fd7e 	bl	800de50 <FreeRTOS_CLIGetParameter>
	baudrate = (uint32_t) atol((char*) pcParameterString2);
 8005354:	f00d fec5 	bl	80130e2 <atol>
 8005358:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 800535a:	b2f0      	uxtb	r0, r6
 800535c:	0029      	movs	r1, r5
 800535e:	f008 fb9f 	bl	800daa0 <UpdateBaudrate>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, baudrate, port);
 8005362:	23ff      	movs	r3, #255	; 0xff
 8005364:	4033      	ands	r3, r6
 8005366:	002a      	movs	r2, r5
 8005368:	4904      	ldr	r1, [pc, #16]	; (800537c <setBaudrateCommand+0x7c>)
 800536a:	0020      	movs	r0, r4
 800536c:	f00e f832 	bl	80133d4 <siprintf>
}
 8005370:	2000      	movs	r0, #0
 8005372:	b002      	add	sp, #8
 8005374:	bd70      	pop	{r4, r5, r6, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	08016d68 	.word	0x08016d68
 800537c:	08016d40 	.word	0x08016d40

08005380 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005380:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005382:	2800      	cmp	r0, #0
 8005384:	d101      	bne.n	800538a <flashsizeCommand+0xa>
 8005386:	b672      	cpsid	i
 8005388:	e7fe      	b.n	8005388 <flashsizeCommand+0x8>

	/* Respond to the command */
	sprintf((char*) pcWriteBuffer, (char*) pcMessageFLASH,(*(uint32_t*) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <flashsizeCommand+0x18>)
 800538c:	881a      	ldrh	r2, [r3, #0]
 800538e:	4903      	ldr	r1, [pc, #12]	; (800539c <flashsizeCommand+0x1c>)
 8005390:	f00e f820 	bl	80133d4 <siprintf>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005394:	2000      	movs	r0, #0
 8005396:	bd10      	pop	{r4, pc}
 8005398:	1ffff7cc 	.word	0x1ffff7cc
 800539c:	08016734 	.word	0x08016734

080053a0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80053a0:	b510      	push	{r4, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	0004      	movs	r4, r0
 80053a6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = (int8_t*) "Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	9301      	str	r3, [sp, #4]
	BOS_Status result = BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d101      	bne.n	80053b8 <GetReadPrecentageCommand+0x18>
 80053b4:	b672      	cpsid	i
 80053b6:	e7fe      	b.n	80053b6 <GetReadPrecentageCommand+0x16>

	/* Obtain the 1st parameter string. */

	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80053b8:	aa01      	add	r2, sp, #4
 80053ba:	2101      	movs	r1, #1
 80053bc:	f008 fd48 	bl	800de50 <FreeRTOS_CLIGetParameter>

	if (*pcParameterString1 == '2' || *pcParameterString1 == '3') {
 80053c0:	7803      	ldrb	r3, [r0, #0]
 80053c2:	3b32      	subs	r3, #50	; 0x32
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d907      	bls.n	80053d8 <GetReadPrecentageCommand+0x38>
		ADCports = (uint8_t) atol((char*) pcParameterString1);
		GetReadPrecentage(ADCports, &ADC_Value_CLI);

		sprintf(pcWriteBuffer, "ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	} else
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 80053c8:	2215      	movs	r2, #21
 80053ca:	490b      	ldr	r1, [pc, #44]	; (80053f8 <GetReadPrecentageCommand+0x58>)
 80053cc:	0020      	movs	r0, r4
 80053ce:	f00d fefa 	bl	80131c6 <memcpy>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;

}
 80053d2:	2000      	movs	r0, #0
 80053d4:	b002      	add	sp, #8
 80053d6:	bd10      	pop	{r4, pc}
		ADCports = (uint8_t) atol((char*) pcParameterString1);
 80053d8:	f00d fe83 	bl	80130e2 <atol>
		GetReadPrecentage(ADCports, &ADC_Value_CLI);
 80053dc:	b2c0      	uxtb	r0, r0
 80053de:	4669      	mov	r1, sp
 80053e0:	f003 f954 	bl	800868c <GetReadPrecentage>
		sprintf(pcWriteBuffer, "ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80053e4:	9800      	ldr	r0, [sp, #0]
 80053e6:	f7fd fa95 	bl	8002914 <__aeabi_f2d>
 80053ea:	0002      	movs	r2, r0
 80053ec:	000b      	movs	r3, r1
 80053ee:	4903      	ldr	r1, [pc, #12]	; (80053fc <GetReadPrecentageCommand+0x5c>)
 80053f0:	0020      	movs	r0, r4
 80053f2:	f00d ffef 	bl	80133d4 <siprintf>
 80053f6:	e7ec      	b.n	80053d2 <GetReadPrecentageCommand+0x32>
 80053f8:	08016430 	.word	0x08016430
 80053fc:	0801640c 	.word	0x0801640c

08005400 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005400:	b510      	push	{r4, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	0004      	movs	r4, r0
	float ADC_Value_TEMP = 0,ADC_Value_Vref=0;
 8005406:	2300      	movs	r3, #0
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800540c:	2800      	cmp	r0, #0
 800540e:	d101      	bne.n	8005414 <ReadVrefCommand+0x14>
 8005410:	b672      	cpsid	i
 8005412:	e7fe      	b.n	8005412 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP, &ADC_Value_Vref);
 8005414:	4669      	mov	r1, sp
 8005416:	a801      	add	r0, sp, #4
 8005418:	f003 f88e 	bl	8008538 <ReadTempAndVref>
	strcpy(pcWriteBuffer, (char*) &ADC_Value_TEMP);
 800541c:	a901      	add	r1, sp, #4
 800541e:	0020      	movs	r0, r4
 8005420:	f00e f814 	bl	801344c <strcpy>
	sprintf(pcWriteBuffer, "internal reference voltage is=%.2fV \r\n",
 8005424:	9800      	ldr	r0, [sp, #0]
 8005426:	f7fd fa75 	bl	8002914 <__aeabi_f2d>
 800542a:	0002      	movs	r2, r0
 800542c:	000b      	movs	r3, r1
 800542e:	4903      	ldr	r1, [pc, #12]	; (800543c <ReadVrefCommand+0x3c>)
 8005430:	0020      	movs	r0, r4
 8005432:	f00d ffcf 	bl	80133d4 <siprintf>
}
 8005436:	2000      	movs	r0, #0
 8005438:	b002      	add	sp, #8
 800543a:	bd10      	pop	{r4, pc}
 800543c:	0801647c 	.word	0x0801647c

08005440 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005440:	b510      	push	{r4, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	0004      	movs	r4, r0
	float ADC_Value_TEMP = 0,ADC_Value_Vref=0;
 8005446:	2300      	movs	r3, #0
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800544c:	2800      	cmp	r0, #0
 800544e:	d101      	bne.n	8005454 <ReadTempCommand+0x14>
 8005450:	b672      	cpsid	i
 8005452:	e7fe      	b.n	8005452 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP, &ADC_Value_Vref);
 8005454:	4669      	mov	r1, sp
 8005456:	a801      	add	r0, sp, #4
 8005458:	f003 f86e 	bl	8008538 <ReadTempAndVref>
	strcpy(pcWriteBuffer, (char*) &ADC_Value_TEMP);
 800545c:	a901      	add	r1, sp, #4
 800545e:	0020      	movs	r0, r4
 8005460:	f00d fff4 	bl	801344c <strcpy>
	sprintf(pcWriteBuffer, "internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005464:	9801      	ldr	r0, [sp, #4]
 8005466:	f7fd fa55 	bl	8002914 <__aeabi_f2d>
 800546a:	0002      	movs	r2, r0
 800546c:	000b      	movs	r3, r1
 800546e:	4903      	ldr	r1, [pc, #12]	; (800547c <ReadTempCommand+0x3c>)
 8005470:	0020      	movs	r0, r4
 8005472:	f00d ffaf 	bl	80133d4 <siprintf>
}
 8005476:	2000      	movs	r0, #0
 8005478:	b002      	add	sp, #8
 800547a:	bd10      	pop	{r4, pc}
 800547c:	08016448 	.word	0x08016448

08005480 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	0004      	movs	r4, r0
 8005486:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 = 0;
 800548c:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005492:	2800      	cmp	r0, #0
 8005494:	d101      	bne.n	800549a <ADCReadCommand+0x1a>
 8005496:	b672      	cpsid	i
 8005498:	e7fe      	b.n	8005498 <ADCReadCommand+0x18>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800549a:	aa03      	add	r2, sp, #12
 800549c:	2101      	movs	r1, #1
 800549e:	0030      	movs	r0, r6
 80054a0:	f008 fcd6 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80054a4:	0005      	movs	r5, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 80054a6:	aa02      	add	r2, sp, #8
 80054a8:	2102      	movs	r1, #2
 80054aa:	0030      	movs	r0, r6
 80054ac:	f008 fcd0 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80054b0:	0006      	movs	r6, r0
	if (*pcParameterString1 == '2' || *pcParameterString1 == '3') {
 80054b2:	782b      	ldrb	r3, [r5, #0]
 80054b4:	3b32      	subs	r3, #50	; 0x32
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d907      	bls.n	80054ca <ADCReadCommand+0x4a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong1);
 80054ba:	2215      	movs	r2, #21
 80054bc:	4919      	ldr	r1, [pc, #100]	; (8005524 <ADCReadCommand+0xa4>)
 80054be:	0020      	movs	r0, r4
 80054c0:	f00d fe81 	bl	80131c6 <memcpy>
}
 80054c4:	2000      	movs	r0, #0
 80054c6:	b004      	add	sp, #16
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports = (uint8_t) atol((char*) pcParameterString1);
 80054ca:	0028      	movs	r0, r5
 80054cc:	f00d fe09 	bl	80130e2 <atol>
 80054d0:	b2c5      	uxtb	r5, r0
		if (strcmp((char*) pcParameterString2, "top") == 0|| strcmp((char*) pcParameterString2, "bottom") == 0) {
 80054d2:	4915      	ldr	r1, [pc, #84]	; (8005528 <ADCReadCommand+0xa8>)
 80054d4:	0030      	movs	r0, r6
 80054d6:	f7fa fe15 	bl	8000104 <strcmp>
 80054da:	2800      	cmp	r0, #0
 80054dc:	d005      	beq.n	80054ea <ADCReadCommand+0x6a>
 80054de:	4913      	ldr	r1, [pc, #76]	; (800552c <ADCReadCommand+0xac>)
 80054e0:	0030      	movs	r0, r6
 80054e2:	f7fa fe0f 	bl	8000104 <strcmp>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d116      	bne.n	8005518 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports, ADC_Side);
 80054ea:	4e0f      	ldr	r6, [pc, #60]	; (8005528 <ADCReadCommand+0xa8>)
 80054ec:	0031      	movs	r1, r6
 80054ee:	0028      	movs	r0, r5
 80054f0:	f003 f992 	bl	8008818 <ADCSelectChannel>
			ReadADCChannel(ADCports, ADC_Side, &ADC_Value_CLI);
 80054f4:	aa01      	add	r2, sp, #4
 80054f6:	0031      	movs	r1, r6
 80054f8:	0028      	movs	r0, r5
 80054fa:	f003 f9bb 	bl	8008874 <ReadADCChannel>
			strcpy(pcWriteBuffer, (char*) &ADC_Value_CLI);
 80054fe:	a901      	add	r1, sp, #4
 8005500:	0020      	movs	r0, r4
 8005502:	f00d ffa3 	bl	801344c <strcpy>
					(uint16_t) ADC_Value_CLI);
 8005506:	9801      	ldr	r0, [sp, #4]
 8005508:	f7fb f830 	bl	800056c <__aeabi_f2uiz>
			sprintf(pcWriteBuffer, "ADC_Value=%u \r\n",
 800550c:	b282      	uxth	r2, r0
 800550e:	4908      	ldr	r1, [pc, #32]	; (8005530 <ADCReadCommand+0xb0>)
 8005510:	0020      	movs	r0, r4
 8005512:	f00d ff5f 	bl	80133d4 <siprintf>
 8005516:	e7d5      	b.n	80054c4 <ADCReadCommand+0x44>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005518:	2212      	movs	r2, #18
 800551a:	4906      	ldr	r1, [pc, #24]	; (8005534 <ADCReadCommand+0xb4>)
 800551c:	0020      	movs	r0, r4
 800551e:	f00d fe52 	bl	80131c6 <memcpy>
 8005522:	e7cf      	b.n	80054c4 <ADCReadCommand+0x44>
 8005524:	08016430 	.word	0x08016430
 8005528:	080163bc 	.word	0x080163bc
 800552c:	080163c0 	.word	0x080163c0
 8005530:	080163c8 	.word	0x080163c8
 8005534:	080163d8 	.word	0x080163d8

08005538 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553a:	46d6      	mov	lr, sl
 800553c:	4647      	mov	r7, r8
 800553e:	b580      	push	{r7, lr}
 8005540:	b085      	sub	sp, #20
 8005542:	0004      	movs	r4, r0
 8005544:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] = "H";
 800554a:	4b62      	ldr	r3, [pc, #392]	; (80056d4 <testportCommand+0x19c>)
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	ab02      	add	r3, sp, #8
 8005550:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005552:	2c00      	cmp	r4, #0
 8005554:	d101      	bne.n	800555a <testportCommand+0x22>
 8005556:	b672      	cpsid	i
 8005558:	e7fe      	b.n	8005558 <testportCommand+0x20>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800555a:	aa03      	add	r2, sp, #12
 800555c:	2101      	movs	r1, #1
 800555e:	f008 fc77 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8005562:	0005      	movs	r5, r0
	if (strcmp((char*) pcParameterString1, "all") == 0) {
 8005564:	495c      	ldr	r1, [pc, #368]	; (80056d8 <testportCommand+0x1a0>)
 8005566:	f7fa fdcd 	bl	8000104 <strcmp>
 800556a:	2800      	cmp	r0, #0
 800556c:	d000      	beq.n	8005570 <testportCommand+0x38>
 800556e:	e077      	b.n	8005660 <testportCommand+0x128>
			LastEnter = UARTRxBufIndex[PcPort - 1];
 8005570:	4b5a      	ldr	r3, [pc, #360]	; (80056dc <testportCommand+0x1a4>)
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	4b5a      	ldr	r3, [pc, #360]	; (80056e0 <testportCommand+0x1a8>)
 8005576:	189b      	adds	r3, r3, r2
 8005578:	3b01      	subs	r3, #1
 800557a:	781e      	ldrb	r6, [r3, #0]
 800557c:	2501      	movs	r5, #1
			if (PcPort != ports) {
 800557e:	4b57      	ldr	r3, [pc, #348]	; (80056dc <testportCommand+0x1a4>)
 8005580:	4698      	mov	r8, r3
 8005582:	b2eb      	uxtb	r3, r5
 8005584:	469a      	mov	sl, r3
 8005586:	4643      	mov	r3, r8
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	4553      	cmp	r3, sl
 800558c:	d108      	bne.n	80055a0 <testportCommand+0x68>
 800558e:	3501      	adds	r5, #1
		for (ports = 1; ports <= NumOfPorts; ports++) {
 8005590:	2d06      	cmp	r5, #6
 8005592:	d1f6      	bne.n	8005582 <testportCommand+0x4a>
}
 8005594:	2000      	movs	r0, #0
 8005596:	b005      	add	sp, #20
 8005598:	bc0c      	pop	{r2, r3}
 800559a:	4690      	mov	r8, r2
 800559c:	469a      	mov	sl, r3
 800559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				WriteVaule[0] = rand();
 80055a0:	f00d feca 	bl	8013338 <rand>
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports, WriteVaule, 1, 10, 100);
 80055a8:	2364      	movs	r3, #100	; 0x64
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	3b5a      	subs	r3, #90	; 0x5a
 80055ae:	2201      	movs	r2, #1
 80055b0:	0039      	movs	r1, r7
 80055b2:	4650      	mov	r0, sl
 80055b4:	f008 fa06 	bl	800d9c4 <writePxMutex>
				ReadValue[0] = (GetUart(ports)->Instance->RDR);
 80055b8:	4650      	mov	r0, sl
 80055ba:	f008 f9e5 	bl	800d988 <GetUart>
 80055be:	6803      	ldr	r3, [r0, #0]
 80055c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if (WriteVaule[0] == ReadValue[0])
 80055c2:	783a      	ldrb	r2, [r7, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d038      	beq.n	800563c <testportCommand+0x104>
					sprintf((char*) pcWriteBuffer, (char*) pcMessageFail,
 80055ca:	002a      	movs	r2, r5
 80055cc:	4945      	ldr	r1, [pc, #276]	; (80056e4 <testportCommand+0x1ac>)
 80055ce:	0020      	movs	r0, r4
 80055d0:	f00d ff00 	bl	80133d4 <siprintf>
					writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), 10, 100);
 80055d4:	0020      	movs	r0, r4
 80055d6:	f7fa fd9f 	bl	8000118 <strlen>
 80055da:	b282      	uxth	r2, r0
 80055dc:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <testportCommand+0x1a4>)
 80055de:	7818      	ldrb	r0, [r3, #0]
 80055e0:	2364      	movs	r3, #100	; 0x64
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	3b5a      	subs	r3, #90	; 0x5a
 80055e6:	0021      	movs	r1, r4
 80055e8:	f008 f9ec 	bl	800d9c4 <writePxMutex>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageWait);
 80055ec:	2254      	movs	r2, #84	; 0x54
 80055ee:	493e      	ldr	r1, [pc, #248]	; (80056e8 <testportCommand+0x1b0>)
 80055f0:	0020      	movs	r0, r4
 80055f2:	f00d fde8 	bl	80131c6 <memcpy>
				writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), 10, 100);
 80055f6:	0020      	movs	r0, r4
 80055f8:	f7fa fd8e 	bl	8000118 <strlen>
 80055fc:	b282      	uxth	r2, r0
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <testportCommand+0x1a4>)
 8005600:	7818      	ldrb	r0, [r3, #0]
 8005602:	2364      	movs	r3, #100	; 0x64
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	3b5a      	subs	r3, #90	; 0x5a
 8005608:	0021      	movs	r1, r4
 800560a:	f008 f9db 	bl	800d9c4 <writePxMutex>
				while (UARTRxBuf[PcPort - 1][LastEnter + 1] == 0) {
 800560e:	3601      	adds	r6, #1
 8005610:	4b32      	ldr	r3, [pc, #200]	; (80056dc <testportCommand+0x1a4>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	3b01      	subs	r3, #1
 8005616:	019b      	lsls	r3, r3, #6
 8005618:	4a34      	ldr	r2, [pc, #208]	; (80056ec <testportCommand+0x1b4>)
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	5d9b      	ldrb	r3, [r3, r6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1b5      	bne.n	800558e <testportCommand+0x56>
 8005622:	4692      	mov	sl, r2
 8005624:	4f2d      	ldr	r7, [pc, #180]	; (80056dc <testportCommand+0x1a4>)
					Delay_ms(1);
 8005626:	2001      	movs	r0, #1
 8005628:	f00a fb24 	bl	800fc74 <HAL_Delay>
				while (UARTRxBuf[PcPort - 1][LastEnter + 1] == 0) {
 800562c:	783b      	ldrb	r3, [r7, #0]
 800562e:	3b01      	subs	r3, #1
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	4453      	add	r3, sl
 8005634:	5d9b      	ldrb	r3, [r3, r6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f5      	beq.n	8005626 <testportCommand+0xee>
 800563a:	e7a8      	b.n	800558e <testportCommand+0x56>
					sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, ports);
 800563c:	002a      	movs	r2, r5
 800563e:	492c      	ldr	r1, [pc, #176]	; (80056f0 <testportCommand+0x1b8>)
 8005640:	0020      	movs	r0, r4
 8005642:	f00d fec7 	bl	80133d4 <siprintf>
					writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), 10, 100);
 8005646:	0020      	movs	r0, r4
 8005648:	f7fa fd66 	bl	8000118 <strlen>
 800564c:	b282      	uxth	r2, r0
 800564e:	4b23      	ldr	r3, [pc, #140]	; (80056dc <testportCommand+0x1a4>)
 8005650:	7818      	ldrb	r0, [r3, #0]
 8005652:	2364      	movs	r3, #100	; 0x64
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	3b5a      	subs	r3, #90	; 0x5a
 8005658:	0021      	movs	r1, r4
 800565a:	f008 f9b3 	bl	800d9c4 <writePxMutex>
 800565e:	e7c5      	b.n	80055ec <testportCommand+0xb4>
	} else if (pcParameterString1[0] == 'p') {
 8005660:	2300      	movs	r3, #0
 8005662:	56eb      	ldrsb	r3, [r5, r3]
 8005664:	2b70      	cmp	r3, #112	; 0x70
 8005666:	d005      	beq.n	8005674 <testportCommand+0x13c>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005668:	220f      	movs	r2, #15
 800566a:	4922      	ldr	r1, [pc, #136]	; (80056f4 <testportCommand+0x1bc>)
 800566c:	0020      	movs	r0, r4
 800566e:	f00d fdaa 	bl	80131c6 <memcpy>
 8005672:	e78f      	b.n	8005594 <testportCommand+0x5c>
		portt = (uint8_t) atol((char*) pcParameterString1 + 1);
 8005674:	1c68      	adds	r0, r5, #1
 8005676:	f00d fd34 	bl	80130e2 <atol>
 800567a:	0005      	movs	r5, r0
 800567c:	b2c7      	uxtb	r7, r0
		if (portt > 0 && portt <= NumOfPorts) {
 800567e:	1e7b      	subs	r3, r7, #1
 8005680:	2b04      	cmp	r3, #4
 8005682:	d820      	bhi.n	80056c6 <testportCommand+0x18e>
				WriteVaule[0] = rand();
 8005684:	f00d fe58 	bl	8013338 <rand>
 8005688:	ae02      	add	r6, sp, #8
 800568a:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt, WriteVaule, 1, cmd50ms, 100);
 800568c:	2364      	movs	r3, #100	; 0x64
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	3b32      	subs	r3, #50	; 0x32
 8005692:	2201      	movs	r2, #1
 8005694:	0031      	movs	r1, r6
 8005696:	0038      	movs	r0, r7
 8005698:	f008 f994 	bl	800d9c4 <writePxMutex>
				ReadValue[0] = (GetUart(portt)->Instance->RDR);
 800569c:	0038      	movs	r0, r7
 800569e:	f008 f973 	bl	800d988 <GetUart>
 80056a2:	6803      	ldr	r3, [r0, #0]
 80056a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if (WriteVaule[0] == ReadValue[0])
 80056a6:	7832      	ldrb	r2, [r6, #0]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d105      	bne.n	80056ba <testportCommand+0x182>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, portt);
 80056ae:	b2ea      	uxtb	r2, r5
 80056b0:	490f      	ldr	r1, [pc, #60]	; (80056f0 <testportCommand+0x1b8>)
 80056b2:	0020      	movs	r0, r4
 80056b4:	f00d fe8e 	bl	80133d4 <siprintf>
 80056b8:	e76c      	b.n	8005594 <testportCommand+0x5c>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageFail, portt);
 80056ba:	b2ea      	uxtb	r2, r5
 80056bc:	4909      	ldr	r1, [pc, #36]	; (80056e4 <testportCommand+0x1ac>)
 80056be:	0020      	movs	r0, r4
 80056c0:	f00d fe88 	bl	80133d4 <siprintf>
 80056c4:	e766      	b.n	8005594 <testportCommand+0x5c>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong1);
 80056c6:	221b      	movs	r2, #27
 80056c8:	490b      	ldr	r1, [pc, #44]	; (80056f8 <testportCommand+0x1c0>)
 80056ca:	0020      	movs	r0, r4
 80056cc:	f00d fd7b 	bl	80131c6 <memcpy>
	return pdFALSE;
 80056d0:	e760      	b.n	8005594 <testportCommand+0x5c>
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	08015830 	.word	0x08015830
 80056d8:	08015b8c 	.word	0x08015b8c
 80056dc:	2000029f 	.word	0x2000029f
 80056e0:	20000bf8 	.word	0x20000bf8
 80056e4:	0801804c 	.word	0x0801804c
 80056e8:	08018060 	.word	0x08018060
 80056ec:	20000ab8 	.word	0x20000ab8
 80056f0:	08018030 	.word	0x08018030
 80056f4:	080180b4 	.word	0x080180b4
 80056f8:	080180c4 	.word	0x080180c4

080056fc <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80056fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	0004      	movs	r4, r0
 8005702:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800570a:	2800      	cmp	r0, #0
 800570c:	d101      	bne.n	8005712 <unbridgeCommand+0x16>
 800570e:	b672      	cpsid	i
 8005710:	e7fe      	b.n	8005710 <unbridgeCommand+0x14>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005712:	aa01      	add	r2, sp, #4
 8005714:	2101      	movs	r1, #1
 8005716:	0028      	movs	r0, r5
 8005718:	f008 fb9a 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 800571c:	2300      	movs	r3, #0
 800571e:	56c3      	ldrsb	r3, [r0, r3]
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d00e      	beq.n	8005742 <unbridgeCommand+0x46>
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8005724:	466a      	mov	r2, sp
 8005726:	2102      	movs	r1, #2
 8005728:	0028      	movs	r0, r5
 800572a:	f008 fb91 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800572e:	2300      	movs	r3, #0
 8005730:	56c3      	ldrsb	r3, [r0, r3]
 8005732:	2b70      	cmp	r3, #112	; 0x70
 8005734:	d01e      	beq.n	8005774 <unbridgeCommand+0x78>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005736:	220f      	movs	r2, #15
 8005738:	491a      	ldr	r1, [pc, #104]	; (80057a4 <unbridgeCommand+0xa8>)
 800573a:	0020      	movs	r0, r4
 800573c:	f00d fd43 	bl	80131c6 <memcpy>
 8005740:	e015      	b.n	800576e <unbridgeCommand+0x72>
		port1 = (uint8_t) atol((char*) pcParameterString1 + 1);
 8005742:	3001      	adds	r0, #1
 8005744:	f00d fccd 	bl	80130e2 <atol>
 8005748:	0006      	movs	r6, r0
 800574a:	b2c7      	uxtb	r7, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 800574c:	466a      	mov	r2, sp
 800574e:	2102      	movs	r1, #2
 8005750:	0028      	movs	r0, r5
 8005752:	f008 fb7d 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005756:	2300      	movs	r3, #0
 8005758:	56c3      	ldrsb	r3, [r0, r3]
 800575a:	2b70      	cmp	r3, #112	; 0x70
 800575c:	d00e      	beq.n	800577c <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 800575e:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 8005760:	2867      	cmp	r0, #103	; 0x67
 8005762:	d0e8      	beq.n	8005736 <unbridgeCommand+0x3a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageFail);
 8005764:	2219      	movs	r2, #25
 8005766:	4910      	ldr	r1, [pc, #64]	; (80057a8 <unbridgeCommand+0xac>)
 8005768:	0020      	movs	r0, r4
 800576a:	f00d fd2c 	bl	80131c6 <memcpy>
}
 800576e:	2000      	movs	r0, #0
 8005770:	b003      	add	sp, #12
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = (uint8_t) atol((char*) pcParameterString2 + 1);
 8005774:	3001      	adds	r0, #1
 8005776:	f00d fcb4 	bl	80130e2 <atol>
 800577a:	e7dc      	b.n	8005736 <unbridgeCommand+0x3a>
 800577c:	3001      	adds	r0, #1
 800577e:	f00d fcb0 	bl	80130e2 <atol>
 8005782:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8005784:	b2c1      	uxtb	r1, r0
 8005786:	0038      	movs	r0, r7
 8005788:	f7fe fea0 	bl	80044cc <Unbridge>
	if (result == BOS_OK)
 800578c:	2800      	cmp	r0, #0
 800578e:	d1e7      	bne.n	8005760 <unbridgeCommand+0x64>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, port1, port2);
 8005790:	22ff      	movs	r2, #255	; 0xff
 8005792:	002b      	movs	r3, r5
 8005794:	4013      	ands	r3, r2
 8005796:	4032      	ands	r2, r6
 8005798:	4904      	ldr	r1, [pc, #16]	; (80057ac <unbridgeCommand+0xb0>)
 800579a:	0020      	movs	r0, r4
 800579c:	f00d fe1a 	bl	80133d4 <siprintf>
 80057a0:	e7e5      	b.n	800576e <unbridgeCommand+0x72>
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	080180b4 	.word	0x080180b4
 80057a8:	0801817c 	.word	0x0801817c
 80057ac:	0801815c 	.word	0x0801815c

080057b0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80057b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b2:	b083      	sub	sp, #12
 80057b4:	0004      	movs	r4, r0
 80057b6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80057be:	2800      	cmp	r0, #0
 80057c0:	d101      	bne.n	80057c6 <bridgeCommand+0x16>
 80057c2:	b672      	cpsid	i
 80057c4:	e7fe      	b.n	80057c4 <bridgeCommand+0x14>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80057c6:	aa01      	add	r2, sp, #4
 80057c8:	2101      	movs	r1, #1
 80057ca:	0028      	movs	r0, r5
 80057cc:	f008 fb40 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80057d0:	2300      	movs	r3, #0
 80057d2:	56c3      	ldrsb	r3, [r0, r3]
 80057d4:	2b70      	cmp	r3, #112	; 0x70
 80057d6:	d00e      	beq.n	80057f6 <bridgeCommand+0x46>
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 80057d8:	466a      	mov	r2, sp
 80057da:	2102      	movs	r1, #2
 80057dc:	0028      	movs	r0, r5
 80057de:	f008 fb37 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80057e2:	2300      	movs	r3, #0
 80057e4:	56c3      	ldrsb	r3, [r0, r3]
 80057e6:	2b70      	cmp	r3, #112	; 0x70
 80057e8:	d01e      	beq.n	8005828 <bridgeCommand+0x78>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 80057ea:	220f      	movs	r2, #15
 80057ec:	491a      	ldr	r1, [pc, #104]	; (8005858 <bridgeCommand+0xa8>)
 80057ee:	0020      	movs	r0, r4
 80057f0:	f00d fce9 	bl	80131c6 <memcpy>
 80057f4:	e015      	b.n	8005822 <bridgeCommand+0x72>
		port1 = (uint8_t) atol((char*) pcParameterString1 + 1);
 80057f6:	3001      	adds	r0, #1
 80057f8:	f00d fc73 	bl	80130e2 <atol>
 80057fc:	0006      	movs	r6, r0
 80057fe:	b2c7      	uxtb	r7, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8005800:	466a      	mov	r2, sp
 8005802:	2102      	movs	r1, #2
 8005804:	0028      	movs	r0, r5
 8005806:	f008 fb23 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800580a:	2300      	movs	r3, #0
 800580c:	56c3      	ldrsb	r3, [r0, r3]
 800580e:	2b70      	cmp	r3, #112	; 0x70
 8005810:	d00e      	beq.n	8005830 <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8005812:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 8005814:	2867      	cmp	r0, #103	; 0x67
 8005816:	d0e8      	beq.n	80057ea <bridgeCommand+0x3a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageFail);
 8005818:	2217      	movs	r2, #23
 800581a:	4910      	ldr	r1, [pc, #64]	; (800585c <bridgeCommand+0xac>)
 800581c:	0020      	movs	r0, r4
 800581e:	f00d fcd2 	bl	80131c6 <memcpy>
}
 8005822:	2000      	movs	r0, #0
 8005824:	b003      	add	sp, #12
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = (uint8_t) atol((char*) pcParameterString2 + 1);
 8005828:	3001      	adds	r0, #1
 800582a:	f00d fc5a 	bl	80130e2 <atol>
 800582e:	e7dc      	b.n	80057ea <bridgeCommand+0x3a>
 8005830:	3001      	adds	r0, #1
 8005832:	f00d fc56 	bl	80130e2 <atol>
 8005836:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005838:	b2c1      	uxtb	r1, r0
 800583a:	0038      	movs	r0, r7
 800583c:	f7fe fe32 	bl	80044a4 <Bridge>
	if (result == BOS_OK)
 8005840:	2800      	cmp	r0, #0
 8005842:	d1e7      	bne.n	8005814 <bridgeCommand+0x64>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, port1, port2);
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	002b      	movs	r3, r5
 8005848:	4013      	ands	r3, r2
 800584a:	4032      	ands	r2, r6
 800584c:	4904      	ldr	r1, [pc, #16]	; (8005860 <bridgeCommand+0xb0>)
 800584e:	0020      	movs	r0, r4
 8005850:	f00d fdc0 	bl	80133d4 <siprintf>
 8005854:	e7e5      	b.n	8005822 <bridgeCommand+0x72>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	080180b4 	.word	0x080180b4
 800585c:	080165d0 	.word	0x080165d0
 8005860:	080165ac 	.word	0x080165ac

08005864 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005866:	b085      	sub	sp, #20
 8005868:	0005      	movs	r5, r0
 800586a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005870:	2d00      	cmp	r5, #0
 8005872:	d101      	bne.n	8005878 <delSnipCommand+0x14>
 8005874:	b672      	cpsid	i
 8005876:	e7fe      	b.n	8005876 <delSnipCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005878:	aa03      	add	r2, sp, #12
 800587a:	2101      	movs	r1, #1
 800587c:	f008 fae8 	bl	800de50 <FreeRTOS_CLIGetParameter>
	uint8_t index = (uint8_t) atoi((char*) pcParameterString1);
 8005880:	f00d fc29 	bl	80130d6 <atoi>
 8005884:	9001      	str	r0, [sp, #4]
 8005886:	b2c6      	uxtb	r6, r0
	if (!index || index > numOfRecordedSnippets)
 8005888:	2e00      	cmp	r6, #0
 800588a:	d003      	beq.n	8005894 <delSnipCommand+0x30>
 800588c:	4b27      	ldr	r3, [pc, #156]	; (800592c <delSnipCommand+0xc8>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	42b3      	cmp	r3, r6
 8005892:	d207      	bcs.n	80058a4 <delSnipCommand+0x40>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005894:	2223      	movs	r2, #35	; 0x23
 8005896:	4926      	ldr	r1, [pc, #152]	; (8005930 <delSnipCommand+0xcc>)
 8005898:	0028      	movs	r0, r5
 800589a:	f00d fc94 	bl	80131c6 <memcpy>
}
 800589e:	2000      	movs	r0, #0
 80058a0:	b005      	add	sp, #20
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType = 0;
 80058a4:	466b      	mov	r3, sp
 80058a6:	791a      	ldrb	r2, [r3, #4]
 80058a8:	3a01      	subs	r2, #1
 80058aa:	4822      	ldr	r0, [pc, #136]	; (8005934 <delSnipCommand+0xd0>)
 80058ac:	2314      	movs	r3, #20
 80058ae:	4353      	muls	r3, r2
 80058b0:	2700      	movs	r7, #0
 80058b2:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator = 0;
 80058b4:	18c4      	adds	r4, r0, r3
 80058b6:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1, 0, 4);
 80058b8:	3302      	adds	r3, #2
 80058ba:	1818      	adds	r0, r3, r0
 80058bc:	2204      	movs	r2, #4
 80058be:	0039      	movs	r1, r7
 80058c0:	f00d fc8a 	bl	80131d8 <memset>
		snippets[index - 1].state = false;
 80058c4:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 80058c6:	68e0      	ldr	r0, [r4, #12]
 80058c8:	f00d fc52 	bl	8013170 <free>
		snippets[index - 1].cmd = NULL;
 80058cc:	60e7      	str	r7, [r4, #12]
		for (uint8_t s = index; s < numOfRecordedSnippets; s++) {
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <delSnipCommand+0xc8>)
 80058d0:	781f      	ldrb	r7, [r3, #0]
 80058d2:	42be      	cmp	r6, r7
 80058d4:	d213      	bcs.n	80058fe <delSnipCommand+0x9a>
 80058d6:	466b      	mov	r3, sp
 80058d8:	7919      	ldrb	r1, [r3, #4]
 80058da:	2214      	movs	r2, #20
 80058dc:	0014      	movs	r4, r2
 80058de:	434c      	muls	r4, r1
 80058e0:	4814      	ldr	r0, [pc, #80]	; (8005934 <delSnipCommand+0xd0>)
 80058e2:	1824      	adds	r4, r4, r0
 80058e4:	1e7b      	subs	r3, r7, #1
 80058e6:	1b9b      	subs	r3, r3, r6
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	185b      	adds	r3, r3, r1
 80058ec:	4353      	muls	r3, r2
 80058ee:	1880      	adds	r0, r0, r2
 80058f0:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 80058f2:	7823      	ldrb	r3, [r4, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <delSnipCommand+0xb0>
 80058f8:	3414      	adds	r4, #20
		for (uint8_t s = index; s < numOfRecordedSnippets; s++) {
 80058fa:	42b4      	cmp	r4, r6
 80058fc:	d1f9      	bne.n	80058f2 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 80058fe:	1e7b      	subs	r3, r7, #1
 8005900:	4a0a      	ldr	r2, [pc, #40]	; (800592c <delSnipCommand+0xc8>)
 8005902:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005904:	f005 fcae 	bl	800b264 <SaveToRO>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 8005908:	2236      	movs	r2, #54	; 0x36
 800590a:	490b      	ldr	r1, [pc, #44]	; (8005938 <delSnipCommand+0xd4>)
 800590c:	0028      	movs	r0, r5
 800590e:	f00d fc5a 	bl	80131c6 <memcpy>
 8005912:	e7c4      	b.n	800589e <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1], &snippets[s], sizeof(snippet_t));
 8005914:	2214      	movs	r2, #20
 8005916:	0021      	movs	r1, r4
 8005918:	0020      	movs	r0, r4
 800591a:	3814      	subs	r0, #20
 800591c:	f00d fc53 	bl	80131c6 <memcpy>
				memset(&snippets[s], 0, sizeof(snippet_t));
 8005920:	2214      	movs	r2, #20
 8005922:	2100      	movs	r1, #0
 8005924:	0020      	movs	r0, r4
 8005926:	f00d fc57 	bl	80131d8 <memset>
 800592a:	e7e5      	b.n	80058f8 <delSnipCommand+0x94>
 800592c:	20000a07 	.word	0x20000a07
 8005930:	080166f0 	.word	0x080166f0
 8005934:	2000614c 	.word	0x2000614c
 8005938:	080166b8 	.word	0x080166b8

0800593c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800593c:	b510      	push	{r4, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	0004      	movs	r4, r0
 8005942:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005948:	2c00      	cmp	r4, #0
 800594a:	d101      	bne.n	8005950 <pauseSnipCommand+0x14>
 800594c:	b672      	cpsid	i
 800594e:	e7fe      	b.n	800594e <pauseSnipCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005950:	aa01      	add	r2, sp, #4
 8005952:	2101      	movs	r1, #1
 8005954:	f008 fa7c 	bl	800de50 <FreeRTOS_CLIGetParameter>
	uint8_t index = (uint8_t) atoi((char*) pcParameterString1);
 8005958:	f00d fbbd 	bl	80130d6 <atoi>
 800595c:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <pauseSnipCommand+0x2e>
 8005962:	4a0e      	ldr	r2, [pc, #56]	; (800599c <pauseSnipCommand+0x60>)
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d207      	bcs.n	800597a <pauseSnipCommand+0x3e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 800596a:	2223      	movs	r2, #35	; 0x23
 800596c:	490c      	ldr	r1, [pc, #48]	; (80059a0 <pauseSnipCommand+0x64>)
 800596e:	0020      	movs	r0, r4
 8005970:	f00d fc29 	bl	80131c6 <memcpy>
}
 8005974:	2000      	movs	r0, #0
 8005976:	b002      	add	sp, #8
 8005978:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 800597a:	b2c0      	uxtb	r0, r0
 800597c:	3801      	subs	r0, #1
 800597e:	2314      	movs	r3, #20
 8005980:	4343      	muls	r3, r0
 8005982:	4808      	ldr	r0, [pc, #32]	; (80059a4 <pauseSnipCommand+0x68>)
 8005984:	18c0      	adds	r0, r0, r3
 8005986:	2300      	movs	r3, #0
 8005988:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 800598a:	f005 fc6b 	bl	800b264 <SaveToRO>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 800598e:	2235      	movs	r2, #53	; 0x35
 8005990:	4905      	ldr	r1, [pc, #20]	; (80059a8 <pauseSnipCommand+0x6c>)
 8005992:	0020      	movs	r0, r4
 8005994:	f00d fc17 	bl	80131c6 <memcpy>
 8005998:	e7ec      	b.n	8005974 <pauseSnipCommand+0x38>
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	20000a07 	.word	0x20000a07
 80059a0:	080166f0 	.word	0x080166f0
 80059a4:	2000614c 	.word	0x2000614c
 80059a8:	08016b00 	.word	0x08016b00

080059ac <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80059ac:	b510      	push	{r4, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	0004      	movs	r4, r0
 80059b2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	d101      	bne.n	80059c0 <actSnipCommand+0x14>
 80059bc:	b672      	cpsid	i
 80059be:	e7fe      	b.n	80059be <actSnipCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80059c0:	aa01      	add	r2, sp, #4
 80059c2:	2101      	movs	r1, #1
 80059c4:	f008 fa44 	bl	800de50 <FreeRTOS_CLIGetParameter>
	uint8_t index = (uint8_t) atoi((char*) pcParameterString1);
 80059c8:	f00d fb85 	bl	80130d6 <atoi>
 80059cc:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <actSnipCommand+0x2e>
 80059d2:	4a0e      	ldr	r2, [pc, #56]	; (8005a0c <actSnipCommand+0x60>)
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d207      	bcs.n	80059ea <actSnipCommand+0x3e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 80059da:	2223      	movs	r2, #35	; 0x23
 80059dc:	490c      	ldr	r1, [pc, #48]	; (8005a10 <actSnipCommand+0x64>)
 80059de:	0020      	movs	r0, r4
 80059e0:	f00d fbf1 	bl	80131c6 <memcpy>
}
 80059e4:	2000      	movs	r0, #0
 80059e6:	b002      	add	sp, #8
 80059e8:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 80059ea:	b2c0      	uxtb	r0, r0
 80059ec:	3801      	subs	r0, #1
 80059ee:	2314      	movs	r3, #20
 80059f0:	4343      	muls	r3, r0
 80059f2:	4808      	ldr	r0, [pc, #32]	; (8005a14 <actSnipCommand+0x68>)
 80059f4:	18c0      	adds	r0, r0, r3
 80059f6:	2301      	movs	r3, #1
 80059f8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80059fa:	f005 fc33 	bl	800b264 <SaveToRO>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 80059fe:	2238      	movs	r2, #56	; 0x38
 8005a00:	4905      	ldr	r1, [pc, #20]	; (8005a18 <actSnipCommand+0x6c>)
 8005a02:	0020      	movs	r0, r4
 8005a04:	f00d fbdf 	bl	80131c6 <memcpy>
 8005a08:	e7ec      	b.n	80059e4 <actSnipCommand+0x38>
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	20000a07 	.word	0x20000a07
 8005a10:	080166f0 	.word	0x080166f0
 8005a14:	2000614c 	.word	0x2000614c
 8005a18:	080164b4 	.word	0x080164b4

08005a1c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1e:	46d6      	mov	lr, sl
 8005a20:	464f      	mov	r7, r9
 8005a22:	4646      	mov	r6, r8
 8005a24:	b5c0      	push	{r6, r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	0004      	movs	r4, r0
	char status[2][7] = { "Paused", "Active" };
 8005a2a:	aa06      	add	r2, sp, #24
 8005a2c:	4b7a      	ldr	r3, [pc, #488]	; (8005c18 <snipCommand+0x1fc>)
 8005a2e:	3304      	adds	r3, #4
 8005a30:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005a32:	c223      	stmia	r2!, {r0, r1, r5}
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	d101      	bne.n	8005a40 <snipCommand+0x24>
 8005a3c:	b672      	cpsid	i
 8005a3e:	e7fe      	b.n	8005a3e <snipCommand+0x22>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome,strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005a40:	4b76      	ldr	r3, [pc, #472]	; (8005c1c <snipCommand+0x200>)
 8005a42:	7818      	ldrb	r0, [r3, #0]
 8005a44:	2301      	movs	r3, #1
 8005a46:	425b      	negs	r3, r3
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	3333      	adds	r3, #51	; 0x33
 8005a4c:	2237      	movs	r2, #55	; 0x37
 8005a4e:	4974      	ldr	r1, [pc, #464]	; (8005c20 <snipCommand+0x204>)
 8005a50:	f007 ffb8 	bl	800d9c4 <writePxMutex>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8005a54:	4b73      	ldr	r3, [pc, #460]	; (8005c24 <snipCommand+0x208>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d100      	bne.n	8005a5e <snipCommand+0x42>
 8005a5c:	e0d0      	b.n	8005c00 <snipCommand+0x1e4>
 8005a5e:	2500      	movs	r5, #0
		if (snippets[s].cond.conditionType)
 8005a60:	4b71      	ldr	r3, [pc, #452]	; (8005c28 <snipCommand+0x20c>)
 8005a62:	4698      	mov	r8, r3
 8005a64:	e0ba      	b.n	8005bdc <snipCommand+0x1c0>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageSnipStart, count,status[snippets[s].state]);
 8005a66:	4b70      	ldr	r3, [pc, #448]	; (8005c28 <snipCommand+0x20c>)
 8005a68:	4699      	mov	r9, r3
 8005a6a:	00ab      	lsls	r3, r5, #2
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	195b      	adds	r3, r3, r5
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	444b      	add	r3, r9
 8005a74:	7c1a      	ldrb	r2, [r3, #16]
 8005a76:	00d3      	lsls	r3, r2, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	aa06      	add	r2, sp, #24
 8005a7c:	4694      	mov	ip, r2
 8005a7e:	4463      	add	r3, ip
 8005a80:	003a      	movs	r2, r7
 8005a82:	496a      	ldr	r1, [pc, #424]	; (8005c2c <snipCommand+0x210>)
 8005a84:	0020      	movs	r0, r4
 8005a86:	f00d fca5 	bl	80133d4 <siprintf>
		switch (snippets[s].cond.conditionType) {
 8005a8a:	4653      	mov	r3, sl
 8005a8c:	195b      	adds	r3, r3, r5
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	464a      	mov	r2, r9
 8005a92:	5c9b      	ldrb	r3, [r3, r2]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d02d      	beq.n	8005af4 <snipCommand+0xd8>
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d000      	beq.n	8005a9e <snipCommand+0x82>
 8005a9c:	e0a9      	b.n	8005bf2 <snipCommand+0x1d6>
			memcpy((uint8_t*) &flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005a9e:	00a9      	lsls	r1, r5, #2
 8005aa0:	1949      	adds	r1, r1, r5
 8005aa2:	0089      	lsls	r1, r1, #2
 8005aa4:	3106      	adds	r1, #6
 8005aa6:	4b60      	ldr	r3, [pc, #384]	; (8005c28 <snipCommand+0x20c>)
 8005aa8:	4699      	mov	r9, r3
 8005aaa:	4449      	add	r1, r9
 8005aac:	2204      	movs	r2, #4
 8005aae:	a805      	add	r0, sp, #20
 8005ab0:	f00d fb89 	bl	80131c6 <memcpy>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipModuleParamConst,(char*) pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1], flt1);
 8005ab4:	00ad      	lsls	r5, r5, #2
 8005ab6:	19ad      	adds	r5, r5, r6
 8005ab8:	00ad      	lsls	r5, r5, #2
 8005aba:	444d      	add	r5, r9
 8005abc:	78ea      	ldrb	r2, [r5, #3]
 8005abe:	3a01      	subs	r2, #1
 8005ac0:	0053      	lsls	r3, r2, #1
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4a5a      	ldr	r2, [pc, #360]	; (8005c30 <snipCommand+0x214>)
 8005ac8:	18d3      	adds	r3, r2, r3
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4699      	mov	r9, r3
 8005ace:	9805      	ldr	r0, [sp, #20]
 8005ad0:	f7fc ff20 	bl	8002914 <__aeabi_f2d>
 8005ad4:	9002      	str	r0, [sp, #8]
 8005ad6:	9103      	str	r1, [sp, #12]
 8005ad8:	786b      	ldrb	r3, [r5, #1]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	005a      	lsls	r2, r3, #1
 8005ade:	18d2      	adds	r2, r2, r3
 8005ae0:	4b54      	ldr	r3, [pc, #336]	; (8005c34 <snipCommand+0x218>)
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	0022      	movs	r2, r4
 8005aea:	4953      	ldr	r1, [pc, #332]	; (8005c38 <snipCommand+0x21c>)
 8005aec:	0020      	movs	r0, r4
 8005aee:	f00d fc71 	bl	80133d4 <siprintf>
			break;
 8005af2:	e07e      	b.n	8005bf2 <snipCommand+0x1d6>
			switch (snippets[s].cond.buffer1[1]) {
 8005af4:	00ab      	lsls	r3, r5, #2
 8005af6:	195b      	adds	r3, r3, r5
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a4b      	ldr	r2, [pc, #300]	; (8005c28 <snipCommand+0x20c>)
 8005afc:	18d3      	adds	r3, r2, r3
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	3b05      	subs	r3, #5
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	2a09      	cmp	r2, #9
 8005b06:	d874      	bhi.n	8005bf2 <snipCommand+0x1d6>
 8005b08:	0093      	lsls	r3, r2, #2
 8005b0a:	4a4c      	ldr	r2, [pc, #304]	; (8005c3c <snipCommand+0x220>)
 8005b0c:	58d3      	ldr	r3, [r2, r3]
 8005b0e:	469f      	mov	pc, r3
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventClicked,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005b10:	2314      	movs	r3, #20
 8005b12:	436b      	muls	r3, r5
 8005b14:	4a44      	ldr	r2, [pc, #272]	; (8005c28 <snipCommand+0x20c>)
 8005b16:	18d2      	adds	r2, r2, r3
 8005b18:	7893      	ldrb	r3, [r2, #2]
 8005b1a:	68d2      	ldr	r2, [r2, #12]
 8005b1c:	9200      	str	r2, [sp, #0]
 8005b1e:	0022      	movs	r2, r4
 8005b20:	4947      	ldr	r1, [pc, #284]	; (8005c40 <snipCommand+0x224>)
 8005b22:	0020      	movs	r0, r4
 8005b24:	f00d fc56 	bl	80133d4 <siprintf>
				break;
 8005b28:	e063      	b.n	8005bf2 <snipCommand+0x1d6>
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventDblClicked,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005b2a:	2314      	movs	r3, #20
 8005b2c:	436b      	muls	r3, r5
 8005b2e:	4a3e      	ldr	r2, [pc, #248]	; (8005c28 <snipCommand+0x20c>)
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	7893      	ldrb	r3, [r2, #2]
 8005b34:	68d2      	ldr	r2, [r2, #12]
 8005b36:	9200      	str	r2, [sp, #0]
 8005b38:	0022      	movs	r2, r4
 8005b3a:	4942      	ldr	r1, [pc, #264]	; (8005c44 <snipCommand+0x228>)
 8005b3c:	0020      	movs	r0, r4
 8005b3e:	f00d fc49 	bl	80133d4 <siprintf>
				break;
 8005b42:	e056      	b.n	8005bf2 <snipCommand+0x1d6>
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventPressed,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2], snippets[s].cmd);
 8005b44:	2314      	movs	r3, #20
 8005b46:	436b      	muls	r3, r5
 8005b48:	4a37      	ldr	r2, [pc, #220]	; (8005c28 <snipCommand+0x20c>)
 8005b4a:	18d2      	adds	r2, r2, r3
 8005b4c:	7893      	ldrb	r3, [r2, #2]
 8005b4e:	68d1      	ldr	r1, [r2, #12]
 8005b50:	9101      	str	r1, [sp, #4]
 8005b52:	7912      	ldrb	r2, [r2, #4]
 8005b54:	9200      	str	r2, [sp, #0]
 8005b56:	0022      	movs	r2, r4
 8005b58:	493b      	ldr	r1, [pc, #236]	; (8005c48 <snipCommand+0x22c>)
 8005b5a:	0020      	movs	r0, r4
 8005b5c:	f00d fc3a 	bl	80133d4 <siprintf>
				break;
 8005b60:	e047      	b.n	8005bf2 <snipCommand+0x1d6>
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventReleased,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2], snippets[s].cmd);
 8005b62:	2314      	movs	r3, #20
 8005b64:	436b      	muls	r3, r5
 8005b66:	4a30      	ldr	r2, [pc, #192]	; (8005c28 <snipCommand+0x20c>)
 8005b68:	18d2      	adds	r2, r2, r3
 8005b6a:	7893      	ldrb	r3, [r2, #2]
 8005b6c:	68d1      	ldr	r1, [r2, #12]
 8005b6e:	9101      	str	r1, [sp, #4]
 8005b70:	7912      	ldrb	r2, [r2, #4]
 8005b72:	9200      	str	r2, [sp, #0]
 8005b74:	0022      	movs	r2, r4
 8005b76:	4935      	ldr	r1, [pc, #212]	; (8005c4c <snipCommand+0x230>)
 8005b78:	0020      	movs	r0, r4
 8005b7a:	f00d fc2b 	bl	80133d4 <siprintf>
				break;
 8005b7e:	e038      	b.n	8005bf2 <snipCommand+0x1d6>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageCmds, pcWriteBuffer,
 8005b80:	4b33      	ldr	r3, [pc, #204]	; (8005c50 <snipCommand+0x234>)
 8005b82:	0022      	movs	r2, r4
 8005b84:	4933      	ldr	r1, [pc, #204]	; (8005c54 <snipCommand+0x238>)
 8005b86:	0020      	movs	r0, r4
 8005b88:	f00d fc24 	bl	80133d4 <siprintf>
			memset(&commands, 0x00, strlen((char*) commands));
 8005b8c:	4830      	ldr	r0, [pc, #192]	; (8005c50 <snipCommand+0x234>)
 8005b8e:	f7fa fac3 	bl	8000118 <strlen>
 8005b92:	0002      	movs	r2, r0
 8005b94:	2100      	movs	r1, #0
 8005b96:	482e      	ldr	r0, [pc, #184]	; (8005c50 <snipCommand+0x234>)
 8005b98:	f00d fb1e 	bl	80131d8 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t*) &commands)
 8005b9c:	0029      	movs	r1, r5
 8005b9e:	68f0      	ldr	r0, [r6, #12]
 8005ba0:	f7ff fa94 	bl	80050cc <ParseSnippetCommand>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d1eb      	bne.n	8005b80 <snipCommand+0x164>
		strcat((char*) pcWriteBuffer, (char*) pcMessageEnd);
 8005ba8:	0020      	movs	r0, r4
 8005baa:	f7fa fab5 	bl	8000118 <strlen>
 8005bae:	1820      	adds	r0, r4, r0
 8005bb0:	220c      	movs	r2, #12
 8005bb2:	4929      	ldr	r1, [pc, #164]	; (8005c58 <snipCommand+0x23c>)
 8005bb4:	f00d fb07 	bl	80131c6 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8005bb8:	0020      	movs	r0, r4
 8005bba:	f7fa faad 	bl	8000118 <strlen>
 8005bbe:	b282      	uxth	r2, r0
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <snipCommand+0x200>)
 8005bc2:	7818      	ldrb	r0, [r3, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	425b      	negs	r3, r3
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	3333      	adds	r3, #51	; 0x33
 8005bcc:	0021      	movs	r1, r4
 8005bce:	f007 fef9 	bl	800d9c4 <writePxMutex>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8005bd2:	003d      	movs	r5, r7
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <snipCommand+0x208>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	42bb      	cmp	r3, r7
 8005bda:	d911      	bls.n	8005c00 <snipCommand+0x1e4>
 8005bdc:	1c6f      	adds	r7, r5, #1
 8005bde:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8005be0:	002e      	movs	r6, r5
 8005be2:	00ab      	lsls	r3, r5, #2
 8005be4:	195b      	adds	r3, r3, r5
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4642      	mov	r2, r8
 8005bea:	5c9b      	ldrb	r3, [r3, r2]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d000      	beq.n	8005bf2 <snipCommand+0x1d6>
 8005bf0:	e739      	b.n	8005a66 <snipCommand+0x4a>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t*) &commands)
 8005bf2:	4d17      	ldr	r5, [pc, #92]	; (8005c50 <snipCommand+0x234>)
 8005bf4:	00b3      	lsls	r3, r6, #2
 8005bf6:	199b      	adds	r3, r3, r6
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4e0b      	ldr	r6, [pc, #44]	; (8005c28 <snipCommand+0x20c>)
 8005bfc:	18f6      	adds	r6, r6, r3
 8005bfe:	e7cd      	b.n	8005b9c <snipCommand+0x180>
	strcpy((char*) pcWriteBuffer, (char*) pcMessageSnipAction);
 8005c00:	22b5      	movs	r2, #181	; 0xb5
 8005c02:	4916      	ldr	r1, [pc, #88]	; (8005c5c <snipCommand+0x240>)
 8005c04:	0020      	movs	r0, r4
 8005c06:	f00d fade 	bl	80131c6 <memcpy>
}
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	b00a      	add	sp, #40	; 0x28
 8005c0e:	bc1c      	pop	{r2, r3, r4}
 8005c10:	4690      	mov	r8, r2
 8005c12:	4699      	mov	r9, r3
 8005c14:	46a2      	mov	sl, r4
 8005c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c18:	08015830 	.word	0x08015830
 8005c1c:	2000029f 	.word	0x2000029f
 8005c20:	08016f94 	.word	0x08016f94
 8005c24:	20000a07 	.word	0x20000a07
 8005c28:	2000614c 	.word	0x2000614c
 8005c2c:	08016fcc 	.word	0x08016fcc
 8005c30:	20000088 	.word	0x20000088
 8005c34:	08016ac4 	.word	0x08016ac4
 8005c38:	08017038 	.word	0x08017038
 8005c3c:	08016370 	.word	0x08016370
 8005c40:	08016fd8 	.word	0x08016fd8
 8005c44:	08016fec 	.word	0x08016fec
 8005c48:	08017004 	.word	0x08017004
 8005c4c:	0801701c 	.word	0x0801701c
 8005c50:	20000a38 	.word	0x20000a38
 8005c54:	08017048 	.word	0x08017048
 8005c58:	08017050 	.word	0x08017050
 8005c5c:	0801705c 	.word	0x0801705c

08005c60 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005c60:	b510      	push	{r4, lr}
 8005c62:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005c64:	d101      	bne.n	8005c6a <idcodeCommand+0xa>
 8005c66:	b672      	cpsid	i
 8005c68:	e7fe      	b.n	8005c68 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 8005c6a:	f00a f817 	bl	800fc9c <HAL_GetDEVID>
	switch (dev) {
 8005c6e:	0403      	lsls	r3, r0, #16
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <idcodeCommand+0x80>)
 8005c74:	4694      	mov	ip, r2
 8005c76:	4463      	add	r3, ip
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d82a      	bhi.n	8005cd2 <idcodeCommand+0x72>
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <idcodeCommand+0x84>)
 8005c80:	58d3      	ldr	r3, [r2, r3]
 8005c82:	469f      	mov	pc, r3
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F03x");
 8005c84:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <idcodeCommand+0x88>)
 8005c86:	4919      	ldr	r1, [pc, #100]	; (8005cec <idcodeCommand+0x8c>)
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f00d fba3 	bl	80133d4 <siprintf>
			(char*) pcWriteBuffer, HAL_GetREVID() >> 12);
 8005c8e:	f009 ffff 	bl	800fc90 <HAL_GetREVID>
	sprintf((char*) pcWriteBuffer, (char*) pcMessageREVID,
 8005c92:	0b03      	lsrs	r3, r0, #12
 8005c94:	0022      	movs	r2, r4
 8005c96:	4916      	ldr	r1, [pc, #88]	; (8005cf0 <idcodeCommand+0x90>)
 8005c98:	0020      	movs	r0, r4
 8005c9a:	f00d fb9b 	bl	80133d4 <siprintf>
}
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	bd10      	pop	{r4, pc}
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F04x");
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <idcodeCommand+0x94>)
 8005ca4:	4911      	ldr	r1, [pc, #68]	; (8005cec <idcodeCommand+0x8c>)
 8005ca6:	0020      	movs	r0, r4
 8005ca8:	f00d fb94 	bl	80133d4 <siprintf>
		break;
 8005cac:	e7ef      	b.n	8005c8e <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F05x");
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <idcodeCommand+0x98>)
 8005cb0:	490e      	ldr	r1, [pc, #56]	; (8005cec <idcodeCommand+0x8c>)
 8005cb2:	0020      	movs	r0, r4
 8005cb4:	f00d fb8e 	bl	80133d4 <siprintf>
		break;
 8005cb8:	e7e9      	b.n	8005c8e <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F07x");
 8005cba:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <idcodeCommand+0x9c>)
 8005cbc:	490b      	ldr	r1, [pc, #44]	; (8005cec <idcodeCommand+0x8c>)
 8005cbe:	0020      	movs	r0, r4
 8005cc0:	f00d fb88 	bl	80133d4 <siprintf>
		break;
 8005cc4:	e7e3      	b.n	8005c8e <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F09x");
 8005cc6:	4a0e      	ldr	r2, [pc, #56]	; (8005d00 <idcodeCommand+0xa0>)
 8005cc8:	4908      	ldr	r1, [pc, #32]	; (8005cec <idcodeCommand+0x8c>)
 8005cca:	0020      	movs	r0, r4
 8005ccc:	f00d fb82 	bl	80133d4 <siprintf>
		break;
 8005cd0:	e7dd      	b.n	8005c8e <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "UNKNOWN");
 8005cd2:	4a0c      	ldr	r2, [pc, #48]	; (8005d04 <idcodeCommand+0xa4>)
 8005cd4:	4905      	ldr	r1, [pc, #20]	; (8005cec <idcodeCommand+0x8c>)
 8005cd6:	0020      	movs	r0, r4
 8005cd8:	f00d fb7c 	bl	80133d4 <siprintf>
		break;
 8005cdc:	e7d7      	b.n	8005c8e <idcodeCommand+0x2e>
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	fffffbc0 	.word	0xfffffbc0
 8005ce4:	08016398 	.word	0x08016398
 8005ce8:	080169c0 	.word	0x080169c0
 8005cec:	080169cc 	.word	0x080169cc
 8005cf0:	08016a18 	.word	0x08016a18
 8005cf4:	080169e0 	.word	0x080169e0
 8005cf8:	080169ec 	.word	0x080169ec
 8005cfc:	080169f8 	.word	0x080169f8
 8005d00:	08016a04 	.word	0x08016a04
 8005d04:	08016a10 	.word	0x08016a10

08005d08 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005d0c:	d101      	bne.n	8005d12 <uuidCommand+0xa>
 8005d0e:	b672      	cpsid	i
 8005d10:	e7fe      	b.n	8005d10 <uuidCommand+0x8>
	sprintf((char*) pcWriteBuffer, "%s", (char*) pcMessageUUID);
 8005d12:	220e      	movs	r2, #14
 8005d14:	4911      	ldr	r1, [pc, #68]	; (8005d5c <uuidCommand+0x54>)
 8005d16:	f00d fa56 	bl	80131c6 <memcpy>
		sprintf((char*) pcWriteBuffer, "%s%08X", (char*) pcWriteBuffer,*(uint32_t*) (MCU_F0_UUID_BASE + i * 4));
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <uuidCommand+0x58>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4d11      	ldr	r5, [pc, #68]	; (8005d64 <uuidCommand+0x5c>)
 8005d20:	0022      	movs	r2, r4
 8005d22:	0029      	movs	r1, r5
 8005d24:	0020      	movs	r0, r4
 8005d26:	f00d fb55 	bl	80133d4 <siprintf>
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <uuidCommand+0x60>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	0022      	movs	r2, r4
 8005d30:	0029      	movs	r1, r5
 8005d32:	0020      	movs	r0, r4
 8005d34:	f00d fb4e 	bl	80133d4 <siprintf>
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <uuidCommand+0x64>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	0022      	movs	r2, r4
 8005d3e:	0029      	movs	r1, r5
 8005d40:	0020      	movs	r0, r4
 8005d42:	f00d fb47 	bl	80133d4 <siprintf>
	strcat((char*) pcWriteBuffer, "\r\n");
 8005d46:	0020      	movs	r0, r4
 8005d48:	f7fa f9e6 	bl	8000118 <strlen>
 8005d4c:	1820      	adds	r0, r4, r0
 8005d4e:	2203      	movs	r2, #3
 8005d50:	4907      	ldr	r1, [pc, #28]	; (8005d70 <uuidCommand+0x68>)
 8005d52:	f00d fa38 	bl	80131c6 <memcpy>
}
 8005d56:	2000      	movs	r0, #0
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	080181a8 	.word	0x080181a8
 8005d60:	1ffff7ac 	.word	0x1ffff7ac
 8005d64:	080181b8 	.word	0x080181b8
 8005d68:	1ffff7b0 	.word	0x1ffff7b0
 8005d6c:	1ffff7b4 	.word	0x1ffff7b4
 8005d70:	080176f8 	.word	0x080176f8

08005d74 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005d74:	b510      	push	{r4, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005d7a:	d101      	bne.n	8005d80 <timeCommand+0xc>
 8005d7c:	b672      	cpsid	i
 8005d7e:	e7fe      	b.n	8005d7e <timeCommand+0xa>
	GetTimeDate();
 8005d80:	f007 fbc8 	bl	800d514 <GetTimeDate>
	if (BOS.hourformat == 24)
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <timeCommand+0x80>)
 8005d86:	7b5b      	ldrb	r3, [r3, #13]
 8005d88:	2b18      	cmp	r3, #24
 8005d8a:	d004      	beq.n	8005d96 <timeCommand+0x22>
	else if (BOS.hourformat == 12) {
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d00e      	beq.n	8005dae <timeCommand+0x3a>
}
 8005d90:	2000      	movs	r0, #0
 8005d92:	b004      	add	sp, #16
 8005d94:	bd10      	pop	{r4, pc}
		  sprintf((char*) pcWriteBuffer, (char*) pcMessage24, BOS.time.hours,BOS.time.minutes, BOS.time.seconds, BOS.time.msec);
 8005d96:	4917      	ldr	r1, [pc, #92]	; (8005df4 <timeCommand+0x80>)
 8005d98:	7c4b      	ldrb	r3, [r1, #17]
 8005d9a:	7c8a      	ldrb	r2, [r1, #18]
 8005d9c:	89c8      	ldrh	r0, [r1, #14]
 8005d9e:	9001      	str	r0, [sp, #4]
 8005da0:	7c09      	ldrb	r1, [r1, #16]
 8005da2:	9100      	str	r1, [sp, #0]
 8005da4:	4914      	ldr	r1, [pc, #80]	; (8005df8 <timeCommand+0x84>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00d fb14 	bl	80133d4 <siprintf>
 8005dac:	e7f0      	b.n	8005d90 <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <timeCommand+0x80>)
 8005db0:	7cdb      	ldrb	r3, [r3, #19]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10d      	bne.n	8005dd2 <timeCommand+0x5e>
			sprintf((char*) pcWriteBuffer, (char*) pcMessage12, BOS.time.hours,BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM");
 8005db6:	490f      	ldr	r1, [pc, #60]	; (8005df4 <timeCommand+0x80>)
 8005db8:	7c4b      	ldrb	r3, [r1, #17]
 8005dba:	7c8a      	ldrb	r2, [r1, #18]
 8005dbc:	480f      	ldr	r0, [pc, #60]	; (8005dfc <timeCommand+0x88>)
 8005dbe:	9002      	str	r0, [sp, #8]
 8005dc0:	89c8      	ldrh	r0, [r1, #14]
 8005dc2:	9001      	str	r0, [sp, #4]
 8005dc4:	7c09      	ldrb	r1, [r1, #16]
 8005dc6:	9100      	str	r1, [sp, #0]
 8005dc8:	490d      	ldr	r1, [pc, #52]	; (8005e00 <timeCommand+0x8c>)
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f00d fb02 	bl	80133d4 <siprintf>
 8005dd0:	e7de      	b.n	8005d90 <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d1dc      	bne.n	8005d90 <timeCommand+0x1c>
			sprintf((char*) pcWriteBuffer, (char*) pcMessage12, BOS.time.hours,BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM");
 8005dd6:	4907      	ldr	r1, [pc, #28]	; (8005df4 <timeCommand+0x80>)
 8005dd8:	7c4b      	ldrb	r3, [r1, #17]
 8005dda:	7c8a      	ldrb	r2, [r1, #18]
 8005ddc:	4809      	ldr	r0, [pc, #36]	; (8005e04 <timeCommand+0x90>)
 8005dde:	9002      	str	r0, [sp, #8]
 8005de0:	89c8      	ldrh	r0, [r1, #14]
 8005de2:	9001      	str	r0, [sp, #4]
 8005de4:	7c09      	ldrb	r1, [r1, #16]
 8005de6:	9100      	str	r1, [sp, #0]
 8005de8:	4905      	ldr	r1, [pc, #20]	; (8005e00 <timeCommand+0x8c>)
 8005dea:	0020      	movs	r0, r4
 8005dec:	f00d faf2 	bl	80133d4 <siprintf>
 8005df0:	e7ce      	b.n	8005d90 <timeCommand+0x1c>
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	20006130 	.word	0x20006130
 8005df8:	080180f0 	.word	0x080180f0
 8005dfc:	08018144 	.word	0x08018144
 8005e00:	08018118 	.word	0x08018118
 8005e04:	08018148 	.word	0x08018148

08005e08 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005e0c:	d101      	bne.n	8005e12 <dateCommand+0xa>
 8005e0e:	b672      	cpsid	i
 8005e10:	e7fe      	b.n	8005e10 <dateCommand+0x8>
	GetTimeDate();
 8005e12:	f007 fb7f 	bl	800d514 <GetTimeDate>
	sprintf((char*) pcWriteBuffer, (char*) pcMessageDate, GetDateString());
 8005e16:	f7fe fb23 	bl	8004460 <GetDateString>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	4902      	ldr	r1, [pc, #8]	; (8005e28 <dateCommand+0x20>)
 8005e1e:	0020      	movs	r0, r4
 8005e20:	f00d fad8 	bl	80133d4 <siprintf>
}
 8005e24:	2000      	movs	r0, #0
 8005e26:	bd10      	pop	{r4, pc}
 8005e28:	080165f8 	.word	0x080165f8

08005e2c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2e:	46c6      	mov	lr, r8
 8005e30:	b500      	push	{lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	0004      	movs	r4, r0
 8005e36:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d101      	bne.n	8005e46 <getCommand+0x1a>
 8005e42:	b672      	cpsid	i
 8005e44:	e7fe      	b.n	8005e44 <getCommand+0x18>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005e46:	aa01      	add	r2, sp, #4
 8005e48:	2101      	movs	r1, #1
 8005e4a:	0030      	movs	r0, r6
 8005e4c:	f008 f800 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8005e50:	0005      	movs	r5, r0
 8005e52:	4b74      	ldr	r3, [pc, #464]	; (8006024 <getCommand+0x1f8>)
 8005e54:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char*) pcParameterString1, "bos.", 4)) {
 8005e56:	2204      	movs	r2, #4
 8005e58:	4973      	ldr	r1, [pc, #460]	; (8006028 <getCommand+0x1fc>)
 8005e5a:	f00d faff 	bl	801345c <strncmp>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d000      	beq.n	8005e64 <getCommand+0x38>
 8005e62:	e090      	b.n	8005f86 <getCommand+0x15a>
		if (!strncmp((const char*) pcParameterString1 + 4, "response",xParameterStringLength1 - 4)) {
 8005e64:	1d2f      	adds	r7, r5, #4
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	1f1e      	subs	r6, r3, #4
 8005e6a:	0032      	movs	r2, r6
 8005e6c:	496f      	ldr	r1, [pc, #444]	; (800602c <getCommand+0x200>)
 8005e6e:	0038      	movs	r0, r7
 8005e70:	f00d faf4 	bl	801345c <strncmp>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d11e      	bne.n	8005eb6 <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 8005e78:	4b6d      	ldr	r3, [pc, #436]	; (8006030 <getCommand+0x204>)
 8005e7a:	799b      	ldrb	r3, [r3, #6]
 8005e7c:	2b60      	cmp	r3, #96	; 0x60
 8005e7e:	d109      	bne.n	8005e94 <getCommand+0x68>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "all");
 8005e80:	4a6c      	ldr	r2, [pc, #432]	; (8006034 <getCommand+0x208>)
 8005e82:	496d      	ldr	r1, [pc, #436]	; (8006038 <getCommand+0x20c>)
 8005e84:	0020      	movs	r0, r4
 8005e86:	f00d faa5 	bl	80133d4 <siprintf>
}
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bc04      	pop	{r2}
 8005e90:	4690      	mov	r8, r2
 8005e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d105      	bne.n	8005ea4 <getCommand+0x78>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "msg");
 8005e98:	4a68      	ldr	r2, [pc, #416]	; (800603c <getCommand+0x210>)
 8005e9a:	4967      	ldr	r1, [pc, #412]	; (8006038 <getCommand+0x20c>)
 8005e9c:	0020      	movs	r0, r4
 8005e9e:	f00d fa99 	bl	80133d4 <siprintf>
 8005ea2:	e7f2      	b.n	8005e8a <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d000      	beq.n	8005eaa <getCommand+0x7e>
 8005ea8:	e0b6      	b.n	8006018 <getCommand+0x1ec>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "none");
 8005eaa:	4a65      	ldr	r2, [pc, #404]	; (8006040 <getCommand+0x214>)
 8005eac:	4962      	ldr	r1, [pc, #392]	; (8006038 <getCommand+0x20c>)
 8005eae:	0020      	movs	r0, r4
 8005eb0:	f00d fa90 	bl	80133d4 <siprintf>
 8005eb4:	e7e9      	b.n	8005e8a <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "trace",
 8005eb6:	0032      	movs	r2, r6
 8005eb8:	4962      	ldr	r1, [pc, #392]	; (8006044 <getCommand+0x218>)
 8005eba:	0038      	movs	r0, r7
 8005ebc:	f00d face 	bl	801345c <strncmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d11a      	bne.n	8005efa <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 8005ec4:	4b5a      	ldr	r3, [pc, #360]	; (8006030 <getCommand+0x204>)
 8005ec6:	79db      	ldrb	r3, [r3, #7]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d105      	bne.n	8005ed8 <getCommand+0xac>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "all");
 8005ecc:	4a59      	ldr	r2, [pc, #356]	; (8006034 <getCommand+0x208>)
 8005ece:	495a      	ldr	r1, [pc, #360]	; (8006038 <getCommand+0x20c>)
 8005ed0:	0020      	movs	r0, r4
 8005ed2:	f00d fa7f 	bl	80133d4 <siprintf>
 8005ed6:	e7d8      	b.n	8005e8a <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d105      	bne.n	8005ee8 <getCommand+0xbc>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "msg");
 8005edc:	4a57      	ldr	r2, [pc, #348]	; (800603c <getCommand+0x210>)
 8005ede:	4956      	ldr	r1, [pc, #344]	; (8006038 <getCommand+0x20c>)
 8005ee0:	0020      	movs	r0, r4
 8005ee2:	f00d fa77 	bl	80133d4 <siprintf>
 8005ee6:	e7d0      	b.n	8005e8a <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d000      	beq.n	8005eee <getCommand+0xc2>
 8005eec:	e094      	b.n	8006018 <getCommand+0x1ec>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "none");
 8005eee:	4a54      	ldr	r2, [pc, #336]	; (8006040 <getCommand+0x214>)
 8005ef0:	4951      	ldr	r1, [pc, #324]	; (8006038 <getCommand+0x20c>)
 8005ef2:	0020      	movs	r0, r4
 8005ef4:	f00d fa6e 	bl	80133d4 <siprintf>
 8005ef8:	e7c7      	b.n	8005e8a <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "clibaudrate",xParameterStringLength1 - 4)) {
 8005efa:	0032      	movs	r2, r6
 8005efc:	4952      	ldr	r1, [pc, #328]	; (8006048 <getCommand+0x21c>)
 8005efe:	0038      	movs	r0, r7
 8005f00:	f00d faac 	bl	801345c <strncmp>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d106      	bne.n	8005f16 <getCommand+0xea>
			sprintf((char*) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8005f08:	4b49      	ldr	r3, [pc, #292]	; (8006030 <getCommand+0x204>)
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	494f      	ldr	r1, [pc, #316]	; (800604c <getCommand+0x220>)
 8005f0e:	0020      	movs	r0, r4
 8005f10:	f00d fa60 	bl	80133d4 <siprintf>
 8005f14:	e7b9      	b.n	8005e8a <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "debounce",xParameterStringLength1 - 4)) {
 8005f16:	0032      	movs	r2, r6
 8005f18:	494d      	ldr	r1, [pc, #308]	; (8006050 <getCommand+0x224>)
 8005f1a:	0038      	movs	r0, r7
 8005f1c:	f00d fa9e 	bl	801345c <strncmp>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d106      	bne.n	8005f32 <getCommand+0x106>
			sprintf((char*) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8005f24:	4b42      	ldr	r3, [pc, #264]	; (8006030 <getCommand+0x204>)
 8005f26:	881a      	ldrh	r2, [r3, #0]
 8005f28:	4948      	ldr	r1, [pc, #288]	; (800604c <getCommand+0x220>)
 8005f2a:	0020      	movs	r0, r4
 8005f2c:	f00d fa52 	bl	80133d4 <siprintf>
 8005f30:	e7ab      	b.n	8005e8a <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4,"singleclicktime", xParameterStringLength1 - 4)) {
 8005f32:	0032      	movs	r2, r6
 8005f34:	4947      	ldr	r1, [pc, #284]	; (8006054 <getCommand+0x228>)
 8005f36:	0038      	movs	r0, r7
 8005f38:	f00d fa90 	bl	801345c <strncmp>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d106      	bne.n	8005f4e <getCommand+0x122>
			sprintf((char*) pcWriteBuffer, "%d\n\r",BOS.buttons.singleClickTime);
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <getCommand+0x204>)
 8005f42:	885a      	ldrh	r2, [r3, #2]
 8005f44:	4941      	ldr	r1, [pc, #260]	; (800604c <getCommand+0x220>)
 8005f46:	0020      	movs	r0, r4
 8005f48:	f00d fa44 	bl	80133d4 <siprintf>
 8005f4c:	e79d      	b.n	8005e8a <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4,"mininterclicktime", xParameterStringLength1 - 4)) {
 8005f4e:	0032      	movs	r2, r6
 8005f50:	4941      	ldr	r1, [pc, #260]	; (8006058 <getCommand+0x22c>)
 8005f52:	0038      	movs	r0, r7
 8005f54:	f00d fa82 	bl	801345c <strncmp>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d106      	bne.n	8005f6a <getCommand+0x13e>
			sprintf((char*) pcWriteBuffer, "%d\n\r",BOS.buttons.minInterClickTime);
 8005f5c:	4b34      	ldr	r3, [pc, #208]	; (8006030 <getCommand+0x204>)
 8005f5e:	791a      	ldrb	r2, [r3, #4]
 8005f60:	493a      	ldr	r1, [pc, #232]	; (800604c <getCommand+0x220>)
 8005f62:	0020      	movs	r0, r4
 8005f64:	f00d fa36 	bl	80133d4 <siprintf>
 8005f68:	e78f      	b.n	8005e8a <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4,"maxinterclicktime", xParameterStringLength1 - 4)) {
 8005f6a:	0032      	movs	r2, r6
 8005f6c:	493b      	ldr	r1, [pc, #236]	; (800605c <getCommand+0x230>)
 8005f6e:	0038      	movs	r0, r7
 8005f70:	f00d fa74 	bl	801345c <strncmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d10d      	bne.n	8005f94 <getCommand+0x168>
			sprintf((char*) pcWriteBuffer, "%d\n\r",BOS.buttons.maxInterClickTime);
 8005f78:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <getCommand+0x204>)
 8005f7a:	795a      	ldrb	r2, [r3, #5]
 8005f7c:	4933      	ldr	r1, [pc, #204]	; (800604c <getCommand+0x220>)
 8005f7e:	0020      	movs	r0, r4
 8005f80:	f00d fa28 	bl	80133d4 <siprintf>
 8005f84:	e781      	b.n	8005e8a <getCommand+0x5e>
	} else if (!strncmp((const char*) pcParameterString1, "group", 5)) {
 8005f86:	2205      	movs	r2, #5
 8005f88:	4935      	ldr	r1, [pc, #212]	; (8006060 <getCommand+0x234>)
 8005f8a:	0028      	movs	r0, r5
 8005f8c:	f00d fa66 	bl	801345c <strncmp>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d005      	beq.n	8005fa0 <getCommand+0x174>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 8005f94:	2213      	movs	r2, #19
 8005f96:	4933      	ldr	r1, [pc, #204]	; (8006064 <getCommand+0x238>)
 8005f98:	0020      	movs	r0, r4
 8005f9a:	f00d f914 	bl	80131c6 <memcpy>
 8005f9e:	e774      	b.n	8005e8a <getCommand+0x5e>
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 8005fa0:	466a      	mov	r2, sp
 8005fa2:	2102      	movs	r1, #2
 8005fa4:	0030      	movs	r0, r6
 8005fa6:	f007 ff53 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8005faa:	0005      	movs	r5, r0
 8005fac:	4f2e      	ldr	r7, [pc, #184]	; (8006068 <getCommand+0x23c>)
		for (i = 0; i < MaxNumOfGroups; i++) {
 8005fae:	2600      	movs	r6, #0
			if (!strcmp((char*) pcParameterString2, groupAlias[i])) {
 8005fb0:	0039      	movs	r1, r7
 8005fb2:	0028      	movs	r0, r5
 8005fb4:	f7fa f8a6 	bl	8000104 <strcmp>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d011      	beq.n	8005fe0 <getCommand+0x1b4>
		for (i = 0; i < MaxNumOfGroups; i++) {
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	b2f6      	uxtb	r6, r6
 8005fc0:	370a      	adds	r7, #10
 8005fc2:	2e0a      	cmp	r6, #10
 8005fc4:	d1f4      	bne.n	8005fb0 <getCommand+0x184>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageGroupDoesNotExist,(char*) pcParameterString2);
 8005fc6:	002a      	movs	r2, r5
 8005fc8:	4928      	ldr	r1, [pc, #160]	; (800606c <getCommand+0x240>)
 8005fca:	0020      	movs	r0, r4
 8005fcc:	f00d fa02 	bl	80133d4 <siprintf>
			return pdFALSE;
 8005fd0:	e75b      	b.n	8005e8a <getCommand+0x5e>
					sprintf((char*) pcWriteBuffer, "%s#%d\n\r",
 8005fd2:	002b      	movs	r3, r5
 8005fd4:	0022      	movs	r2, r4
 8005fd6:	4926      	ldr	r1, [pc, #152]	; (8006070 <getCommand+0x244>)
 8005fd8:	0020      	movs	r0, r4
 8005fda:	f00d f9fb 	bl	80133d4 <siprintf>
 8005fde:	e015      	b.n	800600c <getCommand+0x1e0>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageGroupExists,(char*) pcParameterString2);
 8005fe0:	002a      	movs	r2, r5
 8005fe2:	4924      	ldr	r1, [pc, #144]	; (8006074 <getCommand+0x248>)
 8005fe4:	0020      	movs	r0, r4
 8005fe6:	f00d f9f5 	bl	80133d4 <siprintf>
			for (j = 1; j <= N; j++)						// N modules
 8005fea:	4b23      	ldr	r3, [pc, #140]	; (8006078 <getCommand+0x24c>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d100      	bne.n	8005ff4 <getCommand+0x1c8>
 8005ff2:	e74a      	b.n	8005e8a <getCommand+0x5e>
 8005ff4:	2501      	movs	r5, #1
 8005ff6:	002b      	movs	r3, r5
 8005ff8:	40b3      	lsls	r3, r6
 8005ffa:	4698      	mov	r8, r3
				if (InGroup(j, i)) {
 8005ffc:	4f1f      	ldr	r7, [pc, #124]	; (800607c <getCommand+0x250>)
			for (j = 1; j <= N; j++)						// N modules
 8005ffe:	4e1e      	ldr	r6, [pc, #120]	; (8006078 <getCommand+0x24c>)
				if (InGroup(j, i)) {
 8006000:	1e6b      	subs	r3, r5, #1
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	5bdb      	ldrh	r3, [r3, r7]
 8006006:	4642      	mov	r2, r8
 8006008:	421a      	tst	r2, r3
 800600a:	d1e2      	bne.n	8005fd2 <getCommand+0x1a6>
			for (j = 1; j <= N; j++)						// N modules
 800600c:	3501      	adds	r5, #1
 800600e:	b2ed      	uxtb	r5, r5
 8006010:	7833      	ldrb	r3, [r6, #0]
 8006012:	42ab      	cmp	r3, r5
 8006014:	d2f4      	bcs.n	8006000 <getCommand+0x1d4>
 8006016:	e738      	b.n	8005e8a <getCommand+0x5e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageWrongValue,
 8006018:	002a      	movs	r2, r5
 800601a:	4919      	ldr	r1, [pc, #100]	; (8006080 <getCommand+0x254>)
 800601c:	0020      	movs	r0, r4
 800601e:	f00d f9d9 	bl	80133d4 <siprintf>
 8006022:	e732      	b.n	8005e8a <getCommand+0x5e>
 8006024:	20000a7c 	.word	0x20000a7c
 8006028:	08016764 	.word	0x08016764
 800602c:	0801676c 	.word	0x0801676c
 8006030:	20006130 	.word	0x20006130
 8006034:	08015b8c 	.word	0x08015b8c
 8006038:	080159e4 	.word	0x080159e4
 800603c:	08016778 	.word	0x08016778
 8006040:	0801677c 	.word	0x0801677c
 8006044:	08016784 	.word	0x08016784
 8006048:	0801678c 	.word	0x0801678c
 800604c:	0801601c 	.word	0x0801601c
 8006050:	08016798 	.word	0x08016798
 8006054:	080167a4 	.word	0x080167a4
 8006058:	080167b4 	.word	0x080167b4
 800605c:	080167c8 	.word	0x080167c8
 8006060:	080167dc 	.word	0x080167dc
 8006064:	080167ec 	.word	0x080167ec
 8006068:	2000064c 	.word	0x2000064c
 800606c:	08016800 	.word	0x08016800
 8006070:	080167e4 	.word	0x080167e4
 8006074:	0801681c 	.word	0x0801681c
 8006078:	2000001c 	.word	0x2000001c
 800607c:	200006b0 	.word	0x200006b0
 8006080:	08016830 	.word	0x08016830

08006084 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	0004      	movs	r4, r0
 800608a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006090:	2c00      	cmp	r4, #0
 8006092:	d101      	bne.n	8006098 <defaultCommand+0x14>
 8006094:	b672      	cpsid	i
 8006096:	e7fe      	b.n	8006096 <defaultCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006098:	aa01      	add	r2, sp, #4
 800609a:	2101      	movs	r1, #1
 800609c:	f007 fed8 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80060a0:	0005      	movs	r5, r0
	if (!strncmp((const char*) pcParameterString1, "params",xParameterStringLength1)) {
 80060a2:	9e01      	ldr	r6, [sp, #4]
 80060a4:	0032      	movs	r2, r6
 80060a6:	491e      	ldr	r1, [pc, #120]	; (8006120 <defaultCommand+0x9c>)
 80060a8:	f00d f9d8 	bl	801345c <strncmp>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d01e      	beq.n	80060ee <defaultCommand+0x6a>
	} else if (!strncmp((const char*) pcParameterString1, "array",xParameterStringLength1)) {
 80060b0:	0032      	movs	r2, r6
 80060b2:	491c      	ldr	r1, [pc, #112]	; (8006124 <defaultCommand+0xa0>)
 80060b4:	0028      	movs	r0, r5
 80060b6:	f00d f9d1 	bl	801345c <strncmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d12a      	bne.n	8006114 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 80060be:	2200      	movs	r2, #0
 80060c0:	2116      	movs	r1, #22
 80060c2:	20ff      	movs	r0, #255	; 0xff
 80060c4:	f003 f9bc 	bl	8009440 <SendMessageToModule>
		indMode = IND_TOPOLOGY;
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <defaultCommand+0xa4>)
 80060ca:	2202      	movs	r2, #2
 80060cc:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80060ce:	2064      	movs	r0, #100	; 0x64
 80060d0:	f007 fda5 	bl	800dc1e <osDelay>
		ClearEEportsDir();
 80060d4:	f7fc fe46 	bl	8002d64 <ClearEEportsDir>
		ClearROtopology();
 80060d8:	f005 f9cc 	bl	800b474 <ClearROtopology>
		osDelay(100);
 80060dc:	2064      	movs	r0, #100	; 0x64
 80060de:	f007 fd9e 	bl	800dc1e <osDelay>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOKArray);
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	4911      	ldr	r1, [pc, #68]	; (800612c <defaultCommand+0xa8>)
 80060e6:	0020      	movs	r0, r4
 80060e8:	f00d f86d 	bl	80131c6 <memcpy>
 80060ec:	e00f      	b.n	800610e <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 80060ee:	4910      	ldr	r1, [pc, #64]	; (8006130 <defaultCommand+0xac>)
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <defaultCommand+0xb0>)
 80060f2:	000a      	movs	r2, r1
 80060f4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80060f6:	c223      	stmia	r2!, {r0, r1, r5}
 80060f8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80060fa:	c223      	stmia	r2!, {r0, r1, r5}
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006100:	f7fd f8f0 	bl	80032e4 <SaveEEparams>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOKParams);
 8006104:	2227      	movs	r2, #39	; 0x27
 8006106:	490c      	ldr	r1, [pc, #48]	; (8006138 <defaultCommand+0xb4>)
 8006108:	0020      	movs	r0, r4
 800610a:	f00d f85c 	bl	80131c6 <memcpy>
}
 800610e:	2000      	movs	r0, #0
 8006110:	b002      	add	sp, #8
 8006112:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongValue);
 8006114:	220f      	movs	r2, #15
 8006116:	4909      	ldr	r1, [pc, #36]	; (800613c <defaultCommand+0xb8>)
 8006118:	0020      	movs	r0, r4
 800611a:	f00d f854 	bl	80131c6 <memcpy>
 800611e:	e7f6      	b.n	800610e <defaultCommand+0x8a>
 8006120:	08016620 	.word	0x08016620
 8006124:	08016650 	.word	0x08016650
 8006128:	200006e4 	.word	0x200006e4
 800612c:	08016668 	.word	0x08016668
 8006130:	20006130 	.word	0x20006130
 8006134:	20000000 	.word	0x20000000
 8006138:	08016628 	.word	0x08016628
 800613c:	08016658 	.word	0x08016658

08006140 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006142:	46ce      	mov	lr, r9
 8006144:	4647      	mov	r7, r8
 8006146:	b580      	push	{r7, lr}
 8006148:	b08d      	sub	sp, #52	; 0x34
 800614a:	0005      	movs	r5, r0
 800614c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0,
 800614e:	2300      	movs	r3, #0
 8006150:	930b      	str	r3, [sp, #44]	; 0x2c
 8006152:	930a      	str	r3, [sp, #40]	; 0x28
			xParameterStringLength3 = 0;
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8006156:	9308      	str	r3, [sp, #32]
 8006158:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 800615a:	2800      	cmp	r0, #0
 800615c:	d101      	bne.n	8006162 <setCommand+0x22>
 800615e:	b672      	cpsid	i
 8006160:	e7fe      	b.n	8006160 <setCommand+0x20>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006162:	aa0b      	add	r2, sp, #44	; 0x2c
 8006164:	2101      	movs	r1, #1
 8006166:	0020      	movs	r0, r4
 8006168:	f007 fe72 	bl	800de50 <FreeRTOS_CLIGetParameter>
 800616c:	0006      	movs	r6, r0
 800616e:	4bb3      	ldr	r3, [pc, #716]	; (800643c <setCommand+0x2fc>)
 8006170:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char*) pcParameterString1, "bos.", 4)) {
 8006172:	2204      	movs	r2, #4
 8006174:	49b2      	ldr	r1, [pc, #712]	; (8006440 <setCommand+0x300>)
 8006176:	f00d f971 	bl	801345c <strncmp>
 800617a:	2800      	cmp	r0, #0
 800617c:	d015      	beq.n	80061aa <setCommand+0x6a>
	} else if (!strncmp((const char*) pcParameterString1, "time", 4)) {
 800617e:	2204      	movs	r2, #4
 8006180:	49b0      	ldr	r1, [pc, #704]	; (8006444 <setCommand+0x304>)
 8006182:	0030      	movs	r0, r6
 8006184:	f00d f96a 	bl	801345c <strncmp>
 8006188:	2800      	cmp	r0, #0
 800618a:	d100      	bne.n	800618e <setCommand+0x4e>
 800618c:	e180      	b.n	8006490 <setCommand+0x350>
	} else if (!strncmp((const char*) pcParameterString1, "date", 4)) {
 800618e:	2204      	movs	r2, #4
 8006190:	49ad      	ldr	r1, [pc, #692]	; (8006448 <setCommand+0x308>)
 8006192:	0030      	movs	r0, r6
 8006194:	f00d f962 	bl	801345c <strncmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	d100      	bne.n	800619e <setCommand+0x5e>
 800619c:	e1e6      	b.n	800656c <setCommand+0x42c>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 800619e:	2213      	movs	r2, #19
 80061a0:	49aa      	ldr	r1, [pc, #680]	; (800644c <setCommand+0x30c>)
 80061a2:	0028      	movs	r0, r5
 80061a4:	f00d f80f 	bl	80131c6 <memcpy>
 80061a8:	e1d7      	b.n	800655a <setCommand+0x41a>
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 80061aa:	aa0a      	add	r2, sp, #40	; 0x28
 80061ac:	2102      	movs	r1, #2
 80061ae:	0020      	movs	r0, r4
 80061b0:	f007 fe4e 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80061b4:	0004      	movs	r4, r0
 80061b6:	4ba6      	ldr	r3, [pc, #664]	; (8006450 <setCommand+0x310>)
 80061b8:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char*) pcParameterString1 + 4, "response",xParameterStringLength1 - 4)) {
 80061ba:	4ba0      	ldr	r3, [pc, #640]	; (800643c <setCommand+0x2fc>)
 80061bc:	681e      	ldr	r6, [r3, #0]
 80061be:	3604      	adds	r6, #4
 80061c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c2:	1f1f      	subs	r7, r3, #4
 80061c4:	003a      	movs	r2, r7
 80061c6:	49a3      	ldr	r1, [pc, #652]	; (8006454 <setCommand+0x314>)
 80061c8:	0030      	movs	r0, r6
 80061ca:	f00d f947 	bl	801345c <strncmp>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d153      	bne.n	800627a <setCommand+0x13a>
			if (!strncmp((const char*) pcParameterString2, "all",xParameterStringLength2)) {
 80061d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80061d4:	0032      	movs	r2, r6
 80061d6:	49a0      	ldr	r1, [pc, #640]	; (8006458 <setCommand+0x318>)
 80061d8:	0020      	movs	r0, r4
 80061da:	f00d f93f 	bl	801345c <strncmp>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d115      	bne.n	800620e <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 80061e2:	4b9e      	ldr	r3, [pc, #632]	; (800645c <setCommand+0x31c>)
 80061e4:	2160      	movs	r1, #96	; 0x60
 80061e6:	7199      	strb	r1, [r3, #6]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 80061e8:	79db      	ldrb	r3, [r3, #7]
 80061ea:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 80061ec:	4319      	orrs	r1, r3
 80061ee:	308a      	adds	r0, #138	; 0x8a
 80061f0:	0040      	lsls	r0, r0, #1
 80061f2:	f001 f9df 	bl	80075b4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;// Get rid of the remaining parameters
 80061f6:	4b91      	ldr	r3, [pc, #580]	; (800643c <setCommand+0x2fc>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061fe:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, pcParameterString1,pcParameterString2);
 8006200:	4b93      	ldr	r3, [pc, #588]	; (8006450 <setCommand+0x310>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4996      	ldr	r1, [pc, #600]	; (8006460 <setCommand+0x320>)
 8006206:	0028      	movs	r0, r5
 8006208:	f00d f8e4 	bl	80133d4 <siprintf>
	return pdFALSE;
 800620c:	e1a5      	b.n	800655a <setCommand+0x41a>
			} else if (!strncmp((const char*) pcParameterString2, "message",xParameterStringLength2)) {
 800620e:	0032      	movs	r2, r6
 8006210:	4994      	ldr	r1, [pc, #592]	; (8006464 <setCommand+0x324>)
 8006212:	0020      	movs	r0, r4
 8006214:	f00d f922 	bl	801345c <strncmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	d10a      	bne.n	8006232 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 800621c:	4b8f      	ldr	r3, [pc, #572]	; (800645c <setCommand+0x31c>)
 800621e:	2120      	movs	r1, #32
 8006220:	7199      	strb	r1, [r3, #6]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8006222:	79db      	ldrb	r3, [r3, #7]
 8006224:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 8006226:	4319      	orrs	r1, r3
 8006228:	308a      	adds	r0, #138	; 0x8a
 800622a:	0040      	lsls	r0, r0, #1
 800622c:	f001 f9c2 	bl	80075b4 <EE_WriteVariable>
 8006230:	e7e1      	b.n	80061f6 <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "cli",xParameterStringLength2)) {
 8006232:	0032      	movs	r2, r6
 8006234:	498c      	ldr	r1, [pc, #560]	; (8006468 <setCommand+0x328>)
 8006236:	0020      	movs	r0, r4
 8006238:	f00d f910 	bl	801345c <strncmp>
 800623c:	2800      	cmp	r0, #0
 800623e:	d10a      	bne.n	8006256 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8006240:	4b86      	ldr	r3, [pc, #536]	; (800645c <setCommand+0x31c>)
 8006242:	2140      	movs	r1, #64	; 0x40
 8006244:	7199      	strb	r1, [r3, #6]
						((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8006246:	79db      	ldrb	r3, [r3, #7]
 8006248:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 800624a:	4319      	orrs	r1, r3
 800624c:	308a      	adds	r0, #138	; 0x8a
 800624e:	0040      	lsls	r0, r0, #1
 8006250:	f001 f9b0 	bl	80075b4 <EE_WriteVariable>
 8006254:	e7cf      	b.n	80061f6 <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "none",xParameterStringLength2)) {
 8006256:	0032      	movs	r2, r6
 8006258:	4984      	ldr	r1, [pc, #528]	; (800646c <setCommand+0x32c>)
 800625a:	0020      	movs	r0, r4
 800625c:	f00d f8fe 	bl	801345c <strncmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	d000      	beq.n	8006266 <setCommand+0x126>
 8006264:	e2a7      	b.n	80067b6 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8006266:	4b7d      	ldr	r3, [pc, #500]	; (800645c <setCommand+0x31c>)
 8006268:	2200      	movs	r2, #0
 800626a:	719a      	strb	r2, [r3, #6]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 800626c:	79d9      	ldrb	r1, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,
 800626e:	0209      	lsls	r1, r1, #8
 8006270:	308a      	adds	r0, #138	; 0x8a
 8006272:	0040      	lsls	r0, r0, #1
 8006274:	f001 f99e 	bl	80075b4 <EE_WriteVariable>
 8006278:	e7bd      	b.n	80061f6 <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "trace",xParameterStringLength1 - 4)) {
 800627a:	003a      	movs	r2, r7
 800627c:	497c      	ldr	r1, [pc, #496]	; (8006470 <setCommand+0x330>)
 800627e:	0030      	movs	r0, r6
 8006280:	f00d f8ec 	bl	801345c <strncmp>
 8006284:	2800      	cmp	r0, #0
 8006286:	d14a      	bne.n	800631e <setCommand+0x1de>
			if (!strncmp((const char*) pcParameterString2, "all",xParameterStringLength2)) {
 8006288:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800628a:	0032      	movs	r2, r6
 800628c:	4972      	ldr	r1, [pc, #456]	; (8006458 <setCommand+0x318>)
 800628e:	0020      	movs	r0, r4
 8006290:	f00d f8e4 	bl	801345c <strncmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	d10b      	bne.n	80062b0 <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 8006298:	4b70      	ldr	r3, [pc, #448]	; (800645c <setCommand+0x31c>)
 800629a:	2203      	movs	r2, #3
 800629c:	71da      	strb	r2, [r3, #7]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 800629e:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 80062a0:	21c0      	movs	r1, #192	; 0xc0
 80062a2:	0089      	lsls	r1, r1, #2
 80062a4:	4319      	orrs	r1, r3
 80062a6:	308a      	adds	r0, #138	; 0x8a
 80062a8:	0040      	lsls	r0, r0, #1
 80062aa:	f001 f983 	bl	80075b4 <EE_WriteVariable>
 80062ae:	e7a2      	b.n	80061f6 <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "message",xParameterStringLength2)) {
 80062b0:	0032      	movs	r2, r6
 80062b2:	496c      	ldr	r1, [pc, #432]	; (8006464 <setCommand+0x324>)
 80062b4:	0020      	movs	r0, r4
 80062b6:	f00d f8d1 	bl	801345c <strncmp>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d10b      	bne.n	80062d6 <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 80062be:	4b67      	ldr	r3, [pc, #412]	; (800645c <setCommand+0x31c>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	71da      	strb	r2, [r3, #7]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 80062c4:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 80062c6:	2180      	movs	r1, #128	; 0x80
 80062c8:	0049      	lsls	r1, r1, #1
 80062ca:	4319      	orrs	r1, r3
 80062cc:	308a      	adds	r0, #138	; 0x8a
 80062ce:	4090      	lsls	r0, r2
 80062d0:	f001 f970 	bl	80075b4 <EE_WriteVariable>
 80062d4:	e78f      	b.n	80061f6 <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "response",xParameterStringLength2)) {
 80062d6:	0032      	movs	r2, r6
 80062d8:	495e      	ldr	r1, [pc, #376]	; (8006454 <setCommand+0x314>)
 80062da:	0020      	movs	r0, r4
 80062dc:	f00d f8be 	bl	801345c <strncmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d10b      	bne.n	80062fc <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 80062e4:	4b5d      	ldr	r3, [pc, #372]	; (800645c <setCommand+0x31c>)
 80062e6:	2202      	movs	r2, #2
 80062e8:	71da      	strb	r2, [r3, #7]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 80062ea:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	0089      	lsls	r1, r1, #2
 80062f0:	4319      	orrs	r1, r3
 80062f2:	308a      	adds	r0, #138	; 0x8a
 80062f4:	0040      	lsls	r0, r0, #1
 80062f6:	f001 f95d 	bl	80075b4 <EE_WriteVariable>
 80062fa:	e77c      	b.n	80061f6 <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "none",xParameterStringLength2)) {
 80062fc:	0032      	movs	r2, r6
 80062fe:	495b      	ldr	r1, [pc, #364]	; (800646c <setCommand+0x32c>)
 8006300:	0020      	movs	r0, r4
 8006302:	f00d f8ab 	bl	801345c <strncmp>
 8006306:	2800      	cmp	r0, #0
 8006308:	d000      	beq.n	800630c <setCommand+0x1cc>
 800630a:	e254      	b.n	80067b6 <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 800630c:	4b53      	ldr	r3, [pc, #332]	; (800645c <setCommand+0x31c>)
 800630e:	2200      	movs	r2, #0
 8006310:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8006312:	7999      	ldrb	r1, [r3, #6]
 8006314:	308a      	adds	r0, #138	; 0x8a
 8006316:	0040      	lsls	r0, r0, #1
 8006318:	f001 f94c 	bl	80075b4 <EE_WriteVariable>
 800631c:	e76b      	b.n	80061f6 <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "clibaudrate",xParameterStringLength1 - 4)) {
 800631e:	003a      	movs	r2, r7
 8006320:	4954      	ldr	r1, [pc, #336]	; (8006474 <setCommand+0x334>)
 8006322:	0030      	movs	r0, r6
 8006324:	f00d f89a 	bl	801345c <strncmp>
 8006328:	2800      	cmp	r0, #0
 800632a:	d128      	bne.n	800637e <setCommand+0x23e>
			temp2 = atoi((const char*) pcParameterString2);
 800632c:	0020      	movs	r0, r4
 800632e:	f00c fed2 	bl	80130d6 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8006332:	23e1      	movs	r3, #225	; 0xe1
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	4298      	cmp	r0, r3
 8006338:	d900      	bls.n	800633c <setCommand+0x1fc>
 800633a:	e23c      	b.n	80067b6 <setCommand+0x676>
				BOS.clibaudrate = temp2;
 800633c:	4c47      	ldr	r4, [pc, #284]	; (800645c <setCommand+0x31c>)
 800633e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t) BOS.clibaudrate);
 8006340:	b281      	uxth	r1, r0
 8006342:	208c      	movs	r0, #140	; 0x8c
 8006344:	0040      	lsls	r0, r0, #1
 8006346:	f001 f935 	bl	80075b4 <EE_WriteVariable>
				(uint16_t) (BOS.clibaudrate >> 16));
 800634a:	68a1      	ldr	r1, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD + 1,
 800634c:	0c09      	lsrs	r1, r1, #16
 800634e:	201a      	movs	r0, #26
 8006350:	30ff      	adds	r0, #255	; 0xff
 8006352:	f001 f92f 	bl	80075b4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;// Get rid of the remaining parameters
 8006356:	4b39      	ldr	r3, [pc, #228]	; (800643c <setCommand+0x2fc>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	2300      	movs	r3, #0
 800635c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800635e:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, pcParameterString1,pcParameterString2);
 8006360:	4b3b      	ldr	r3, [pc, #236]	; (8006450 <setCommand+0x310>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	493e      	ldr	r1, [pc, #248]	; (8006460 <setCommand+0x320>)
 8006366:	0028      	movs	r0, r5
 8006368:	f00d f834 	bl	80133d4 <siprintf>
			strcat((char*) pcWriteBuffer, (char*) pcMessageCLI1);
 800636c:	4942      	ldr	r1, [pc, #264]	; (8006478 <setCommand+0x338>)
 800636e:	0028      	movs	r0, r5
 8006370:	f00d f850 	bl	8013414 <strcat>
			strcat((char*) pcWriteBuffer, (char*) pcMessageCLI2);
 8006374:	4941      	ldr	r1, [pc, #260]	; (800647c <setCommand+0x33c>)
 8006376:	0028      	movs	r0, r5
 8006378:	f00d f84c 	bl	8013414 <strcat>
 800637c:	e0ed      	b.n	800655a <setCommand+0x41a>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "debounce",xParameterStringLength1 - 4)) {
 800637e:	003a      	movs	r2, r7
 8006380:	493f      	ldr	r1, [pc, #252]	; (8006480 <setCommand+0x340>)
 8006382:	0030      	movs	r0, r6
 8006384:	f00d f86a 	bl	801345c <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	d10d      	bne.n	80063a8 <setCommand+0x268>
			temp16 = atoi((const char*) pcParameterString2);
 800638c:	0020      	movs	r0, r4
 800638e:	f00c fea2 	bl	80130d6 <atoi>
 8006392:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006394:	2900      	cmp	r1, #0
 8006396:	d100      	bne.n	800639a <setCommand+0x25a>
 8006398:	e20d      	b.n	80067b6 <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 800639a:	4b30      	ldr	r3, [pc, #192]	; (800645c <setCommand+0x31c>)
 800639c:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 800639e:	2016      	movs	r0, #22
 80063a0:	30ff      	adds	r0, #255	; 0xff
 80063a2:	f001 f907 	bl	80075b4 <EE_WriteVariable>
 80063a6:	e726      	b.n	80061f6 <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4,
 80063a8:	003a      	movs	r2, r7
 80063aa:	4936      	ldr	r1, [pc, #216]	; (8006484 <setCommand+0x344>)
 80063ac:	0030      	movs	r0, r6
 80063ae:	f00d f855 	bl	801345c <strncmp>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d10d      	bne.n	80063d2 <setCommand+0x292>
			temp16 = atoi((const char*) pcParameterString2);
 80063b6:	0020      	movs	r0, r4
 80063b8:	f00c fe8d 	bl	80130d6 <atoi>
 80063bc:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80063be:	2900      	cmp	r1, #0
 80063c0:	d100      	bne.n	80063c4 <setCommand+0x284>
 80063c2:	e1f8      	b.n	80067b6 <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 80063c4:	4b25      	ldr	r3, [pc, #148]	; (800645c <setCommand+0x31c>)
 80063c6:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 80063c8:	208b      	movs	r0, #139	; 0x8b
 80063ca:	0040      	lsls	r0, r0, #1
 80063cc:	f001 f8f2 	bl	80075b4 <EE_WriteVariable>
 80063d0:	e711      	b.n	80061f6 <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4,
 80063d2:	003a      	movs	r2, r7
 80063d4:	492c      	ldr	r1, [pc, #176]	; (8006488 <setCommand+0x348>)
 80063d6:	0030      	movs	r0, r6
 80063d8:	f00d f840 	bl	801345c <strncmp>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d112      	bne.n	8006406 <setCommand+0x2c6>
			temp16 = atoi((const char*) pcParameterString2);
 80063e0:	0020      	movs	r0, r4
 80063e2:	f00c fe78 	bl	80130d6 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 80063e6:	1e43      	subs	r3, r0, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2bfe      	cmp	r3, #254	; 0xfe
 80063ec:	d900      	bls.n	80063f0 <setCommand+0x2b0>
 80063ee:	e1e2      	b.n	80067b6 <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 80063f0:	b2c0      	uxtb	r0, r0
 80063f2:	4b1a      	ldr	r3, [pc, #104]	; (800645c <setCommand+0x31c>)
 80063f4:	7118      	strb	r0, [r3, #4]
				((uint16_t) BOS.buttons.maxInterClickTime << 8)| (uint16_t) BOS.buttons.minInterClickTime);
 80063f6:	7959      	ldrb	r1, [r3, #5]
 80063f8:	0209      	lsls	r1, r1, #8
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 80063fa:	4301      	orrs	r1, r0
 80063fc:	2018      	movs	r0, #24
 80063fe:	30ff      	adds	r0, #255	; 0xff
 8006400:	f001 f8d8 	bl	80075b4 <EE_WriteVariable>
 8006404:	e6f7      	b.n	80061f6 <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4,
 8006406:	003a      	movs	r2, r7
 8006408:	4920      	ldr	r1, [pc, #128]	; (800648c <setCommand+0x34c>)
 800640a:	0030      	movs	r0, r6
 800640c:	f00d f826 	bl	801345c <strncmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	d000      	beq.n	8006416 <setCommand+0x2d6>
 8006414:	e6c3      	b.n	800619e <setCommand+0x5e>
			temp16 = atoi((const char*) pcParameterString2);
 8006416:	0020      	movs	r0, r4
 8006418:	f00c fe5d 	bl	80130d6 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800641c:	1e43      	subs	r3, r0, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	2bfe      	cmp	r3, #254	; 0xfe
 8006422:	d900      	bls.n	8006426 <setCommand+0x2e6>
 8006424:	e1c7      	b.n	80067b6 <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <setCommand+0x31c>)
 8006428:	7158      	strb	r0, [r3, #5]
				((uint16_t) BOS.buttons.maxInterClickTime << 8)| (uint16_t) BOS.buttons.minInterClickTime);
 800642a:	0200      	lsls	r0, r0, #8
 800642c:	7919      	ldrb	r1, [r3, #4]
 800642e:	4301      	orrs	r1, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 8006430:	b289      	uxth	r1, r1
 8006432:	2018      	movs	r0, #24
 8006434:	30ff      	adds	r0, #255	; 0xff
 8006436:	f001 f8bd 	bl	80075b4 <EE_WriteVariable>
 800643a:	e6dc      	b.n	80061f6 <setCommand+0xb6>
 800643c:	20000a78 	.word	0x20000a78
 8006440:	08016764 	.word	0x08016764
 8006444:	08016e90 	.word	0x08016e90
 8006448:	08016e9c 	.word	0x08016e9c
 800644c:	080167ec 	.word	0x080167ec
 8006450:	20000a84 	.word	0x20000a84
 8006454:	0801676c 	.word	0x0801676c
 8006458:	08015b8c 	.word	0x08015b8c
 800645c:	20006130 	.word	0x20006130
 8006460:	08016d98 	.word	0x08016d98
 8006464:	08016d8c 	.word	0x08016d8c
 8006468:	08016d94 	.word	0x08016d94
 800646c:	0801677c 	.word	0x0801677c
 8006470:	08016784 	.word	0x08016784
 8006474:	0801678c 	.word	0x0801678c
 8006478:	08016dac 	.word	0x08016dac
 800647c:	08016ddc 	.word	0x08016ddc
 8006480:	08016798 	.word	0x08016798
 8006484:	080167a4 	.word	0x080167a4
 8006488:	080167b4 	.word	0x080167b4
 800648c:	080167c8 	.word	0x080167c8
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 8006490:	aa0a      	add	r2, sp, #40	; 0x28
 8006492:	2102      	movs	r1, #2
 8006494:	0020      	movs	r0, r4
 8006496:	f007 fcdb 	bl	800de50 <FreeRTOS_CLIGetParameter>
 800649a:	4bca      	ldr	r3, [pc, #808]	; (80067c4 <setCommand+0x684>)
 800649c:	4699      	mov	r9, r3
 800649e:	6018      	str	r0, [r3, #0]
		pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,3, &xParameterStringLength3);
 80064a0:	aa09      	add	r2, sp, #36	; 0x24
 80064a2:	2103      	movs	r1, #3
 80064a4:	0020      	movs	r0, r4
 80064a6:	f007 fcd3 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80064aa:	4fc7      	ldr	r7, [pc, #796]	; (80067c8 <setCommand+0x688>)
 80064ac:	6038      	str	r0, [r7, #0]
		pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,4, &xParameterStringLength4);
 80064ae:	aa08      	add	r2, sp, #32
 80064b0:	2104      	movs	r1, #4
 80064b2:	0020      	movs	r0, r4
 80064b4:	f007 fccc 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80064b8:	4ec4      	ldr	r6, [pc, #784]	; (80067cc <setCommand+0x68c>)
 80064ba:	6030      	str	r0, [r6, #0]
		pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,5, &xParameterStringLength5);
 80064bc:	aa07      	add	r2, sp, #28
 80064be:	2105      	movs	r1, #5
 80064c0:	0020      	movs	r0, r4
 80064c2:	f007 fcc5 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80064c6:	4cc2      	ldr	r4, [pc, #776]	; (80067d0 <setCommand+0x690>)
 80064c8:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char*) pcParameterString2);		// Hours
 80064ca:	464b      	mov	r3, r9
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f00c fe02 	bl	80130d6 <atoi>
 80064d2:	b2c3      	uxtb	r3, r0
 80064d4:	4699      	mov	r9, r3
		temp82 = atoi((const char*) pcParameterString3);		// Minutes
 80064d6:	6838      	ldr	r0, [r7, #0]
 80064d8:	f00c fdfd 	bl	80130d6 <atoi>
 80064dc:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char*) pcParameterString4);		// Seconds
 80064de:	6830      	ldr	r0, [r6, #0]
 80064e0:	f00c fdf9 	bl	80130d6 <atoi>
 80064e4:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 80064e6:	6824      	ldr	r4, [r4, #0]
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	d010      	beq.n	800650e <setCommand+0x3ce>
			if (!strncmp((const char*) pcParameterString5, "am", 2))
 80064ec:	2202      	movs	r2, #2
 80064ee:	49b9      	ldr	r1, [pc, #740]	; (80067d4 <setCommand+0x694>)
 80064f0:	0020      	movs	r0, r4
 80064f2:	f00c ffb3 	bl	801345c <strncmp>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d035      	beq.n	8006566 <setCommand+0x426>
			else if (!strncmp((const char*) pcParameterString5, "pm", 2))
 80064fa:	2202      	movs	r2, #2
 80064fc:	49b6      	ldr	r1, [pc, #728]	; (80067d8 <setCommand+0x698>)
 80064fe:	0020      	movs	r0, r4
 8006500:	f00c ffac 	bl	801345c <strncmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	d000      	beq.n	800650a <setCommand+0x3ca>
 8006508:	e155      	b.n	80067b6 <setCommand+0x676>
				temp84 = RTC_PM;
 800650a:	2302      	movs	r3, #2
 800650c:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 800650e:	464b      	mov	r3, r9
 8006510:	2b17      	cmp	r3, #23
 8006512:	d900      	bls.n	8006516 <setCommand+0x3d6>
 8006514:	e14f      	b.n	80067b6 <setCommand+0x676>
 8006516:	2f3b      	cmp	r7, #59	; 0x3b
 8006518:	d900      	bls.n	800651c <setCommand+0x3dc>
 800651a:	e14c      	b.n	80067b6 <setCommand+0x676>
 800651c:	2e3b      	cmp	r6, #59	; 0x3b
 800651e:	d900      	bls.n	8006522 <setCommand+0x3e2>
 8006520:	e149      	b.n	80067b6 <setCommand+0x676>
				GetTimeDate();
 8006522:	f006 fff7 	bl	800d514 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day,
 8006526:	4cad      	ldr	r4, [pc, #692]	; (80067dc <setCommand+0x69c>)
 8006528:	7d23      	ldrb	r3, [r4, #20]
 800652a:	8b22      	ldrh	r2, [r4, #24]
 800652c:	7d61      	ldrb	r1, [r4, #21]
 800652e:	7da0      	ldrb	r0, [r4, #22]
 8006530:	7b24      	ldrb	r4, [r4, #12]
 8006532:	b264      	sxtb	r4, r4
 8006534:	9404      	str	r4, [sp, #16]
 8006536:	4644      	mov	r4, r8
 8006538:	9403      	str	r4, [sp, #12]
 800653a:	464c      	mov	r4, r9
 800653c:	9402      	str	r4, [sp, #8]
 800653e:	9701      	str	r7, [sp, #4]
 8006540:	9600      	str	r6, [sp, #0]
 8006542:	f006 ff8d 	bl	800d460 <BOS_CalendarConfig>
 8006546:	0006      	movs	r6, r0
	if (result == BOS_OK) {
 8006548:	2e00      	cmp	r6, #0
 800654a:	d100      	bne.n	800654e <setCommand+0x40e>
 800654c:	e653      	b.n	80061f6 <setCommand+0xb6>
	} else if (result == BOS_ERR_WrongParam)
 800654e:	2e67      	cmp	r6, #103	; 0x67
 8006550:	d100      	bne.n	8006554 <setCommand+0x414>
 8006552:	e624      	b.n	800619e <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 8006554:	2e68      	cmp	r6, #104	; 0x68
 8006556:	d100      	bne.n	800655a <setCommand+0x41a>
 8006558:	e12d      	b.n	80067b6 <setCommand+0x676>
}
 800655a:	2000      	movs	r0, #0
 800655c:	b00d      	add	sp, #52	; 0x34
 800655e:	bc0c      	pop	{r2, r3}
 8006560:	4690      	mov	r8, r2
 8006562:	4699      	mov	r9, r3
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 8006566:	2301      	movs	r3, #1
 8006568:	4698      	mov	r8, r3
 800656a:	e7d0      	b.n	800650e <setCommand+0x3ce>
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 800656c:	aa0a      	add	r2, sp, #40	; 0x28
 800656e:	2102      	movs	r1, #2
 8006570:	0020      	movs	r0, r4
 8006572:	f007 fc6d 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006576:	4e93      	ldr	r6, [pc, #588]	; (80067c4 <setCommand+0x684>)
 8006578:	6030      	str	r0, [r6, #0]
		pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,3, &xParameterStringLength3);
 800657a:	aa09      	add	r2, sp, #36	; 0x24
 800657c:	2103      	movs	r1, #3
 800657e:	0020      	movs	r0, r4
 8006580:	f007 fc66 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006584:	4b90      	ldr	r3, [pc, #576]	; (80067c8 <setCommand+0x688>)
 8006586:	6018      	str	r0, [r3, #0]
		pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,4, &xParameterStringLength4);
 8006588:	aa08      	add	r2, sp, #32
 800658a:	2104      	movs	r1, #4
 800658c:	0020      	movs	r0, r4
 800658e:	f007 fc5f 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006592:	4b8e      	ldr	r3, [pc, #568]	; (80067cc <setCommand+0x68c>)
 8006594:	4698      	mov	r8, r3
 8006596:	6018      	str	r0, [r3, #0]
		pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,5, &xParameterStringLength5);
 8006598:	aa07      	add	r2, sp, #28
 800659a:	2105      	movs	r1, #5
 800659c:	0020      	movs	r0, r4
 800659e:	f007 fc57 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80065a2:	4c8b      	ldr	r4, [pc, #556]	; (80067d0 <setCommand+0x690>)
 80065a4:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char*) pcParameterString4);		// day
 80065a6:	4643      	mov	r3, r8
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	f00c fd94 	bl	80130d6 <atoi>
 80065ae:	b2c3      	uxtb	r3, r0
 80065b0:	4698      	mov	r8, r3
		temp16 = atoi((const char*) pcParameterString5);		// year
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	f00c fd8f 	bl	80130d6 <atoi>
 80065b8:	b283      	uxth	r3, r0
 80065ba:	4699      	mov	r9, r3
		if (!strncmp((const char*) pcParameterString2, "monday", 6))
 80065bc:	6834      	ldr	r4, [r6, #0]
 80065be:	2206      	movs	r2, #6
 80065c0:	4987      	ldr	r1, [pc, #540]	; (80067e0 <setCommand+0x6a0>)
 80065c2:	0020      	movs	r0, r4
 80065c4:	f00c ff4a 	bl	801345c <strncmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d100      	bne.n	80065ce <setCommand+0x48e>
 80065cc:	e195      	b.n	80068fa <setCommand+0x7ba>
		else if (!strncmp((const char*) pcParameterString2, "tuesday", 7))
 80065ce:	2207      	movs	r2, #7
 80065d0:	4984      	ldr	r1, [pc, #528]	; (80067e4 <setCommand+0x6a4>)
 80065d2:	0020      	movs	r0, r4
 80065d4:	f00c ff42 	bl	801345c <strncmp>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d100      	bne.n	80065de <setCommand+0x49e>
 80065dc:	e19b      	b.n	8006916 <setCommand+0x7d6>
		else if (!strncmp((const char*) pcParameterString2, "wednesday", 9))
 80065de:	2209      	movs	r2, #9
 80065e0:	4981      	ldr	r1, [pc, #516]	; (80067e8 <setCommand+0x6a8>)
 80065e2:	0020      	movs	r0, r4
 80065e4:	f00c ff3a 	bl	801345c <strncmp>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d100      	bne.n	80065ee <setCommand+0x4ae>
 80065ec:	e195      	b.n	800691a <setCommand+0x7da>
		else if (!strncmp((const char*) pcParameterString2, "thursday", 8))
 80065ee:	2208      	movs	r2, #8
 80065f0:	497e      	ldr	r1, [pc, #504]	; (80067ec <setCommand+0x6ac>)
 80065f2:	0020      	movs	r0, r4
 80065f4:	f00c ff32 	bl	801345c <strncmp>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d100      	bne.n	80065fe <setCommand+0x4be>
 80065fc:	e18f      	b.n	800691e <setCommand+0x7de>
		else if (!strncmp((const char*) pcParameterString2, "friday", 6))
 80065fe:	2206      	movs	r2, #6
 8006600:	497b      	ldr	r1, [pc, #492]	; (80067f0 <setCommand+0x6b0>)
 8006602:	0020      	movs	r0, r4
 8006604:	f00c ff2a 	bl	801345c <strncmp>
 8006608:	2800      	cmp	r0, #0
 800660a:	d100      	bne.n	800660e <setCommand+0x4ce>
 800660c:	e189      	b.n	8006922 <setCommand+0x7e2>
		else if (!strncmp((const char*) pcParameterString2, "saturday", 8))
 800660e:	2208      	movs	r2, #8
 8006610:	4978      	ldr	r1, [pc, #480]	; (80067f4 <setCommand+0x6b4>)
 8006612:	0020      	movs	r0, r4
 8006614:	f00c ff22 	bl	801345c <strncmp>
 8006618:	2800      	cmp	r0, #0
 800661a:	d100      	bne.n	800661e <setCommand+0x4de>
 800661c:	e183      	b.n	8006926 <setCommand+0x7e6>
		else if (!strncmp((const char*) pcParameterString2, "sunday", 6))
 800661e:	2206      	movs	r2, #6
 8006620:	4975      	ldr	r1, [pc, #468]	; (80067f8 <setCommand+0x6b8>)
 8006622:	0020      	movs	r0, r4
 8006624:	f00c ff1a 	bl	801345c <strncmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	d100      	bne.n	800662e <setCommand+0x4ee>
 800662c:	e17d      	b.n	800692a <setCommand+0x7ea>
		if (!strncmp((const char*) pcParameterString3, "january", 7)
 800662e:	4b66      	ldr	r3, [pc, #408]	; (80067c8 <setCommand+0x688>)
 8006630:	681c      	ldr	r4, [r3, #0]
 8006632:	2207      	movs	r2, #7
 8006634:	4971      	ldr	r1, [pc, #452]	; (80067fc <setCommand+0x6bc>)
 8006636:	0020      	movs	r0, r4
 8006638:	f00c ff10 	bl	801345c <strncmp>
			result = BOS_ERR_WrongValue;
 800663c:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char*) pcParameterString3, "january", 7)
 800663e:	2800      	cmp	r0, #0
 8006640:	d101      	bne.n	8006646 <setCommand+0x506>
			result = BOS_ERR_WrongValue;
 8006642:	2668      	movs	r6, #104	; 0x68
 8006644:	e783      	b.n	800654e <setCommand+0x40e>
				|| !strncmp((const char*) pcParameterString3, "1 ", 2))
 8006646:	2202      	movs	r2, #2
 8006648:	496d      	ldr	r1, [pc, #436]	; (8006800 <setCommand+0x6c0>)
 800664a:	0020      	movs	r0, r4
 800664c:	f00c ff06 	bl	801345c <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d100      	bne.n	8006656 <setCommand+0x516>
 8006654:	e104      	b.n	8006860 <setCommand+0x720>
		else if (!strncmp((const char*) pcParameterString3, "february", 8)
 8006656:	2208      	movs	r2, #8
 8006658:	496a      	ldr	r1, [pc, #424]	; (8006804 <setCommand+0x6c4>)
 800665a:	0020      	movs	r0, r4
 800665c:	f00c fefe 	bl	801345c <strncmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	d100      	bne.n	8006666 <setCommand+0x526>
 8006664:	e11f      	b.n	80068a6 <setCommand+0x766>
				|| !strncmp((const char*) pcParameterString3, "2 ", 2))
 8006666:	2202      	movs	r2, #2
 8006668:	4967      	ldr	r1, [pc, #412]	; (8006808 <setCommand+0x6c8>)
 800666a:	0020      	movs	r0, r4
 800666c:	f00c fef6 	bl	801345c <strncmp>
 8006670:	2800      	cmp	r0, #0
 8006672:	d100      	bne.n	8006676 <setCommand+0x536>
 8006674:	e119      	b.n	80068aa <setCommand+0x76a>
		else if (!strncmp((const char*) pcParameterString3, "march", 5)
 8006676:	2205      	movs	r2, #5
 8006678:	4964      	ldr	r1, [pc, #400]	; (800680c <setCommand+0x6cc>)
 800667a:	0020      	movs	r0, r4
 800667c:	f00c feee 	bl	801345c <strncmp>
 8006680:	2800      	cmp	r0, #0
 8006682:	d100      	bne.n	8006686 <setCommand+0x546>
 8006684:	e113      	b.n	80068ae <setCommand+0x76e>
				|| !strncmp((const char*) pcParameterString3, "3 ", 2))
 8006686:	2202      	movs	r2, #2
 8006688:	4961      	ldr	r1, [pc, #388]	; (8006810 <setCommand+0x6d0>)
 800668a:	0020      	movs	r0, r4
 800668c:	f00c fee6 	bl	801345c <strncmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	d100      	bne.n	8006696 <setCommand+0x556>
 8006694:	e10d      	b.n	80068b2 <setCommand+0x772>
		else if (!strncmp((const char*) pcParameterString3, "april", 5)
 8006696:	2205      	movs	r2, #5
 8006698:	495e      	ldr	r1, [pc, #376]	; (8006814 <setCommand+0x6d4>)
 800669a:	0020      	movs	r0, r4
 800669c:	f00c fede 	bl	801345c <strncmp>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d100      	bne.n	80066a6 <setCommand+0x566>
 80066a4:	e107      	b.n	80068b6 <setCommand+0x776>
				|| !strncmp((const char*) pcParameterString3, "4 ", 2))
 80066a6:	2202      	movs	r2, #2
 80066a8:	495b      	ldr	r1, [pc, #364]	; (8006818 <setCommand+0x6d8>)
 80066aa:	0020      	movs	r0, r4
 80066ac:	f00c fed6 	bl	801345c <strncmp>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d100      	bne.n	80066b6 <setCommand+0x576>
 80066b4:	e101      	b.n	80068ba <setCommand+0x77a>
		else if (!strncmp((const char*) pcParameterString3, "may", 3)
 80066b6:	2203      	movs	r2, #3
 80066b8:	4958      	ldr	r1, [pc, #352]	; (800681c <setCommand+0x6dc>)
 80066ba:	0020      	movs	r0, r4
 80066bc:	f00c fece 	bl	801345c <strncmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d100      	bne.n	80066c6 <setCommand+0x586>
 80066c4:	e0fb      	b.n	80068be <setCommand+0x77e>
				|| !strncmp((const char*) pcParameterString3, "5 ", 2))
 80066c6:	2202      	movs	r2, #2
 80066c8:	4955      	ldr	r1, [pc, #340]	; (8006820 <setCommand+0x6e0>)
 80066ca:	0020      	movs	r0, r4
 80066cc:	f00c fec6 	bl	801345c <strncmp>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d100      	bne.n	80066d6 <setCommand+0x596>
 80066d4:	e0f5      	b.n	80068c2 <setCommand+0x782>
		else if (!strncmp((const char*) pcParameterString3, "june", 4)
 80066d6:	2204      	movs	r2, #4
 80066d8:	4952      	ldr	r1, [pc, #328]	; (8006824 <setCommand+0x6e4>)
 80066da:	0020      	movs	r0, r4
 80066dc:	f00c febe 	bl	801345c <strncmp>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d100      	bne.n	80066e6 <setCommand+0x5a6>
 80066e4:	e0ef      	b.n	80068c6 <setCommand+0x786>
				|| !strncmp((const char*) pcParameterString3, "6 ", 2))
 80066e6:	2202      	movs	r2, #2
 80066e8:	494f      	ldr	r1, [pc, #316]	; (8006828 <setCommand+0x6e8>)
 80066ea:	0020      	movs	r0, r4
 80066ec:	f00c feb6 	bl	801345c <strncmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d100      	bne.n	80066f6 <setCommand+0x5b6>
 80066f4:	e0e9      	b.n	80068ca <setCommand+0x78a>
		else if (!strncmp((const char*) pcParameterString3, "july", 4)
 80066f6:	2204      	movs	r2, #4
 80066f8:	494c      	ldr	r1, [pc, #304]	; (800682c <setCommand+0x6ec>)
 80066fa:	0020      	movs	r0, r4
 80066fc:	f00c feae 	bl	801345c <strncmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	d100      	bne.n	8006706 <setCommand+0x5c6>
 8006704:	e0e3      	b.n	80068ce <setCommand+0x78e>
				|| !strncmp((const char*) pcParameterString3, "7 ", 2))
 8006706:	2202      	movs	r2, #2
 8006708:	4949      	ldr	r1, [pc, #292]	; (8006830 <setCommand+0x6f0>)
 800670a:	0020      	movs	r0, r4
 800670c:	f00c fea6 	bl	801345c <strncmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	d100      	bne.n	8006716 <setCommand+0x5d6>
 8006714:	e0dd      	b.n	80068d2 <setCommand+0x792>
		else if (!strncmp((const char*) pcParameterString3, "august", 5)
 8006716:	2205      	movs	r2, #5
 8006718:	4946      	ldr	r1, [pc, #280]	; (8006834 <setCommand+0x6f4>)
 800671a:	0020      	movs	r0, r4
 800671c:	f00c fe9e 	bl	801345c <strncmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	d100      	bne.n	8006726 <setCommand+0x5e6>
 8006724:	e0d7      	b.n	80068d6 <setCommand+0x796>
				|| !strncmp((const char*) pcParameterString3, "8 ", 2))
 8006726:	2202      	movs	r2, #2
 8006728:	4943      	ldr	r1, [pc, #268]	; (8006838 <setCommand+0x6f8>)
 800672a:	0020      	movs	r0, r4
 800672c:	f00c fe96 	bl	801345c <strncmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	d100      	bne.n	8006736 <setCommand+0x5f6>
 8006734:	e0d1      	b.n	80068da <setCommand+0x79a>
		else if (!strncmp((const char*) pcParameterString3, "september", 9)
 8006736:	2209      	movs	r2, #9
 8006738:	4940      	ldr	r1, [pc, #256]	; (800683c <setCommand+0x6fc>)
 800673a:	0020      	movs	r0, r4
 800673c:	f00c fe8e 	bl	801345c <strncmp>
 8006740:	2800      	cmp	r0, #0
 8006742:	d100      	bne.n	8006746 <setCommand+0x606>
 8006744:	e0cb      	b.n	80068de <setCommand+0x79e>
				|| !strncmp((const char*) pcParameterString3, "9 ", 2))
 8006746:	2202      	movs	r2, #2
 8006748:	493d      	ldr	r1, [pc, #244]	; (8006840 <setCommand+0x700>)
 800674a:	0020      	movs	r0, r4
 800674c:	f00c fe86 	bl	801345c <strncmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	d100      	bne.n	8006756 <setCommand+0x616>
 8006754:	e0c5      	b.n	80068e2 <setCommand+0x7a2>
		else if (!strncmp((const char*) pcParameterString3, "october", 7)
 8006756:	2207      	movs	r2, #7
 8006758:	493a      	ldr	r1, [pc, #232]	; (8006844 <setCommand+0x704>)
 800675a:	0020      	movs	r0, r4
 800675c:	f00c fe7e 	bl	801345c <strncmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	d100      	bne.n	8006766 <setCommand+0x626>
 8006764:	e0bf      	b.n	80068e6 <setCommand+0x7a6>
				|| !strncmp((const char*) pcParameterString3, "10", 2))
 8006766:	2202      	movs	r2, #2
 8006768:	4937      	ldr	r1, [pc, #220]	; (8006848 <setCommand+0x708>)
 800676a:	0020      	movs	r0, r4
 800676c:	f00c fe76 	bl	801345c <strncmp>
 8006770:	2800      	cmp	r0, #0
 8006772:	d100      	bne.n	8006776 <setCommand+0x636>
 8006774:	e0b9      	b.n	80068ea <setCommand+0x7aa>
		else if (!strncmp((const char*) pcParameterString3, "november", 8)
 8006776:	2208      	movs	r2, #8
 8006778:	4934      	ldr	r1, [pc, #208]	; (800684c <setCommand+0x70c>)
 800677a:	0020      	movs	r0, r4
 800677c:	f00c fe6e 	bl	801345c <strncmp>
 8006780:	2800      	cmp	r0, #0
 8006782:	d100      	bne.n	8006786 <setCommand+0x646>
 8006784:	e0b3      	b.n	80068ee <setCommand+0x7ae>
				|| !strncmp((const char*) pcParameterString3, "11", 2))
 8006786:	2202      	movs	r2, #2
 8006788:	4931      	ldr	r1, [pc, #196]	; (8006850 <setCommand+0x710>)
 800678a:	0020      	movs	r0, r4
 800678c:	f00c fe66 	bl	801345c <strncmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	d100      	bne.n	8006796 <setCommand+0x656>
 8006794:	e0ad      	b.n	80068f2 <setCommand+0x7b2>
		else if (!strncmp((const char*) pcParameterString3, "december", 8)
 8006796:	2208      	movs	r2, #8
 8006798:	492e      	ldr	r1, [pc, #184]	; (8006854 <setCommand+0x714>)
 800679a:	0020      	movs	r0, r4
 800679c:	f00c fe5e 	bl	801345c <strncmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d100      	bne.n	80067a6 <setCommand+0x666>
 80067a4:	e0a7      	b.n	80068f6 <setCommand+0x7b6>
				|| !strncmp((const char*) pcParameterString3, "12", 2))
 80067a6:	2202      	movs	r2, #2
 80067a8:	492b      	ldr	r1, [pc, #172]	; (8006858 <setCommand+0x718>)
 80067aa:	0020      	movs	r0, r4
 80067ac:	f00c fe56 	bl	801345c <strncmp>
			temp82 = DECEMBER;
 80067b0:	240c      	movs	r4, #12
				|| !strncmp((const char*) pcParameterString3, "12", 2))
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d055      	beq.n	8006862 <setCommand+0x722>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongValue);
 80067b6:	220f      	movs	r2, #15
 80067b8:	4928      	ldr	r1, [pc, #160]	; (800685c <setCommand+0x71c>)
 80067ba:	0028      	movs	r0, r5
 80067bc:	f00c fd03 	bl	80131c6 <memcpy>
 80067c0:	e6cb      	b.n	800655a <setCommand+0x41a>
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	20000a84 	.word	0x20000a84
 80067c8:	20000a8c 	.word	0x20000a8c
 80067cc:	20000a90 	.word	0x20000a90
 80067d0:	20000a94 	.word	0x20000a94
 80067d4:	080185d8 	.word	0x080185d8
 80067d8:	08016e98 	.word	0x08016e98
 80067dc:	20006130 	.word	0x20006130
 80067e0:	08016ea4 	.word	0x08016ea4
 80067e4:	08016eac 	.word	0x08016eac
 80067e8:	08016eb4 	.word	0x08016eb4
 80067ec:	08016ec0 	.word	0x08016ec0
 80067f0:	08016ecc 	.word	0x08016ecc
 80067f4:	08016ed4 	.word	0x08016ed4
 80067f8:	08016ee0 	.word	0x08016ee0
 80067fc:	08016f7c 	.word	0x08016f7c
 8006800:	08016ee8 	.word	0x08016ee8
 8006804:	08016eec 	.word	0x08016eec
 8006808:	08016ef8 	.word	0x08016ef8
 800680c:	08016efc 	.word	0x08016efc
 8006810:	08016f04 	.word	0x08016f04
 8006814:	08016f08 	.word	0x08016f08
 8006818:	08016f10 	.word	0x08016f10
 800681c:	08016f14 	.word	0x08016f14
 8006820:	08016f18 	.word	0x08016f18
 8006824:	08016f1c 	.word	0x08016f1c
 8006828:	08016f24 	.word	0x08016f24
 800682c:	08016f28 	.word	0x08016f28
 8006830:	08016f30 	.word	0x08016f30
 8006834:	08016f34 	.word	0x08016f34
 8006838:	08016f3c 	.word	0x08016f3c
 800683c:	08016f40 	.word	0x08016f40
 8006840:	08016f4c 	.word	0x08016f4c
 8006844:	08016f50 	.word	0x08016f50
 8006848:	08016f58 	.word	0x08016f58
 800684c:	08016f5c 	.word	0x08016f5c
 8006850:	08016f68 	.word	0x08016f68
 8006854:	08016f6c 	.word	0x08016f6c
 8006858:	08016f78 	.word	0x08016f78
 800685c:	08016658 	.word	0x08016658
			temp82 = JANUARY;
 8006860:	2401      	movs	r4, #1
		if (result == BOS_OK) {
 8006862:	2e00      	cmp	r6, #0
 8006864:	d000      	beq.n	8006868 <setCommand+0x728>
 8006866:	e672      	b.n	800654e <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006868:	4643      	mov	r3, r8
 800686a:	3b01      	subs	r3, #1
 800686c:	2b1e      	cmp	r3, #30
 800686e:	d8a2      	bhi.n	80067b6 <setCommand+0x676>
 8006870:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <setCommand+0x7f0>)
 8006872:	444b      	add	r3, r9
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d89d      	bhi.n	80067b6 <setCommand+0x676>
				GetTimeDate();
 800687a:	f006 fe4b 	bl	800d514 <GetTimeDate>
						BOS.time.ampm, BOS.daylightsaving);
 800687e:	4b2d      	ldr	r3, [pc, #180]	; (8006934 <setCommand+0x7f4>)
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81,
 8006880:	220c      	movs	r2, #12
 8006882:	569a      	ldrsb	r2, [r3, r2]
 8006884:	9204      	str	r2, [sp, #16]
 8006886:	7cda      	ldrb	r2, [r3, #19]
 8006888:	9203      	str	r2, [sp, #12]
 800688a:	7c9a      	ldrb	r2, [r3, #18]
 800688c:	9202      	str	r2, [sp, #8]
 800688e:	7c5a      	ldrb	r2, [r3, #17]
 8006890:	9201      	str	r2, [sp, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	003b      	movs	r3, r7
 8006898:	464a      	mov	r2, r9
 800689a:	4641      	mov	r1, r8
 800689c:	0020      	movs	r0, r4
 800689e:	f006 fddf 	bl	800d460 <BOS_CalendarConfig>
 80068a2:	0006      	movs	r6, r0
 80068a4:	e650      	b.n	8006548 <setCommand+0x408>
			temp82 = FEBRUARY;
 80068a6:	2402      	movs	r4, #2
 80068a8:	e7db      	b.n	8006862 <setCommand+0x722>
 80068aa:	2402      	movs	r4, #2
 80068ac:	e7d9      	b.n	8006862 <setCommand+0x722>
			temp82 = MARCH;
 80068ae:	2403      	movs	r4, #3
 80068b0:	e7d7      	b.n	8006862 <setCommand+0x722>
 80068b2:	2403      	movs	r4, #3
 80068b4:	e7d5      	b.n	8006862 <setCommand+0x722>
			temp82 = APRIL;
 80068b6:	2404      	movs	r4, #4
 80068b8:	e7d3      	b.n	8006862 <setCommand+0x722>
 80068ba:	2404      	movs	r4, #4
 80068bc:	e7d1      	b.n	8006862 <setCommand+0x722>
			temp82 = MAY;
 80068be:	2405      	movs	r4, #5
 80068c0:	e7cf      	b.n	8006862 <setCommand+0x722>
 80068c2:	2405      	movs	r4, #5
 80068c4:	e7cd      	b.n	8006862 <setCommand+0x722>
			temp82 = JUNE;
 80068c6:	2406      	movs	r4, #6
 80068c8:	e7cb      	b.n	8006862 <setCommand+0x722>
 80068ca:	2406      	movs	r4, #6
 80068cc:	e7c9      	b.n	8006862 <setCommand+0x722>
			temp82 = JULY;
 80068ce:	2407      	movs	r4, #7
 80068d0:	e7c7      	b.n	8006862 <setCommand+0x722>
 80068d2:	2407      	movs	r4, #7
 80068d4:	e7c5      	b.n	8006862 <setCommand+0x722>
			temp82 = AUGUST;
 80068d6:	2408      	movs	r4, #8
 80068d8:	e7c3      	b.n	8006862 <setCommand+0x722>
 80068da:	2408      	movs	r4, #8
 80068dc:	e7c1      	b.n	8006862 <setCommand+0x722>
			temp82 = SEPTEMBER;
 80068de:	2409      	movs	r4, #9
 80068e0:	e7bf      	b.n	8006862 <setCommand+0x722>
 80068e2:	2409      	movs	r4, #9
 80068e4:	e7bd      	b.n	8006862 <setCommand+0x722>
			temp82 = OCTOBER;
 80068e6:	240a      	movs	r4, #10
 80068e8:	e7bb      	b.n	8006862 <setCommand+0x722>
 80068ea:	240a      	movs	r4, #10
 80068ec:	e7b9      	b.n	8006862 <setCommand+0x722>
			temp82 = NOVEMBER;
 80068ee:	240b      	movs	r4, #11
 80068f0:	e7b7      	b.n	8006862 <setCommand+0x722>
 80068f2:	240b      	movs	r4, #11
 80068f4:	e7b5      	b.n	8006862 <setCommand+0x722>
			temp82 = DECEMBER;
 80068f6:	240c      	movs	r4, #12
 80068f8:	e7b3      	b.n	8006862 <setCommand+0x722>
			temp81 = MONDAY;
 80068fa:	2701      	movs	r7, #1
		if (!strncmp((const char*) pcParameterString3, "january", 7)
 80068fc:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <setCommand+0x7f8>)
 80068fe:	681c      	ldr	r4, [r3, #0]
 8006900:	2207      	movs	r2, #7
 8006902:	490e      	ldr	r1, [pc, #56]	; (800693c <setCommand+0x7fc>)
 8006904:	0020      	movs	r0, r4
 8006906:	f00c fda9 	bl	801345c <strncmp>
 800690a:	2600      	movs	r6, #0
 800690c:	2800      	cmp	r0, #0
 800690e:	d000      	beq.n	8006912 <setCommand+0x7d2>
 8006910:	e699      	b.n	8006646 <setCommand+0x506>
			temp82 = JANUARY;
 8006912:	2401      	movs	r4, #1
 8006914:	e7a8      	b.n	8006868 <setCommand+0x728>
			temp81 = TUESDAY;
 8006916:	2702      	movs	r7, #2
 8006918:	e7f0      	b.n	80068fc <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 800691a:	2703      	movs	r7, #3
 800691c:	e7ee      	b.n	80068fc <setCommand+0x7bc>
			temp81 = THURSDAY;
 800691e:	2704      	movs	r7, #4
 8006920:	e7ec      	b.n	80068fc <setCommand+0x7bc>
			temp81 = FRIDAY;
 8006922:	2705      	movs	r7, #5
 8006924:	e7ea      	b.n	80068fc <setCommand+0x7bc>
			temp81 = SATURDAY;
 8006926:	2706      	movs	r7, #6
 8006928:	e7e8      	b.n	80068fc <setCommand+0x7bc>
			temp81 = SUNDAY;
 800692a:	2707      	movs	r7, #7
 800692c:	e7e6      	b.n	80068fc <setCommand+0x7bc>
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	fffff830 	.word	0xfffff830
 8006934:	20006130 	.word	0x20006130
 8006938:	20000a8c 	.word	0x20000a8c
 800693c:	08016f7c 	.word	0x08016f7c

08006940 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006940:	b530      	push	{r4, r5, lr}
 8006942:	b083      	sub	sp, #12
 8006944:	0005      	movs	r5, r0
 8006946:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800694c:	2d00      	cmp	r5, #0
 800694e:	d101      	bne.n	8006954 <removebuttonCommand+0x14>
 8006950:	b672      	cpsid	i
 8006952:	e7fe      	b.n	8006952 <removebuttonCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006954:	aa01      	add	r2, sp, #4
 8006956:	2101      	movs	r1, #1
 8006958:	f007 fa7a 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 800695c:	2300      	movs	r3, #0
 800695e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006960:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006962:	2b70      	cmp	r3, #112	; 0x70
 8006964:	d007      	beq.n	8006976 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 8006966:	0020      	movs	r0, r4
 8006968:	f001 fb82 	bl	8008070 <RemovePortButton>
	if (result == BOS_OK) {
 800696c:	2800      	cmp	r0, #0
 800696e:	d007      	beq.n	8006980 <removebuttonCommand+0x40>
}
 8006970:	2000      	movs	r0, #0
 8006972:	b003      	add	sp, #12
 8006974:	bd30      	pop	{r4, r5, pc}
		port = (uint8_t) atol((char*) pcParameterString1 + 1);
 8006976:	3001      	adds	r0, #1
 8006978:	f00c fbb3 	bl	80130e2 <atol>
 800697c:	b2c4      	uxtb	r4, r0
 800697e:	e7f2      	b.n	8006966 <removebuttonCommand+0x26>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, port, port);
 8006980:	0023      	movs	r3, r4
 8006982:	0022      	movs	r2, r4
 8006984:	4902      	ldr	r1, [pc, #8]	; (8006990 <removebuttonCommand+0x50>)
 8006986:	0028      	movs	r0, r5
 8006988:	f00c fd24 	bl	80133d4 <siprintf>
 800698c:	e7f0      	b.n	8006970 <removebuttonCommand+0x30>
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	08016c3c 	.word	0x08016c3c

08006994 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	0006      	movs	r6, r0
 800699a:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d101      	bne.n	80069aa <addbuttonCommand+0x16>
 80069a6:	b672      	cpsid	i
 80069a8:	e7fe      	b.n	80069a8 <addbuttonCommand+0x14>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80069aa:	aa05      	add	r2, sp, #20
 80069ac:	2101      	movs	r1, #1
 80069ae:	9803      	ldr	r0, [sp, #12]
 80069b0:	f007 fa4e 	bl	800de50 <FreeRTOS_CLIGetParameter>
 80069b4:	0004      	movs	r4, r0
 80069b6:	4b23      	ldr	r3, [pc, #140]	; (8006a44 <addbuttonCommand+0xb0>)
 80069b8:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char*) pcParameterString1, "momentary-no",xParameterStringLength1)) {
 80069ba:	9d05      	ldr	r5, [sp, #20]
 80069bc:	002a      	movs	r2, r5
 80069be:	4922      	ldr	r1, [pc, #136]	; (8006a48 <addbuttonCommand+0xb4>)
 80069c0:	f00c fd4c 	bl	801345c <strncmp>
		type = MOMENTARY_NO;
 80069c4:	2701      	movs	r7, #1
	if (!strncmp((const char*) pcParameterString1, "momentary-no",xParameterStringLength1)) {
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d017      	beq.n	80069fa <addbuttonCommand+0x66>
	} else if (!strncmp((const char*) pcParameterString1, "momentary-nc",xParameterStringLength1)) {
 80069ca:	002a      	movs	r2, r5
 80069cc:	491f      	ldr	r1, [pc, #124]	; (8006a4c <addbuttonCommand+0xb8>)
 80069ce:	0020      	movs	r0, r4
 80069d0:	f00c fd44 	bl	801345c <strncmp>
		type = MOMENTARY_NC;
 80069d4:	3701      	adds	r7, #1
	} else if (!strncmp((const char*) pcParameterString1, "momentary-nc",xParameterStringLength1)) {
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d00f      	beq.n	80069fa <addbuttonCommand+0x66>
	} else if (!strncmp((const char*) pcParameterString1, "onoff-no",xParameterStringLength1)) {
 80069da:	002a      	movs	r2, r5
 80069dc:	491c      	ldr	r1, [pc, #112]	; (8006a50 <addbuttonCommand+0xbc>)
 80069de:	0020      	movs	r0, r4
 80069e0:	f00c fd3c 	bl	801345c <strncmp>
		type = ONOFF_NO;
 80069e4:	3701      	adds	r7, #1
	} else if (!strncmp((const char*) pcParameterString1, "onoff-no",xParameterStringLength1)) {
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d007      	beq.n	80069fa <addbuttonCommand+0x66>
	} else if (!strncmp((const char*) pcParameterString1, "onoff-nc",xParameterStringLength1)) {
 80069ea:	002a      	movs	r2, r5
 80069ec:	4919      	ldr	r1, [pc, #100]	; (8006a54 <addbuttonCommand+0xc0>)
 80069ee:	0020      	movs	r0, r4
 80069f0:	f00c fd34 	bl	801345c <strncmp>
		type = ONOFF_NC;
 80069f4:	4243      	negs	r3, r0
 80069f6:	4158      	adcs	r0, r3
 80069f8:	0087      	lsls	r7, r0, #2
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 80069fa:	aa04      	add	r2, sp, #16
 80069fc:	2102      	movs	r1, #2
 80069fe:	9803      	ldr	r0, [sp, #12]
 8006a00:	f007 fa26 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006a04:	2300      	movs	r3, #0
 8006a06:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006a08:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 8006a0a:	2b70      	cmp	r3, #112	; 0x70
 8006a0c:	d008      	beq.n	8006a20 <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 8006a0e:	0021      	movs	r1, r4
 8006a10:	0038      	movs	r0, r7
 8006a12:	f001 fa9b 	bl	8007f4c <AddPortButton>
	if (result == BOS_OK) {
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d007      	beq.n	8006a2a <addbuttonCommand+0x96>
}
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	b007      	add	sp, #28
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = (uint8_t) atol((char*) pcParameterString2 + 1);
 8006a20:	3001      	adds	r0, #1
 8006a22:	f00c fb5e 	bl	80130e2 <atol>
 8006a26:	b2c4      	uxtb	r4, r0
 8006a28:	e7f1      	b.n	8006a0e <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;// Get rid of the remaining parameters
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <addbuttonCommand+0xb0>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9905      	ldr	r1, [sp, #20]
 8006a32:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, pcParameterString1,port, port);
 8006a34:	9400      	str	r4, [sp, #0]
 8006a36:	0023      	movs	r3, r4
 8006a38:	4907      	ldr	r1, [pc, #28]	; (8006a58 <addbuttonCommand+0xc4>)
 8006a3a:	0030      	movs	r0, r6
 8006a3c:	f00c fcca 	bl	80133d4 <siprintf>
 8006a40:	e7eb      	b.n	8006a1a <addbuttonCommand+0x86>
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	20000a74 	.word	0x20000a74
 8006a48:	080164fc 	.word	0x080164fc
 8006a4c:	0801650c 	.word	0x0801650c
 8006a50:	0801651c 	.word	0x0801651c
 8006a54:	08016528 	.word	0x08016528
 8006a58:	08016534 	.word	0x08016534

08006a5c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5e:	46de      	mov	lr, fp
 8006a60:	4657      	mov	r7, sl
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b09b      	sub	sp, #108	; 0x6c
 8006a66:	0005      	movs	r5, r0
 8006a68:	9009      	str	r0, [sp, #36]	; 0x24
 8006a6a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0,xParameterStringLength3 = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9319      	str	r3, [sp, #100]	; 0x64
 8006a70:	9318      	str	r3, [sp, #96]	; 0x60
 8006a72:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0,xParameterStringLength6 = 0;
 8006a74:	9316      	str	r3, [sp, #88]	; 0x58
 8006a76:	9315      	str	r3, [sp, #84]	; 0x54
 8006a78:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8006a7a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] = { 0 }, par2[MaxLengthOfAlias + 1] = { 0 },par3[MaxLengthOfAlias + 1] = { 0 };
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	2100      	movs	r1, #0
 8006a80:	a810      	add	r0, sp, #64	; 0x40
 8006a82:	f00c fba9 	bl	80131d8 <memset>
 8006a86:	220a      	movs	r2, #10
 8006a88:	2100      	movs	r1, #0
 8006a8a:	a80d      	add	r0, sp, #52	; 0x34
 8006a8c:	f00c fba4 	bl	80131d8 <memset>
 8006a90:	220a      	movs	r2, #10
 8006a92:	2100      	movs	r1, #0
 8006a94:	a80a      	add	r0, sp, #40	; 0x28
 8006a96:	f00c fb9f 	bl	80131d8 <memset>
	configASSERT(pcWriteBuffer);
 8006a9a:	2d00      	cmp	r5, #0
 8006a9c:	d101      	bne.n	8006aa2 <scastCommand+0x46>
 8006a9e:	b672      	cpsid	i
 8006aa0:	e7fe      	b.n	8006aa0 <scastCommand+0x44>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006aa2:	aa19      	add	r2, sp, #100	; 0x64
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	0020      	movs	r0, r4
 8006aa8:	f007 f9d2 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006aac:	2300      	movs	r3, #0
 8006aae:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0;
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 8006ab4:	2b50      	cmp	r3, #80	; 0x50
 8006ab6:	d100      	bne.n	8006aba <scastCommand+0x5e>
 8006ab8:	e06d      	b.n	8006b96 <scastCommand+0x13a>
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8006aba:	aa18      	add	r2, sp, #96	; 0x60
 8006abc:	2102      	movs	r1, #2
 8006abe:	0020      	movs	r0, r4
 8006ac0:	f007 f9c6 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006ac4:	0001      	movs	r1, r0
	strncpy(par1, (char*) pcParameterString2, xParameterStringLength2);
 8006ac6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ac8:	a810      	add	r0, sp, #64	; 0x40
 8006aca:	f00c fcd8 	bl	801347e <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006ace:	a810      	add	r0, sp, #64	; 0x40
 8006ad0:	f7fd fa4c 	bl	8003f6c <GetID>
 8006ad4:	b2c3      	uxtb	r3, r0
 8006ad6:	469a      	mov	sl, r3
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,&xParameterStringLength3);
 8006ad8:	aa17      	add	r2, sp, #92	; 0x5c
 8006ada:	2103      	movs	r1, #3
 8006adc:	0020      	movs	r0, r4
 8006ade:	f007 f9b7 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0;
 8006ae6:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 8006ae8:	2b70      	cmp	r3, #112	; 0x70
 8006aea:	d05a      	beq.n	8006ba2 <scastCommand+0x146>
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,&xParameterStringLength4);
 8006aec:	aa16      	add	r2, sp, #88	; 0x58
 8006aee:	2104      	movs	r1, #4
 8006af0:	0020      	movs	r0, r4
 8006af2:	f007 f9ad 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006af6:	0001      	movs	r1, r0
	strncpy(par2, (char*) pcParameterString4, xParameterStringLength4);
 8006af8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006afa:	a80d      	add	r0, sp, #52	; 0x34
 8006afc:	f00c fcbf 	bl	801347e <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006b00:	a80d      	add	r0, sp, #52	; 0x34
 8006b02:	f7fd fa33 	bl	8003f6c <GetID>
 8006b06:	b2c3      	uxtb	r3, r0
 8006b08:	469b      	mov	fp, r3
	pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 5,&xParameterStringLength5);
 8006b0a:	aa15      	add	r2, sp, #84	; 0x54
 8006b0c:	2105      	movs	r1, #5
 8006b0e:	0020      	movs	r0, r4
 8006b10:	f007 f99e 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char*) pcParameterString5, "forward",xParameterStringLength5))
 8006b14:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006b16:	0032      	movs	r2, r6
 8006b18:	492b      	ldr	r1, [pc, #172]	; (8006bc8 <scastCommand+0x16c>)
 8006b1a:	9007      	str	r0, [sp, #28]
 8006b1c:	f00c fc9e 	bl	801345c <strncmp>
		direction = FORWARD;
 8006b20:	2500      	movs	r5, #0
	if (!strncmp((const char*) pcParameterString5, "forward",xParameterStringLength5))
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d00f      	beq.n	8006b46 <scastCommand+0xea>
	else if (!strncmp((const char*) pcParameterString5, "backward",xParameterStringLength5))
 8006b26:	0032      	movs	r2, r6
 8006b28:	4928      	ldr	r1, [pc, #160]	; (8006bcc <scastCommand+0x170>)
 8006b2a:	9807      	ldr	r0, [sp, #28]
 8006b2c:	f00c fc96 	bl	801345c <strncmp>
		direction = BACKWARD;
 8006b30:	3501      	adds	r5, #1
	else if (!strncmp((const char*) pcParameterString5, "backward",xParameterStringLength5))
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d007      	beq.n	8006b46 <scastCommand+0xea>
	else if (!strncmp((const char*) pcParameterString5, "bidirectional",xParameterStringLength5))
 8006b36:	0032      	movs	r2, r6
 8006b38:	4925      	ldr	r1, [pc, #148]	; (8006bd0 <scastCommand+0x174>)
 8006b3a:	9807      	ldr	r0, [sp, #28]
 8006b3c:	f00c fc8e 	bl	801345c <strncmp>
		direction = BIDIRECTIONAL;
 8006b40:	4243      	negs	r3, r0
 8006b42:	4158      	adcs	r0, r3
 8006b44:	0045      	lsls	r5, r0, #1
	strncpy(par3, (char*) pcParameterString5, xParameterStringLength5);
 8006b46:	0032      	movs	r2, r6
 8006b48:	9907      	ldr	r1, [sp, #28]
 8006b4a:	a80a      	add	r0, sp, #40	; 0x28
 8006b4c:	f00c fc97 	bl	801347e <strncpy>
	pcParameterString6 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 6,&xParameterStringLength6);
 8006b50:	aa14      	add	r2, sp, #80	; 0x50
 8006b52:	2106      	movs	r1, #6
 8006b54:	0020      	movs	r0, r4
 8006b56:	f007 f97b 	bl	800de50 <FreeRTOS_CLIGetParameter>
	count = (uint32_t) atol((char*) pcParameterString6);
 8006b5a:	f00c fac2 	bl	80130e2 <atol>
 8006b5e:	0006      	movs	r6, r0
	pcParameterString7 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 7,&xParameterStringLength7);
 8006b60:	aa13      	add	r2, sp, #76	; 0x4c
 8006b62:	2107      	movs	r1, #7
 8006b64:	0020      	movs	r0, r4
 8006b66:	f007 f973 	bl	800de50 <FreeRTOS_CLIGetParameter>
	timeout = (uint32_t) atol((char*) pcParameterString7);
 8006b6a:	f00c faba 	bl	80130e2 <atol>
 8006b6e:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count,timeout, false);
 8006b70:	2300      	movs	r3, #0
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	9002      	str	r0, [sp, #8]
 8006b76:	9601      	str	r6, [sp, #4]
 8006b78:	9500      	str	r5, [sp, #0]
 8006b7a:	465b      	mov	r3, fp
 8006b7c:	003a      	movs	r2, r7
 8006b7e:	4651      	mov	r1, sl
 8006b80:	9808      	ldr	r0, [sp, #32]
 8006b82:	f002 fc83 	bl	800948c <StartScastDMAStream>
	if (result == BOS_OK) {
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d010      	beq.n	8006bac <scastCommand+0x150>
}
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	b01b      	add	sp, #108	; 0x6c
 8006b8e:	bc0c      	pop	{r2, r3}
 8006b90:	4692      	mov	sl, r2
 8006b92:	469b      	mov	fp, r3
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = (uint8_t) atol((char*) pcParameterString1 + 1);
 8006b96:	3001      	adds	r0, #1
 8006b98:	f00c faa3 	bl	80130e2 <atol>
 8006b9c:	b2c3      	uxtb	r3, r0
 8006b9e:	9308      	str	r3, [sp, #32]
 8006ba0:	e78b      	b.n	8006aba <scastCommand+0x5e>
		dstP = (uint8_t) atol((char*) pcParameterString3 + 1);
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f00c fa9d 	bl	80130e2 <atol>
 8006ba8:	b2c7      	uxtb	r7, r0
 8006baa:	e79f      	b.n	8006aec <scastCommand+0x90>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, par3, srcP, par1,dstP, par2, count, timeout);
 8006bac:	9404      	str	r4, [sp, #16]
 8006bae:	9603      	str	r6, [sp, #12]
 8006bb0:	ab0d      	add	r3, sp, #52	; 0x34
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	9701      	str	r7, [sp, #4]
 8006bb6:	ab10      	add	r3, sp, #64	; 0x40
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	aa0a      	add	r2, sp, #40	; 0x28
 8006bbe:	4905      	ldr	r1, [pc, #20]	; (8006bd4 <scastCommand+0x178>)
 8006bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bc2:	f00c fc07 	bl	80133d4 <siprintf>
 8006bc6:	e7e0      	b.n	8006b8a <scastCommand+0x12e>
 8006bc8:	08016c84 	.word	0x08016c84
 8006bcc:	08016c8c 	.word	0x08016c8c
 8006bd0:	08016c98 	.word	0x08016c98
 8006bd4:	08016ca8 	.word	0x08016ca8

08006bd8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006bde:	d039      	beq.n	8006c54 <infoCommand+0x7c>
	if (N > 1)
 8006be0:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <infoCommand+0xa4>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
 8006be4:	2500      	movs	r5, #0
	if (N > 1)
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d902      	bls.n	8006bf0 <infoCommand+0x18>
		result = ReadPortsDir();
 8006bea:	f7fd fb13 	bl	8004214 <ReadPortsDir>
 8006bee:	0005      	movs	r5, r0
	sprintf((char*) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006bf0:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <infoCommand+0xa4>)
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	4922      	ldr	r1, [pc, #136]	; (8006c80 <infoCommand+0xa8>)
 8006bf6:	0020      	movs	r0, r4
 8006bf8:	f00c fbec 	bl	80133d4 <siprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer),
 8006bfc:	0020      	movs	r0, r4
 8006bfe:	f7f9 fa8b 	bl	8000118 <strlen>
 8006c02:	b282      	uxth	r2, r0
 8006c04:	4e1f      	ldr	r6, [pc, #124]	; (8006c84 <infoCommand+0xac>)
 8006c06:	7830      	ldrb	r0, [r6, #0]
 8006c08:	2701      	movs	r7, #1
 8006c0a:	427f      	negs	r7, r7
 8006c0c:	9700      	str	r7, [sp, #0]
 8006c0e:	2332      	movs	r3, #50	; 0x32
 8006c10:	0021      	movs	r1, r4
 8006c12:	f006 fed7 	bl	800d9c4 <writePxMutex>
	sprintf((char*) pcWriteBuffer, "\n\rArray topology:\n");
 8006c16:	2213      	movs	r2, #19
 8006c18:	491b      	ldr	r1, [pc, #108]	; (8006c88 <infoCommand+0xb0>)
 8006c1a:	0020      	movs	r0, r4
 8006c1c:	f00c fad3 	bl	80131c6 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer),
 8006c20:	0020      	movs	r0, r4
 8006c22:	f7f9 fa79 	bl	8000118 <strlen>
 8006c26:	b282      	uxth	r2, r0
 8006c28:	7830      	ldrb	r0, [r6, #0]
 8006c2a:	9700      	str	r7, [sp, #0]
 8006c2c:	2332      	movs	r3, #50	; 0x32
 8006c2e:	0021      	movs	r1, r4
 8006c30:	f006 fec8 	bl	800d9c4 <writePxMutex>
	DisplayTopology(PcPort);
 8006c34:	7830      	ldrb	r0, [r6, #0]
 8006c36:	f7fc fef5 	bl	8003a24 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006c3a:	7830      	ldrb	r0, [r6, #0]
 8006c3c:	f7fc ffc2 	bl	8003bc4 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006c40:	2d02      	cmp	r5, #2
 8006c42:	d009      	beq.n	8006c58 <infoCommand+0x80>
	sprintf((char*) pcWriteBuffer, " ");
 8006c44:	2202      	movs	r2, #2
 8006c46:	4911      	ldr	r1, [pc, #68]	; (8006c8c <infoCommand+0xb4>)
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f00c fabc 	bl	80131c6 <memcpy>
}
 8006c4e:	2000      	movs	r0, #0
 8006c50:	b003      	add	sp, #12
 8006c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006c54:	b672      	cpsid	i
 8006c56:	e7fe      	b.n	8006c56 <infoCommand+0x7e>
		sprintf((char*) pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006c58:	2244      	movs	r2, #68	; 0x44
 8006c5a:	490d      	ldr	r1, [pc, #52]	; (8006c90 <infoCommand+0xb8>)
 8006c5c:	0020      	movs	r0, r4
 8006c5e:	f00c fab2 	bl	80131c6 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006c62:	0020      	movs	r0, r4
 8006c64:	f7f9 fa58 	bl	8000118 <strlen>
 8006c68:	b282      	uxth	r2, r0
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <infoCommand+0xac>)
 8006c6c:	7818      	ldrb	r0, [r3, #0]
 8006c6e:	003b      	movs	r3, r7
 8006c70:	9700      	str	r7, [sp, #0]
 8006c72:	3333      	adds	r3, #51	; 0x33
 8006c74:	0021      	movs	r1, r4
 8006c76:	f006 fea5 	bl	800d9c4 <writePxMutex>
 8006c7a:	e7e3      	b.n	8006c44 <infoCommand+0x6c>
 8006c7c:	2000001c 	.word	0x2000001c
 8006c80:	08016a40 	.word	0x08016a40
 8006c84:	2000029f 	.word	0x2000029f
 8006c88:	08016a5c 	.word	0x08016a5c
 8006c8c:	08015a04 	.word	0x08015a04
 8006c90:	08016a70 	.word	0x08016a70

08006c94 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006c94:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d101      	bne.n	8006c9e <statusCommand+0xa>
 8006c9a:	b672      	cpsid	i
 8006c9c:	e7fe      	b.n	8006c9c <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f7fd f804 	bl	8003cac <DisplayModuleStatus>
}
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	bd10      	pop	{r4, pc}

08006ca8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	46ce      	mov	lr, r9
 8006cac:	b500      	push	{lr}
 8006cae:	b090      	sub	sp, #64	; 0x40
 8006cb0:	0004      	movs	r4, r0
 8006cb2:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] = { 0 };
 8006cb4:	2227      	movs	r2, #39	; 0x27
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	a806      	add	r0, sp, #24
 8006cba:	f00c fa8d 	bl	80131d8 <memset>
	char alias[MaxLengthOfAlias + 1] = { 0 };
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	a803      	add	r0, sp, #12
 8006cc4:	f00c fa88 	bl	80131d8 <memset>
	configASSERT(pcWriteBuffer);
 8006cc8:	2c00      	cmp	r4, #0
 8006cca:	d101      	bne.n	8006cd0 <groupCommand+0x28>
 8006ccc:	b672      	cpsid	i
 8006cce:	e7fe      	b.n	8006cce <groupCommand+0x26>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006cd0:	4d54      	ldr	r5, [pc, #336]	; (8006e24 <groupCommand+0x17c>)
 8006cd2:	002a      	movs	r2, r5
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	9801      	ldr	r0, [sp, #4]
 8006cd8:	f007 f8ba 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006cdc:	0001      	movs	r1, r0
	strncpy(alias, (char*) pcParameterString1, xParameterStringLength1);
 8006cde:	682a      	ldr	r2, [r5, #0]
 8006ce0:	a803      	add	r0, sp, #12
 8006ce2:	f00c fbcc 	bl	801347e <strncpy>
 8006ce6:	4d50      	ldr	r5, [pc, #320]	; (8006e28 <groupCommand+0x180>)
 8006ce8:	002f      	movs	r7, r5
 8006cea:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i])) {
 8006cec:	0029      	movs	r1, r5
 8006cee:	a803      	add	r0, sp, #12
 8006cf0:	f7f9 fa08 	bl	8000104 <strcmp>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d016      	beq.n	8006d26 <groupCommand+0x7e>
 8006cf8:	350a      	adds	r5, #10
	for (uint8_t i = 0; i < MaxNumOfGroups; i++) {
 8006cfa:	42bd      	cmp	r5, r7
 8006cfc:	d1f6      	bne.n	8006cec <groupCommand+0x44>
	type = 1;
 8006cfe:	2701      	movs	r7, #1
	count = 2;
 8006d00:	4b4a      	ldr	r3, [pc, #296]	; (8006e2c <groupCommand+0x184>)
 8006d02:	2202      	movs	r2, #2
 8006d04:	701a      	strb	r2, [r3, #0]
	strcpy((char*) pcWriteBuffer, "Modules [");
 8006d06:	3208      	adds	r2, #8
 8006d08:	4949      	ldr	r1, [pc, #292]	; (8006e30 <groupCommand+0x188>)
 8006d0a:	0020      	movs	r0, r4
 8006d0c:	f00c fa5b 	bl	80131c6 <memcpy>
	pcParameterString = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,count, &xParameterStringLength);
 8006d10:	4a48      	ldr	r2, [pc, #288]	; (8006e34 <groupCommand+0x18c>)
 8006d12:	2102      	movs	r1, #2
 8006d14:	9801      	ldr	r0, [sp, #4]
 8006d16:	f007 f89b 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006d1a:	4b47      	ldr	r3, [pc, #284]	; (8006e38 <groupCommand+0x190>)
 8006d1c:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL) {
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d061      	beq.n	8006de6 <groupCommand+0x13e>
		strncpy(module, (char*) pcParameterString, xParameterStringLength);
 8006d22:	4e44      	ldr	r6, [pc, #272]	; (8006e34 <groupCommand+0x18c>)
 8006d24:	e011      	b.n	8006d4a <groupCommand+0xa2>
			type = 0;
 8006d26:	2700      	movs	r7, #0
 8006d28:	e7ea      	b.n	8006d00 <groupCommand+0x58>
		strcat((char*) pcWriteBuffer, module);
 8006d2a:	a906      	add	r1, sp, #24
 8006d2c:	0020      	movs	r0, r4
 8006d2e:	f00c fb71 	bl	8013414 <strcat>
		pcParameterString = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,++count, &xParameterStringLength);
 8006d32:	1c69      	adds	r1, r5, #1
 8006d34:	b249      	sxtb	r1, r1
 8006d36:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <groupCommand+0x184>)
 8006d38:	7019      	strb	r1, [r3, #0]
 8006d3a:	4a3e      	ldr	r2, [pc, #248]	; (8006e34 <groupCommand+0x18c>)
 8006d3c:	9801      	ldr	r0, [sp, #4]
 8006d3e:	f007 f887 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006d42:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <groupCommand+0x190>)
 8006d44:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL) {
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d04d      	beq.n	8006de6 <groupCommand+0x13e>
		strncpy(module, (char*) pcParameterString, xParameterStringLength);
 8006d4a:	6833      	ldr	r3, [r6, #0]
 8006d4c:	4699      	mov	r9, r3
 8006d4e:	ad06      	add	r5, sp, #24
 8006d50:	001a      	movs	r2, r3
 8006d52:	0001      	movs	r1, r0
 8006d54:	0028      	movs	r0, r5
 8006d56:	f00c fb92 	bl	801347e <strncpy>
		module[xParameterStringLength] = '\0';
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	464a      	mov	r2, r9
 8006d5e:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8006d60:	0028      	movs	r0, r5
 8006d62:	f7fd f903 	bl	8003f6c <GetID>
		if (modID < 0)
 8006d66:	2800      	cmp	r0, #0
 8006d68:	db37      	blt.n	8006dda <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 8006d6a:	b2c0      	uxtb	r0, r0
 8006d6c:	a903      	add	r1, sp, #12
 8006d6e:	f7fd f9c9 	bl	8004104 <AddModuleToGroup>
		if (result != BOS_OK)
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d146      	bne.n	8006e04 <groupCommand+0x15c>
		if (count > 2)
 8006d76:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <groupCommand+0x184>)
 8006d78:	2500      	movs	r5, #0
 8006d7a:	575d      	ldrsb	r5, [r3, r5]
 8006d7c:	2d02      	cmp	r5, #2
 8006d7e:	ddd4      	ble.n	8006d2a <groupCommand+0x82>
			strcat((char*) pcWriteBuffer, ", ");
 8006d80:	0020      	movs	r0, r4
 8006d82:	f7f9 f9c9 	bl	8000118 <strlen>
 8006d86:	1820      	adds	r0, r4, r0
 8006d88:	2203      	movs	r2, #3
 8006d8a:	492c      	ldr	r1, [pc, #176]	; (8006e3c <groupCommand+0x194>)
 8006d8c:	f00c fa1b 	bl	80131c6 <memcpy>
 8006d90:	e7cb      	b.n	8006d2a <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 8006d92:	2f00      	cmp	r7, #0
 8006d94:	d009      	beq.n	8006daa <groupCommand+0x102>
		sprintf(module, (char*) pcMessageOKnew, alias);
 8006d96:	aa03      	add	r2, sp, #12
 8006d98:	4929      	ldr	r1, [pc, #164]	; (8006e40 <groupCommand+0x198>)
 8006d9a:	a806      	add	r0, sp, #24
 8006d9c:	f00c fb1a 	bl	80133d4 <siprintf>
		strcat((char*) pcWriteBuffer, module);
 8006da0:	a906      	add	r1, sp, #24
 8006da2:	0020      	movs	r0, r4
 8006da4:	f00c fb36 	bl	8013414 <strcat>
 8006da8:	e027      	b.n	8006dfa <groupCommand+0x152>
		sprintf(module, (char*) pcMessageOKexist, alias);
 8006daa:	aa03      	add	r2, sp, #12
 8006dac:	4925      	ldr	r1, [pc, #148]	; (8006e44 <groupCommand+0x19c>)
 8006dae:	a806      	add	r0, sp, #24
 8006db0:	f00c fb10 	bl	80133d4 <siprintf>
		strcat((char*) pcWriteBuffer, module);
 8006db4:	a906      	add	r1, sp, #24
 8006db6:	0020      	movs	r0, r4
 8006db8:	f00c fb2c 	bl	8013414 <strcat>
 8006dbc:	e01d      	b.n	8006dfa <groupCommand+0x152>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageKey, alias);
 8006dbe:	aa03      	add	r2, sp, #12
 8006dc0:	4921      	ldr	r1, [pc, #132]	; (8006e48 <groupCommand+0x1a0>)
 8006dc2:	0020      	movs	r0, r4
 8006dc4:	f00c fb06 	bl	80133d4 <siprintf>
 8006dc8:	e017      	b.n	8006dfa <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 8006dca:	2808      	cmp	r0, #8
 8006dcc:	d115      	bne.n	8006dfa <groupCommand+0x152>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageCmd, alias);
 8006dce:	aa03      	add	r2, sp, #12
 8006dd0:	491e      	ldr	r1, [pc, #120]	; (8006e4c <groupCommand+0x1a4>)
 8006dd2:	0020      	movs	r0, r4
 8006dd4:	f00c fafe 	bl	80133d4 <siprintf>
 8006dd8:	e00f      	b.n	8006dfa <groupCommand+0x152>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageWrongModule, module);
 8006dda:	aa06      	add	r2, sp, #24
 8006ddc:	491c      	ldr	r1, [pc, #112]	; (8006e50 <groupCommand+0x1a8>)
 8006dde:	0020      	movs	r0, r4
 8006de0:	f00c faf8 	bl	80133d4 <siprintf>
	return pdFALSE;
 8006de4:	e009      	b.n	8006dfa <groupCommand+0x152>
	else if (count == 2)
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <groupCommand+0x184>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b25b      	sxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d1d0      	bne.n	8006d92 <groupCommand+0xea>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageNoModules, alias);
 8006df0:	aa03      	add	r2, sp, #12
 8006df2:	4918      	ldr	r1, [pc, #96]	; (8006e54 <groupCommand+0x1ac>)
 8006df4:	0020      	movs	r0, r4
 8006df6:	f00c faed 	bl	80133d4 <siprintf>
}
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	b010      	add	sp, #64	; 0x40
 8006dfe:	bc04      	pop	{r2}
 8006e00:	4691      	mov	r9, r2
 8006e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8006e04:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <groupCommand+0x184>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d0f0      	beq.n	8006df0 <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 8006e0e:	2806      	cmp	r0, #6
 8006e10:	d0d5      	beq.n	8006dbe <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 8006e12:	2807      	cmp	r0, #7
 8006e14:	d1d9      	bne.n	8006dca <groupCommand+0x122>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageAlias, alias);
 8006e16:	aa03      	add	r2, sp, #12
 8006e18:	490f      	ldr	r1, [pc, #60]	; (8006e58 <groupCommand+0x1b0>)
 8006e1a:	0020      	movs	r0, r4
 8006e1c:	f00c fada 	bl	80133d4 <siprintf>
 8006e20:	e7eb      	b.n	8006dfa <groupCommand+0x152>
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	20000aa4 	.word	0x20000aa4
 8006e28:	2000064c 	.word	0x2000064c
 8006e2c:	20000a6a 	.word	0x20000a6a
 8006e30:	08016860 	.word	0x08016860
 8006e34:	20000a98 	.word	0x20000a98
 8006e38:	20000a6c 	.word	0x20000a6c
 8006e3c:	0801686c 	.word	0x0801686c
 8006e40:	0801689c 	.word	0x0801689c
 8006e44:	080168b8 	.word	0x080168b8
 8006e48:	080168d8 	.word	0x080168d8
 8006e4c:	0801694c 	.word	0x0801694c
 8006e50:	0801698c 	.word	0x0801698c
 8006e54:	08016870 	.word	0x08016870
 8006e58:	08016918 	.word	0x08016918

08006e5c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	0004      	movs	r4, r0
 8006e60:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	d101      	bne.n	8006e6a <nameCommand+0xe>
 8006e66:	b672      	cpsid	i
 8006e68:	e7fe      	b.n	8006e68 <nameCommand+0xc>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006e6a:	4d1c      	ldr	r5, [pc, #112]	; (8006edc <nameCommand+0x80>)
 8006e6c:	002a      	movs	r2, r5
 8006e6e:	2101      	movs	r1, #1
 8006e70:	f006 ffee 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006e74:	0001      	movs	r1, r0
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <nameCommand+0x84>)
 8006e78:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	2b09      	cmp	r3, #9
 8006e7e:	dd01      	ble.n	8006e84 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8006e80:	2300      	movs	r3, #0
 8006e82:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006e84:	4b17      	ldr	r3, [pc, #92]	; (8006ee4 <nameCommand+0x88>)
 8006e86:	7818      	ldrb	r0, [r3, #0]
 8006e88:	f7fd f8d4 	bl	8004034 <NameModule>
	if (result == BOS_OK)
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d007      	beq.n	8006ea0 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006e90:	2806      	cmp	r0, #6
 8006e92:	d00e      	beq.n	8006eb2 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006e94:	2807      	cmp	r0, #7
 8006e96:	d013      	beq.n	8006ec0 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8006e98:	2808      	cmp	r0, #8
 8006e9a:	d018      	beq.n	8006ece <nameCommand+0x72>
}
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, myID,pcParameterString1);
 8006ea0:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <nameCommand+0x88>)
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <nameCommand+0x84>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	490f      	ldr	r1, [pc, #60]	; (8006ee8 <nameCommand+0x8c>)
 8006eaa:	0020      	movs	r0, r4
 8006eac:	f00c fa92 	bl	80133d4 <siprintf>
 8006eb0:	e7f4      	b.n	8006e9c <nameCommand+0x40>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageKey,pcParameterString1);
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <nameCommand+0x84>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	490d      	ldr	r1, [pc, #52]	; (8006eec <nameCommand+0x90>)
 8006eb8:	0020      	movs	r0, r4
 8006eba:	f00c fa8b 	bl	80133d4 <siprintf>
 8006ebe:	e7ed      	b.n	8006e9c <nameCommand+0x40>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageAlias,pcParameterString1);
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <nameCommand+0x84>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	490a      	ldr	r1, [pc, #40]	; (8006ef0 <nameCommand+0x94>)
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	f00c fa84 	bl	80133d4 <siprintf>
 8006ecc:	e7e6      	b.n	8006e9c <nameCommand+0x40>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageCmd,pcParameterString1);
 8006ece:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <nameCommand+0x84>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4908      	ldr	r1, [pc, #32]	; (8006ef4 <nameCommand+0x98>)
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	f00c fa7d 	bl	80133d4 <siprintf>
 8006eda:	e7df      	b.n	8006e9c <nameCommand+0x40>
 8006edc:	20000aa0 	.word	0x20000aa0
 8006ee0:	20000a70 	.word	0x20000a70
 8006ee4:	20000866 	.word	0x20000866
 8006ee8:	08016ad8 	.word	0x08016ad8
 8006eec:	080168d8 	.word	0x080168d8
 8006ef0:	08016918 	.word	0x08016918
 8006ef4:	0801694c 	.word	0x0801694c

08006ef8 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efa:	b085      	sub	sp, #20
 8006efc:	1e04      	subs	r4, r0, #0
 8006efe:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8006f00:	d101      	bne.n	8006f06 <bootloaderUpdateCommand+0xe>
 8006f02:	b672      	cpsid	i
 8006f04:	e7fe      	b.n	8006f04 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006f06:	4a4b      	ldr	r2, [pc, #300]	; (8007034 <bootloaderUpdateCommand+0x13c>)
 8006f08:	2101      	movs	r1, #1
 8006f0a:	9803      	ldr	r0, [sp, #12]
 8006f0c:	f006 ffa0 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL) {
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d040      	beq.n	8006f96 <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char*) pcParameterString1, "via",
 8006f14:	4b47      	ldr	r3, [pc, #284]	; (8007034 <bootloaderUpdateCommand+0x13c>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	4947      	ldr	r1, [pc, #284]	; (8007038 <bootloaderUpdateCommand+0x140>)
 8006f1a:	f00c fa9f 	bl	801345c <strncmp>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d000      	beq.n	8006f24 <bootloaderUpdateCommand+0x2c>
 8006f22:	e080      	b.n	8007026 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameterStringLength2);
 8006f24:	4a45      	ldr	r2, [pc, #276]	; (800703c <bootloaderUpdateCommand+0x144>)
 8006f26:	2102      	movs	r1, #2
 8006f28:	9803      	ldr	r0, [sp, #12]
 8006f2a:	f006 ff91 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006f2e:	4f44      	ldr	r7, [pc, #272]	; (8007040 <bootloaderUpdateCommand+0x148>)
 8006f30:	6038      	str	r0, [r7, #0]
			pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3, &xParameterStringLength3);
 8006f32:	4a44      	ldr	r2, [pc, #272]	; (8007044 <bootloaderUpdateCommand+0x14c>)
 8006f34:	2103      	movs	r1, #3
 8006f36:	9803      	ldr	r0, [sp, #12]
 8006f38:	f006 ff8a 	bl	800de50 <FreeRTOS_CLIGetParameter>
 8006f3c:	4b42      	ldr	r3, [pc, #264]	; (8007048 <bootloaderUpdateCommand+0x150>)
 8006f3e:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 8006f40:	6838      	ldr	r0, [r7, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;
 8006f46:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8006f48:	2b23      	cmp	r3, #35	; 0x23
 8006f4a:	d04e      	beq.n	8006fea <bootloaderUpdateCommand+0xf2>
			if (pcParameterString3[0] == 'p') {
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <bootloaderUpdateCommand+0x150>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	2300      	movs	r3, #0
 8006f52:	56c3      	ldrsb	r3, [r0, r3]
 8006f54:	2b70      	cmp	r3, #112	; 0x70
 8006f56:	d04e      	beq.n	8006ff6 <bootloaderUpdateCommand+0xfe>
				result = BOS_ERR_WrongValue;
 8006f58:	2768      	movs	r7, #104	; 0x68
			if (module != myID) {
 8006f5a:	4b3c      	ldr	r3, [pc, #240]	; (800704c <bootloaderUpdateCommand+0x154>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	42b3      	cmp	r3, r6
 8006f60:	d04e      	beq.n	8007000 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 8006f62:	4b3b      	ldr	r3, [pc, #236]	; (8007050 <bootloaderUpdateCommand+0x158>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port;
 8006f68:	4b3a      	ldr	r3, [pc, #232]	; (8007054 <bootloaderUpdateCommand+0x15c>)
 8006f6a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8006f6c:	3201      	adds	r2, #1
 8006f6e:	211a      	movs	r1, #26
 8006f70:	0030      	movs	r0, r6
 8006f72:	f002 fa65 	bl	8009440 <SendMessageToModule>
				osDelay(100);
 8006f76:	2064      	movs	r0, #100	; 0x64
 8006f78:	f006 fe51 	bl	800dc1e <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);
 8006f7c:	4b36      	ldr	r3, [pc, #216]	; (8007058 <bootloaderUpdateCommand+0x160>)
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	4b32      	ldr	r3, [pc, #200]	; (800704c <bootloaderUpdateCommand+0x154>)
 8006f82:	7818      	ldrb	r0, [r3, #0]
 8006f84:	002b      	movs	r3, r5
 8006f86:	0031      	movs	r1, r6
 8006f88:	f7fc fcca 	bl	8003920 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006f8c:	2f68      	cmp	r7, #104	; 0x68
 8006f8e:	d04a      	beq.n	8007026 <bootloaderUpdateCommand+0x12e>
}
 8006f90:	2000      	movs	r0, #0
 8006f92:	b005      	add	sp, #20
 8006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, myID);
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <bootloaderUpdateCommand+0x154>)
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	4930      	ldr	r1, [pc, #192]	; (800705c <bootloaderUpdateCommand+0x164>)
 8006f9c:	0020      	movs	r0, r4
 8006f9e:	f00c fa19 	bl	80133d4 <siprintf>
		strcat((char*) pcWriteBuffer, (char*) pcBootloaderUpdateMessage);
 8006fa2:	4b2f      	ldr	r3, [pc, #188]	; (8007060 <bootloaderUpdateCommand+0x168>)
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	0020      	movs	r0, r4
 8006fa8:	f00c fa34 	bl	8013414 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006fac:	0020      	movs	r0, r4
 8006fae:	f7f9 f8b3 	bl	8000118 <strlen>
 8006fb2:	b282      	uxth	r2, r0
 8006fb4:	4b28      	ldr	r3, [pc, #160]	; (8007058 <bootloaderUpdateCommand+0x160>)
 8006fb6:	7818      	ldrb	r0, [r3, #0]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	425b      	negs	r3, r3
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	3333      	adds	r3, #51	; 0x33
 8006fc0:	0021      	movs	r1, r4
 8006fc2:	f006 fcff 	bl	800d9c4 <writePxMutex>
		*((unsigned long*) 0x20007FF0) = 0xDEADBEEF;
 8006fc6:	4b27      	ldr	r3, [pc, #156]	; (8007064 <bootloaderUpdateCommand+0x16c>)
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <bootloaderUpdateCommand+0x170>)
 8006fca:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <bootloaderUpdateCommand+0x174>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006fd2:	200a      	movs	r0, #10
 8006fd4:	f006 fe23 	bl	800dc1e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <bootloaderUpdateCommand+0x178>)
 8006fde:	4a25      	ldr	r2, [pc, #148]	; (8007074 <bootloaderUpdateCommand+0x17c>)
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	e7fd      	b.n	8006fe6 <bootloaderUpdateCommand+0xee>
				module = (uint8_t) atol((char*) pcParameterString2 + 1);
 8006fea:	3001      	adds	r0, #1
 8006fec:	f00c f879 	bl	80130e2 <atol>
 8006ff0:	b2c6      	uxtb	r6, r0
	BOS_Status result = BOS_OK;
 8006ff2:	2700      	movs	r7, #0
 8006ff4:	e7aa      	b.n	8006f4c <bootloaderUpdateCommand+0x54>
				port = (uint8_t) atol((char*) pcParameterString3 + 1);
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f00c f873 	bl	80130e2 <atol>
 8006ffc:	b2c5      	uxtb	r5, r0
 8006ffe:	e7ac      	b.n	8006f5a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8007000:	2100      	movs	r1, #0
 8007002:	9100      	str	r1, [sp, #0]
 8007004:	2319      	movs	r3, #25
 8007006:	000a      	movs	r2, r1
 8007008:	0028      	movs	r0, r5
 800700a:	f001 fff1 	bl	8008ff0 <SendMessageFromPort>
				osDelay(100);
 800700e:	2064      	movs	r0, #100	; 0x64
 8007010:	f006 fe05 	bl	800dc1e <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <bootloaderUpdateCommand+0x154>)
 8007016:	7818      	ldrb	r0, [r3, #0]
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <bootloaderUpdateCommand+0x160>)
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	002b      	movs	r3, r5
 800701e:	0001      	movs	r1, r0
 8007020:	f7fc fc7e 	bl	8003920 <remoteBootloaderUpdate>
 8007024:	e7b2      	b.n	8006f8c <bootloaderUpdateCommand+0x94>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongValue);
 8007026:	220f      	movs	r2, #15
 8007028:	4913      	ldr	r1, [pc, #76]	; (8007078 <bootloaderUpdateCommand+0x180>)
 800702a:	0020      	movs	r0, r4
 800702c:	f00c f8cb 	bl	80131c6 <memcpy>
 8007030:	e7ae      	b.n	8006f90 <bootloaderUpdateCommand+0x98>
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	20000a9c 	.word	0x20000a9c
 8007038:	08016598 	.word	0x08016598
 800703c:	20000aa8 	.word	0x20000aa8
 8007040:	20000a80 	.word	0x20000a80
 8007044:	20000aac 	.word	0x20000aac
 8007048:	20000a88 	.word	0x20000a88
 800704c:	20000866 	.word	0x20000866
 8007050:	20006130 	.word	0x20006130
 8007054:	20000728 	.word	0x20000728
 8007058:	2000029f 	.word	0x2000029f
 800705c:	08016578 	.word	0x08016578
 8007060:	20000074 	.word	0x20000074
 8007064:	20007ff0 	.word	0x20007ff0
 8007068:	deadbeef 	.word	0xdeadbeef
 800706c:	200006e4 	.word	0x200006e4
 8007070:	e000ed00 	.word	0xe000ed00
 8007074:	05fa0004 	.word	0x05fa0004
 8007078:	08016658 	.word	0x08016658

0800707c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 800707c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800707e:	2800      	cmp	r0, #0
 8007080:	d01e      	beq.n	80070c0 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <pingCommand+0x5c>)
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	0093      	lsls	r3, r2, #2
 8007088:	189b      	adds	r3, r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4913      	ldr	r1, [pc, #76]	; (80070dc <pingCommand+0x60>)
 800708e:	5c5b      	ldrb	r3, [r3, r1]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d117      	bne.n	80070c4 <pingCommand+0x48>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage1, myID);
 8007094:	4912      	ldr	r1, [pc, #72]	; (80070e0 <pingCommand+0x64>)
 8007096:	f00c f99d 	bl	80133d4 <siprintf>
		RTOS_IND_blink(200);
 800709a:	2580      	movs	r5, #128	; 0x80
 800709c:	012d      	lsls	r5, r5, #4
 800709e:	2490      	movs	r4, #144	; 0x90
 80070a0:	05e4      	lsls	r4, r4, #23
 80070a2:	2201      	movs	r2, #1
 80070a4:	0029      	movs	r1, r5
 80070a6:	0020      	movs	r0, r4
 80070a8:	f00a fa78 	bl	801159c <HAL_GPIO_WritePin>
 80070ac:	20c8      	movs	r0, #200	; 0xc8
 80070ae:	f006 fdb6 	bl	800dc1e <osDelay>
 80070b2:	2200      	movs	r2, #0
 80070b4:	0029      	movs	r1, r5
 80070b6:	0020      	movs	r0, r4
 80070b8:	f00a fa70 	bl	801159c <HAL_GPIO_WritePin>
}
 80070bc:	2000      	movs	r0, #0
 80070be:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80070c0:	b672      	cpsid	i
 80070c2:	e7fe      	b.n	80070c2 <pingCommand+0x46>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage2, myID,moduleAlias[myID]);
 80070c4:	0093      	lsls	r3, r2, #2
 80070c6:	189b      	adds	r3, r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4904      	ldr	r1, [pc, #16]	; (80070dc <pingCommand+0x60>)
 80070cc:	185b      	adds	r3, r3, r1
 80070ce:	4905      	ldr	r1, [pc, #20]	; (80070e4 <pingCommand+0x68>)
 80070d0:	f00c f980 	bl	80133d4 <siprintf>
 80070d4:	e7e1      	b.n	800709a <pingCommand+0x1e>
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	20000866 	.word	0x20000866
 80070dc:	20000758 	.word	0x20000758
 80070e0:	08016b48 	.word	0x08016b48
 80070e4:	08016b5c 	.word	0x08016b5c

080070e8 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80070e8:	b510      	push	{r4, lr}
 80070ea:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80070ec:	d101      	bne.n	80070f2 <prvRunTimeStatsCommand+0xa>
 80070ee:	b672      	cpsid	i
 80070f0:	e7fe      	b.n	80070f0 <prvRunTimeStatsCommand+0x8>
	strcpy((char*) pcWriteBuffer, (char*) pcStatsTableHeader);
 80070f2:	2241      	movs	r2, #65	; 0x41
 80070f4:	4904      	ldr	r1, [pc, #16]	; (8007108 <prvRunTimeStatsCommand+0x20>)
 80070f6:	f00c f866 	bl	80131c6 <memcpy>
	vTaskGetRunTimeStats(((char*) pcWriteBuffer) + strlen((char*) pcStatsTableHeader));
 80070fa:	0020      	movs	r0, r4
 80070fc:	3040      	adds	r0, #64	; 0x40
 80070fe:	f008 f8fb 	bl	800f2f8 <vTaskGetRunTimeStats>
}
 8007102:	2000      	movs	r0, #0
 8007104:	bd10      	pop	{r4, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	08016b88 	.word	0x08016b88

0800710c <prvTaskStatsCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800710c:	b510      	push	{r4, lr}
 800710e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007110:	d101      	bne.n	8007116 <prvTaskStatsCommand+0xa>
 8007112:	b672      	cpsid	i
 8007114:	e7fe      	b.n	8007114 <prvTaskStatsCommand+0x8>
	strcpy((char*) pcWriteBuffer, (char*) pcTaskTableHeader);
 8007116:	2250      	movs	r2, #80	; 0x50
 8007118:	4904      	ldr	r1, [pc, #16]	; (800712c <prvTaskStatsCommand+0x20>)
 800711a:	f00c f854 	bl	80131c6 <memcpy>
	vTaskList(((char*) pcWriteBuffer) + strlen((char*) pcTaskTableHeader));
 800711e:	0020      	movs	r0, r4
 8007120:	304f      	adds	r0, #79	; 0x4f
 8007122:	f008 f889 	bl	800f238 <vTaskList>
}
 8007126:	2000      	movs	r0, #0
 8007128:	bd10      	pop	{r4, pc}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	08016bdc 	.word	0x08016bdc

08007130 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007130:	2800      	cmp	r0, #0
 8007132:	d101      	bne.n	8007138 <resetCommand+0x8>
 8007134:	b672      	cpsid	i
 8007136:	e7fe      	b.n	8007136 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <resetCommand+0x1c>)
 800713e:	4a04      	ldr	r2, [pc, #16]	; (8007150 <resetCommand+0x20>)
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	e7fd      	b.n	8007146 <resetCommand+0x16>
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	e000ed00 	.word	0xe000ed00
 8007150:	05fa0004 	.word	0x05fa0004

08007154 <RegisterUserCLICommands>:
}
 8007154:	4770      	bx	lr
	...

08007158 <vRegisterCLICommands>:
void vRegisterCLICommands(void) {
 8007158:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800715a:	4835      	ldr	r0, [pc, #212]	; (8007230 <vRegisterCLICommands+0xd8>)
 800715c:	f006 fdda 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007160:	4834      	ldr	r0, [pc, #208]	; (8007234 <vRegisterCLICommands+0xdc>)
 8007162:	f006 fdd7 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007166:	4834      	ldr	r0, [pc, #208]	; (8007238 <vRegisterCLICommands+0xe0>)
 8007168:	f006 fdd4 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800716c:	4833      	ldr	r0, [pc, #204]	; (800723c <vRegisterCLICommands+0xe4>)
 800716e:	f006 fdd1 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007172:	4833      	ldr	r0, [pc, #204]	; (8007240 <vRegisterCLICommands+0xe8>)
 8007174:	f006 fdce 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007178:	4832      	ldr	r0, [pc, #200]	; (8007244 <vRegisterCLICommands+0xec>)
 800717a:	f006 fdcb 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800717e:	4832      	ldr	r0, [pc, #200]	; (8007248 <vRegisterCLICommands+0xf0>)
 8007180:	f006 fdc8 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007184:	4831      	ldr	r0, [pc, #196]	; (800724c <vRegisterCLICommands+0xf4>)
 8007186:	f006 fdc5 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800718a:	4831      	ldr	r0, [pc, #196]	; (8007250 <vRegisterCLICommands+0xf8>)
 800718c:	f006 fdc2 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007190:	4830      	ldr	r0, [pc, #192]	; (8007254 <vRegisterCLICommands+0xfc>)
 8007192:	f006 fdbf 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007196:	4830      	ldr	r0, [pc, #192]	; (8007258 <vRegisterCLICommands+0x100>)
 8007198:	f006 fdbc 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800719c:	482f      	ldr	r0, [pc, #188]	; (800725c <vRegisterCLICommands+0x104>)
 800719e:	f006 fdb9 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80071a2:	482f      	ldr	r0, [pc, #188]	; (8007260 <vRegisterCLICommands+0x108>)
 80071a4:	f006 fdb6 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80071a8:	482e      	ldr	r0, [pc, #184]	; (8007264 <vRegisterCLICommands+0x10c>)
 80071aa:	f006 fdb3 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80071ae:	482e      	ldr	r0, [pc, #184]	; (8007268 <vRegisterCLICommands+0x110>)
 80071b0:	f006 fdb0 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80071b4:	482d      	ldr	r0, [pc, #180]	; (800726c <vRegisterCLICommands+0x114>)
 80071b6:	f006 fdad 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80071ba:	482d      	ldr	r0, [pc, #180]	; (8007270 <vRegisterCLICommands+0x118>)
 80071bc:	f006 fdaa 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80071c0:	482c      	ldr	r0, [pc, #176]	; (8007274 <vRegisterCLICommands+0x11c>)
 80071c2:	f006 fda7 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80071c6:	482c      	ldr	r0, [pc, #176]	; (8007278 <vRegisterCLICommands+0x120>)
 80071c8:	f006 fda4 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80071cc:	482b      	ldr	r0, [pc, #172]	; (800727c <vRegisterCLICommands+0x124>)
 80071ce:	f006 fda1 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80071d2:	482b      	ldr	r0, [pc, #172]	; (8007280 <vRegisterCLICommands+0x128>)
 80071d4:	f006 fd9e 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80071d8:	482a      	ldr	r0, [pc, #168]	; (8007284 <vRegisterCLICommands+0x12c>)
 80071da:	f006 fd9b 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80071de:	482a      	ldr	r0, [pc, #168]	; (8007288 <vRegisterCLICommands+0x130>)
 80071e0:	f006 fd98 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80071e4:	4829      	ldr	r0, [pc, #164]	; (800728c <vRegisterCLICommands+0x134>)
 80071e6:	f006 fd95 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80071ea:	4829      	ldr	r0, [pc, #164]	; (8007290 <vRegisterCLICommands+0x138>)
 80071ec:	f006 fd92 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80071f0:	4828      	ldr	r0, [pc, #160]	; (8007294 <vRegisterCLICommands+0x13c>)
 80071f2:	f006 fd8f 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80071f6:	4828      	ldr	r0, [pc, #160]	; (8007298 <vRegisterCLICommands+0x140>)
 80071f8:	f006 fd8c 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80071fc:	4827      	ldr	r0, [pc, #156]	; (800729c <vRegisterCLICommands+0x144>)
 80071fe:	f006 fd89 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007202:	4827      	ldr	r0, [pc, #156]	; (80072a0 <vRegisterCLICommands+0x148>)
 8007204:	f006 fd86 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007208:	4826      	ldr	r0, [pc, #152]	; (80072a4 <vRegisterCLICommands+0x14c>)
 800720a:	f006 fd83 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800720e:	4826      	ldr	r0, [pc, #152]	; (80072a8 <vRegisterCLICommands+0x150>)
 8007210:	f006 fd80 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007214:	4825      	ldr	r0, [pc, #148]	; (80072ac <vRegisterCLICommands+0x154>)
 8007216:	f006 fd7d 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800721a:	4825      	ldr	r0, [pc, #148]	; (80072b0 <vRegisterCLICommands+0x158>)
 800721c:	f006 fd7a 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 35;
 8007220:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <vRegisterCLICommands+0x15c>)
 8007222:	2223      	movs	r2, #35	; 0x23
 8007224:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007226:	f004 f961 	bl	800b4ec <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800722a:	f7ff ff93 	bl	8007154 <RegisterUserCLICommands>
}
 800722e:	bd10      	pop	{r4, pc}
 8007230:	08016c2c 	.word	0x08016c2c
 8007234:	08016bcc 	.word	0x08016bcc
 8007238:	08016b78 	.word	0x08016b78
 800723c:	0801659c 	.word	0x0801659c
 8007240:	08016724 	.word	0x08016724
 8007244:	08016c74 	.word	0x08016c74
 8007248:	08016af0 	.word	0x08016af0
 800724c:	080169b0 	.word	0x080169b0
 8007250:	08017124 	.word	0x08017124
 8007254:	08016ab4 	.word	0x08016ab4
 8007258:	08016d30 	.word	0x08016d30
 800725c:	08016568 	.word	0x08016568
 8007260:	08016c64 	.word	0x08016c64
 8007264:	08016f84 	.word	0x08016f84
 8007268:	08016850 	.word	0x08016850
 800726c:	080166a8 	.word	0x080166a8
 8007270:	0801814c 	.word	0x0801814c
 8007274:	08016610 	.word	0x08016610
 8007278:	08016d7c 	.word	0x08016d7c
 800727c:	080181c0 	.word	0x080181c0
 8007280:	08016a30 	.word	0x08016a30
 8007284:	08016754 	.word	0x08016754
 8007288:	08017114 	.word	0x08017114
 800728c:	080164ec 	.word	0x080164ec
 8007290:	08016b38 	.word	0x08016b38
 8007294:	08016714 	.word	0x08016714
 8007298:	080165e8 	.word	0x080165e8
 800729c:	08018198 	.word	0x08018198
 80072a0:	080180e0 	.word	0x080180e0
 80072a4:	080163ec 	.word	0x080163ec
 80072a8:	0801646c 	.word	0x0801646c
 80072ac:	080164a4 	.word	0x080164a4
 80072b0:	080163fc 	.word	0x080163fc
 80072b4:	200060b4 	.word	0x200060b4

080072b8 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 80072b8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 80072ba:	1e45      	subs	r5, r0, #1
 80072bc:	00ec      	lsls	r4, r5, #3
 80072be:	1b60      	subs	r0, r4, r5
 80072c0:	00c0      	lsls	r0, r0, #3
 80072c2:	4e05      	ldr	r6, [pc, #20]	; (80072d8 <StopMsgDMA+0x20>)
 80072c4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80072c6:	f009 fa28 	bl	801071a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 80072ca:	1b64      	subs	r4, r4, r5
 80072cc:	00e4      	lsls	r4, r4, #3
 80072ce:	59a3      	ldr	r3, [r4, r6]
 80072d0:	2200      	movs	r2, #0
 80072d2:	605a      	str	r2, [r3, #4]
}
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	20000f34 	.word	0x20000f34

080072dc <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 80072dc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 80072de:	1e44      	subs	r4, r0, #1
 80072e0:	00e5      	lsls	r5, r4, #3
 80072e2:	1b28      	subs	r0, r5, r4
 80072e4:	00c0      	lsls	r0, r0, #3
 80072e6:	4e07      	ldr	r6, [pc, #28]	; (8007304 <StopStreamDMA+0x28>)
 80072e8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80072ea:	f009 fa16 	bl	801071a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 80072ee:	1b2d      	subs	r5, r5, r4
 80072f0:	00ed      	lsls	r5, r5, #3
 80072f2:	59aa      	ldr	r2, [r5, r6]
 80072f4:	2300      	movs	r3, #0
 80072f6:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 80072f8:	00a4      	lsls	r4, r4, #2
 80072fa:	4a03      	ldr	r2, [pc, #12]	; (8007308 <StopStreamDMA+0x2c>)
 80072fc:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 80072fe:	4a03      	ldr	r2, [pc, #12]	; (800730c <StopStreamDMA+0x30>)
 8007300:	50a3      	str	r3, [r4, r2]

}
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	2000112c 	.word	0x2000112c
 8007308:	20000c38 	.word	0x20000c38
 800730c:	20000c60 	.word	0x20000c60

08007310 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8007310:	b510      	push	{r4, lr}
 8007312:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007314:	f7ff ffd0 	bl	80072b8 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8007318:	3c01      	subs	r4, #1
 800731a:	00e0      	lsls	r0, r4, #3
 800731c:	1b02      	subs	r2, r0, r4
 800731e:	00d2      	lsls	r2, r2, #3
 8007320:	4903      	ldr	r1, [pc, #12]	; (8007330 <SwitchMsgDMAToStream+0x20>)
 8007322:	5851      	ldr	r1, [r2, r1]
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <SwitchMsgDMAToStream+0x24>)
 8007326:	18d0      	adds	r0, r2, r3
 8007328:	f004 fdac 	bl	800be84 <DMA_STREAM_CH_Init>
}
 800732c:	bd10      	pop	{r4, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	20000f34 	.word	0x20000f34
 8007334:	2000112c 	.word	0x2000112c

08007338 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8007338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733a:	b083      	sub	sp, #12
 800733c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800733e:	f7ff ffcd 	bl	80072dc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8007342:	9401      	str	r4, [sp, #4]
 8007344:	3c01      	subs	r4, #1
 8007346:	00e7      	lsls	r7, r4, #3
 8007348:	1b3d      	subs	r5, r7, r4
 800734a:	00ed      	lsls	r5, r5, #3
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <SwitchStreamDMAToMsg+0x54>)
 800734e:	18ed      	adds	r5, r5, r3
 8007350:	4e0f      	ldr	r6, [pc, #60]	; (8007390 <SwitchStreamDMAToMsg+0x58>)
 8007352:	1b3b      	subs	r3, r7, r4
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	5999      	ldr	r1, [r3, r6]
 8007358:	0028      	movs	r0, r5
 800735a:	f004 fd1d 	bl	800bd98 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800735e:	1b3b      	subs	r3, r7, r4
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	18f3      	adds	r3, r6, r3
 8007364:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007366:	f004 f8dd 	bl	800b524 <GetPort>
 800736a:	2300      	movs	r3, #0
 800736c:	4a09      	ldr	r2, [pc, #36]	; (8007394 <SwitchStreamDMAToMsg+0x5c>)
 800736e:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8007370:	1b3f      	subs	r7, r7, r4
 8007372:	00ff      	lsls	r7, r7, #3
 8007374:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 8007376:	00a4      	lsls	r4, r4, #2
 8007378:	4a07      	ldr	r2, [pc, #28]	; (8007398 <SwitchStreamDMAToMsg+0x60>)
 800737a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800737c:	9801      	ldr	r0, [sp, #4]
 800737e:	f006 fb03 	bl	800d988 <GetUart>
 8007382:	0029      	movs	r1, r5
 8007384:	f005 f972 	bl	800c66c <DMA_MSG_RX_Setup>
		
}
 8007388:	b003      	add	sp, #12
 800738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738c:	20000f34 	.word	0x20000f34
 8007390:	2000112c 	.word	0x2000112c
 8007394:	200008e0 	.word	0x200008e0
 8007398:	20000c4c 	.word	0x20000c4c

0800739c <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	0005      	movs	r5, r0
 80073a0:	000e      	movs	r6, r1
 80073a2:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 80073a4:	f004 f8be 	bl	800b524 <GetPort>
 80073a8:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80073aa:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <StartDMAstream+0x44>)
 80073ac:	5c1b      	ldrb	r3, [r3, r0]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d902      	bls.n	80073b8 <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80073b2:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d112      	bne.n	80073de <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80073b8:	0020      	movs	r0, r4
 80073ba:	f7ff ffa9 	bl	8007310 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 80073be:	1e63      	subs	r3, r4, #1
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4a08      	ldr	r2, [pc, #32]	; (80073e4 <StartDMAstream+0x48>)
 80073c4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 80073c6:	4a06      	ldr	r2, [pc, #24]	; (80073e0 <StartDMAstream+0x44>)
 80073c8:	2102      	movs	r1, #2
 80073ca:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 80073cc:	4a06      	ldr	r2, [pc, #24]	; (80073e8 <StartDMAstream+0x4c>)
 80073ce:	2100      	movs	r1, #0
 80073d0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 80073d2:	003a      	movs	r2, r7
 80073d4:	0031      	movs	r1, r6
 80073d6:	0028      	movs	r0, r5
 80073d8:	f005 f9a6 	bl	800c728 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80073dc:	2000      	movs	r0, #0
}
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e0:	200008e0 	.word	0x200008e0
 80073e4:	20000c4c 	.word	0x20000c4c
 80073e8:	20000c38 	.word	0x20000c38

080073ec <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 80073f0:	4b12      	ldr	r3, [pc, #72]	; (800743c <DMA_IRQHandler+0x50>)
 80073f2:	5c1b      	ldrb	r3, [r3, r0]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d008      	beq.n	800740a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 80073f8:	3c01      	subs	r4, #1
 80073fa:	00e0      	lsls	r0, r4, #3
 80073fc:	1b00      	subs	r0, r0, r4
 80073fe:	00c0      	lsls	r0, r0, #3
 8007400:	4c0f      	ldr	r4, [pc, #60]	; (8007440 <DMA_IRQHandler+0x54>)
 8007402:	1900      	adds	r0, r0, r4
 8007404:	f009 f9b2 	bl	801076c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8007408:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800740a:	1e45      	subs	r5, r0, #1
 800740c:	00e8      	lsls	r0, r5, #3
 800740e:	1b40      	subs	r0, r0, r5
 8007410:	00c0      	lsls	r0, r0, #3
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <DMA_IRQHandler+0x58>)
 8007414:	18c0      	adds	r0, r0, r3
 8007416:	f009 f9a9 	bl	801076c <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800741a:	00aa      	lsls	r2, r5, #2
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <DMA_IRQHandler+0x5c>)
 800741e:	58d2      	ldr	r2, [r2, r3]
 8007420:	2a00      	cmp	r2, #0
 8007422:	d006      	beq.n	8007432 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8007424:	4909      	ldr	r1, [pc, #36]	; (800744c <DMA_IRQHandler+0x60>)
 8007426:	00ad      	lsls	r5, r5, #2
 8007428:	586b      	ldr	r3, [r5, r1]
 800742a:	3301      	adds	r3, #1
 800742c:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 800742e:	429a      	cmp	r2, r3
 8007430:	d8ea      	bhi.n	8007408 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007432:	0020      	movs	r0, r4
 8007434:	f7ff ff52 	bl	80072dc <StopStreamDMA>
}
 8007438:	e7e6      	b.n	8007408 <DMA_IRQHandler+0x1c>
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	200008e0 	.word	0x200008e0
 8007440:	20000f34 	.word	0x20000f34
 8007444:	2000112c 	.word	0x2000112c
 8007448:	20000c60 	.word	0x20000c60
 800744c:	20000c38 	.word	0x20000c38

08007450 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <ResetUartORE+0x1c>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	2308      	movs	r3, #8
 8007456:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007458:	4a05      	ldr	r2, [pc, #20]	; (8007470 <ResetUartORE+0x20>)
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800745e:	4a05      	ldr	r2, [pc, #20]	; (8007474 <ResetUartORE+0x24>)
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007464:	4a04      	ldr	r2, [pc, #16]	; (8007478 <ResetUartORE+0x28>)
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	6213      	str	r3, [r2, #32]
#endif
}
 800746a:	4770      	bx	lr
 800746c:	20006304 	.word	0x20006304
 8007470:	20006460 	.word	0x20006460
 8007474:	20006250 	.word	0x20006250
 8007478:	2000637c 	.word	0x2000637c

0800747c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	0006      	movs	r6, r0
 8007480:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8007482:	f009 fde3 	bl	801104c <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007486:	4b2b      	ldr	r3, [pc, #172]	; (8007534 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800748c:	4b2a      	ldr	r3, [pc, #168]	; (8007538 <EE_VerifyPageFullWriteVariable+0xbc>)
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8007492:	2b00      	cmp	r3, #0
 8007494:	d104      	bne.n	80074a0 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 8007496:	4929      	ldr	r1, [pc, #164]	; (800753c <EE_VerifyPageFullWriteVariable+0xc0>)
 8007498:	428a      	cmp	r2, r1
 800749a:	d007      	beq.n	80074ac <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 800749c:	3302      	adds	r3, #2
 800749e:	e005      	b.n	80074ac <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	d143      	bne.n	800752c <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 80074a4:	4925      	ldr	r1, [pc, #148]	; (800753c <EE_VerifyPageFullWriteVariable+0xc0>)
 80074a6:	428b      	cmp	r3, r1
 80074a8:	d042      	beq.n	8007530 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 80074aa:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80074ac:	4a24      	ldr	r2, [pc, #144]	; (8007540 <EE_VerifyPageFullWriteVariable+0xc4>)
 80074ae:	189c      	adds	r4, r3, r2
 80074b0:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 80074b2:	02db      	lsls	r3, r3, #11
 80074b4:	4a23      	ldr	r2, [pc, #140]	; (8007544 <EE_VerifyPageFullWriteVariable+0xc8>)
 80074b6:	4694      	mov	ip, r2
 80074b8:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	d005      	beq.n	80074cc <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80074c0:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 80074c2:	429c      	cmp	r4, r3
 80074c4:	d22e      	bcs.n	8007524 <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	3201      	adds	r2, #1
 80074ca:	d1f9      	bne.n	80074c0 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 80074cc:	002a      	movs	r2, r5
 80074ce:	2300      	movs	r3, #0
 80074d0:	0021      	movs	r1, r4
 80074d2:	2001      	movs	r0, #1
 80074d4:	f009 fe04 	bl	80110e0 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80074d8:	481b      	ldr	r0, [pc, #108]	; (8007548 <EE_VerifyPageFullWriteVariable+0xcc>)
 80074da:	f009 fdd3 	bl	8011084 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80074de:	2800      	cmp	r0, #0
 80074e0:	d003      	beq.n	80074ea <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <EE_VerifyPageFullWriteVariable+0xd0>)
 80074e4:	69d8      	ldr	r0, [r3, #28]
 80074e6:	b280      	uxth	r0, r0
 80074e8:	e01f      	b.n	800752a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80074ea:	4a19      	ldr	r2, [pc, #100]	; (8007550 <EE_VerifyPageFullWriteVariable+0xd4>)
 80074ec:	6913      	ldr	r3, [r2, #16]
 80074ee:	2101      	movs	r1, #1
 80074f0:	438b      	bics	r3, r1
 80074f2:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80074f4:	1ca1      	adds	r1, r4, #2
 80074f6:	0032      	movs	r2, r6
 80074f8:	2300      	movs	r3, #0
 80074fa:	2001      	movs	r0, #1
 80074fc:	f009 fdf0 	bl	80110e0 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007500:	4811      	ldr	r0, [pc, #68]	; (8007548 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007502:	f009 fdbf 	bl	8011084 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007506:	2800      	cmp	r0, #0
 8007508:	d003      	beq.n	8007512 <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <EE_VerifyPageFullWriteVariable+0xd0>)
 800750c:	69d8      	ldr	r0, [r3, #28]
 800750e:	b280      	uxth	r0, r0
 8007510:	e00b      	b.n	800752a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007512:	4a0f      	ldr	r2, [pc, #60]	; (8007550 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007514:	6913      	ldr	r3, [r2, #16]
 8007516:	2101      	movs	r1, #1
 8007518:	438b      	bics	r3, r1
 800751a:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <EE_VerifyPageFullWriteVariable+0xd0>)
 800751e:	69d8      	ldr	r0, [r3, #28]
 8007520:	b280      	uxth	r0, r0
 8007522:	e002      	b.n	800752a <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 8007524:	f009 fda4 	bl	8011070 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8007528:	2080      	movs	r0, #128	; 0x80
}
 800752a:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 800752c:	20ab      	movs	r0, #171	; 0xab
 800752e:	e7fc      	b.n	800752a <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 8007530:	2302      	movs	r3, #2
 8007532:	e7bb      	b.n	80074ac <EE_VerifyPageFullWriteVariable+0x30>
 8007534:	0801e000 	.word	0x0801e000
 8007538:	0801f000 	.word	0x0801f000
 800753c:	0000eeee 	.word	0x0000eeee
 8007540:	0001003c 	.word	0x0001003c
 8007544:	0801effe 	.word	0x0801effe
 8007548:	0000c350 	.word	0x0000c350
 800754c:	20006650 	.word	0x20006650
 8007550:	40022000 	.word	0x40022000

08007554 <EE_ReadVariable>:
{
 8007554:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <EE_ReadVariable+0x50>)
 8007558:	881c      	ldrh	r4, [r3, #0]
 800755a:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800755c:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <EE_ReadVariable+0x54>)
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8007562:	2c00      	cmp	r4, #0
 8007564:	d006      	beq.n	8007574 <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 800756a:	20ab      	movs	r0, #171	; 0xab
 800756c:	e019      	b.n	80075a2 <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800756e:	2001      	movs	r0, #1
 8007570:	e017      	b.n	80075a2 <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 8007572:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007574:	02e3      	lsls	r3, r4, #11
 8007576:	4a0d      	ldr	r2, [pc, #52]	; (80075ac <EE_ReadVariable+0x58>)
 8007578:	4694      	mov	ip, r2
 800757a:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800757c:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 800757e:	4a0c      	ldr	r2, [pc, #48]	; (80075b0 <EE_ReadVariable+0x5c>)
 8007580:	4694      	mov	ip, r2
 8007582:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 8007584:	881a      	ldrh	r2, [r3, #0]
 8007586:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007588:	4290      	cmp	r0, r2
 800758a:	d006      	beq.n	800759a <EE_ReadVariable+0x46>
      Address = Address - 4;
 800758c:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 800758e:	42a3      	cmp	r3, r4
 8007590:	d9ed      	bls.n	800756e <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007596:	4282      	cmp	r2, r0
 8007598:	d1f8      	bne.n	800758c <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800759a:	3b02      	subs	r3, #2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 80075a0:	2000      	movs	r0, #0
}
 80075a2:	bd10      	pop	{r4, pc}
 80075a4:	0801e000 	.word	0x0801e000
 80075a8:	0801f000 	.word	0x0801f000
 80075ac:	0801effe 	.word	0x0801effe
 80075b0:	0801e002 	.word	0x0801e002

080075b4 <EE_WriteVariable>:
{
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b6:	46de      	mov	lr, fp
 80075b8:	4647      	mov	r7, r8
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b083      	sub	sp, #12
 80075be:	0005      	movs	r5, r0
 80075c0:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 80075c2:	f009 fd43 	bl	801104c <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80075c6:	0031      	movs	r1, r6
 80075c8:	0028      	movs	r0, r5
 80075ca:	f7ff ff57 	bl	800747c <EE_VerifyPageFullWriteVariable>
 80075ce:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 80075d0:	2880      	cmp	r0, #128	; 0x80
 80075d2:	d007      	beq.n	80075e4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 80075d4:	f009 fd4c 	bl	8011070 <HAL_FLASH_Lock>
}
 80075d8:	0020      	movs	r0, r4
 80075da:	b003      	add	sp, #12
 80075dc:	bc0c      	pop	{r2, r3}
 80075de:	4690      	mov	r8, r2
 80075e0:	469b      	mov	fp, r3
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 80075e4:	f009 fd32 	bl	801104c <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80075e8:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <EE_WriteVariable+0x130>)
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80075ee:	4a3e      	ldr	r2, [pc, #248]	; (80076e8 <EE_WriteVariable+0x134>)
 80075f0:	8812      	ldrh	r2, [r2, #0]
 80075f2:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80075f8:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d1ea      	bne.n	80075d4 <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 80075fe:	4b3a      	ldr	r3, [pc, #232]	; (80076e8 <EE_WriteVariable+0x134>)
 8007600:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007602:	4b38      	ldr	r3, [pc, #224]	; (80076e4 <EE_WriteVariable+0x130>)
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	e003      	b.n	8007610 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007608:	4b36      	ldr	r3, [pc, #216]	; (80076e4 <EE_WriteVariable+0x130>)
 800760a:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <EE_WriteVariable+0x134>)
 800760e:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007610:	4a36      	ldr	r2, [pc, #216]	; (80076ec <EE_WriteVariable+0x138>)
 8007612:	2300      	movs	r3, #0
 8007614:	9901      	ldr	r1, [sp, #4]
 8007616:	2001      	movs	r0, #1
 8007618:	f009 fd62 	bl	80110e0 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800761c:	4834      	ldr	r0, [pc, #208]	; (80076f0 <EE_WriteVariable+0x13c>)
 800761e:	f009 fd31 	bl	8011084 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007622:	2800      	cmp	r0, #0
 8007624:	d003      	beq.n	800762e <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 8007626:	4b33      	ldr	r3, [pc, #204]	; (80076f4 <EE_WriteVariable+0x140>)
 8007628:	69dc      	ldr	r4, [r3, #28]
 800762a:	b2a4      	uxth	r4, r4
 800762c:	e7d2      	b.n	80075d4 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800762e:	4a32      	ldr	r2, [pc, #200]	; (80076f8 <EE_WriteVariable+0x144>)
 8007630:	6913      	ldr	r3, [r2, #16]
 8007632:	2101      	movs	r1, #1
 8007634:	438b      	bics	r3, r1
 8007636:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007638:	0031      	movs	r1, r6
 800763a:	0028      	movs	r0, r5
 800763c:	f7ff ff1e 	bl	800747c <EE_VerifyPageFullWriteVariable>
 8007640:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007642:	d1c7      	bne.n	80075d4 <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007644:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <EE_WriteVariable+0x148>)
 8007648:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800764a:	4e2d      	ldr	r6, [pc, #180]	; (8007700 <EE_WriteVariable+0x14c>)
 800764c:	e003      	b.n	8007656 <EE_WriteVariable+0xa2>
 800764e:	3701      	adds	r7, #1
 8007650:	b2bf      	uxth	r7, r7
 8007652:	42b7      	cmp	r7, r6
 8007654:	d00f      	beq.n	8007676 <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007656:	42bd      	cmp	r5, r7
 8007658:	d0f9      	beq.n	800764e <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800765a:	4928      	ldr	r1, [pc, #160]	; (80076fc <EE_WriteVariable+0x148>)
 800765c:	0038      	movs	r0, r7
 800765e:	f7ff ff79 	bl	8007554 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007662:	2801      	cmp	r0, #1
 8007664:	d0f3      	beq.n	800764e <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007666:	4643      	mov	r3, r8
 8007668:	8819      	ldrh	r1, [r3, #0]
 800766a:	0038      	movs	r0, r7
 800766c:	f7ff ff06 	bl	800747c <EE_VerifyPageFullWriteVariable>
 8007670:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007672:	d0ec      	beq.n	800764e <EE_WriteVariable+0x9a>
 8007674:	e7ae      	b.n	80075d4 <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 8007676:	4658      	mov	r0, fp
 8007678:	f009 fdaa 	bl	80111d0 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800767c:	481c      	ldr	r0, [pc, #112]	; (80076f0 <EE_WriteVariable+0x13c>)
 800767e:	f009 fd01 	bl	8011084 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007682:	2800      	cmp	r0, #0
 8007684:	d003      	beq.n	800768e <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 8007686:	4b1b      	ldr	r3, [pc, #108]	; (80076f4 <EE_WriteVariable+0x140>)
 8007688:	69dc      	ldr	r4, [r3, #28]
 800768a:	b2a4      	uxth	r4, r4
 800768c:	e7a2      	b.n	80075d4 <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800768e:	2080      	movs	r0, #128	; 0x80
 8007690:	0100      	lsls	r0, r0, #4
 8007692:	4458      	add	r0, fp
 8007694:	f009 fd9c 	bl	80111d0 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007698:	4815      	ldr	r0, [pc, #84]	; (80076f0 <EE_WriteVariable+0x13c>)
 800769a:	f009 fcf3 	bl	8011084 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 800769e:	2800      	cmp	r0, #0
 80076a0:	d003      	beq.n	80076aa <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 80076a2:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <EE_WriteVariable+0x140>)
 80076a4:	69dc      	ldr	r4, [r3, #28]
 80076a6:	b2a4      	uxth	r4, r4
 80076a8:	e794      	b.n	80075d4 <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80076aa:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <EE_WriteVariable+0x144>)
 80076ac:	6913      	ldr	r3, [r2, #16]
 80076ae:	2102      	movs	r1, #2
 80076b0:	438b      	bics	r3, r1
 80076b2:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	9901      	ldr	r1, [sp, #4]
 80076ba:	2001      	movs	r0, #1
 80076bc:	f009 fd10 	bl	80110e0 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80076c0:	480b      	ldr	r0, [pc, #44]	; (80076f0 <EE_WriteVariable+0x13c>)
 80076c2:	f009 fcdf 	bl	8011084 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d003      	beq.n	80076d2 <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 80076ca:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <EE_WriteVariable+0x140>)
 80076cc:	69dc      	ldr	r4, [r3, #28]
 80076ce:	b2a4      	uxth	r4, r4
 80076d0:	e780      	b.n	80075d4 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80076d2:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <EE_WriteVariable+0x144>)
 80076d4:	6913      	ldr	r3, [r2, #16]
 80076d6:	2101      	movs	r1, #1
 80076d8:	438b      	bics	r3, r1
 80076da:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 80076dc:	f009 fcc8 	bl	8011070 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 80076e0:	2400      	movs	r4, #0
 80076e2:	e777      	b.n	80075d4 <EE_WriteVariable+0x20>
 80076e4:	0801e000 	.word	0x0801e000
 80076e8:	0801f000 	.word	0x0801f000
 80076ec:	0000eeee 	.word	0x0000eeee
 80076f0:	0000c350 	.word	0x0000c350
 80076f4:	20006650 	.word	0x20006650
 80076f8:	40022000 	.word	0x40022000
 80076fc:	20000c74 	.word	0x20000c74
 8007700:	00000401 	.word	0x00000401

08007704 <EE_Format>:
{
 8007704:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007706:	f009 fca1 	bl	801104c <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800770a:	4829      	ldr	r0, [pc, #164]	; (80077b0 <EE_Format+0xac>)
 800770c:	f009 fd60 	bl	80111d0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007710:	4828      	ldr	r0, [pc, #160]	; (80077b4 <EE_Format+0xb0>)
 8007712:	f009 fcb7 	bl	8011084 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007716:	2800      	cmp	r0, #0
 8007718:	d003      	beq.n	8007722 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800771a:	4b27      	ldr	r3, [pc, #156]	; (80077b8 <EE_Format+0xb4>)
 800771c:	69d8      	ldr	r0, [r3, #28]
 800771e:	b280      	uxth	r0, r0
}
 8007720:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007722:	4826      	ldr	r0, [pc, #152]	; (80077bc <EE_Format+0xb8>)
 8007724:	f009 fd54 	bl	80111d0 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007728:	4822      	ldr	r0, [pc, #136]	; (80077b4 <EE_Format+0xb0>)
 800772a:	f009 fcab 	bl	8011084 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800772e:	2800      	cmp	r0, #0
 8007730:	d003      	beq.n	800773a <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007732:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <EE_Format+0xb4>)
 8007734:	69d8      	ldr	r0, [r3, #28]
 8007736:	b280      	uxth	r0, r0
 8007738:	e7f2      	b.n	8007720 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800773a:	4a21      	ldr	r2, [pc, #132]	; (80077c0 <EE_Format+0xbc>)
 800773c:	6913      	ldr	r3, [r2, #16]
 800773e:	2102      	movs	r1, #2
 8007740:	438b      	bics	r3, r1
 8007742:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007744:	2200      	movs	r2, #0
 8007746:	2300      	movs	r3, #0
 8007748:	4919      	ldr	r1, [pc, #100]	; (80077b0 <EE_Format+0xac>)
 800774a:	2001      	movs	r0, #1
 800774c:	f009 fcc8 	bl	80110e0 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007750:	4818      	ldr	r0, [pc, #96]	; (80077b4 <EE_Format+0xb0>)
 8007752:	f009 fc97 	bl	8011084 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007756:	2800      	cmp	r0, #0
 8007758:	d003      	beq.n	8007762 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800775a:	4b17      	ldr	r3, [pc, #92]	; (80077b8 <EE_Format+0xb4>)
 800775c:	69d8      	ldr	r0, [r3, #28]
 800775e:	b280      	uxth	r0, r0
 8007760:	e7de      	b.n	8007720 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007762:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <EE_Format+0xbc>)
 8007764:	6913      	ldr	r3, [r2, #16]
 8007766:	2101      	movs	r1, #1
 8007768:	438b      	bics	r3, r1
 800776a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800776c:	4815      	ldr	r0, [pc, #84]	; (80077c4 <EE_Format+0xc0>)
 800776e:	f009 fd2f 	bl	80111d0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007772:	4810      	ldr	r0, [pc, #64]	; (80077b4 <EE_Format+0xb0>)
 8007774:	f009 fc86 	bl	8011084 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007778:	2800      	cmp	r0, #0
 800777a:	d003      	beq.n	8007784 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800777c:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <EE_Format+0xb4>)
 800777e:	69d8      	ldr	r0, [r3, #28]
 8007780:	b280      	uxth	r0, r0
 8007782:	e7cd      	b.n	8007720 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007784:	4810      	ldr	r0, [pc, #64]	; (80077c8 <EE_Format+0xc4>)
 8007786:	f009 fd23 	bl	80111d0 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800778a:	480a      	ldr	r0, [pc, #40]	; (80077b4 <EE_Format+0xb0>)
 800778c:	f009 fc7a 	bl	8011084 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007790:	2800      	cmp	r0, #0
 8007792:	d003      	beq.n	800779c <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007794:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <EE_Format+0xb4>)
 8007796:	69d8      	ldr	r0, [r3, #28]
 8007798:	b280      	uxth	r0, r0
 800779a:	e7c1      	b.n	8007720 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800779c:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <EE_Format+0xbc>)
 800779e:	6913      	ldr	r3, [r2, #16]
 80077a0:	2101      	movs	r1, #1
 80077a2:	438b      	bics	r3, r1
 80077a4:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80077a6:	f009 fc63 	bl	8011070 <HAL_FLASH_Lock>
  return FlashStatus;
 80077aa:	2000      	movs	r0, #0
 80077ac:	e7b8      	b.n	8007720 <EE_Format+0x1c>
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	0801e000 	.word	0x0801e000
 80077b4:	0000c350 	.word	0x0000c350
 80077b8:	20006650 	.word	0x20006650
 80077bc:	0801e800 	.word	0x0801e800
 80077c0:	40022000 	.word	0x40022000
 80077c4:	0801f000 	.word	0x0801f000
 80077c8:	0801f800 	.word	0x0801f800

080077cc <EE_Init>:
{
 80077cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ce:	46c6      	mov	lr, r8
 80077d0:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 80077d2:	f009 fc3b 	bl	801104c <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80077d6:	4bbe      	ldr	r3, [pc, #760]	; (8007ad0 <EE_Init+0x304>)
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80077dc:	4abd      	ldr	r2, [pc, #756]	; (8007ad4 <EE_Init+0x308>)
 80077de:	8812      	ldrh	r2, [r2, #0]
 80077e0:	b292      	uxth	r2, r2
  switch (PageStatusA)
 80077e2:	49bd      	ldr	r1, [pc, #756]	; (8007ad8 <EE_Init+0x30c>)
 80077e4:	428b      	cmp	r3, r1
 80077e6:	d100      	bne.n	80077ea <EE_Init+0x1e>
 80077e8:	e074      	b.n	80078d4 <EE_Init+0x108>
 80077ea:	49bc      	ldr	r1, [pc, #752]	; (8007adc <EE_Init+0x310>)
 80077ec:	428b      	cmp	r3, r1
 80077ee:	d011      	beq.n	8007814 <EE_Init+0x48>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d100      	bne.n	80077f6 <EE_Init+0x2a>
 80077f4:	e109      	b.n	8007a0a <EE_Init+0x23e>
      FlashStatus = EE_Format();
 80077f6:	f7ff ff85 	bl	8007704 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80077fa:	48b9      	ldr	r0, [pc, #740]	; (8007ae0 <EE_Init+0x314>)
 80077fc:	f009 fc42 	bl	8011084 <FLASH_WaitForLastOperation>
 8007800:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007802:	2e00      	cmp	r6, #0
 8007804:	d102      	bne.n	800780c <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007806:	f009 fc33 	bl	8011070 <HAL_FLASH_Lock>
  return HAL_OK;
 800780a:	2600      	movs	r6, #0
}
 800780c:	0030      	movs	r0, r6
 800780e:	bc04      	pop	{r2}
 8007810:	4690      	mov	r8, r2
 8007812:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007814:	2a00      	cmp	r2, #0
 8007816:	d00d      	beq.n	8007834 <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007818:	4baf      	ldr	r3, [pc, #700]	; (8007ad8 <EE_Init+0x30c>)
 800781a:	429a      	cmp	r2, r3
 800781c:	d028      	beq.n	8007870 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 800781e:	f7ff ff71 	bl	8007704 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007822:	48af      	ldr	r0, [pc, #700]	; (8007ae0 <EE_Init+0x314>)
 8007824:	f009 fc2e 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007828:	2800      	cmp	r0, #0
 800782a:	d0ec      	beq.n	8007806 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800782c:	4bad      	ldr	r3, [pc, #692]	; (8007ae4 <EE_Init+0x318>)
 800782e:	69de      	ldr	r6, [r3, #28]
 8007830:	b2b6      	uxth	r6, r6
 8007832:	e7eb      	b.n	800780c <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007834:	48a6      	ldr	r0, [pc, #664]	; (8007ad0 <EE_Init+0x304>)
 8007836:	f009 fccb 	bl	80111d0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800783a:	48a9      	ldr	r0, [pc, #676]	; (8007ae0 <EE_Init+0x314>)
 800783c:	f009 fc22 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007840:	2800      	cmp	r0, #0
 8007842:	d003      	beq.n	800784c <EE_Init+0x80>
          return pFlash.ErrorCode;
 8007844:	4ba7      	ldr	r3, [pc, #668]	; (8007ae4 <EE_Init+0x318>)
 8007846:	69de      	ldr	r6, [r3, #28]
 8007848:	b2b6      	uxth	r6, r6
 800784a:	e7df      	b.n	800780c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800784c:	48a6      	ldr	r0, [pc, #664]	; (8007ae8 <EE_Init+0x31c>)
 800784e:	f009 fcbf 	bl	80111d0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007852:	48a3      	ldr	r0, [pc, #652]	; (8007ae0 <EE_Init+0x314>)
 8007854:	f009 fc16 	bl	8011084 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007858:	2800      	cmp	r0, #0
 800785a:	d105      	bne.n	8007868 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800785c:	4aa3      	ldr	r2, [pc, #652]	; (8007aec <EE_Init+0x320>)
 800785e:	6913      	ldr	r3, [r2, #16]
 8007860:	2102      	movs	r1, #2
 8007862:	438b      	bics	r3, r1
 8007864:	6113      	str	r3, [r2, #16]
 8007866:	e7ce      	b.n	8007806 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007868:	4b9e      	ldr	r3, [pc, #632]	; (8007ae4 <EE_Init+0x318>)
 800786a:	69de      	ldr	r6, [r3, #28]
 800786c:	b2b6      	uxth	r6, r6
 800786e:	e7cd      	b.n	800780c <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007870:	4897      	ldr	r0, [pc, #604]	; (8007ad0 <EE_Init+0x304>)
 8007872:	f009 fcad 	bl	80111d0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007876:	489a      	ldr	r0, [pc, #616]	; (8007ae0 <EE_Init+0x314>)
 8007878:	f009 fc04 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800787c:	2800      	cmp	r0, #0
 800787e:	d003      	beq.n	8007888 <EE_Init+0xbc>
          return pFlash.ErrorCode;
 8007880:	4b98      	ldr	r3, [pc, #608]	; (8007ae4 <EE_Init+0x318>)
 8007882:	69de      	ldr	r6, [r3, #28]
 8007884:	b2b6      	uxth	r6, r6
 8007886:	e7c1      	b.n	800780c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007888:	4897      	ldr	r0, [pc, #604]	; (8007ae8 <EE_Init+0x31c>)
 800788a:	f009 fca1 	bl	80111d0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800788e:	4894      	ldr	r0, [pc, #592]	; (8007ae0 <EE_Init+0x314>)
 8007890:	f009 fbf8 	bl	8011084 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007894:	2800      	cmp	r0, #0
 8007896:	d003      	beq.n	80078a0 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007898:	4b92      	ldr	r3, [pc, #584]	; (8007ae4 <EE_Init+0x318>)
 800789a:	69de      	ldr	r6, [r3, #28]
 800789c:	b2b6      	uxth	r6, r6
 800789e:	e7b5      	b.n	800780c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80078a0:	4a92      	ldr	r2, [pc, #584]	; (8007aec <EE_Init+0x320>)
 80078a2:	6913      	ldr	r3, [r2, #16]
 80078a4:	2102      	movs	r1, #2
 80078a6:	438b      	bics	r3, r1
 80078a8:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 80078aa:	2200      	movs	r2, #0
 80078ac:	2300      	movs	r3, #0
 80078ae:	4989      	ldr	r1, [pc, #548]	; (8007ad4 <EE_Init+0x308>)
 80078b0:	2001      	movs	r0, #1
 80078b2:	f009 fc15 	bl	80110e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078b6:	488a      	ldr	r0, [pc, #552]	; (8007ae0 <EE_Init+0x314>)
 80078b8:	f009 fbe4 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80078bc:	2800      	cmp	r0, #0
 80078be:	d105      	bne.n	80078cc <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80078c0:	4a8a      	ldr	r2, [pc, #552]	; (8007aec <EE_Init+0x320>)
 80078c2:	6913      	ldr	r3, [r2, #16]
 80078c4:	2101      	movs	r1, #1
 80078c6:	438b      	bics	r3, r1
 80078c8:	6113      	str	r3, [r2, #16]
 80078ca:	e79c      	b.n	8007806 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 80078cc:	4b85      	ldr	r3, [pc, #532]	; (8007ae4 <EE_Init+0x318>)
 80078ce:	69de      	ldr	r6, [r3, #28]
 80078d0:	b2b6      	uxth	r6, r6
 80078d2:	e79b      	b.n	800780c <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d157      	bne.n	8007988 <EE_Init+0x1bc>
 80078d8:	2401      	movs	r4, #1
  int16_t x = -1;
 80078da:	2701      	movs	r7, #1
 80078dc:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 80078de:	4d84      	ldr	r5, [pc, #528]	; (8007af0 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80078e0:	4b84      	ldr	r3, [pc, #528]	; (8007af4 <EE_Init+0x328>)
 80078e2:	4698      	mov	r8, r3
 80078e4:	e005      	b.n	80078f2 <EE_Init+0x126>
            x = VarIdx;
 80078e6:	b227      	sxth	r7, r4
 80078e8:	e008      	b.n	80078fc <EE_Init+0x130>
 80078ea:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80078ec:	4b82      	ldr	r3, [pc, #520]	; (8007af8 <EE_Init+0x32c>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d018      	beq.n	8007924 <EE_Init+0x158>
 80078f2:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 80078f4:	882b      	ldrh	r3, [r5, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	42b3      	cmp	r3, r6
 80078fa:	d0f4      	beq.n	80078e6 <EE_Init+0x11a>
          if (VarIdx != x)
 80078fc:	42bc      	cmp	r4, r7
 80078fe:	d0f4      	beq.n	80078ea <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007900:	497c      	ldr	r1, [pc, #496]	; (8007af4 <EE_Init+0x328>)
 8007902:	0030      	movs	r0, r6
 8007904:	f7ff fe26 	bl	8007554 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007908:	2801      	cmp	r0, #1
 800790a:	d0ee      	beq.n	80078ea <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800790c:	4643      	mov	r3, r8
 800790e:	8819      	ldrh	r1, [r3, #0]
 8007910:	0030      	movs	r0, r6
 8007912:	f7ff fdb3 	bl	800747c <EE_VerifyPageFullWriteVariable>
 8007916:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007918:	4871      	ldr	r0, [pc, #452]	; (8007ae0 <EE_Init+0x314>)
 800791a:	f009 fbb3 	bl	8011084 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800791e:	2800      	cmp	r0, #0
 8007920:	d0e3      	beq.n	80078ea <EE_Init+0x11e>
 8007922:	e773      	b.n	800780c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007924:	2200      	movs	r2, #0
 8007926:	2300      	movs	r3, #0
 8007928:	4969      	ldr	r1, [pc, #420]	; (8007ad0 <EE_Init+0x304>)
 800792a:	2001      	movs	r0, #1
 800792c:	f009 fbd8 	bl	80110e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007930:	486b      	ldr	r0, [pc, #428]	; (8007ae0 <EE_Init+0x314>)
 8007932:	f009 fba7 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007936:	2800      	cmp	r0, #0
 8007938:	d003      	beq.n	8007942 <EE_Init+0x176>
          return pFlash.ErrorCode;
 800793a:	4b6a      	ldr	r3, [pc, #424]	; (8007ae4 <EE_Init+0x318>)
 800793c:	69de      	ldr	r6, [r3, #28]
 800793e:	b2b6      	uxth	r6, r6
 8007940:	e764      	b.n	800780c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007942:	4a6a      	ldr	r2, [pc, #424]	; (8007aec <EE_Init+0x320>)
 8007944:	6913      	ldr	r3, [r2, #16]
 8007946:	2101      	movs	r1, #1
 8007948:	438b      	bics	r3, r1
 800794a:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800794c:	4861      	ldr	r0, [pc, #388]	; (8007ad4 <EE_Init+0x308>)
 800794e:	f009 fc3f 	bl	80111d0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007952:	4863      	ldr	r0, [pc, #396]	; (8007ae0 <EE_Init+0x314>)
 8007954:	f009 fb96 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007958:	2800      	cmp	r0, #0
 800795a:	d003      	beq.n	8007964 <EE_Init+0x198>
          return pFlash.ErrorCode;
 800795c:	4b61      	ldr	r3, [pc, #388]	; (8007ae4 <EE_Init+0x318>)
 800795e:	69de      	ldr	r6, [r3, #28]
 8007960:	b2b6      	uxth	r6, r6
 8007962:	e753      	b.n	800780c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007964:	4865      	ldr	r0, [pc, #404]	; (8007afc <EE_Init+0x330>)
 8007966:	f009 fc33 	bl	80111d0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800796a:	485d      	ldr	r0, [pc, #372]	; (8007ae0 <EE_Init+0x314>)
 800796c:	f009 fb8a 	bl	8011084 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007970:	2800      	cmp	r0, #0
 8007972:	d105      	bne.n	8007980 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007974:	4a5d      	ldr	r2, [pc, #372]	; (8007aec <EE_Init+0x320>)
 8007976:	6913      	ldr	r3, [r2, #16]
 8007978:	2102      	movs	r1, #2
 800797a:	438b      	bics	r3, r1
 800797c:	6113      	str	r3, [r2, #16]
 800797e:	e742      	b.n	8007806 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007980:	4b58      	ldr	r3, [pc, #352]	; (8007ae4 <EE_Init+0x318>)
 8007982:	69de      	ldr	r6, [r3, #28]
 8007984:	b2b6      	uxth	r6, r6
 8007986:	e741      	b.n	800780c <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007988:	4b54      	ldr	r3, [pc, #336]	; (8007adc <EE_Init+0x310>)
 800798a:	429a      	cmp	r2, r3
 800798c:	d00b      	beq.n	80079a6 <EE_Init+0x1da>
        FlashStatus = EE_Format();
 800798e:	f7ff feb9 	bl	8007704 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007992:	4853      	ldr	r0, [pc, #332]	; (8007ae0 <EE_Init+0x314>)
 8007994:	f009 fb76 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007998:	2800      	cmp	r0, #0
 800799a:	d100      	bne.n	800799e <EE_Init+0x1d2>
 800799c:	e733      	b.n	8007806 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800799e:	4b51      	ldr	r3, [pc, #324]	; (8007ae4 <EE_Init+0x318>)
 80079a0:	69de      	ldr	r6, [r3, #28]
 80079a2:	b2b6      	uxth	r6, r6
 80079a4:	e732      	b.n	800780c <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80079a6:	484b      	ldr	r0, [pc, #300]	; (8007ad4 <EE_Init+0x308>)
 80079a8:	f009 fc12 	bl	80111d0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079ac:	484c      	ldr	r0, [pc, #304]	; (8007ae0 <EE_Init+0x314>)
 80079ae:	f009 fb69 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d003      	beq.n	80079be <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 80079b6:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <EE_Init+0x318>)
 80079b8:	69de      	ldr	r6, [r3, #28]
 80079ba:	b2b6      	uxth	r6, r6
 80079bc:	e726      	b.n	800780c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80079be:	484f      	ldr	r0, [pc, #316]	; (8007afc <EE_Init+0x330>)
 80079c0:	f009 fc06 	bl	80111d0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079c4:	4846      	ldr	r0, [pc, #280]	; (8007ae0 <EE_Init+0x314>)
 80079c6:	f009 fb5d 	bl	8011084 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d003      	beq.n	80079d6 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 80079ce:	4b45      	ldr	r3, [pc, #276]	; (8007ae4 <EE_Init+0x318>)
 80079d0:	69de      	ldr	r6, [r3, #28]
 80079d2:	b2b6      	uxth	r6, r6
 80079d4:	e71a      	b.n	800780c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80079d6:	4a45      	ldr	r2, [pc, #276]	; (8007aec <EE_Init+0x320>)
 80079d8:	6913      	ldr	r3, [r2, #16]
 80079da:	2102      	movs	r1, #2
 80079dc:	438b      	bics	r3, r1
 80079de:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2300      	movs	r3, #0
 80079e4:	493a      	ldr	r1, [pc, #232]	; (8007ad0 <EE_Init+0x304>)
 80079e6:	2001      	movs	r0, #1
 80079e8:	f009 fb7a 	bl	80110e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079ec:	483c      	ldr	r0, [pc, #240]	; (8007ae0 <EE_Init+0x314>)
 80079ee:	f009 fb49 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d003      	beq.n	80079fe <EE_Init+0x232>
          return pFlash.ErrorCode;
 80079f6:	4b3b      	ldr	r3, [pc, #236]	; (8007ae4 <EE_Init+0x318>)
 80079f8:	69de      	ldr	r6, [r3, #28]
 80079fa:	b2b6      	uxth	r6, r6
 80079fc:	e706      	b.n	800780c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80079fe:	4a3b      	ldr	r2, [pc, #236]	; (8007aec <EE_Init+0x320>)
 8007a00:	6913      	ldr	r3, [r2, #16]
 8007a02:	2101      	movs	r1, #1
 8007a04:	438b      	bics	r3, r1
 8007a06:	6113      	str	r3, [r2, #16]
 8007a08:	e6fd      	b.n	8007806 <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d009      	beq.n	8007a22 <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007a0e:	4b33      	ldr	r3, [pc, #204]	; (8007adc <EE_Init+0x310>)
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d010      	beq.n	8007a36 <EE_Init+0x26a>
 8007a14:	2401      	movs	r4, #1
  int16_t x = -1;
 8007a16:	2701      	movs	r7, #1
 8007a18:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007a1a:	4d39      	ldr	r5, [pc, #228]	; (8007b00 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007a1c:	4b35      	ldr	r3, [pc, #212]	; (8007af4 <EE_Init+0x328>)
 8007a1e:	4698      	mov	r8, r3
 8007a20:	e02d      	b.n	8007a7e <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 8007a22:	f7ff fe6f 	bl	8007704 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a26:	482e      	ldr	r0, [pc, #184]	; (8007ae0 <EE_Init+0x314>)
 8007a28:	f009 fb2c 	bl	8011084 <FLASH_WaitForLastOperation>
 8007a2c:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d100      	bne.n	8007a34 <EE_Init+0x268>
 8007a32:	e6e8      	b.n	8007806 <EE_Init+0x3a>
 8007a34:	e6ea      	b.n	800780c <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a36:	4827      	ldr	r0, [pc, #156]	; (8007ad4 <EE_Init+0x308>)
 8007a38:	f009 fbca 	bl	80111d0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a3c:	4828      	ldr	r0, [pc, #160]	; (8007ae0 <EE_Init+0x314>)
 8007a3e:	f009 fb21 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d003      	beq.n	8007a4e <EE_Init+0x282>
          return pFlash.ErrorCode;
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <EE_Init+0x318>)
 8007a48:	69de      	ldr	r6, [r3, #28]
 8007a4a:	b2b6      	uxth	r6, r6
 8007a4c:	e6de      	b.n	800780c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a4e:	482b      	ldr	r0, [pc, #172]	; (8007afc <EE_Init+0x330>)
 8007a50:	f009 fbbe 	bl	80111d0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a54:	4822      	ldr	r0, [pc, #136]	; (8007ae0 <EE_Init+0x314>)
 8007a56:	f009 fb15 	bl	8011084 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d105      	bne.n	8007a6a <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007a5e:	4a23      	ldr	r2, [pc, #140]	; (8007aec <EE_Init+0x320>)
 8007a60:	6913      	ldr	r3, [r2, #16]
 8007a62:	2102      	movs	r1, #2
 8007a64:	438b      	bics	r3, r1
 8007a66:	6113      	str	r3, [r2, #16]
 8007a68:	e6cd      	b.n	8007806 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <EE_Init+0x318>)
 8007a6c:	69de      	ldr	r6, [r3, #28]
 8007a6e:	b2b6      	uxth	r6, r6
 8007a70:	e6cc      	b.n	800780c <EE_Init+0x40>
            x = VarIdx;
 8007a72:	b227      	sxth	r7, r4
 8007a74:	e008      	b.n	8007a88 <EE_Init+0x2bc>
 8007a76:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007a78:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <EE_Init+0x32c>)
 8007a7a:	429c      	cmp	r4, r3
 8007a7c:	d018      	beq.n	8007ab0 <EE_Init+0x2e4>
 8007a7e:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007a80:	882b      	ldrh	r3, [r5, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	42b3      	cmp	r3, r6
 8007a86:	d0f4      	beq.n	8007a72 <EE_Init+0x2a6>
          if (VarIdx != x)
 8007a88:	42bc      	cmp	r4, r7
 8007a8a:	d0f4      	beq.n	8007a76 <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007a8c:	4919      	ldr	r1, [pc, #100]	; (8007af4 <EE_Init+0x328>)
 8007a8e:	0030      	movs	r0, r6
 8007a90:	f7ff fd60 	bl	8007554 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007a94:	2801      	cmp	r0, #1
 8007a96:	d0ee      	beq.n	8007a76 <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007a98:	4643      	mov	r3, r8
 8007a9a:	8819      	ldrh	r1, [r3, #0]
 8007a9c:	0030      	movs	r0, r6
 8007a9e:	f7ff fced 	bl	800747c <EE_VerifyPageFullWriteVariable>
 8007aa2:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007aa4:	480e      	ldr	r0, [pc, #56]	; (8007ae0 <EE_Init+0x314>)
 8007aa6:	f009 faed 	bl	8011084 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d0e3      	beq.n	8007a76 <EE_Init+0x2aa>
 8007aae:	e6ad      	b.n	800780c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4907      	ldr	r1, [pc, #28]	; (8007ad4 <EE_Init+0x308>)
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	f009 fb12 	bl	80110e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007abc:	4808      	ldr	r0, [pc, #32]	; (8007ae0 <EE_Init+0x314>)
 8007abe:	f009 fae1 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d01e      	beq.n	8007b04 <EE_Init+0x338>
          return pFlash.ErrorCode;
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <EE_Init+0x318>)
 8007ac8:	69de      	ldr	r6, [r3, #28]
 8007aca:	b2b6      	uxth	r6, r6
 8007acc:	e69e      	b.n	800780c <EE_Init+0x40>
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	0801e000 	.word	0x0801e000
 8007ad4:	0801f000 	.word	0x0801f000
 8007ad8:	0000eeee 	.word	0x0000eeee
 8007adc:	0000ffff 	.word	0x0000ffff
 8007ae0:	0000c350 	.word	0x0000c350
 8007ae4:	20006650 	.word	0x20006650
 8007ae8:	0801e800 	.word	0x0801e800
 8007aec:	40022000 	.word	0x40022000
 8007af0:	0801e006 	.word	0x0801e006
 8007af4:	20000c74 	.word	0x20000c74
 8007af8:	00000401 	.word	0x00000401
 8007afc:	0801f800 	.word	0x0801f800
 8007b00:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b04:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <EE_Init+0x380>)
 8007b06:	6913      	ldr	r3, [r2, #16]
 8007b08:	2101      	movs	r1, #1
 8007b0a:	438b      	bics	r3, r1
 8007b0c:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b0e:	4810      	ldr	r0, [pc, #64]	; (8007b50 <EE_Init+0x384>)
 8007b10:	f009 fb5e 	bl	80111d0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b14:	480f      	ldr	r0, [pc, #60]	; (8007b54 <EE_Init+0x388>)
 8007b16:	f009 fab5 	bl	8011084 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d003      	beq.n	8007b26 <EE_Init+0x35a>
          return pFlash.ErrorCode;
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <EE_Init+0x38c>)
 8007b20:	69de      	ldr	r6, [r3, #28]
 8007b22:	b2b6      	uxth	r6, r6
 8007b24:	e672      	b.n	800780c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b26:	480d      	ldr	r0, [pc, #52]	; (8007b5c <EE_Init+0x390>)
 8007b28:	f009 fb52 	bl	80111d0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b2c:	4809      	ldr	r0, [pc, #36]	; (8007b54 <EE_Init+0x388>)
 8007b2e:	f009 faa9 	bl	8011084 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d105      	bne.n	8007b42 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b36:	4a05      	ldr	r2, [pc, #20]	; (8007b4c <EE_Init+0x380>)
 8007b38:	6913      	ldr	r3, [r2, #16]
 8007b3a:	2102      	movs	r1, #2
 8007b3c:	438b      	bics	r3, r1
 8007b3e:	6113      	str	r3, [r2, #16]
 8007b40:	e661      	b.n	8007806 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <EE_Init+0x38c>)
 8007b44:	69de      	ldr	r6, [r3, #28]
 8007b46:	b2b6      	uxth	r6, r6
 8007b48:	e660      	b.n	800780c <EE_Init+0x40>
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	40022000 	.word	0x40022000
 8007b50:	0801e000 	.word	0x0801e000
 8007b54:	0000c350 	.word	0x0000c350
 8007b58:	20006650 	.word	0x20006650
 8007b5c:	0801e800 	.word	0x0801e800

08007b60 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b62:	46c6      	mov	lr, r8
 8007b64:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8007b66:	4c2b      	ldr	r4, [pc, #172]	; (8007c14 <StartDefaultTask+0xb4>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8007b68:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 8007b6a:	0027      	movs	r7, r4
 8007b6c:	e020      	b.n	8007bb0 <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 8007b6e:	2680      	movs	r6, #128	; 0x80
 8007b70:	0136      	lsls	r6, r6, #4
 8007b72:	2590      	movs	r5, #144	; 0x90
 8007b74:	05ed      	lsls	r5, r5, #23
 8007b76:	2201      	movs	r2, #1
 8007b78:	0031      	movs	r1, r6
 8007b7a:	0028      	movs	r0, r5
 8007b7c:	f009 fd0e 	bl	801159c <HAL_GPIO_WritePin>
 8007b80:	20c8      	movs	r0, #200	; 0xc8
 8007b82:	f006 f84c 	bl	800dc1e <osDelay>
 8007b86:	2200      	movs	r2, #0
 8007b88:	0031      	movs	r1, r6
 8007b8a:	0028      	movs	r0, r5
 8007b8c:	f009 fd06 	bl	801159c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007b90:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <StartDefaultTask+0xb4>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
				break;

		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007b96:	f000 fee5 	bl	8008964 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007b9a:	f7fd fb67 	bl	800526c <ExecuteSnippet>
		
		/* Execute activated STM32CubeMonitor */
	//	ExecuteMonitor();

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <StartDefaultTask+0xb8>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <StartDefaultTask+0x4c>
 8007ba6:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <StartDefaultTask+0xbc>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007bac:	f007 fee4 	bl	800f978 <vPortYield>
		switch (indMode)
 8007bb0:	7823      	ldrb	r3, [r4, #0]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d004      	beq.n	8007bc0 <StartDefaultTask+0x60>
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d017      	beq.n	8007bea <StartDefaultTask+0x8a>
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d1eb      	bne.n	8007b96 <StartDefaultTask+0x36>
 8007bbe:	e7d6      	b.n	8007b6e <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007bc0:	2680      	movs	r6, #128	; 0x80
 8007bc2:	0136      	lsls	r6, r6, #4
 8007bc4:	2590      	movs	r5, #144	; 0x90
 8007bc6:	05ed      	lsls	r5, r5, #23
 8007bc8:	2201      	movs	r2, #1
 8007bca:	0031      	movs	r1, r6
 8007bcc:	0028      	movs	r0, r5
 8007bce:	f009 fce5 	bl	801159c <HAL_GPIO_WritePin>
 8007bd2:	2064      	movs	r0, #100	; 0x64
 8007bd4:	f006 f823 	bl	800dc1e <osDelay>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	0031      	movs	r1, r6
 8007bdc:	0028      	movs	r0, r5
 8007bde:	f009 fcdd 	bl	801159c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007be2:	2300      	movs	r3, #0
 8007be4:	4642      	mov	r2, r8
 8007be6:	7013      	strb	r3, [r2, #0]
				break;
 8007be8:	e7d5      	b.n	8007b96 <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8007bea:	2680      	movs	r6, #128	; 0x80
 8007bec:	0136      	lsls	r6, r6, #4
 8007bee:	2590      	movs	r5, #144	; 0x90
 8007bf0:	05ed      	lsls	r5, r5, #23
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	0031      	movs	r1, r6
 8007bf6:	0028      	movs	r0, r5
 8007bf8:	f009 fcd0 	bl	801159c <HAL_GPIO_WritePin>
 8007bfc:	201e      	movs	r0, #30
 8007bfe:	f006 f80e 	bl	800dc1e <osDelay>
 8007c02:	2200      	movs	r2, #0
 8007c04:	0031      	movs	r1, r6
 8007c06:	0028      	movs	r0, r5
 8007c08:	f009 fcc8 	bl	801159c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	703b      	strb	r3, [r7, #0]
				break;
 8007c10:	e7c1      	b.n	8007b96 <StartDefaultTask+0x36>
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	200006e4 	.word	0x200006e4
 8007c18:	20000cf7 	.word	0x20000cf7
 8007c1c:	20000cf6 	.word	0x20000cf6

08007c20 <MX_FREERTOS_Init>:
{
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);
 8007c24:	25a0      	movs	r5, #160	; 0xa0
 8007c26:	006d      	lsls	r5, r5, #1
 8007c28:	2400      	movs	r4, #0
 8007c2a:	9403      	str	r4, [sp, #12]
 8007c2c:	9402      	str	r4, [sp, #8]
 8007c2e:	4b53      	ldr	r3, [pc, #332]	; (8007d7c <MX_FREERTOS_Init+0x15c>)
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2603      	movs	r6, #3
 8007c34:	9600      	str	r6, [sp, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	002a      	movs	r2, r5
 8007c3a:	4951      	ldr	r1, [pc, #324]	; (8007d80 <MX_FREERTOS_Init+0x160>)
 8007c3c:	4851      	ldr	r0, [pc, #324]	; (8007d84 <MX_FREERTOS_Init+0x164>)
 8007c3e:	f006 fde9 	bl	800e814 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 8007c42:	9403      	str	r4, [sp, #12]
 8007c44:	9402      	str	r4, [sp, #8]
 8007c46:	4b50      	ldr	r3, [pc, #320]	; (8007d88 <MX_FREERTOS_Init+0x168>)
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	9600      	str	r6, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	002a      	movs	r2, r5
 8007c50:	494e      	ldr	r1, [pc, #312]	; (8007d8c <MX_FREERTOS_Init+0x16c>)
 8007c52:	484f      	ldr	r0, [pc, #316]	; (8007d90 <MX_FREERTOS_Init+0x170>)
 8007c54:	f006 fdde 	bl	800e814 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007c58:	9403      	str	r4, [sp, #12]
 8007c5a:	9402      	str	r4, [sp, #8]
 8007c5c:	4b4d      	ldr	r3, [pc, #308]	; (8007d94 <MX_FREERTOS_Init+0x174>)
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	9600      	str	r6, [sp, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	002a      	movs	r2, r5
 8007c66:	494c      	ldr	r1, [pc, #304]	; (8007d98 <MX_FREERTOS_Init+0x178>)
 8007c68:	484c      	ldr	r0, [pc, #304]	; (8007d9c <MX_FREERTOS_Init+0x17c>)
 8007c6a:	f006 fdd3 	bl	800e814 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007c6e:	f7ff fa73 	bl	8007158 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 8007c72:	9403      	str	r4, [sp, #12]
 8007c74:	9402      	str	r4, [sp, #8]
 8007c76:	4b4a      	ldr	r3, [pc, #296]	; (8007da0 <MX_FREERTOS_Init+0x180>)
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	9600      	str	r6, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	002a      	movs	r2, r5
 8007c80:	4948      	ldr	r1, [pc, #288]	; (8007da4 <MX_FREERTOS_Init+0x184>)
 8007c82:	4849      	ldr	r0, [pc, #292]	; (8007da8 <MX_FREERTOS_Init+0x188>)
 8007c84:	f006 fdc6 	bl	800e814 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007c88:	4d48      	ldr	r5, [pc, #288]	; (8007dac <MX_FREERTOS_Init+0x18c>)
 8007c8a:	9403      	str	r4, [sp, #12]
 8007c8c:	9402      	str	r4, [sp, #8]
 8007c8e:	4b48      	ldr	r3, [pc, #288]	; (8007db0 <MX_FREERTOS_Init+0x190>)
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	3601      	adds	r6, #1
 8007c94:	9600      	str	r6, [sp, #0]
 8007c96:	2301      	movs	r3, #1
 8007c98:	22a0      	movs	r2, #160	; 0xa0
 8007c9a:	4946      	ldr	r1, [pc, #280]	; (8007db4 <MX_FREERTOS_Init+0x194>)
 8007c9c:	0028      	movs	r0, r5
 8007c9e:	f006 fdb9 	bl	800e814 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 8007ca2:	9403      	str	r4, [sp, #12]
 8007ca4:	9402      	str	r4, [sp, #8]
 8007ca6:	4b44      	ldr	r3, [pc, #272]	; (8007db8 <MX_FREERTOS_Init+0x198>)
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	9600      	str	r6, [sp, #0]
 8007cac:	2302      	movs	r3, #2
 8007cae:	22a0      	movs	r2, #160	; 0xa0
 8007cb0:	4942      	ldr	r1, [pc, #264]	; (8007dbc <MX_FREERTOS_Init+0x19c>)
 8007cb2:	0028      	movs	r0, r5
 8007cb4:	f006 fdae 	bl	800e814 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007cb8:	9403      	str	r4, [sp, #12]
 8007cba:	9402      	str	r4, [sp, #8]
 8007cbc:	4b40      	ldr	r3, [pc, #256]	; (8007dc0 <MX_FREERTOS_Init+0x1a0>)
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	9600      	str	r6, [sp, #0]
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	22a0      	movs	r2, #160	; 0xa0
 8007cc6:	493f      	ldr	r1, [pc, #252]	; (8007dc4 <MX_FREERTOS_Init+0x1a4>)
 8007cc8:	0028      	movs	r0, r5
 8007cca:	f006 fda3 	bl	800e814 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8007cce:	9403      	str	r4, [sp, #12]
 8007cd0:	9402      	str	r4, [sp, #8]
 8007cd2:	4b3d      	ldr	r3, [pc, #244]	; (8007dc8 <MX_FREERTOS_Init+0x1a8>)
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	9600      	str	r6, [sp, #0]
 8007cd8:	2304      	movs	r3, #4
 8007cda:	22a0      	movs	r2, #160	; 0xa0
 8007cdc:	493b      	ldr	r1, [pc, #236]	; (8007dcc <MX_FREERTOS_Init+0x1ac>)
 8007cde:	0028      	movs	r0, r5
 8007ce0:	f006 fd98 	bl	800e814 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8007ce4:	9403      	str	r4, [sp, #12]
 8007ce6:	9402      	str	r4, [sp, #8]
 8007ce8:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <MX_FREERTOS_Init+0x1b0>)
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	9600      	str	r6, [sp, #0]
 8007cee:	2305      	movs	r3, #5
 8007cf0:	22a0      	movs	r2, #160	; 0xa0
 8007cf2:	4938      	ldr	r1, [pc, #224]	; (8007dd4 <MX_FREERTOS_Init+0x1b4>)
 8007cf4:	0028      	movs	r0, r5
 8007cf6:	f006 fd8d 	bl	800e814 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007cfa:	940d      	str	r4, [sp, #52]	; 0x34
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	a80d      	add	r0, sp, #52	; 0x34
 8007d00:	f005 ff95 	bl	800dc2e <osSemaphoreCreate>
 8007d04:	4e34      	ldr	r6, [pc, #208]	; (8007dd8 <MX_FREERTOS_Init+0x1b8>)
 8007d06:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8007d08:	940c      	str	r4, [sp, #48]	; 0x30
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	a80c      	add	r0, sp, #48	; 0x30
 8007d0e:	f005 ff8e 	bl	800dc2e <osSemaphoreCreate>
 8007d12:	4d32      	ldr	r5, [pc, #200]	; (8007ddc <MX_FREERTOS_Init+0x1bc>)
 8007d14:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8007d16:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d18:	2101      	movs	r1, #1
 8007d1a:	a80b      	add	r0, sp, #44	; 0x2c
 8007d1c:	f005 ff87 	bl	800dc2e <osSemaphoreCreate>
 8007d20:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8007d22:	940a      	str	r4, [sp, #40]	; 0x28
 8007d24:	2101      	movs	r1, #1
 8007d26:	a80a      	add	r0, sp, #40	; 0x28
 8007d28:	f005 ff81 	bl	800dc2e <osSemaphoreCreate>
 8007d2c:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8007d2e:	9409      	str	r4, [sp, #36]	; 0x24
 8007d30:	2101      	movs	r1, #1
 8007d32:	a809      	add	r0, sp, #36	; 0x24
 8007d34:	f005 ff7b 	bl	800dc2e <osSemaphoreCreate>
 8007d38:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8007d3a:	9408      	str	r4, [sp, #32]
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	a808      	add	r0, sp, #32
 8007d40:	f005 ff75 	bl	800dc2e <osSemaphoreCreate>
 8007d44:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8007d46:	9407      	str	r4, [sp, #28]
 8007d48:	2101      	movs	r1, #1
 8007d4a:	a807      	add	r0, sp, #28
 8007d4c:	f005 ff6f 	bl	800dc2e <osSemaphoreCreate>
 8007d50:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 8007d52:	9406      	str	r4, [sp, #24]
 8007d54:	2101      	movs	r1, #1
 8007d56:	a806      	add	r0, sp, #24
 8007d58:	f005 ff69 	bl	800dc2e <osSemaphoreCreate>
 8007d5c:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 8007d5e:	9405      	str	r4, [sp, #20]
 8007d60:	2101      	movs	r1, #1
 8007d62:	a805      	add	r0, sp, #20
 8007d64:	f005 ff63 	bl	800dc2e <osSemaphoreCreate>
 8007d68:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 8007d6a:	9404      	str	r4, [sp, #16]
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	a804      	add	r0, sp, #16
 8007d70:	f005 ff5d 	bl	800dc2e <osSemaphoreCreate>
 8007d74:	6168      	str	r0, [r5, #20]
}
 8007d76:	b00e      	add	sp, #56	; 0x38
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	20000c94 	.word	0x20000c94
 8007d80:	080181d0 	.word	0x080181d0
 8007d84:	08007b61 	.word	0x08007b61
 8007d88:	20000c78 	.word	0x20000c78
 8007d8c:	080181dc 	.word	0x080181dc
 8007d90:	08009629 	.word	0x08009629
 8007d94:	20000c90 	.word	0x20000c90
 8007d98:	080181e8 	.word	0x080181e8
 8007d9c:	080130cb 	.word	0x080130cb
 8007da0:	20000c9c 	.word	0x20000c9c
 8007da4:	080181f4 	.word	0x080181f4
 8007da8:	08004ee9 	.word	0x08004ee9
 8007dac:	080099c9 	.word	0x080099c9
 8007db0:	20000c7c 	.word	0x20000c7c
 8007db4:	080181fc 	.word	0x080181fc
 8007db8:	20000c80 	.word	0x20000c80
 8007dbc:	08018208 	.word	0x08018208
 8007dc0:	20000c84 	.word	0x20000c84
 8007dc4:	08018214 	.word	0x08018214
 8007dc8:	20000c88 	.word	0x20000c88
 8007dcc:	08018220 	.word	0x08018220
 8007dd0:	20000c8c 	.word	0x20000c8c
 8007dd4:	0801822c 	.word	0x0801822c
 8007dd8:	200061cc 	.word	0x200061cc
 8007ddc:	200061b0 	.word	0x200061b0

08007de0 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 8007de0:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007de2:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	4904      	ldr	r1, [pc, #16]	; (8007df8 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007de8:	f7f8 f9a8 	bl	800013c <__udivsi3>
 8007dec:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007dee:	6018      	str	r0, [r3, #0]
}
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	20000094 	.word	0x20000094
 8007df8:	00002710 	.word	0x00002710
 8007dfc:	20000c98 	.word	0x20000c98

08007e00 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8007e00:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <ulMainGetRunTimeCounterValue+0x40>)
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	21fa      	movs	r1, #250	; 0xfa
 8007e08:	0089      	lsls	r1, r1, #2
 8007e0a:	f7f8 f997 	bl	800013c <__udivsi3>
 8007e0e:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <ulMainGetRunTimeCounterValue+0x44>)
 8007e12:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8007e14:	f006 fe90 	bl	800eb38 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <ulMainGetRunTimeCounterValue+0x48>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	015b      	lsls	r3, r3, #5
 8007e1e:	d50d      	bpl.n	8007e3c <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 8007e20:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007e22:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <ulMainGetRunTimeCounterValue+0x44>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 8007e28:	0084      	lsls	r4, r0, #2
 8007e2a:	1824      	adds	r4, r4, r0
 8007e2c:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <ulMainGetRunTimeCounterValue+0x4c>)
 8007e30:	6819      	ldr	r1, [r3, #0]
 8007e32:	0028      	movs	r0, r5
 8007e34:	f7f8 f982 	bl	800013c <__udivsi3>
 8007e38:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007e3c:	1b2d      	subs	r5, r5, r4
 8007e3e:	e7f3      	b.n	8007e28 <ulMainGetRunTimeCounterValue+0x28>
 8007e40:	20000094 	.word	0x20000094
 8007e44:	e000e018 	.word	0xe000e018
 8007e48:	e000ed04 	.word	0xe000ed04
 8007e4c:	20000c98 	.word	0x20000c98

08007e50 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 8007e50:	4770      	bx	lr
	...

08007e54 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 8007e54:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8007e56:	00c2      	lsls	r2, r0, #3
 8007e58:	1812      	adds	r2, r2, r0
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ec8 <CheckForTimedButtonPress+0x74>)
 8007e5c:	189b      	adds	r3, r3, r2
 8007e5e:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 8007e60:	0082      	lsls	r2, r0, #2
 8007e62:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <CheckForTimedButtonPress+0x78>)
 8007e64:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 8007e66:	0163      	lsls	r3, r4, #5
 8007e68:	1b1b      	subs	r3, r3, r4
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	191b      	adds	r3, r3, r4
 8007e6e:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 8007e70:	4299      	cmp	r1, r3
 8007e72:	d01c      	beq.n	8007eae <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8007e74:	00c2      	lsls	r2, r0, #3
 8007e76:	1812      	adds	r2, r2, r0
 8007e78:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <CheckForTimedButtonPress+0x74>)
 8007e7a:	189b      	adds	r3, r3, r2
 8007e7c:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 8007e7e:	0163      	lsls	r3, r4, #5
 8007e80:	1b1b      	subs	r3, r3, r4
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	191b      	adds	r3, r3, r4
 8007e86:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	d017      	beq.n	8007ebc <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 8007e8c:	00c2      	lsls	r2, r0, #3
 8007e8e:	1812      	adds	r2, r2, r0
 8007e90:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <CheckForTimedButtonPress+0x74>)
 8007e92:	189b      	adds	r3, r3, r2
 8007e94:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 8007e96:	0163      	lsls	r3, r4, #5
 8007e98:	1b1b      	subs	r3, r3, r4
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	191b      	adds	r3, r3, r4
 8007e9e:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d109      	bne.n	8007eb8 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 8007ea4:	0010      	movs	r0, r2
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <CheckForTimedButtonPress+0x74>)
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	54c2      	strb	r2, [r0, r3]
 8007eac:	e004      	b.n	8007eb8 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8007eae:	00c3      	lsls	r3, r0, #3
 8007eb0:	1818      	adds	r0, r3, r0
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <CheckForTimedButtonPress+0x74>)
 8007eb4:	2209      	movs	r2, #9
 8007eb6:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 8007eb8:	2000      	movs	r0, #0
 8007eba:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8007ebc:	0010      	movs	r0, r2
 8007ebe:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <CheckForTimedButtonPress+0x74>)
 8007ec0:	220a      	movs	r2, #10
 8007ec2:	54c2      	strb	r2, [r0, r3]
 8007ec4:	e7f8      	b.n	8007eb8 <CheckForTimedButtonPress+0x64>
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	20000cb4 	.word	0x20000cb4
 8007ecc:	20000cf8 	.word	0x20000cf8

08007ed0 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 8007ed0:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8007ed2:	00c2      	lsls	r2, r0, #3
 8007ed4:	1812      	adds	r2, r2, r0
 8007ed6:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <CheckForTimedButtonRelease+0x74>)
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 8007edc:	0082      	lsls	r2, r0, #2
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <CheckForTimedButtonRelease+0x78>)
 8007ee0:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 8007ee2:	0163      	lsls	r3, r4, #5
 8007ee4:	1b1b      	subs	r3, r3, r4
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	191b      	adds	r3, r3, r4
 8007eea:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 8007eec:	4299      	cmp	r1, r3
 8007eee:	d01c      	beq.n	8007f2a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8007ef0:	00c2      	lsls	r2, r0, #3
 8007ef2:	1812      	adds	r2, r2, r0
 8007ef4:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <CheckForTimedButtonRelease+0x74>)
 8007ef6:	189b      	adds	r3, r3, r2
 8007ef8:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 8007efa:	0163      	lsls	r3, r4, #5
 8007efc:	1b1b      	subs	r3, r3, r4
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	191b      	adds	r3, r3, r4
 8007f02:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 8007f04:	4299      	cmp	r1, r3
 8007f06:	d017      	beq.n	8007f38 <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 8007f08:	00c2      	lsls	r2, r0, #3
 8007f0a:	1812      	adds	r2, r2, r0
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <CheckForTimedButtonRelease+0x74>)
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 8007f12:	0163      	lsls	r3, r4, #5
 8007f14:	1b1b      	subs	r3, r3, r4
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	191b      	adds	r3, r3, r4
 8007f1a:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d109      	bne.n	8007f34 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007f20:	0010      	movs	r0, r2
 8007f22:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <CheckForTimedButtonRelease+0x74>)
 8007f24:	220d      	movs	r2, #13
 8007f26:	54c2      	strb	r2, [r0, r3]
 8007f28:	e004      	b.n	8007f34 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8007f2a:	00c3      	lsls	r3, r0, #3
 8007f2c:	1818      	adds	r0, r3, r0
 8007f2e:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <CheckForTimedButtonRelease+0x74>)
 8007f30:	220c      	movs	r2, #12
 8007f32:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007f38:	0010      	movs	r0, r2
 8007f3a:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <CheckForTimedButtonRelease+0x74>)
 8007f3c:	220d      	movs	r2, #13
 8007f3e:	54c2      	strb	r2, [r0, r3]
 8007f40:	e7f8      	b.n	8007f34 <CheckForTimedButtonRelease+0x64>
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	20000cb4 	.word	0x20000cb4
 8007f48:	20000d10 	.word	0x20000d10

08007f4c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	b08d      	sub	sp, #52	; 0x34
 8007f50:	0006      	movs	r6, r0
 8007f52:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8007f54:	4b41      	ldr	r3, [pc, #260]	; (800805c <AddPortButton+0x110>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d157      	bne.n	800800c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 8007f5c:	4b40      	ldr	r3, [pc, #256]	; (8008060 <AddPortButton+0x114>)
 8007f5e:	2204      	movs	r2, #4
 8007f60:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8007f62:	4b3e      	ldr	r3, [pc, #248]	; (800805c <AddPortButton+0x110>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d15a      	bne.n	8008020 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8007f6a:	2512      	movs	r5, #18
 8007f6c:	446d      	add	r5, sp
 8007f6e:	af04      	add	r7, sp, #16
 8007f70:	9700      	str	r7, [sp, #0]
 8007f72:	ab05      	add	r3, sp, #20
 8007f74:	002a      	movs	r2, r5
 8007f76:	a906      	add	r1, sp, #24
 8007f78:	0020      	movs	r0, r4
 8007f7a:	f004 ffcf 	bl	800cf1c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8007f7e:	882b      	ldrh	r3, [r5, #0]
 8007f80:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f82:	2301      	movs	r3, #1
 8007f84:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f86:	2500      	movs	r5, #0
 8007f88:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007f8a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8007f8c:	a907      	add	r1, sp, #28
 8007f8e:	9806      	ldr	r0, [sp, #24]
 8007f90:	f009 f990 	bl	80112b4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8007f94:	883b      	ldrh	r3, [r7, #0]
 8007f96:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f98:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 8007f9e:	a907      	add	r1, sp, #28
 8007fa0:	9805      	ldr	r0, [sp, #20]
 8007fa2:	f009 f987 	bl	80112b4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 8007fa6:	00e2      	lsls	r2, r4, #3
 8007fa8:	1912      	adds	r2, r2, r4
 8007faa:	4b2e      	ldr	r3, [pc, #184]	; (8008064 <AddPortButton+0x118>)
 8007fac:	189b      	adds	r3, r3, r2
 8007fae:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8007fb0:	0025      	movs	r5, r4
 8007fb2:	353a      	adds	r5, #58	; 0x3a
 8007fb4:	00ad      	lsls	r5, r5, #2
 8007fb6:	210e      	movs	r1, #14
 8007fb8:	4469      	add	r1, sp
 8007fba:	0028      	movs	r0, r5
 8007fbc:	f7ff faca 	bl	8007554 <EE_ReadVariable>
	if (!res)											// This variable exists
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d133      	bne.n	800802c <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 8007fc4:	230e      	movs	r3, #14
 8007fc6:	446b      	add	r3, sp
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8007fcc:	091a      	lsrs	r2, r3, #4
 8007fce:	42a2      	cmp	r2, r4
 8007fd0:	d103      	bne.n	8007fda <AddPortButton+0x8e>
 8007fd2:	220f      	movs	r2, #15
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	42b3      	cmp	r3, r6
 8007fd8:	d015      	beq.n	8008006 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 8007fda:	0324      	lsls	r4, r4, #12
 8007fdc:	0231      	lsls	r1, r6, #8
 8007fde:	4321      	orrs	r1, r4
 8007fe0:	b289      	uxth	r1, r1
 8007fe2:	230e      	movs	r3, #14
 8007fe4:	446b      	add	r3, sp
 8007fe6:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8007fe8:	0028      	movs	r0, r5
 8007fea:	f7ff fae3 	bl	80075b4 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8007fee:	1c68      	adds	r0, r5, #1
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f7ff fadf 	bl	80075b4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8007ff6:	1ca8      	adds	r0, r5, #2
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	f7ff fadb 	bl	80075b4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8007ffe:	1ce8      	adds	r0, r5, #3
 8008000:	2100      	movs	r1, #0
 8008002:	f7ff fad7 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 8008006:	2000      	movs	r0, #0
 8008008:	b00d      	add	sp, #52	; 0x34
 800800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800800c:	008d      	lsls	r5, r1, #2
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <AddPortButton+0x11c>)
 8008010:	58e8      	ldr	r0, [r5, r3]
 8008012:	f005 fe4f 	bl	800dcb4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <AddPortButton+0x120>)
 8008018:	58e8      	ldr	r0, [r5, r3]
 800801a:	f005 fe4b 	bl	800dcb4 <osSemaphoreRelease>
 800801e:	e79d      	b.n	8007f5c <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008020:	0020      	movs	r0, r4
 8008022:	f005 fcb1 	bl	800d988 <GetUart>
 8008026:	f00a fa96 	bl	8012556 <HAL_UART_DeInit>
 800802a:	e79e      	b.n	8007f6a <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800802c:	0324      	lsls	r4, r4, #12
 800802e:	0231      	lsls	r1, r6, #8
 8008030:	4321      	orrs	r1, r4
 8008032:	b289      	uxth	r1, r1
 8008034:	230e      	movs	r3, #14
 8008036:	446b      	add	r3, sp
 8008038:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800803a:	0028      	movs	r0, r5
 800803c:	f7ff faba 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008040:	1c68      	adds	r0, r5, #1
 8008042:	2100      	movs	r1, #0
 8008044:	f7ff fab6 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008048:	1ca8      	adds	r0, r5, #2
 800804a:	2100      	movs	r1, #0
 800804c:	f7ff fab2 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008050:	1ce8      	adds	r0, r5, #3
 8008052:	2100      	movs	r1, #0
 8008054:	f7ff faae 	bl	80075b4 <EE_WriteVariable>
 8008058:	e7d5      	b.n	8008006 <AddPortButton+0xba>
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	2000029d 	.word	0x2000029d
 8008060:	200008e0 	.word	0x200008e0
 8008064:	20000cb4 	.word	0x20000cb4
 8008068:	200061cc 	.word	0x200061cc
 800806c:	200061b0 	.word	0x200061b0

08008070 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008076:	4836      	ldr	r0, [pc, #216]	; (8008150 <RemovePortButton+0xe0>)
 8008078:	00e9      	lsls	r1, r5, #3
 800807a:	1949      	adds	r1, r1, r5
 800807c:	1842      	adds	r2, r0, r1
 800807e:	2300      	movs	r3, #0
 8008080:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8008082:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008084:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 8008086:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 8008088:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800808a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800808c:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800808e:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 8008090:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008092:	002c      	movs	r4, r5
 8008094:	343a      	adds	r4, #58	; 0x3a
 8008096:	00a4      	lsls	r4, r4, #2
 8008098:	466b      	mov	r3, sp
 800809a:	1d99      	adds	r1, r3, #6
 800809c:	0020      	movs	r0, r4
 800809e:	f7ff fa59 	bl	8007554 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d02b      	beq.n	80080fe <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 80080a6:	0028      	movs	r0, r5
 80080a8:	f005 fc6e 	bl	800d988 <GetUart>
 80080ac:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 80080ae:	6803      	ldr	r3, [r0, #0]
 80080b0:	4a28      	ldr	r2, [pc, #160]	; (8008154 <RemovePortButton+0xe4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d034      	beq.n	8008120 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 80080b6:	4a28      	ldr	r2, [pc, #160]	; (8008158 <RemovePortButton+0xe8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d035      	beq.n	8008128 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 80080bc:	4a27      	ldr	r2, [pc, #156]	; (800815c <RemovePortButton+0xec>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d036      	beq.n	8008130 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 80080c2:	4a27      	ldr	r2, [pc, #156]	; (8008160 <RemovePortButton+0xf0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d037      	beq.n	8008138 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 80080c8:	4a26      	ldr	r2, [pc, #152]	; (8008164 <RemovePortButton+0xf4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d03c      	beq.n	8008148 <RemovePortButton+0xd8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 80080ce:	4a26      	ldr	r2, [pc, #152]	; (8008168 <RemovePortButton+0xf8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d035      	beq.n	8008140 <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 80080d4:	4a25      	ldr	r2, [pc, #148]	; (800816c <RemovePortButton+0xfc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d038      	beq.n	800814c <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 80080da:	4a25      	ldr	r2, [pc, #148]	; (8008170 <RemovePortButton+0x100>)
 80080dc:	4694      	mov	ip, r2
 80080de:	4463      	add	r3, ip
 80080e0:	1e5c      	subs	r4, r3, #1
 80080e2:	41a3      	sbcs	r3, r4
 80080e4:	425c      	negs	r4, r3
 80080e6:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 80080e8:	4b22      	ldr	r3, [pc, #136]	; (8008174 <RemovePortButton+0x104>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 80080ee:	3201      	adds	r2, #1
 80080f0:	4921      	ldr	r1, [pc, #132]	; (8008178 <RemovePortButton+0x108>)
 80080f2:	0030      	movs	r0, r6
 80080f4:	f00a fa88 	bl	8012608 <HAL_UART_Receive_IT>

	return result;
}
 80080f8:	0020      	movs	r0, r4
 80080fa:	b002      	add	sp, #8
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 80080fe:	2100      	movs	r1, #0
 8008100:	0020      	movs	r0, r4
 8008102:	f7ff fa57 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008106:	1c60      	adds	r0, r4, #1
 8008108:	2100      	movs	r1, #0
 800810a:	f7ff fa53 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800810e:	1ca0      	adds	r0, r4, #2
 8008110:	2100      	movs	r1, #0
 8008112:	f7ff fa4f 	bl	80075b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008116:	1ce0      	adds	r0, r4, #3
 8008118:	2100      	movs	r1, #0
 800811a:	f7ff fa4b 	bl	80075b4 <EE_WriteVariable>
 800811e:	e7c2      	b.n	80080a6 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008120:	f005 fab2 	bl	800d688 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008124:	2400      	movs	r4, #0
 8008126:	e7df      	b.n	80080e8 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008128:	f005 fac6 	bl	800d6b8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800812c:	2400      	movs	r4, #0
 800812e:	e7db      	b.n	80080e8 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008130:	f005 fada 	bl	800d6e8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008134:	2400      	movs	r4, #0
 8008136:	e7d7      	b.n	80080e8 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008138:	f005 faee 	bl	800d718 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800813c:	2400      	movs	r4, #0
 800813e:	e7d3      	b.n	80080e8 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008140:	f005 fb02 	bl	800d748 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008144:	2400      	movs	r4, #0
 8008146:	e7cf      	b.n	80080e8 <RemovePortButton+0x78>
 8008148:	2400      	movs	r4, #0
 800814a:	e7cd      	b.n	80080e8 <RemovePortButton+0x78>
 800814c:	2400      	movs	r4, #0
 800814e:	e7cb      	b.n	80080e8 <RemovePortButton+0x78>
 8008150:	20000cb4 	.word	0x20000cb4
 8008154:	40013800 	.word	0x40013800
 8008158:	40004400 	.word	0x40004400
 800815c:	40004800 	.word	0x40004800
 8008160:	40004c00 	.word	0x40004c00
 8008164:	40005000 	.word	0x40005000
 8008168:	40011400 	.word	0x40011400
 800816c:	40011800 	.word	0x40011800
 8008170:	bffee400 	.word	0xbffee400
 8008174:	200008e0 	.word	0x200008e0
 8008178:	20000648 	.word	0x20000648

0800817c <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800817c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817e:	46de      	mov	lr, fp
 8008180:	4657      	mov	r7, sl
 8008182:	464e      	mov	r6, r9
 8008184:	4645      	mov	r5, r8
 8008186:	b5e0      	push	{r5, r6, r7, lr}
 8008188:	b085      	sub	sp, #20
 800818a:	0007      	movs	r7, r0
 800818c:	001e      	movs	r6, r3
 800818e:	ab0e      	add	r3, sp, #56	; 0x38
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4698      	mov	r8, r3
 8008194:	ab0f      	add	r3, sp, #60	; 0x3c
 8008196:	781d      	ldrb	r5, [r3, #0]
 8008198:	ab10      	add	r3, sp, #64	; 0x40
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	469b      	mov	fp, r3
 800819e:	ab11      	add	r3, sp, #68	; 0x44
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	469a      	mov	sl, r3
 80081a4:	ab12      	add	r3, sp, #72	; 0x48
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	4699      	mov	r9, r3
 80081aa:	ab13      	add	r3, sp, #76	; 0x4c
 80081ac:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 80081ae:	00fc      	lsls	r4, r7, #3
 80081b0:	19e4      	adds	r4, r4, r7
 80081b2:	4b9e      	ldr	r3, [pc, #632]	; (800842c <SetButtonEvents+0x2b0>)
 80081b4:	191b      	adds	r3, r3, r4
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d04c      	beq.n	8008256 <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 80081bc:	00fc      	lsls	r4, r7, #3
 80081be:	19e4      	adds	r4, r4, r7
 80081c0:	4b9a      	ldr	r3, [pc, #616]	; (800842c <SetButtonEvents+0x2b0>)
 80081c2:	191b      	adds	r3, r3, r4
 80081c4:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 80081c6:	4644      	mov	r4, r8
 80081c8:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 80081ca:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 80081cc:	465c      	mov	r4, fp
 80081ce:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 80081d0:	4654      	mov	r4, sl
 80081d2:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 80081d4:	464c      	mov	r4, r9
 80081d6:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 80081d8:	2801      	cmp	r0, #1
 80081da:	d003      	beq.n	80081e4 <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 80081dc:	2800      	cmp	r0, #0
 80081de:	d113      	bne.n	8008208 <SetButtonEvents+0x8c>
 80081e0:	2900      	cmp	r1, #0
 80081e2:	d042      	beq.n	800826a <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80081e4:	00f9      	lsls	r1, r7, #3
 80081e6:	19c9      	adds	r1, r1, r7
 80081e8:	4b90      	ldr	r3, [pc, #576]	; (800842c <SetButtonEvents+0x2b0>)
 80081ea:	185b      	adds	r3, r3, r1
 80081ec:	7a19      	ldrb	r1, [r3, #8]
 80081ee:	2401      	movs	r4, #1
 80081f0:	4321      	orrs	r1, r4
 80081f2:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 80081f4:	2801      	cmp	r0, #1
 80081f6:	d10c      	bne.n	8008212 <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80081f8:	00fa      	lsls	r2, r7, #3
 80081fa:	19d2      	adds	r2, r2, r7
 80081fc:	4b8b      	ldr	r3, [pc, #556]	; (800842c <SetButtonEvents+0x2b0>)
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	7a1a      	ldrb	r2, [r3, #8]
 8008202:	2102      	movs	r1, #2
 8008204:	430a      	orrs	r2, r1
 8008206:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 8008208:	2801      	cmp	r0, #1
 800820a:	d042      	beq.n	8008292 <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800820c:	2800      	cmp	r0, #0
 800820e:	d152      	bne.n	80082b6 <SetButtonEvents+0x13a>
 8008210:	e03d      	b.n	800828e <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 8008212:	2800      	cmp	r0, #0
 8008214:	d031      	beq.n	800827a <SetButtonEvents+0xfe>
 8008216:	e044      	b.n	80082a2 <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008218:	2800      	cmp	r0, #0
 800821a:	d059      	beq.n	80082d0 <SetButtonEvents+0x154>
 800821c:	e06d      	b.n	80082fa <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800821e:	2800      	cmp	r0, #0
 8008220:	d100      	bne.n	8008224 <SetButtonEvents+0xa8>
 8008222:	e082      	b.n	800832a <SetButtonEvents+0x1ae>
 8008224:	e097      	b.n	8008356 <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8008226:	2800      	cmp	r0, #0
 8008228:	d100      	bne.n	800822c <SetButtonEvents+0xb0>
 800822a:	e0f2      	b.n	8008412 <SetButtonEvents+0x296>
 800822c:	e09f      	b.n	800836e <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800822e:	0a19      	lsrs	r1, r3, #8
 8008230:	0209      	lsls	r1, r1, #8
 8008232:	4311      	orrs	r1, r2
 8008234:	ab02      	add	r3, sp, #8
 8008236:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008238:	0020      	movs	r0, r4
 800823a:	f7ff f9bb 	bl	80075b4 <EE_WriteVariable>
 800823e:	e0ad      	b.n	800839c <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 8008240:	0019      	movs	r1, r3
 8008242:	9801      	ldr	r0, [sp, #4]
 8008244:	f7ff f9b6 	bl	80075b4 <EE_WriteVariable>
 8008248:	e0b7      	b.n	80083ba <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800824a:	4653      	mov	r3, sl
 800824c:	4319      	orrs	r1, r3
 800824e:	0030      	movs	r0, r6
 8008250:	f7ff f9b0 	bl	80075b4 <EE_WriteVariable>
 8008254:	e0c0      	b.n	80083d8 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008256:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 8008258:	b005      	add	sp, #20
 800825a:	bc3c      	pop	{r2, r3, r4, r5}
 800825c:	4690      	mov	r8, r2
 800825e:	4699      	mov	r9, r3
 8008260:	46a2      	mov	sl, r4
 8008262:	46ab      	mov	fp, r5
 8008264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008266:	200b      	movs	r0, #11
 8008268:	e7f6      	b.n	8008258 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800826a:	00f9      	lsls	r1, r7, #3
 800826c:	19c9      	adds	r1, r1, r7
 800826e:	4b6f      	ldr	r3, [pc, #444]	; (800842c <SetButtonEvents+0x2b0>)
 8008270:	185b      	adds	r3, r3, r1
 8008272:	7a19      	ldrb	r1, [r3, #8]
 8008274:	2401      	movs	r4, #1
 8008276:	43a1      	bics	r1, r4
 8008278:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800827a:	2a00      	cmp	r2, #0
 800827c:	d1bc      	bne.n	80081f8 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800827e:	00fa      	lsls	r2, r7, #3
 8008280:	19d2      	adds	r2, r2, r7
 8008282:	4b6a      	ldr	r3, [pc, #424]	; (800842c <SetButtonEvents+0x2b0>)
 8008284:	189b      	adds	r3, r3, r2
 8008286:	7a1a      	ldrb	r2, [r3, #8]
 8008288:	2102      	movs	r1, #2
 800828a:	438a      	bics	r2, r1
 800828c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800828e:	2e00      	cmp	r6, #0
 8008290:	d016      	beq.n	80082c0 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008292:	00fa      	lsls	r2, r7, #3
 8008294:	19d2      	adds	r2, r2, r7
 8008296:	4b65      	ldr	r3, [pc, #404]	; (800842c <SetButtonEvents+0x2b0>)
 8008298:	189b      	adds	r3, r3, r2
 800829a:	7a1a      	ldrb	r2, [r3, #8]
 800829c:	2104      	movs	r1, #4
 800829e:	430a      	orrs	r2, r1
 80082a0:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80082a2:	2801      	cmp	r0, #1
 80082a4:	d1b8      	bne.n	8008218 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80082a6:	00fa      	lsls	r2, r7, #3
 80082a8:	19d2      	adds	r2, r2, r7
 80082aa:	4b60      	ldr	r3, [pc, #384]	; (800842c <SetButtonEvents+0x2b0>)
 80082ac:	189b      	adds	r3, r3, r2
 80082ae:	7a1a      	ldrb	r2, [r3, #8]
 80082b0:	2108      	movs	r1, #8
 80082b2:	430a      	orrs	r2, r1
 80082b4:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80082b6:	2801      	cmp	r0, #1
 80082b8:	d017      	beq.n	80082ea <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d128      	bne.n	8008310 <SetButtonEvents+0x194>
 80082be:	e012      	b.n	80082e6 <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80082c0:	00fa      	lsls	r2, r7, #3
 80082c2:	19d2      	adds	r2, r2, r7
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <SetButtonEvents+0x2b0>)
 80082c6:	189b      	adds	r3, r3, r2
 80082c8:	7a1a      	ldrb	r2, [r3, #8]
 80082ca:	2104      	movs	r1, #4
 80082cc:	438a      	bics	r2, r1
 80082ce:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 80082d0:	4643      	mov	r3, r8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e7      	bne.n	80082a6 <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80082d6:	00fa      	lsls	r2, r7, #3
 80082d8:	19d2      	adds	r2, r2, r7
 80082da:	4b54      	ldr	r3, [pc, #336]	; (800842c <SetButtonEvents+0x2b0>)
 80082dc:	189b      	adds	r3, r3, r2
 80082de:	7a1a      	ldrb	r2, [r3, #8]
 80082e0:	2108      	movs	r1, #8
 80082e2:	438a      	bics	r2, r1
 80082e4:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	d017      	beq.n	800831a <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80082ea:	00fa      	lsls	r2, r7, #3
 80082ec:	19d2      	adds	r2, r2, r7
 80082ee:	4b4f      	ldr	r3, [pc, #316]	; (800842c <SetButtonEvents+0x2b0>)
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	7a1a      	ldrb	r2, [r3, #8]
 80082f4:	2110      	movs	r1, #16
 80082f6:	430a      	orrs	r2, r1
 80082f8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80082fa:	2801      	cmp	r0, #1
 80082fc:	d000      	beq.n	8008300 <SetButtonEvents+0x184>
 80082fe:	e78e      	b.n	800821e <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008300:	00fa      	lsls	r2, r7, #3
 8008302:	19d2      	adds	r2, r2, r7
 8008304:	4b49      	ldr	r3, [pc, #292]	; (800842c <SetButtonEvents+0x2b0>)
 8008306:	189b      	adds	r3, r3, r2
 8008308:	7a1a      	ldrb	r2, [r3, #8]
 800830a:	2120      	movs	r1, #32
 800830c:	430a      	orrs	r2, r1
 800830e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008310:	2801      	cmp	r0, #1
 8008312:	d018      	beq.n	8008346 <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008314:	2800      	cmp	r0, #0
 8008316:	d12a      	bne.n	800836e <SetButtonEvents+0x1f2>
 8008318:	e012      	b.n	8008340 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800831a:	00fa      	lsls	r2, r7, #3
 800831c:	19d2      	adds	r2, r2, r7
 800831e:	4b43      	ldr	r3, [pc, #268]	; (800842c <SetButtonEvents+0x2b0>)
 8008320:	189b      	adds	r3, r3, r2
 8008322:	7a1a      	ldrb	r2, [r3, #8]
 8008324:	2110      	movs	r1, #16
 8008326:	438a      	bics	r2, r1
 8008328:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800832a:	465b      	mov	r3, fp
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e7      	bne.n	8008300 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008330:	00fa      	lsls	r2, r7, #3
 8008332:	19d2      	adds	r2, r2, r7
 8008334:	4b3d      	ldr	r3, [pc, #244]	; (800842c <SetButtonEvents+0x2b0>)
 8008336:	189b      	adds	r3, r3, r2
 8008338:	7a1a      	ldrb	r2, [r3, #8]
 800833a:	2120      	movs	r1, #32
 800833c:	438a      	bics	r2, r1
 800833e:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008340:	4653      	mov	r3, sl
 8008342:	2b00      	cmp	r3, #0
 8008344:	d05d      	beq.n	8008402 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008346:	00fa      	lsls	r2, r7, #3
 8008348:	19d2      	adds	r2, r2, r7
 800834a:	4b38      	ldr	r3, [pc, #224]	; (800842c <SetButtonEvents+0x2b0>)
 800834c:	189b      	adds	r3, r3, r2
 800834e:	7a1a      	ldrb	r2, [r3, #8]
 8008350:	2140      	movs	r1, #64	; 0x40
 8008352:	430a      	orrs	r2, r1
 8008354:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008356:	2801      	cmp	r0, #1
 8008358:	d000      	beq.n	800835c <SetButtonEvents+0x1e0>
 800835a:	e764      	b.n	8008226 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800835c:	00fa      	lsls	r2, r7, #3
 800835e:	19d2      	adds	r2, r2, r7
 8008360:	4b32      	ldr	r3, [pc, #200]	; (800842c <SetButtonEvents+0x2b0>)
 8008362:	189b      	adds	r3, r3, r2
 8008364:	7a19      	ldrb	r1, [r3, #8]
 8008366:	2280      	movs	r2, #128	; 0x80
 8008368:	4252      	negs	r2, r2
 800836a:	430a      	orrs	r2, r1
 800836c:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800836e:	003c      	movs	r4, r7
 8008370:	343a      	adds	r4, #58	; 0x3a
 8008372:	00a4      	lsls	r4, r4, #2
 8008374:	ab02      	add	r3, sp, #8
 8008376:	1d99      	adds	r1, r3, #6
 8008378:	0020      	movs	r0, r4
 800837a:	f7ff f8eb 	bl	8007554 <EE_ReadVariable>
	if (!res)											// This variable exists
 800837e:	2800      	cmp	r0, #0
 8008380:	d000      	beq.n	8008384 <SetButtonEvents+0x208>
 8008382:	e770      	b.n	8008266 <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 8008384:	ab02      	add	r3, sp, #8
 8008386:	3306      	adds	r3, #6
 8008388:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800838a:	00fa      	lsls	r2, r7, #3
 800838c:	19d2      	adds	r2, r2, r7
 800838e:	4f27      	ldr	r7, [pc, #156]	; (800842c <SetButtonEvents+0x2b0>)
 8008390:	18bf      	adds	r7, r7, r2
 8008392:	7a3a      	ldrb	r2, [r7, #8]
 8008394:	b2d9      	uxtb	r1, r3
 8008396:	4291      	cmp	r1, r2
 8008398:	d000      	beq.n	800839c <SetButtonEvents+0x220>
 800839a:	e748      	b.n	800822e <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800839c:	1c63      	adds	r3, r4, #1
 800839e:	aa02      	add	r2, sp, #8
 80083a0:	1d97      	adds	r7, r2, #6
 80083a2:	0039      	movs	r1, r7
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	0018      	movs	r0, r3
 80083a8:	f7ff f8d4 	bl	8007554 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 80083ac:	0236      	lsls	r6, r6, #8
 80083ae:	883a      	ldrh	r2, [r7, #0]
 80083b0:	465b      	mov	r3, fp
 80083b2:	4333      	orrs	r3, r6
		if (temp16
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d000      	beq.n	80083ba <SetButtonEvents+0x23e>
 80083b8:	e742      	b.n	8008240 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 80083ba:	1ca6      	adds	r6, r4, #2
 80083bc:	ab02      	add	r3, sp, #8
 80083be:	1d9f      	adds	r7, r3, #6
 80083c0:	0039      	movs	r1, r7
 80083c2:	0030      	movs	r0, r6
 80083c4:	f7ff f8c6 	bl	8007554 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 80083c8:	4643      	mov	r3, r8
 80083ca:	0219      	lsls	r1, r3, #8
 80083cc:	883a      	ldrh	r2, [r7, #0]
 80083ce:	4653      	mov	r3, sl
 80083d0:	430b      	orrs	r3, r1
		if (temp16
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d000      	beq.n	80083d8 <SetButtonEvents+0x25c>
 80083d6:	e738      	b.n	800824a <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 80083d8:	3403      	adds	r4, #3
 80083da:	ab02      	add	r3, sp, #8
 80083dc:	1d9e      	adds	r6, r3, #6
 80083de:	0031      	movs	r1, r6
 80083e0:	0020      	movs	r0, r4
 80083e2:	f7ff f8b7 	bl	8007554 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80083e6:	022d      	lsls	r5, r5, #8
 80083e8:	8832      	ldrh	r2, [r6, #0]
 80083ea:	464b      	mov	r3, r9
 80083ec:	432b      	orrs	r3, r5
	return result;
 80083ee:	2000      	movs	r0, #0
		if (temp16
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d100      	bne.n	80083f6 <SetButtonEvents+0x27a>
 80083f4:	e730      	b.n	8008258 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 80083f6:	0019      	movs	r1, r3
 80083f8:	0020      	movs	r0, r4
 80083fa:	f7ff f8db 	bl	80075b4 <EE_WriteVariable>
	return result;
 80083fe:	2000      	movs	r0, #0
 8008400:	e72a      	b.n	8008258 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008402:	00fa      	lsls	r2, r7, #3
 8008404:	19d2      	adds	r2, r2, r7
 8008406:	4b09      	ldr	r3, [pc, #36]	; (800842c <SetButtonEvents+0x2b0>)
 8008408:	189b      	adds	r3, r3, r2
 800840a:	7a1a      	ldrb	r2, [r3, #8]
 800840c:	2140      	movs	r1, #64	; 0x40
 800840e:	438a      	bics	r2, r1
 8008410:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8008412:	464b      	mov	r3, r9
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1a1      	bne.n	800835c <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008418:	00fa      	lsls	r2, r7, #3
 800841a:	19d2      	adds	r2, r2, r7
 800841c:	4b03      	ldr	r3, [pc, #12]	; (800842c <SetButtonEvents+0x2b0>)
 800841e:	189b      	adds	r3, r3, r2
 8008420:	7a19      	ldrb	r1, [r3, #8]
 8008422:	227f      	movs	r2, #127	; 0x7f
 8008424:	400a      	ands	r2, r1
 8008426:	721a      	strb	r2, [r3, #8]
 8008428:	e7a1      	b.n	800836e <SetButtonEvents+0x1f2>
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	20000cb4 	.word	0x20000cb4

08008430 <HAL_ADC_MspInit>:
	}

	ADC_flag = 1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8008430:	b510      	push	{r4, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	0004      	movs	r4, r0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008436:	2214      	movs	r2, #20
 8008438:	2100      	movs	r1, #0
 800843a:	a803      	add	r0, sp, #12
 800843c:	f00a fecc 	bl	80131d8 <memset>
	if (adcHandle->Instance == ADC1) {
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <HAL_ADC_MspInit+0x58>)
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d001      	beq.n	800844c <HAL_ADC_MspInit+0x1c>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008448:	b008      	add	sp, #32
 800844a:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <HAL_ADC_MspInit+0x5c>)
 800844e:	6999      	ldr	r1, [r3, #24]
 8008450:	2080      	movs	r0, #128	; 0x80
 8008452:	0080      	lsls	r0, r0, #2
 8008454:	4301      	orrs	r1, r0
 8008456:	6199      	str	r1, [r3, #24]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	4002      	ands	r2, r0
 800845c:	9201      	str	r2, [sp, #4]
 800845e:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	2180      	movs	r1, #128	; 0x80
 8008464:	0289      	lsls	r1, r1, #10
 8008466:	430a      	orrs	r2, r1
 8008468:	615a      	str	r2, [r3, #20]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	400b      	ands	r3, r1
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_5;
 8008472:	233c      	movs	r3, #60	; 0x3c
 8008474:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008476:	3b39      	subs	r3, #57	; 0x39
 8008478:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800847a:	3871      	subs	r0, #113	; 0x71
 800847c:	38ff      	subs	r0, #255	; 0xff
 800847e:	a903      	add	r1, sp, #12
 8008480:	05c0      	lsls	r0, r0, #23
 8008482:	f008 ff17 	bl	80112b4 <HAL_GPIO_Init>
}
 8008486:	e7df      	b.n	8008448 <HAL_ADC_MspInit+0x18>
 8008488:	40012400 	.word	0x40012400
 800848c:	40021000 	.word	0x40021000

08008490 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 8008490:	6803      	ldr	r3, [r0, #0]
 8008492:	4a0d      	ldr	r2, [pc, #52]	; (80084c8 <Get_channel+0x38>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 8008498:	4a0c      	ldr	r2, [pc, #48]	; (80084cc <Get_channel+0x3c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d008      	beq.n	80084b0 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800849e:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <Get_channel+0x40>)
 80084a2:	4299      	cmp	r1, r3
 80084a4:	d00c      	beq.n	80084c0 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <Get_channel+0x44>)
 80084a8:	4299      	cmp	r1, r3
 80084aa:	d1f8      	bne.n	800849e <Get_channel+0xe>
		return ADC_CHANNEL_3;
 80084ac:	2003      	movs	r0, #3
 80084ae:	e7f6      	b.n	800849e <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <Get_channel+0x40>)
 80084b2:	4299      	cmp	r1, r3
 80084b4:	d006      	beq.n	80084c4 <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 80084b6:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <Get_channel+0x44>)
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d1f0      	bne.n	800849e <Get_channel+0xe>
		return ADC_CHANNEL_5;
 80084bc:	2005      	movs	r0, #5
 80084be:	e7ee      	b.n	800849e <Get_channel+0xe>
		return ADC_CHANNEL_2;
 80084c0:	2002      	movs	r0, #2
 80084c2:	e7ec      	b.n	800849e <Get_channel+0xe>
		return ADC_CHANNEL_4;
 80084c4:	2004      	movs	r0, #4
 80084c6:	e7ea      	b.n	800849e <Get_channel+0xe>
 80084c8:	40004400 	.word	0x40004400
 80084cc:	40011400 	.word	0x40011400
 80084d0:	080163bc 	.word	0x080163bc
 80084d4:	080163c0 	.word	0x080163c0

080084d8 <Error_Handler>:

void Error_Handler(void) {
 80084d8:	b510      	push	{r4, lr}

	HAL_Delay(100);
 80084da:	2064      	movs	r0, #100	; 0x64
 80084dc:	f007 fbca 	bl	800fc74 <HAL_Delay>

}
 80084e0:	bd10      	pop	{r4, pc}
	...

080084e4 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 80084e4:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 80084e6:	4811      	ldr	r0, [pc, #68]	; (800852c <MX_ADC_Init+0x48>)
 80084e8:	4b11      	ldr	r3, [pc, #68]	; (8008530 <MX_ADC_Init+0x4c>)
 80084ea:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	061b      	lsls	r3, r3, #24
 80084f0:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80084f2:	2300      	movs	r3, #0
 80084f4:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80084f6:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80084f8:	2201      	movs	r2, #1
 80084fa:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80084fc:	2104      	movs	r1, #4
 80084fe:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008500:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008502:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008504:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8008506:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008508:	21c2      	movs	r1, #194	; 0xc2
 800850a:	31ff      	adds	r1, #255	; 0xff
 800850c:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800850e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008510:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008512:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8008514:	f007 fc88 	bl	800fe28 <HAL_ADC_Init>
 8008518:	2800      	cmp	r0, #0
 800851a:	d103      	bne.n	8008524 <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <MX_ADC_Init+0x50>)
 800851e:	2201      	movs	r2, #1
 8008520:	701a      	strb	r2, [r3, #0]
}
 8008522:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008524:	f7ff ffd8 	bl	80084d8 <Error_Handler>
 8008528:	e7f8      	b.n	800851c <MX_ADC_Init+0x38>
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	200061e8 	.word	0x200061e8
 8008530:	40012400 	.word	0x40012400
 8008534:	20000ca1 	.word	0x20000ca1

08008538 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	0006      	movs	r6, r0
 800853c:	000d      	movs	r5, r1
	if (0 == ADC_flag) MX_ADC_Init();
 800853e:	4b44      	ldr	r3, [pc, #272]	; (8008650 <ReadTempAndVref+0x118>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d100      	bne.n	8008548 <ReadTempAndVref+0x10>
 8008546:	e073      	b.n	8008630 <ReadTempAndVref+0xf8>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008548:	4942      	ldr	r1, [pc, #264]	; (8008654 <ReadTempAndVref+0x11c>)
 800854a:	2310      	movs	r3, #16
 800854c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800854e:	2380      	movs	r3, #128	; 0x80
 8008550:	015b      	lsls	r3, r3, #5
 8008552:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008554:	2301      	movs	r3, #1
 8008556:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008558:	483f      	ldr	r0, [pc, #252]	; (8008658 <ReadTempAndVref+0x120>)
 800855a:	f007 fdef 	bl	801013c <HAL_ADC_ConfigChannel>
 800855e:	2800      	cmp	r0, #0
 8008560:	d000      	beq.n	8008564 <ReadTempAndVref+0x2c>
 8008562:	e068      	b.n	8008636 <ReadTempAndVref+0xfe>
	HAL_ADC_Start_IT(&hadc);
 8008564:	4c3c      	ldr	r4, [pc, #240]	; (8008658 <ReadTempAndVref+0x120>)
 8008566:	0020      	movs	r0, r4
 8008568:	f007 fd06 	bl	800ff78 <HAL_ADC_Start_IT>
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800856c:	4b3b      	ldr	r3, [pc, #236]	; (800865c <ReadTempAndVref+0x124>)
 800856e:	8818      	ldrh	r0, [r3, #0]
 8008570:	f7fa f964 	bl	800283c <__aeabi_i2d>
 8008574:	4a3a      	ldr	r2, [pc, #232]	; (8008660 <ReadTempAndVref+0x128>)
 8008576:	4b3b      	ldr	r3, [pc, #236]	; (8008664 <ReadTempAndVref+0x12c>)
 8008578:	f7f9 fb70 	bl	8001c5c <__aeabi_dmul>
 800857c:	2200      	movs	r2, #0
 800857e:	4b3a      	ldr	r3, [pc, #232]	; (8008668 <ReadTempAndVref+0x130>)
 8008580:	f7f8 ff62 	bl	8001448 <__aeabi_ddiv>
 8008584:	4a39      	ldr	r2, [pc, #228]	; (800866c <ReadTempAndVref+0x134>)
 8008586:	4b3a      	ldr	r3, [pc, #232]	; (8008670 <ReadTempAndVref+0x138>)
 8008588:	f7f9 fdda 	bl	8002140 <__aeabi_dsub>
 800858c:	4a39      	ldr	r2, [pc, #228]	; (8008674 <ReadTempAndVref+0x13c>)
 800858e:	4b3a      	ldr	r3, [pc, #232]	; (8008678 <ReadTempAndVref+0x140>)
 8008590:	f7f8 ff5a 	bl	8001448 <__aeabi_ddiv>
 8008594:	2200      	movs	r2, #0
 8008596:	4b39      	ldr	r3, [pc, #228]	; (800867c <ReadTempAndVref+0x144>)
 8008598:	f7f8 fc3a 	bl	8000e10 <__aeabi_dadd>
 800859c:	f7fa fa0c 	bl	80029b8 <__aeabi_d2f>
 80085a0:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop_IT(&hadc);
 80085a2:	0020      	movs	r0, r4
 80085a4:	f007 fd2c 	bl	8010000 <HAL_ADC_Stop_IT>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80085a8:	492a      	ldr	r1, [pc, #168]	; (8008654 <ReadTempAndVref+0x11c>)
 80085aa:	2310      	movs	r3, #16
 80085ac:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80085ae:	4b34      	ldr	r3, [pc, #208]	; (8008680 <ReadTempAndVref+0x148>)
 80085b0:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80085b2:	2301      	movs	r3, #1
 80085b4:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80085b6:	0020      	movs	r0, r4
 80085b8:	f007 fdc0 	bl	801013c <HAL_ADC_ConfigChannel>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d13d      	bne.n	800863c <ReadTempAndVref+0x104>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80085c0:	4924      	ldr	r1, [pc, #144]	; (8008654 <ReadTempAndVref+0x11c>)
 80085c2:	2311      	movs	r3, #17
 80085c4:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80085c6:	2380      	movs	r3, #128	; 0x80
 80085c8:	015b      	lsls	r3, r3, #5
 80085ca:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80085cc:	2305      	movs	r3, #5
 80085ce:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80085d0:	4821      	ldr	r0, [pc, #132]	; (8008658 <ReadTempAndVref+0x120>)
 80085d2:	f007 fdb3 	bl	801013c <HAL_ADC_ConfigChannel>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d133      	bne.n	8008642 <ReadTempAndVref+0x10a>
	HAL_ADC_Start_IT(&hadc);
 80085da:	4c1f      	ldr	r4, [pc, #124]	; (8008658 <ReadTempAndVref+0x120>)
 80085dc:	0020      	movs	r0, r4
 80085de:	f007 fccb 	bl	800ff78 <HAL_ADC_Start_IT>
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 80085e2:	4b28      	ldr	r3, [pc, #160]	; (8008684 <ReadTempAndVref+0x14c>)
 80085e4:	8818      	ldrh	r0, [r3, #0]
 80085e6:	f7fa f929 	bl	800283c <__aeabi_i2d>
 80085ea:	4a1d      	ldr	r2, [pc, #116]	; (8008660 <ReadTempAndVref+0x128>)
 80085ec:	4b1d      	ldr	r3, [pc, #116]	; (8008664 <ReadTempAndVref+0x12c>)
 80085ee:	f7f9 fb35 	bl	8001c5c <__aeabi_dmul>
 80085f2:	0006      	movs	r6, r0
 80085f4:	000f      	movs	r7, r1
 80085f6:	4b24      	ldr	r3, [pc, #144]	; (8008688 <ReadTempAndVref+0x150>)
 80085f8:	8818      	ldrh	r0, [r3, #0]
 80085fa:	f7fa f91f 	bl	800283c <__aeabi_i2d>
 80085fe:	0002      	movs	r2, r0
 8008600:	000b      	movs	r3, r1
 8008602:	0030      	movs	r0, r6
 8008604:	0039      	movs	r1, r7
 8008606:	f7f8 ff1f 	bl	8001448 <__aeabi_ddiv>
 800860a:	f7fa f9d5 	bl	80029b8 <__aeabi_d2f>
 800860e:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop_IT(&hadc);
 8008610:	0020      	movs	r0, r4
 8008612:	f007 fcf5 	bl	8010000 <HAL_ADC_Stop_IT>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008616:	490f      	ldr	r1, [pc, #60]	; (8008654 <ReadTempAndVref+0x11c>)
 8008618:	2311      	movs	r3, #17
 800861a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800861c:	4b18      	ldr	r3, [pc, #96]	; (8008680 <ReadTempAndVref+0x148>)
 800861e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008620:	2301      	movs	r3, #1
 8008622:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008624:	0020      	movs	r0, r4
 8008626:	f007 fd89 	bl	801013c <HAL_ADC_ConfigChannel>
 800862a:	2800      	cmp	r0, #0
 800862c:	d10c      	bne.n	8008648 <ReadTempAndVref+0x110>
}
 800862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == ADC_flag) MX_ADC_Init();
 8008630:	f7ff ff58 	bl	80084e4 <MX_ADC_Init>
 8008634:	e788      	b.n	8008548 <ReadTempAndVref+0x10>
		Error_Handler();
 8008636:	f7ff ff4f 	bl	80084d8 <Error_Handler>
 800863a:	e793      	b.n	8008564 <ReadTempAndVref+0x2c>
		Error_Handler();
 800863c:	f7ff ff4c 	bl	80084d8 <Error_Handler>
 8008640:	e7be      	b.n	80085c0 <ReadTempAndVref+0x88>
		Error_Handler();
 8008642:	f7ff ff49 	bl	80084d8 <Error_Handler>
 8008646:	e7c8      	b.n	80085da <ReadTempAndVref+0xa2>
		Error_Handler();
 8008648:	f7ff ff46 	bl	80084d8 <Error_Handler>
}
 800864c:	e7ef      	b.n	800862e <ReadTempAndVref+0xf6>
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	20000ca1 	.word	0x20000ca1
 8008654:	20000d28 	.word	0x20000d28
 8008658:	200061e8 	.word	0x200061e8
 800865c:	20000ca4 	.word	0x20000ca4
 8008660:	66666666 	.word	0x66666666
 8008664:	400a6666 	.word	0x400a6666
 8008668:	40affe00 	.word	0x40affe00
 800866c:	28f5c28f 	.word	0x28f5c28f
 8008670:	3ff68f5c 	.word	0x3ff68f5c
 8008674:	33333333 	.word	0x33333333
 8008678:	40113333 	.word	0x40113333
 800867c:	40390000 	.word	0x40390000
 8008680:	00001001 	.word	0x00001001
 8008684:	1ffff7ba 	.word	0x1ffff7ba
 8008688:	20000ca2 	.word	0x20000ca2

0800868c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	0004      	movs	r4, r0
 8008692:	000d      	movs	r5, r1
	ADC_MODE=1;
 8008694:	4b3e      	ldr	r3, [pc, #248]	; (8008790 <GetReadPrecentage+0x104>)
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
	if (port == 2 || port == 3) {
 800869a:	1e83      	subs	r3, r0, #2
 800869c:	2b01      	cmp	r3, #1
 800869e:	d901      	bls.n	80086a4 <GetReadPrecentage+0x18>
}
 80086a0:	b006      	add	sp, #24
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 80086a4:	4b3b      	ldr	r3, [pc, #236]	; (8008794 <GetReadPrecentage+0x108>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d04d      	beq.n	8008748 <GetReadPrecentage+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80086ac:	2090      	movs	r0, #144	; 0x90
 80086ae:	2201      	movs	r2, #1
 80086b0:	2110      	movs	r1, #16
 80086b2:	05c0      	lsls	r0, r0, #23
 80086b4:	f008 ff72 	bl	801159c <HAL_GPIO_WritePin>
		Channel = Get_channel(GetUart(port), "bottom");
 80086b8:	0020      	movs	r0, r4
 80086ba:	f005 f965 	bl	800d988 <GetUart>
 80086be:	4936      	ldr	r1, [pc, #216]	; (8008798 <GetReadPrecentage+0x10c>)
 80086c0:	f7ff fee6 	bl	8008490 <Get_channel>
 80086c4:	4b35      	ldr	r3, [pc, #212]	; (800879c <GetReadPrecentage+0x110>)
 80086c6:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 80086c8:	4935      	ldr	r1, [pc, #212]	; (80087a0 <GetReadPrecentage+0x114>)
 80086ca:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80086cc:	2380      	movs	r3, #128	; 0x80
 80086ce:	015b      	lsls	r3, r3, #5
 80086d0:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80086d2:	2301      	movs	r3, #1
 80086d4:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80086d6:	4833      	ldr	r0, [pc, #204]	; (80087a4 <GetReadPrecentage+0x118>)
 80086d8:	f007 fd30 	bl	801013c <HAL_ADC_ConfigChannel>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d153      	bne.n	8008788 <GetReadPrecentage+0xfc>
		HAL_ADC_Start_IT(&hadc);
 80086e0:	4c30      	ldr	r4, [pc, #192]	; (80087a4 <GetReadPrecentage+0x118>)
 80086e2:	0020      	movs	r0, r4
 80086e4:	f007 fc48 	bl	800ff78 <HAL_ADC_Start_IT>
		ADCchannelvalue[4] = 3.3 * ADCchannelvalue[4] / 4095;
 80086e8:	4e2f      	ldr	r6, [pc, #188]	; (80087a8 <GetReadPrecentage+0x11c>)
 80086ea:	8930      	ldrh	r0, [r6, #8]
 80086ec:	f7fa f8a6 	bl	800283c <__aeabi_i2d>
 80086f0:	4a2e      	ldr	r2, [pc, #184]	; (80087ac <GetReadPrecentage+0x120>)
 80086f2:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <GetReadPrecentage+0x124>)
 80086f4:	f7f9 fab2 	bl	8001c5c <__aeabi_dmul>
 80086f8:	2200      	movs	r2, #0
 80086fa:	4b2e      	ldr	r3, [pc, #184]	; (80087b4 <GetReadPrecentage+0x128>)
 80086fc:	f7f8 fea4 	bl	8001448 <__aeabi_ddiv>
 8008700:	f7f7 ff4c 	bl	800059c <__aeabi_d2uiz>
 8008704:	b280      	uxth	r0, r0
 8008706:	8130      	strh	r0, [r6, #8]
		current=(100*ADCchannelvalue[4])/3.3;
 8008708:	2364      	movs	r3, #100	; 0x64
 800870a:	4358      	muls	r0, r3
 800870c:	f7fa f896 	bl	800283c <__aeabi_i2d>
 8008710:	4a26      	ldr	r2, [pc, #152]	; (80087ac <GetReadPrecentage+0x120>)
 8008712:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <GetReadPrecentage+0x124>)
 8008714:	f7f8 fe98 	bl	8001448 <__aeabi_ddiv>
 8008718:	f7fa f94e 	bl	80029b8 <__aeabi_d2f>
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <GetReadPrecentage+0x12c>)
 800871e:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 8008720:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop_IT(&hadc);
 8008722:	0020      	movs	r0, r4
 8008724:	f007 fc6c 	bl	8010000 <HAL_ADC_Stop_IT>
		sConfig.Channel = Channel;
 8008728:	491d      	ldr	r1, [pc, #116]	; (80087a0 <GetReadPrecentage+0x114>)
 800872a:	4b1c      	ldr	r3, [pc, #112]	; (800879c <GetReadPrecentage+0x110>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <GetReadPrecentage+0x130>)
 8008732:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008734:	2301      	movs	r3, #1
 8008736:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008738:	0020      	movs	r0, r4
 800873a:	f007 fcff 	bl	801013c <HAL_ADC_ConfigChannel>
 800873e:	2800      	cmp	r0, #0
 8008740:	d0ae      	beq.n	80086a0 <GetReadPrecentage+0x14>
			Error_Handler();
 8008742:	f7ff fec9 	bl	80084d8 <Error_Handler>
 8008746:	e7ab      	b.n	80086a0 <GetReadPrecentage+0x14>
			MX_ADC_Init();
 8008748:	f7ff fecc 	bl	80084e4 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800874c:	0020      	movs	r0, r4
 800874e:	f005 f91b 	bl	800d988 <GetUart>
 8008752:	f009 ff00 	bl	8012556 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008756:	2690      	movs	r6, #144	; 0x90
 8008758:	05f6      	lsls	r6, r6, #23
 800875a:	2110      	movs	r1, #16
 800875c:	0030      	movs	r0, r6
 800875e:	f008 fe89 	bl	8011474 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008762:	4810      	ldr	r0, [pc, #64]	; (80087a4 <GetReadPrecentage+0x118>)
 8008764:	f007 fd8e 	bl	8010284 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008768:	2310      	movs	r3, #16
 800876a:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800876c:	3b0f      	subs	r3, #15
 800876e:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008770:	3302      	adds	r3, #2
 8008772:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008774:	a901      	add	r1, sp, #4
 8008776:	0030      	movs	r0, r6
 8008778:	f008 fd9c 	bl	80112b4 <HAL_GPIO_Init>
			portStatus[port - 1] = CUSTOM;
 800877c:	4b10      	ldr	r3, [pc, #64]	; (80087c0 <GetReadPrecentage+0x134>)
 800877e:	191b      	adds	r3, r3, r4
 8008780:	3b01      	subs	r3, #1
 8008782:	2206      	movs	r2, #6
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e791      	b.n	80086ac <GetReadPrecentage+0x20>
			Error_Handler();
 8008788:	f7ff fea6 	bl	80084d8 <Error_Handler>
 800878c:	e7a8      	b.n	80086e0 <GetReadPrecentage+0x54>
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	20000ca0 	.word	0x20000ca0
 8008794:	20000ca1 	.word	0x20000ca1
 8008798:	080163c0 	.word	0x080163c0
 800879c:	20000cb2 	.word	0x20000cb2
 80087a0:	20000d28 	.word	0x20000d28
 80087a4:	200061e8 	.word	0x200061e8
 80087a8:	20000ca8 	.word	0x20000ca8
 80087ac:	66666666 	.word	0x66666666
 80087b0:	400a6666 	.word	0x400a6666
 80087b4:	40affe00 	.word	0x40affe00
 80087b8:	20000cec 	.word	0x20000cec
 80087bc:	00001001 	.word	0x00001001
 80087c0:	200008e0 	.word	0x200008e0

080087c4 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 80087c4:	2802      	cmp	r0, #2
 80087c6:	d004      	beq.n	80087d2 <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 80087c8:	2803      	cmp	r0, #3
 80087ca:	d010      	beq.n	80087ee <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 80087cc:	4b0f      	ldr	r3, [pc, #60]	; (800880c <Get_Rank+0x48>)
 80087ce:	7818      	ldrb	r0, [r3, #0]
}
 80087d0:	4770      	bx	lr
	if (Port == 2 && side == "top")
 80087d2:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <Get_Rank+0x4c>)
 80087d4:	4299      	cmp	r1, r3
 80087d6:	d006      	beq.n	80087e6 <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 80087d8:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <Get_Rank+0x50>)
 80087da:	4299      	cmp	r1, r3
 80087dc:	d1f6      	bne.n	80087cc <Get_Rank+0x8>
		Rank_t = 1;
 80087de:	4b0b      	ldr	r3, [pc, #44]	; (800880c <Get_Rank+0x48>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
 80087e4:	e7f2      	b.n	80087cc <Get_Rank+0x8>
		Rank_t = 0;
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <Get_Rank+0x48>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e7ee      	b.n	80087cc <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 80087ee:	4b08      	ldr	r3, [pc, #32]	; (8008810 <Get_Rank+0x4c>)
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d006      	beq.n	8008802 <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <Get_Rank+0x50>)
 80087f6:	4299      	cmp	r1, r3
 80087f8:	d1e8      	bne.n	80087cc <Get_Rank+0x8>
		Rank_t = 3;
 80087fa:	4b04      	ldr	r3, [pc, #16]	; (800880c <Get_Rank+0x48>)
 80087fc:	2203      	movs	r2, #3
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e7e4      	b.n	80087cc <Get_Rank+0x8>
		Rank_t = 2;
 8008802:	4b02      	ldr	r3, [pc, #8]	; (800880c <Get_Rank+0x48>)
 8008804:	2202      	movs	r2, #2
 8008806:	701a      	strb	r2, [r3, #0]
 8008808:	e7e0      	b.n	80087cc <Get_Rank+0x8>
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	20000cb3 	.word	0x20000cb3
 8008810:	080163bc 	.word	0x080163bc
 8008814:	080163c0 	.word	0x080163c0

08008818 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	0004      	movs	r4, r0
 800881c:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800881e:	1e83      	subs	r3, r0, #2
 8008820:	2b01      	cmp	r3, #1
 8008822:	d900      	bls.n	8008826 <ADCSelectChannel+0xe>
}
 8008824:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008826:	f005 f8af 	bl	800d988 <GetUart>
 800882a:	f009 fe94 	bl	8012556 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800882e:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <ADCSelectChannel+0x4c>)
 8008830:	191b      	adds	r3, r3, r4
 8008832:	3b01      	subs	r3, #1
 8008834:	2206      	movs	r2, #6
 8008836:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008838:	0020      	movs	r0, r4
 800883a:	f005 f8a5 	bl	800d988 <GetUart>
 800883e:	0029      	movs	r1, r5
 8008840:	f7ff fe26 	bl	8008490 <Get_channel>
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <ADCSelectChannel+0x50>)
 8008846:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 8008848:	0029      	movs	r1, r5
 800884a:	0020      	movs	r0, r4
 800884c:	f7ff ffba 	bl	80087c4 <Get_Rank>
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <ADCSelectChannel+0x54>)
 8008852:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 8008854:	4b06      	ldr	r3, [pc, #24]	; (8008870 <ADCSelectChannel+0x58>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e3      	bne.n	8008824 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800885c:	f7ff fe42 	bl	80084e4 <MX_ADC_Init>
}
 8008860:	e7e0      	b.n	8008824 <ADCSelectChannel+0xc>
 8008862:	46c0      	nop			; (mov r8, r8)
 8008864:	200008e0 	.word	0x200008e0
 8008868:	20000cb2 	.word	0x20000cb2
 800886c:	20000cb3 	.word	0x20000cb3
 8008870:	20000ca1 	.word	0x20000ca1

08008874 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	0005      	movs	r5, r0
 8008878:	000e      	movs	r6, r1
 800887a:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800887c:	4b23      	ldr	r3, [pc, #140]	; (800890c <ReadADCChannel+0x98>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d008      	beq.n	8008896 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008884:	4b22      	ldr	r3, [pc, #136]	; (8008910 <ReadADCChannel+0x9c>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4a22      	ldr	r2, [pc, #136]	; (8008914 <ReadADCChannel+0xa0>)
 800888c:	5a98      	ldrh	r0, [r3, r2]
 800888e:	f7f8 fa7f 	bl	8000d90 <__aeabi_ui2f>
 8008892:	6020      	str	r0, [r4, #0]
}
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC_MODE=0;
 8008896:	4b20      	ldr	r3, [pc, #128]	; (8008918 <ReadADCChannel+0xa4>)
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(Port), side);
 800889c:	f005 f874 	bl	800d988 <GetUart>
 80088a0:	0031      	movs	r1, r6
 80088a2:	f7ff fdf5 	bl	8008490 <Get_channel>
 80088a6:	4f1d      	ldr	r7, [pc, #116]	; (800891c <ReadADCChannel+0xa8>)
 80088a8:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 80088aa:	0031      	movs	r1, r6
 80088ac:	0028      	movs	r0, r5
 80088ae:	f7ff ff89 	bl	80087c4 <Get_Rank>
 80088b2:	4b17      	ldr	r3, [pc, #92]	; (8008910 <ReadADCChannel+0x9c>)
 80088b4:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 80088b6:	491a      	ldr	r1, [pc, #104]	; (8008920 <ReadADCChannel+0xac>)
 80088b8:	783b      	ldrb	r3, [r7, #0]
 80088ba:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80088bc:	2380      	movs	r3, #128	; 0x80
 80088be:	015b      	lsls	r3, r3, #5
 80088c0:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80088c2:	2303      	movs	r3, #3
 80088c4:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80088c6:	4817      	ldr	r0, [pc, #92]	; (8008924 <ReadADCChannel+0xb0>)
 80088c8:	f007 fc38 	bl	801013c <HAL_ADC_ConfigChannel>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d119      	bne.n	8008904 <ReadADCChannel+0x90>
		HAL_ADC_Start_IT(&hadc);
 80088d0:	4d14      	ldr	r5, [pc, #80]	; (8008924 <ReadADCChannel+0xb0>)
 80088d2:	0028      	movs	r0, r5
 80088d4:	f007 fb50 	bl	800ff78 <HAL_ADC_Start_IT>
		Delay_us(10);
 80088d8:	200a      	movs	r0, #10
 80088da:	f004 feb1 	bl	800d640 <StartMicroDelay>
		HAL_ADC_Stop_IT(&hadc);
 80088de:	0028      	movs	r0, r5
 80088e0:	f007 fb8e 	bl	8010000 <HAL_ADC_Stop_IT>
		sConfig.Channel = Channel;
 80088e4:	490e      	ldr	r1, [pc, #56]	; (8008920 <ReadADCChannel+0xac>)
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <ReadADCChannel+0xa8>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <ReadADCChannel+0xb4>)
 80088ee:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80088f0:	2303      	movs	r3, #3
 80088f2:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80088f4:	0028      	movs	r0, r5
 80088f6:	f007 fc21 	bl	801013c <HAL_ADC_ConfigChannel>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0c2      	beq.n	8008884 <ReadADCChannel+0x10>
			Error_Handler();
 80088fe:	f7ff fdeb 	bl	80084d8 <Error_Handler>
 8008902:	e7bf      	b.n	8008884 <ReadADCChannel+0x10>
			Error_Handler();
 8008904:	f7ff fde8 	bl	80084d8 <Error_Handler>
 8008908:	e7e2      	b.n	80088d0 <ReadADCChannel+0x5c>
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	20000ca1 	.word	0x20000ca1
 8008910:	20000cb3 	.word	0x20000cb3
 8008914:	20000ca8 	.word	0x20000ca8
 8008918:	20000ca0 	.word	0x20000ca0
 800891c:	20000cb2 	.word	0x20000cb2
 8008920:	20000d28 	.word	0x20000d28
 8008924:	200061e8 	.word	0x200061e8
 8008928:	00001001 	.word	0x00001001

0800892c <HAL_ADC_ConvCpltCallback>:
	portStatus[port - 1] = FREE;
	ADC_flag = 0;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800892c:	b510      	push	{r4, lr}

	if(hadc->Instance->CHSELR==ADC_CHANNEL_7){ Volt_buffer[0]=HAL_ADC_GetValue(hadc);}
 800892e:	6803      	ldr	r3, [r0, #0]
 8008930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008932:	2a07      	cmp	r2, #7
 8008934:	d006      	beq.n	8008944 <HAL_ADC_ConvCpltCallback+0x18>

	else if (hadc->Instance->CHSELR=ADC_CHANNEL_16){ ADC_value_temp = HAL_ADC_GetValue(hadc);}
 8008936:	2210      	movs	r2, #16
 8008938:	629a      	str	r2, [r3, #40]	; 0x28
 800893a:	f007 fb89 	bl	8010050 <HAL_ADC_GetValue>
 800893e:	4b04      	ldr	r3, [pc, #16]	; (8008950 <HAL_ADC_ConvCpltCallback+0x24>)
 8008940:	8018      	strh	r0, [r3, #0]
			ADCchannelvalue[4] = HAL_ADC_GetValue(hadc);

		}

	}
}
 8008942:	bd10      	pop	{r4, pc}
	if(hadc->Instance->CHSELR==ADC_CHANNEL_7){ Volt_buffer[0]=HAL_ADC_GetValue(hadc);}
 8008944:	f007 fb84 	bl	8010050 <HAL_ADC_GetValue>
 8008948:	4b02      	ldr	r3, [pc, #8]	; (8008954 <HAL_ADC_ConvCpltCallback+0x28>)
 800894a:	6018      	str	r0, [r3, #0]
 800894c:	e7f9      	b.n	8008942 <HAL_ADC_ConvCpltCallback+0x16>
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	20000ca4 	.word	0x20000ca4
 8008954:	20000f20 	.word	0x20000f20

08008958 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 8008958:	4770      	bx	lr

0800895a <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800895a:	4770      	bx	lr

0800895c <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800895c:	4770      	bx	lr

0800895e <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800895e:	4770      	bx	lr

08008960 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 8008960:	4770      	bx	lr
	...

08008964 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008966:	46de      	mov	lr, fp
 8008968:	4657      	mov	r7, sl
 800896a:	464e      	mov	r6, r9
 800896c:	4645      	mov	r5, r8
 800896e:	b5e0      	push	{r5, r6, r7, lr}
 8008970:	b089      	sub	sp, #36	; 0x24
 8008972:	4dbd      	ldr	r5, [pc, #756]	; (8008c68 <CheckAttachedButtons+0x304>)
 8008974:	2404      	movs	r4, #4
 8008976:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	469b      	mov	fp, r3
 800897c:	4699      	mov	r9, r3
 800897e:	e111      	b.n	8008ba4 <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 8008980:	230e      	movs	r3, #14
 8008982:	aa02      	add	r2, sp, #8
 8008984:	4694      	mov	ip, r2
 8008986:	4463      	add	r3, ip
 8008988:	8819      	ldrh	r1, [r3, #0]
 800898a:	2201      	movs	r2, #1
 800898c:	9807      	ldr	r0, [sp, #28]
 800898e:	f008 fe05 	bl	801159c <HAL_GPIO_WritePin>
				Delay_us(10);
 8008992:	200a      	movs	r0, #10
 8008994:	f004 fe54 	bl	800d640 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8008998:	ab05      	add	r3, sp, #20
 800899a:	8819      	ldrh	r1, [r3, #0]
 800899c:	9806      	ldr	r0, [sp, #24]
 800899e:	f008 fdf7 	bl	8011590 <HAL_GPIO_ReadPin>
 80089a2:	4681      	mov	r9, r0
 80089a4:	e126      	b.n	8008bf4 <CheckAttachedButtons+0x290>
			switch (button[i].type) {
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 80089aa:	464b      	mov	r3, r9
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d046      	beq.n	8008a3e <CheckAttachedButtons+0xda>
				else if (connected == GPIO_PIN_RESET)
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d100      	bne.n	80089b6 <CheckAttachedButtons+0x52>
 80089b4:	e1c6      	b.n	8008d44 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 80089b6:	465b      	mov	r3, fp
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d001      	beq.n	80089c0 <CheckAttachedButtons+0x5c>
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d107      	bne.n	80089d0 <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)
 80089c0:	4baa      	ldr	r3, [pc, #680]	; (8008c6c <CheckAttachedButtons+0x308>)
 80089c2:	58e3      	ldr	r3, [r4, r3]
 80089c4:	4aaa      	ldr	r2, [pc, #680]	; (8008c70 <CheckAttachedButtons+0x30c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d842      	bhi.n	8008a50 <CheckAttachedButtons+0xec>
					++pressCounter[i];			// Advance the debounce counter
 80089ca:	3301      	adds	r3, #1
 80089cc:	4aa7      	ldr	r2, [pc, #668]	; (8008c6c <CheckAttachedButtons+0x308>)
 80089ce:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 80089d0:	23fd      	movs	r3, #253	; 0xfd
 80089d2:	465a      	mov	r2, fp
 80089d4:	4013      	ands	r3, r2
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d100      	bne.n	80089dc <CheckAttachedButtons+0x78>
 80089da:	e1b7      	b.n	8008d4c <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 80089dc:	4ba3      	ldr	r3, [pc, #652]	; (8008c6c <CheckAttachedButtons+0x308>)
 80089de:	58e3      	ldr	r3, [r4, r3]
 80089e0:	4aa4      	ldr	r2, [pc, #656]	; (8008c74 <CheckAttachedButtons+0x310>)
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d36f      	bcc.n	8008ac8 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce) {
 80089e8:	d045      	beq.n	8008a76 <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 80089ea:	4ba3      	ldr	r3, [pc, #652]	; (8008c78 <CheckAttachedButtons+0x314>)
 80089ec:	58e3      	ldr	r3, [r4, r3]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d202      	bcs.n	80089f8 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;
 80089f2:	4ba1      	ldr	r3, [pc, #644]	; (8008c78 <CheckAttachedButtons+0x314>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 80089f8:	4b9c      	ldr	r3, [pc, #624]	; (8008c6c <CheckAttachedButtons+0x308>)
 80089fa:	58e3      	ldr	r3, [r4, r3]
 80089fc:	4a9d      	ldr	r2, [pc, #628]	; (8008c74 <CheckAttachedButtons+0x310>)
 80089fe:	8852      	ldrh	r2, [r2, #2]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d952      	bls.n	8008aaa <CheckAttachedButtons+0x146>
						&& pressCounter[i] < 500) {
 8008a04:	22f4      	movs	r2, #244	; 0xf4
 8008a06:	32ff      	adds	r2, #255	; 0xff
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d84e      	bhi.n	8008aaa <CheckAttachedButtons+0x146>
					if (clicked == 0)
 8008a0c:	4b9b      	ldr	r3, [pc, #620]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d137      	bne.n	8008a84 <CheckAttachedButtons+0x120>
						clicked = 1;		// Record a possible single click
 8008a14:	4b99      	ldr	r3, [pc, #612]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008a16:	3af3      	subs	r2, #243	; 0xf3
 8008a18:	3aff      	subs	r2, #255	; 0xff
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e054      	b.n	8008ac8 <CheckAttachedButtons+0x164>
				if (connected == GPIO_PIN_SET)
 8008a1e:	464b      	mov	r3, r9
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d00f      	beq.n	8008a44 <CheckAttachedButtons+0xe0>
				else if (connected == GPIO_PIN_RESET)
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1c6      	bne.n	80089b6 <CheckAttachedButtons+0x52>
					state = OPEN;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	469b      	mov	fp, r3
 8008a2c:	e18e      	b.n	8008d4c <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 8008a2e:	464b      	mov	r3, r9
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d00a      	beq.n	8008a4a <CheckAttachedButtons+0xe6>
				else if (connected == GPIO_PIN_RESET)
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1be      	bne.n	80089b6 <CheckAttachedButtons+0x52>
					state = OFF;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	469b      	mov	fp, r3
 8008a3c:	e186      	b.n	8008d4c <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 8008a3e:	2304      	movs	r3, #4
 8008a40:	469b      	mov	fp, r3
 8008a42:	e7bd      	b.n	80089c0 <CheckAttachedButtons+0x5c>
					state = CLOSED;
 8008a44:	2304      	movs	r3, #4
 8008a46:	469b      	mov	fp, r3
 8008a48:	e7ba      	b.n	80089c0 <CheckAttachedButtons+0x5c>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	469b      	mov	fp, r3
 8008a4e:	e7b7      	b.n	80089c0 <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;			// Reset debounce counter
 8008a50:	4b86      	ldr	r3, [pc, #536]	; (8008c6c <CheckAttachedButtons+0x308>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	50e2      	str	r2, [r4, r3]
 8008a56:	e7bb      	b.n	80089d0 <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;		// Reset debounce counter
 8008a58:	4b87      	ldr	r3, [pc, #540]	; (8008c78 <CheckAttachedButtons+0x314>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	50e2      	str	r2, [r4, r3]
 8008a5e:	e17e      	b.n	8008d5e <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 8008a60:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <CheckAttachedButtons+0x31c>)
 8008a62:	5cf3      	ldrb	r3, [r6, r3]
 8008a64:	4a83      	ldr	r2, [pc, #524]	; (8008c74 <CheckAttachedButtons+0x310>)
 8008a66:	7952      	ldrb	r2, [r2, #5]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d200      	bcs.n	8008a6e <CheckAttachedButtons+0x10a>
 8008a6c:	e183      	b.n	8008d76 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008a6e:	3301      	adds	r3, #1
 8008a70:	4a83      	ldr	r2, [pc, #524]	; (8008c80 <CheckAttachedButtons+0x31c>)
 8008a72:	54b3      	strb	r3, [r6, r2]
 8008a74:	e7b2      	b.n	80089dc <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8008a76:	2107      	movs	r1, #7
 8008a78:	4640      	mov	r0, r8
 8008a7a:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	497b      	ldr	r1, [pc, #492]	; (8008c6c <CheckAttachedButtons+0x308>)
 8008a80:	5063      	str	r3, [r4, r1]
 8008a82:	e7b2      	b.n	80089ea <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d11f      	bne.n	8008ac8 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8008a88:	4b7d      	ldr	r3, [pc, #500]	; (8008c80 <CheckAttachedButtons+0x31c>)
 8008a8a:	5cf3      	ldrb	r3, [r6, r3]
 8008a8c:	4a79      	ldr	r2, [pc, #484]	; (8008c74 <CheckAttachedButtons+0x310>)
 8008a8e:	7912      	ldrb	r2, [r2, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d219      	bcs.n	8008ac8 <CheckAttachedButtons+0x164>
										< BOS.buttons.maxInterClickTime) {
 8008a94:	4a77      	ldr	r2, [pc, #476]	; (8008c74 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 8008a96:	7952      	ldrb	r2, [r2, #5]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d915      	bls.n	8008ac8 <CheckAttachedButtons+0x164>
							clicked = 3;	// Record a possible double click
 8008a9c:	4b77      	ldr	r3, [pc, #476]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 8008aa2:	4b77      	ldr	r3, [pc, #476]	; (8008c80 <CheckAttachedButtons+0x31c>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	54f2      	strb	r2, [r6, r3]
 8008aa8:	e00e      	b.n	8008ac8 <CheckAttachedButtons+0x164>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8008aaa:	3bf5      	subs	r3, #245	; 0xf5
 8008aac:	3bff      	subs	r3, #255	; 0xff
 8008aae:	4a75      	ldr	r2, [pc, #468]	; (8008c84 <CheckAttachedButtons+0x320>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d809      	bhi.n	8008ac8 <CheckAttachedButtons+0x164>
					if (clicked)
 8008ab4:	4b71      	ldr	r3, [pc, #452]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <CheckAttachedButtons+0x15e>
						clicked = 0;						// Cannot be a click
 8008abc:	4b6f      	ldr	r3, [pc, #444]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008ac2:	9803      	ldr	r0, [sp, #12]
 8008ac4:	f7ff f9c6 	bl	8007e54 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8008ac8:	4b6b      	ldr	r3, [pc, #428]	; (8008c78 <CheckAttachedButtons+0x314>)
 8008aca:	58e3      	ldr	r3, [r4, r3]
 8008acc:	4a69      	ldr	r2, [pc, #420]	; (8008c74 <CheckAttachedButtons+0x310>)
 8008ace:	8812      	ldrh	r2, [r2, #0]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d34d      	bcc.n	8008b70 <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 8008ad4:	d02b      	beq.n	8008b2e <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008ad6:	4b65      	ldr	r3, [pc, #404]	; (8008c6c <CheckAttachedButtons+0x308>)
 8008ad8:	58e3      	ldr	r3, [r4, r3]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d202      	bcs.n	8008ae4 <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;
 8008ade:	4b63      	ldr	r3, [pc, #396]	; (8008c6c <CheckAttachedButtons+0x308>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 8008ae4:	4b64      	ldr	r3, [pc, #400]	; (8008c78 <CheckAttachedButtons+0x314>)
 8008ae6:	58e3      	ldr	r3, [r4, r3]
 8008ae8:	4a62      	ldr	r2, [pc, #392]	; (8008c74 <CheckAttachedButtons+0x310>)
 8008aea:	8852      	ldrh	r2, [r2, #2]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d93a      	bls.n	8008b66 <CheckAttachedButtons+0x202>
						&& releaseCounter[i] < 500) {
 8008af0:	22f4      	movs	r2, #244	; 0xf4
 8008af2:	32ff      	adds	r2, #255	; 0xff
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d836      	bhi.n	8008b66 <CheckAttachedButtons+0x202>
					if (clicked == 1) {
 8008af8:	4b60      	ldr	r3, [pc, #384]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d01d      	beq.n	8008b3c <CheckAttachedButtons+0x1d8>
					} else if (clicked == 3) {
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d135      	bne.n	8008b70 <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;// Record a double button click event
 8008b04:	3303      	adds	r3, #3
 8008b06:	4642      	mov	r2, r8
 8008b08:	7253      	strb	r3, [r2, #9]
						clicked = 0;			// Prepare for a single click
 8008b0a:	4b5c      	ldr	r3, [pc, #368]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 8008b10:	4b5d      	ldr	r3, [pc, #372]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d13f      	bne.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 8008b18:	4643      	mov	r3, r8
 8008b1a:	7c5b      	ldrb	r3, [r3, #17]
 8008b1c:	079b      	lsls	r3, r3, #30
 8008b1e:	d53b      	bpl.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008b20:	4b59      	ldr	r3, [pc, #356]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 8008b26:	9803      	ldr	r0, [sp, #12]
 8008b28:	f7ff ff18 	bl	800895c <buttonDblClickedCallback>
 8008b2c:	e034      	b.n	8008b98 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8008b2e:	2108      	movs	r1, #8
 8008b30:	4640      	mov	r0, r8
 8008b32:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 8008b34:	3301      	adds	r3, #1
 8008b36:	4950      	ldr	r1, [pc, #320]	; (8008c78 <CheckAttachedButtons+0x314>)
 8008b38:	5063      	str	r3, [r4, r1]
 8008b3a:	e7cc      	b.n	8008ad6 <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;// Record a single button click event
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4642      	mov	r2, r8
 8008b40:	7253      	strb	r3, [r2, #9]
						clicked = 2;			// Prepare for a double click
 8008b42:	4b4e      	ldr	r3, [pc, #312]	; (8008c7c <CheckAttachedButtons+0x318>)
 8008b44:	2202      	movs	r2, #2
 8008b46:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 8008b48:	4b4f      	ldr	r3, [pc, #316]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d123      	bne.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 8008b50:	4643      	mov	r3, r8
 8008b52:	7c5b      	ldrb	r3, [r3, #17]
 8008b54:	07db      	lsls	r3, r3, #31
 8008b56:	d51f      	bpl.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008b58:	4b4b      	ldr	r3, [pc, #300]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 8008b5e:	9803      	ldr	r0, [sp, #12]
 8008b60:	f7ff fefb 	bl	800895a <buttonClickedCallback>
 8008b64:	e018      	b.n	8008b98 <CheckAttachedButtons+0x234>
						&& releaseCounter[i] < 0xFFFF) {
 8008b66:	3bf5      	subs	r3, #245	; 0xf5
 8008b68:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 8008b6a:	4a46      	ldr	r2, [pc, #280]	; (8008c84 <CheckAttachedButtons+0x320>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d909      	bls.n	8008b84 <CheckAttachedButtons+0x220>
			switch (button[i].state) {
 8008b70:	4643      	mov	r3, r8
 8008b72:	7a5b      	ldrb	r3, [r3, #9]
 8008b74:	3b05      	subs	r3, #5
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	2a09      	cmp	r2, #9
 8008b7a:	d80d      	bhi.n	8008b98 <CheckAttachedButtons+0x234>
 8008b7c:	0093      	lsls	r3, r2, #2
 8008b7e:	4a43      	ldr	r2, [pc, #268]	; (8008c8c <CheckAttachedButtons+0x328>)
 8008b80:	58d3      	ldr	r3, [r2, r3]
 8008b82:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008b84:	9803      	ldr	r0, [sp, #12]
 8008b86:	f7ff f9a3 	bl	8007ed0 <CheckForTimedButtonRelease>
 8008b8a:	e7f1      	b.n	8008b70 <CheckAttachedButtons+0x20c>
				buttonPressedCallback(i);
 8008b8c:	9803      	ldr	r0, [sp, #12]
 8008b8e:	f7ff f95f 	bl	8007e50 <buttonPressedCallback>
				button[i].state = NONE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	4642      	mov	r2, r8
 8008b96:	7253      	strb	r3, [r2, #9]
 8008b98:	3601      	adds	r6, #1
 8008b9a:	3509      	adds	r5, #9
 8008b9c:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8008b9e:	2c18      	cmp	r4, #24
 8008ba0:	d100      	bne.n	8008ba4 <CheckAttachedButtons+0x240>
 8008ba2:	e0ee      	b.n	8008d82 <CheckAttachedButtons+0x41e>
 8008ba4:	b2f3      	uxtb	r3, r6
 8008ba6:	9303      	str	r3, [sp, #12]
 8008ba8:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8008baa:	7aab      	ldrb	r3, [r5, #10]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0f3      	beq.n	8008b98 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)
 8008bb0:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d100      	bne.n	8008bba <CheckAttachedButtons+0x256>
				button[i].state = NONE;
 8008bb8:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008bba:	230e      	movs	r3, #14
 8008bbc:	aa02      	add	r2, sp, #8
 8008bbe:	4694      	mov	ip, r2
 8008bc0:	4463      	add	r3, ip
 8008bc2:	469a      	mov	sl, r3
 8008bc4:	af05      	add	r7, sp, #20
 8008bc6:	9700      	str	r7, [sp, #0]
 8008bc8:	ab06      	add	r3, sp, #24
 8008bca:	4652      	mov	r2, sl
 8008bcc:	a907      	add	r1, sp, #28
 8008bce:	9803      	ldr	r0, [sp, #12]
 8008bd0:	f004 f9a4 	bl	800cf1c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008bd4:	4653      	mov	r3, sl
 8008bd6:	8819      	ldrh	r1, [r3, #0]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	9807      	ldr	r0, [sp, #28]
 8008bdc:	f008 fcde 	bl	801159c <HAL_GPIO_WritePin>
			Delay_us(10);
 8008be0:	200a      	movs	r0, #10
 8008be2:	f004 fd2d 	bl	800d640 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 8008be6:	8839      	ldrh	r1, [r7, #0]
 8008be8:	9806      	ldr	r0, [sp, #24]
 8008bea:	f008 fcd1 	bl	8011590 <HAL_GPIO_ReadPin>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d100      	bne.n	8008bf4 <CheckAttachedButtons+0x290>
 8008bf2:	e6c5      	b.n	8008980 <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008bf4:	230e      	movs	r3, #14
 8008bf6:	aa02      	add	r2, sp, #8
 8008bf8:	4694      	mov	ip, r2
 8008bfa:	4463      	add	r3, ip
 8008bfc:	8819      	ldrh	r1, [r3, #0]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	9807      	ldr	r0, [sp, #28]
 8008c02:	f008 fccb 	bl	801159c <HAL_GPIO_WritePin>
			switch (button[i].type) {
 8008c06:	4643      	mov	r3, r8
 8008c08:	7a9b      	ldrb	r3, [r3, #10]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d100      	bne.n	8008c10 <CheckAttachedButtons+0x2ac>
 8008c0e:	e706      	b.n	8008a1e <CheckAttachedButtons+0xba>
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	2a02      	cmp	r2, #2
 8008c14:	d800      	bhi.n	8008c18 <CheckAttachedButtons+0x2b4>
 8008c16:	e6c6      	b.n	80089a6 <CheckAttachedButtons+0x42>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d100      	bne.n	8008c1e <CheckAttachedButtons+0x2ba>
 8008c1c:	e707      	b.n	8008a2e <CheckAttachedButtons+0xca>
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d000      	beq.n	8008c24 <CheckAttachedButtons+0x2c0>
 8008c22:	e6c8      	b.n	80089b6 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 8008c24:	464b      	mov	r3, r9
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d100      	bne.n	8008c2c <CheckAttachedButtons+0x2c8>
 8008c2a:	e08e      	b.n	8008d4a <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d000      	beq.n	8008c32 <CheckAttachedButtons+0x2ce>
 8008c30:	e6c1      	b.n	80089b6 <CheckAttachedButtons+0x52>
 8008c32:	2302      	movs	r3, #2
 8008c34:	469b      	mov	fp, r3
 8008c36:	e6c3      	b.n	80089c0 <CheckAttachedButtons+0x5c>
				buttonReleasedCallback(i);
 8008c38:	9803      	ldr	r0, [sp, #12]
 8008c3a:	f7ff fe8d 	bl	8008958 <buttonReleasedCallback>
				button[i].state = NONE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4642      	mov	r2, r8
 8008c42:	7253      	strb	r3, [r2, #9]
				break;
 8008c44:	e7a8      	b.n	8008b98 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008c46:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1a4      	bne.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 8008c4e:	4643      	mov	r3, r8
 8008c50:	7c5b      	ldrb	r3, [r3, #17]
 8008c52:	075b      	lsls	r3, r3, #29
 8008c54:	d5a0      	bpl.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <CheckAttachedButtons+0x324>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	9803      	ldr	r0, [sp, #12]
 8008c60:	f7ff fe7d 	bl	800895e <buttonPressedForXCallback>
 8008c64:	e798      	b.n	8008b98 <CheckAttachedButtons+0x234>
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	20000cb4 	.word	0x20000cb4
 8008c6c:	20000cf8 	.word	0x20000cf8
 8008c70:	0000fffe 	.word	0x0000fffe
 8008c74:	20006130 	.word	0x20006130
 8008c78:	20000d10 	.word	0x20000d10
 8008c7c:	20000cea 	.word	0x20000cea
 8008c80:	20000cf0 	.word	0x20000cf0
 8008c84:	0000fe0a 	.word	0x0000fe0a
 8008c88:	20000cf6 	.word	0x20000cf6
 8008c8c:	08018238 	.word	0x08018238
				if (!delayButtonStateReset
 8008c90:	4b3f      	ldr	r3, [pc, #252]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d000      	beq.n	8008c9a <CheckAttachedButtons+0x336>
 8008c98:	e77e      	b.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 8008c9a:	4643      	mov	r3, r8
 8008c9c:	7c5b      	ldrb	r3, [r3, #17]
 8008c9e:	071b      	lsls	r3, r3, #28
 8008ca0:	d400      	bmi.n	8008ca4 <CheckAttachedButtons+0x340>
 8008ca2:	e779      	b.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008ca4:	4b3a      	ldr	r3, [pc, #232]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 8008caa:	2102      	movs	r1, #2
 8008cac:	9803      	ldr	r0, [sp, #12]
 8008cae:	f7ff fe56 	bl	800895e <buttonPressedForXCallback>
 8008cb2:	e771      	b.n	8008b98 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008cb4:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d000      	beq.n	8008cbe <CheckAttachedButtons+0x35a>
 8008cbc:	e76c      	b.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8008cbe:	4643      	mov	r3, r8
 8008cc0:	7c5b      	ldrb	r3, [r3, #17]
 8008cc2:	06db      	lsls	r3, r3, #27
 8008cc4:	d400      	bmi.n	8008cc8 <CheckAttachedButtons+0x364>
 8008cc6:	e767      	b.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008cc8:	4b31      	ldr	r3, [pc, #196]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 8008cce:	2103      	movs	r1, #3
 8008cd0:	9803      	ldr	r0, [sp, #12]
 8008cd2:	f7ff fe44 	bl	800895e <buttonPressedForXCallback>
 8008cd6:	e75f      	b.n	8008b98 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008cd8:	4b2d      	ldr	r3, [pc, #180]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d000      	beq.n	8008ce2 <CheckAttachedButtons+0x37e>
 8008ce0:	e75a      	b.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 8008ce2:	4643      	mov	r3, r8
 8008ce4:	7c5b      	ldrb	r3, [r3, #17]
 8008ce6:	069b      	lsls	r3, r3, #26
 8008ce8:	d400      	bmi.n	8008cec <CheckAttachedButtons+0x388>
 8008cea:	e755      	b.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008cec:	4b28      	ldr	r3, [pc, #160]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	9803      	ldr	r0, [sp, #12]
 8008cf6:	f7ff fe33 	bl	8008960 <buttonReleasedForYCallback>
 8008cfa:	e74d      	b.n	8008b98 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008cfc:	4b24      	ldr	r3, [pc, #144]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d000      	beq.n	8008d06 <CheckAttachedButtons+0x3a2>
 8008d04:	e748      	b.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 8008d06:	4643      	mov	r3, r8
 8008d08:	7c5b      	ldrb	r3, [r3, #17]
 8008d0a:	065b      	lsls	r3, r3, #25
 8008d0c:	d400      	bmi.n	8008d10 <CheckAttachedButtons+0x3ac>
 8008d0e:	e743      	b.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008d10:	4b1f      	ldr	r3, [pc, #124]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008d12:	2201      	movs	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 8008d16:	2102      	movs	r1, #2
 8008d18:	9803      	ldr	r0, [sp, #12]
 8008d1a:	f7ff fe21 	bl	8008960 <buttonReleasedForYCallback>
 8008d1e:	e73b      	b.n	8008b98 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008d20:	4b1b      	ldr	r3, [pc, #108]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d000      	beq.n	8008d2a <CheckAttachedButtons+0x3c6>
 8008d28:	e736      	b.n	8008b98 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 8008d2a:	4643      	mov	r3, r8
 8008d2c:	7c5b      	ldrb	r3, [r3, #17]
 8008d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d30:	d800      	bhi.n	8008d34 <CheckAttachedButtons+0x3d0>
 8008d32:	e731      	b.n	8008b98 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008d34:	4b16      	ldr	r3, [pc, #88]	; (8008d90 <CheckAttachedButtons+0x42c>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 8008d3a:	2103      	movs	r1, #3
 8008d3c:	9803      	ldr	r0, [sp, #12]
 8008d3e:	f7ff fe0f 	bl	8008960 <buttonReleasedForYCallback>
 8008d42:	e729      	b.n	8008b98 <CheckAttachedButtons+0x234>
					state = OPEN;
 8008d44:	2303      	movs	r3, #3
 8008d46:	469b      	mov	fp, r3
 8008d48:	e000      	b.n	8008d4c <CheckAttachedButtons+0x3e8>
					state = OFF;
 8008d4a:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <CheckAttachedButtons+0x430>)
 8008d4e:	58e3      	ldr	r3, [r4, r3]
 8008d50:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <CheckAttachedButtons+0x434>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d900      	bls.n	8008d58 <CheckAttachedButtons+0x3f4>
 8008d56:	e67f      	b.n	8008a58 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];		// Advance the debounce counter
 8008d58:	3301      	adds	r3, #1
 8008d5a:	4a0e      	ldr	r2, [pc, #56]	; (8008d94 <CheckAttachedButtons+0x430>)
 8008d5c:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <CheckAttachedButtons+0x438>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d100      	bne.n	8008d68 <CheckAttachedButtons+0x404>
 8008d66:	e67b      	b.n	8008a60 <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8008d68:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <CheckAttachedButtons+0x43c>)
 8008d6a:	5cf2      	ldrb	r2, [r6, r3]
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <CheckAttachedButtons+0x440>)
 8008d6e:	795b      	ldrb	r3, [r3, #5]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d800      	bhi.n	8008d76 <CheckAttachedButtons+0x412>
 8008d74:	e632      	b.n	80089dc <CheckAttachedButtons+0x78>
					clicked = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <CheckAttachedButtons+0x438>)
 8008d7a:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <CheckAttachedButtons+0x43c>)
 8008d7e:	54b3      	strb	r3, [r6, r2]
 8008d80:	e62c      	b.n	80089dc <CheckAttachedButtons+0x78>
}
 8008d82:	b009      	add	sp, #36	; 0x24
 8008d84:	bc3c      	pop	{r2, r3, r4, r5}
 8008d86:	4690      	mov	r8, r2
 8008d88:	4699      	mov	r9, r3
 8008d8a:	46a2      	mov	sl, r4
 8008d8c:	46ab      	mov	fp, r5
 8008d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d90:	20000cf6 	.word	0x20000cf6
 8008d94:	20000d10 	.word	0x20000d10
 8008d98:	0000fffe 	.word	0x0000fffe
 8008d9c:	20000cea 	.word	0x20000cea
 8008da0:	20000cf0 	.word	0x20000cf0
 8008da4:	20006130 	.word	0x20006130

08008da8 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008da8:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008daa:	f006 fd83 	bl	800f8b4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008dae:	b2c4      	uxtb	r4, r0
 8008db0:	0020      	movs	r0, r4
 8008db2:	f7fe fa93 	bl	80072dc <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008db6:	0020      	movs	r0, r4
 8008db8:	f7fe fabe 	bl	8007338 <SwitchStreamDMAToMsg>
}
 8008dbc:	bd10      	pop	{r4, pc}
	...

08008dc0 <SetupDMAStreams>:
{
 8008dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	000d      	movs	r5, r1
 8008dc6:	0014      	movs	r4, r2
 8008dc8:	220f      	movs	r2, #15
 8008dca:	446a      	add	r2, sp
 8008dcc:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008dce:	aa0a      	add	r2, sp, #40	; 0x28
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d058      	beq.n	8008e88 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d100      	bne.n	8008ddc <SetupDMAStreams+0x1c>
 8008dda:	e0be      	b.n	8008f5a <SetupDMAStreams+0x19a>
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	d100      	bne.n	8008de2 <SetupDMAStreams+0x22>
 8008de0:	e0bf      	b.n	8008f62 <SetupDMAStreams+0x1a2>
	if (direction == FORWARD) 
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d055      	beq.n	8008e92 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8008de6:	2801      	cmp	r0, #1
 8008de8:	d100      	bne.n	8008dec <SetupDMAStreams+0x2c>
 8008dea:	e08b      	b.n	8008f04 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8008dec:	2267      	movs	r2, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008dee:	2802      	cmp	r0, #2
 8008df0:	d000      	beq.n	8008df4 <SetupDMAStreams+0x34>
 8008df2:	e0b3      	b.n	8008f5c <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008df4:	0018      	movs	r0, r3
 8008df6:	f004 fdc7 	bl	800d988 <GetUart>
 8008dfa:	0006      	movs	r6, r0
 8008dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8008dfe:	7818      	ldrb	r0, [r3, #0]
 8008e00:	f004 fdc2 	bl	800d988 <GetUart>
 8008e04:	0001      	movs	r1, r0
 8008e06:	2201      	movs	r2, #1
 8008e08:	0030      	movs	r0, r6
 8008e0a:	f7fe fac7 	bl	800739c <StartDMAstream>
 8008e0e:	0002      	movs	r2, r0
 8008e10:	2817      	cmp	r0, #23
 8008e12:	d100      	bne.n	8008e16 <SetupDMAStreams+0x56>
 8008e14:	e0a2      	b.n	8008f5c <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008e16:	0160      	lsls	r0, r4, #5
 8008e18:	1b00      	subs	r0, r0, r4
 8008e1a:	0080      	lsls	r0, r0, #2
 8008e1c:	1900      	adds	r0, r0, r4
 8008e1e:	00c0      	lsls	r0, r0, #3
 8008e20:	21fa      	movs	r1, #250	; 0xfa
 8008e22:	0089      	lsls	r1, r1, #2
 8008e24:	f7f7 f98a 	bl	800013c <__udivsi3>
 8008e28:	0004      	movs	r4, r0
 8008e2a:	260f      	movs	r6, #15
 8008e2c:	446e      	add	r6, sp
 8008e2e:	4b4e      	ldr	r3, [pc, #312]	; (8008f68 <SetupDMAStreams+0x1a8>)
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	0033      	movs	r3, r6
 8008e34:	2200      	movs	r2, #0
 8008e36:	0001      	movs	r1, r0
 8008e38:	484c      	ldr	r0, [pc, #304]	; (8008f6c <SetupDMAStreams+0x1ac>)
 8008e3a:	f006 fbdf 	bl	800f5fc <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008e3e:	7833      	ldrb	r3, [r6, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4a4a      	ldr	r2, [pc, #296]	; (8008f70 <SetupDMAStreams+0x1b0>)
 8008e46:	509d      	str	r5, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008e48:	ab0a      	add	r3, sp, #40	; 0x28
 8008e4a:	7818      	ldrb	r0, [r3, #0]
 8008e4c:	f004 fd9c 	bl	800d988 <GetUart>
 8008e50:	0007      	movs	r7, r0
 8008e52:	7830      	ldrb	r0, [r6, #0]
 8008e54:	f004 fd98 	bl	800d988 <GetUart>
 8008e58:	0001      	movs	r1, r0
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	0038      	movs	r0, r7
 8008e5e:	f7fe fa9d 	bl	800739c <StartDMAstream>
 8008e62:	0002      	movs	r2, r0
 8008e64:	2817      	cmp	r0, #23
 8008e66:	d079      	beq.n	8008f5c <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008e68:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <SetupDMAStreams+0x1a8>)
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8008e6e:	2200      	movs	r2, #0
 8008e70:	0021      	movs	r1, r4
 8008e72:	483e      	ldr	r0, [pc, #248]	; (8008f6c <SetupDMAStreams+0x1ac>)
 8008e74:	f006 fbc2 	bl	800f5fc <xTimerCreate>
 8008e78:	0004      	movs	r4, r0
		dmaStreamTotal[dst-1] = count;
 8008e7a:	ab0a      	add	r3, sp, #40	; 0x28
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4a3b      	ldr	r2, [pc, #236]	; (8008f70 <SetupDMAStreams+0x1b0>)
 8008e84:	509d      	str	r5, [r3, r2]
 8008e86:	e02d      	b.n	8008ee4 <SetupDMAStreams+0x124>
		portStatus[src] = STREAM;
 8008e88:	4a3a      	ldr	r2, [pc, #232]	; (8008f74 <SetupDMAStreams+0x1b4>)
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008e8e:	2267      	movs	r2, #103	; 0x67
 8008e90:	e064      	b.n	8008f5c <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008e92:	0018      	movs	r0, r3
 8008e94:	f004 fd78 	bl	800d988 <GetUart>
 8008e98:	0006      	movs	r6, r0
 8008e9a:	ab0a      	add	r3, sp, #40	; 0x28
 8008e9c:	7818      	ldrb	r0, [r3, #0]
 8008e9e:	f004 fd73 	bl	800d988 <GetUart>
 8008ea2:	0001      	movs	r1, r0
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	0030      	movs	r0, r6
 8008ea8:	f7fe fa78 	bl	800739c <StartDMAstream>
 8008eac:	0002      	movs	r2, r0
 8008eae:	2817      	cmp	r0, #23
 8008eb0:	d054      	beq.n	8008f5c <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008eb2:	260f      	movs	r6, #15
 8008eb4:	446e      	add	r6, sp
 8008eb6:	0160      	lsls	r0, r4, #5
 8008eb8:	1b00      	subs	r0, r0, r4
 8008eba:	0080      	lsls	r0, r0, #2
 8008ebc:	1900      	adds	r0, r0, r4
 8008ebe:	00c0      	lsls	r0, r0, #3
 8008ec0:	21fa      	movs	r1, #250	; 0xfa
 8008ec2:	0089      	lsls	r1, r1, #2
 8008ec4:	f7f7 f93a 	bl	800013c <__udivsi3>
 8008ec8:	0001      	movs	r1, r0
 8008eca:	4b27      	ldr	r3, [pc, #156]	; (8008f68 <SetupDMAStreams+0x1a8>)
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	0033      	movs	r3, r6
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4826      	ldr	r0, [pc, #152]	; (8008f6c <SetupDMAStreams+0x1ac>)
 8008ed4:	f006 fb92 	bl	800f5fc <xTimerCreate>
 8008ed8:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008eda:	7833      	ldrb	r3, [r6, #0]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4a23      	ldr	r2, [pc, #140]	; (8008f70 <SetupDMAStreams+0x1b0>)
 8008ee2:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8008ee4:	2200      	movs	r2, #0
	if (xTimerStream != NULL)
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	d038      	beq.n	8008f5c <SetupDMAStreams+0x19c>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008eea:	f005 fe1f 	bl	800eb2c <xTaskGetTickCount>
 8008eee:	0002      	movs	r2, r0
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	425b      	negs	r3, r3
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2101      	movs	r1, #1
 8008efa:	0020      	movs	r0, r4
 8008efc:	f006 fb9e 	bl	800f63c <xTimerGenericCommand>
	return BOS_OK;
 8008f00:	2200      	movs	r2, #0
 8008f02:	e02b      	b.n	8008f5c <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008f04:	0010      	movs	r0, r2
 8008f06:	f004 fd3f 	bl	800d988 <GetUart>
 8008f0a:	0006      	movs	r6, r0
 8008f0c:	230f      	movs	r3, #15
 8008f0e:	446b      	add	r3, sp
 8008f10:	7818      	ldrb	r0, [r3, #0]
 8008f12:	f004 fd39 	bl	800d988 <GetUart>
 8008f16:	0001      	movs	r1, r0
 8008f18:	2201      	movs	r2, #1
 8008f1a:	0030      	movs	r0, r6
 8008f1c:	f7fe fa3e 	bl	800739c <StartDMAstream>
 8008f20:	0002      	movs	r2, r0
 8008f22:	2817      	cmp	r0, #23
 8008f24:	d01a      	beq.n	8008f5c <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008f26:	0160      	lsls	r0, r4, #5
 8008f28:	1b00      	subs	r0, r0, r4
 8008f2a:	0080      	lsls	r0, r0, #2
 8008f2c:	1900      	adds	r0, r0, r4
 8008f2e:	00c0      	lsls	r0, r0, #3
 8008f30:	21fa      	movs	r1, #250	; 0xfa
 8008f32:	0089      	lsls	r1, r1, #2
 8008f34:	f7f7 f902 	bl	800013c <__udivsi3>
 8008f38:	0001      	movs	r1, r0
 8008f3a:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <SetupDMAStreams+0x1a8>)
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	ab0a      	add	r3, sp, #40	; 0x28
 8008f40:	2200      	movs	r2, #0
 8008f42:	480a      	ldr	r0, [pc, #40]	; (8008f6c <SetupDMAStreams+0x1ac>)
 8008f44:	f006 fb5a 	bl	800f5fc <xTimerCreate>
 8008f48:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008f4a:	230f      	movs	r3, #15
 8008f4c:	446b      	add	r3, sp
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4a06      	ldr	r2, [pc, #24]	; (8008f70 <SetupDMAStreams+0x1b0>)
 8008f56:	509d      	str	r5, [r3, r2]
 8008f58:	e7c4      	b.n	8008ee4 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8008f5a:	2267      	movs	r2, #103	; 0x67
}
 8008f5c:	0010      	movs	r0, r2
 8008f5e:	b005      	add	sp, #20
 8008f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8008f62:	2267      	movs	r2, #103	; 0x67
 8008f64:	e7fa      	b.n	8008f5c <SetupDMAStreams+0x19c>
 8008f66:	46c0      	nop			; (mov r8, r8)
 8008f68:	08008da9 	.word	0x08008da9
 8008f6c:	08018278 	.word	0x08018278
 8008f70:	20000c60 	.word	0x20000c60
 8008f74:	200008e0 	.word	0x200008e0

08008f78 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008f78:	b510      	push	{r4, lr}
	switch (port)
 8008f7a:	2805      	cmp	r0, #5
 8008f7c:	d80a      	bhi.n	8008f94 <NotifyMessagingTask+0x1c>
 8008f7e:	0080      	lsls	r0, r0, #2
 8008f80:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <NotifyMessagingTask+0x60>)
 8008f82:	581b      	ldr	r3, [r3, r0]
 8008f84:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008f86:	4b15      	ldr	r3, [pc, #84]	; (8008fdc <NotifyMessagingTask+0x64>)
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	2100      	movs	r1, #0
 8008f90:	f006 fa64 	bl	800f45c <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008f94:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <NotifyMessagingTask+0x68>)
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	f006 fa5c 	bl	800f45c <xTaskGenericNotify>
 8008fa4:	e7f6      	b.n	8008f94 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <NotifyMessagingTask+0x6c>)
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	2202      	movs	r2, #2
 8008fae:	2100      	movs	r1, #0
 8008fb0:	f006 fa54 	bl	800f45c <xTaskGenericNotify>
 8008fb4:	e7ee      	b.n	8008f94 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008fb6:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <NotifyMessagingTask+0x70>)
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f006 fa4c 	bl	800f45c <xTaskGenericNotify>
 8008fc4:	e7e6      	b.n	8008f94 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <NotifyMessagingTask+0x74>)
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2202      	movs	r2, #2
 8008fce:	2100      	movs	r1, #0
 8008fd0:	f006 fa44 	bl	800f45c <xTaskGenericNotify>
}
 8008fd4:	e7de      	b.n	8008f94 <NotifyMessagingTask+0x1c>
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	08018260 	.word	0x08018260
 8008fdc:	20000c7c 	.word	0x20000c7c
 8008fe0:	20000c80 	.word	0x20000c80
 8008fe4:	20000c84 	.word	0x20000c84
 8008fe8:	20000c88 	.word	0x20000c88
 8008fec:	20000c8c 	.word	0x20000c8c

08008ff0 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff2:	46de      	mov	lr, fp
 8008ff4:	4657      	mov	r7, sl
 8008ff6:	464e      	mov	r6, r9
 8008ff8:	4645      	mov	r5, r8
 8008ffa:	b5e0      	push	{r5, r6, r7, lr}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	4680      	mov	r8, r0
 8009000:	468b      	mov	fp, r1
 8009002:	0014      	movs	r4, r2
 8009004:	469a      	mov	sl, r3
 8009006:	ab0e      	add	r3, sp, #56	; 0x38
 8009008:	881d      	ldrh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 800900a:	0003      	movs	r3, r0
 800900c:	4313      	orrs	r3, r2
 800900e:	d100      	bne.n	8009012 <SendMessageFromPort+0x22>
 8009010:	e171      	b.n	80092f6 <SendMessageFromPort+0x306>
 8009012:	2800      	cmp	r0, #0
 8009014:	d147      	bne.n	80090a6 <SendMessageFromPort+0xb6>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009016:	1c93      	adds	r3, r2, #2
 8009018:	b2db      	uxtb	r3, r3
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
 800901a:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800901c:	2b01      	cmp	r3, #1
 800901e:	d900      	bls.n	8009022 <SendMessageFromPort+0x32>
 8009020:	e14a      	b.n	80092b8 <SendMessageFromPort+0x2c8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8009022:	2000      	movs	r0, #0
 8009024:	f005 fcea 	bl	800e9fc <uxTaskPriorityGet>
 8009028:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 800902a:	2105      	movs	r1, #5
 800902c:	2000      	movs	r0, #0
 800902e:	f005 fcf5 	bl	800ea1c <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8009032:	4bbe      	ldr	r3, [pc, #760]	; (800932c <SendMessageFromPort+0x33c>)
 8009034:	2248      	movs	r2, #72	; 0x48
 8009036:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8009038:	3212      	adds	r2, #18
 800903a:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800903c:	465b      	mov	r3, fp
 800903e:	2b00      	cmp	r3, #0
 8009040:	d000      	beq.n	8009044 <SendMessageFromPort+0x54>
 8009042:	e16e      	b.n	8009322 <SendMessageFromPort+0x332>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 8009044:	3d01      	subs	r5, #1
 8009046:	4bba      	ldr	r3, [pc, #744]	; (8009330 <SendMessageFromPort+0x340>)
 8009048:	5d5f      	ldrb	r7, [r3, r5]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 800904a:	4eba      	ldr	r6, [pc, #744]	; (8009334 <SendMessageFromPort+0x344>)
 800904c:	00e9      	lsls	r1, r5, #3
 800904e:	1b49      	subs	r1, r1, r5
 8009050:	00c9      	lsls	r1, r1, #3
 8009052:	4db9      	ldr	r5, [pc, #740]	; (8009338 <SendMessageFromPort+0x348>)
 8009054:	1949      	adds	r1, r1, r5
 8009056:	003a      	movs	r2, r7
 8009058:	0030      	movs	r0, r6
 800905a:	f00a f8b4 	bl	80131c6 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 800905e:	3e03      	subs	r6, #3
 8009060:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8009062:	1cfd      	adds	r5, r7, #3
 8009064:	002a      	movs	r2, r5
 8009066:	0031      	movs	r1, r6
 8009068:	48b4      	ldr	r0, [pc, #720]	; (800933c <SendMessageFromPort+0x34c>)
 800906a:	f00a f8ac 	bl	80131c6 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 800906e:	b2bf      	uxth	r7, r7
 8009070:	1cf9      	adds	r1, r7, #3
 8009072:	48b2      	ldr	r0, [pc, #712]	; (800933c <SendMessageFromPort+0x34c>)
 8009074:	f003 feea 	bl	800ce4c <CalculateCRC8>
 8009078:	5570      	strb	r0, [r6, r5]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 800907a:	2238      	movs	r2, #56	; 0x38
 800907c:	2100      	movs	r1, #0
 800907e:	48af      	ldr	r0, [pc, #700]	; (800933c <SendMessageFromPort+0x34c>)
 8009080:	f00a f8aa 	bl	80131d8 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8009084:	3402      	adds	r4, #2
 8009086:	b2e4      	uxtb	r4, r4
 8009088:	2c01      	cmp	r4, #1
 800908a:	d900      	bls.n	800908e <SendMessageFromPort+0x9e>
 800908c:	e105      	b.n	800929a <SendMessageFromPort+0x2aa>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 800908e:	4653      	mov	r3, sl
 8009090:	2b00      	cmp	r3, #0
 8009092:	d000      	beq.n	8009096 <SendMessageFromPort+0xa6>
 8009094:	e0f6      	b.n	8009284 <SendMessageFromPort+0x294>
 8009096:	465b      	mov	r3, fp
 8009098:	2b00      	cmp	r3, #0
 800909a:	d000      	beq.n	800909e <SendMessageFromPort+0xae>
 800909c:	e0f2      	b.n	8009284 <SendMessageFromPort+0x294>
			src = message[4];
 800909e:	4ba3      	ldr	r3, [pc, #652]	; (800932c <SendMessageFromPort+0x33c>)
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	469b      	mov	fp, r3
 80090a4:	e0ee      	b.n	8009284 <SendMessageFromPort+0x294>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d002      	beq.n	80090b0 <SendMessageFromPort+0xc0>
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	d100      	bne.n	80090b0 <SendMessageFromPort+0xc0>
 80090ae:	e124      	b.n	80092fa <SendMessageFromPort+0x30a>
	TaskPriority = uxTaskPriorityGet( NULL );
 80090b0:	2000      	movs	r0, #0
 80090b2:	f005 fca3 	bl	800e9fc <uxTaskPriorityGet>
 80090b6:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80090b8:	2105      	movs	r1, #5
 80090ba:	2000      	movs	r0, #0
 80090bc:	f005 fcae 	bl	800ea1c <vTaskPrioritySet>
	message[0] = 'H';						
 80090c0:	4b9a      	ldr	r3, [pc, #616]	; (800932c <SendMessageFromPort+0x33c>)
 80090c2:	2248      	movs	r2, #72	; 0x48
 80090c4:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80090c6:	3212      	adds	r2, #18
 80090c8:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80090ca:	4653      	mov	r3, sl
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0b9      	beq.n	8009044 <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 80090d0:	465b      	mov	r3, fp
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d04f      	beq.n	8009176 <SendMessageFromPort+0x186>
		message[2] = length;	
 80090d6:	4995      	ldr	r1, [pc, #596]	; (800932c <SendMessageFromPort+0x33c>)
 80090d8:	2300      	movs	r3, #0
 80090da:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 80090dc:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 80090de:	465b      	mov	r3, fp
 80090e0:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80090e2:	4a97      	ldr	r2, [pc, #604]	; (8009340 <SendMessageFromPort+0x350>)
 80090e4:	79d3      	ldrb	r3, [r2, #7]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	7992      	ldrb	r2, [r2, #6]
 80090ea:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 80090ec:	22ff      	movs	r2, #255	; 0xff
 80090ee:	4552      	cmp	r2, sl
 80090f0:	4192      	sbcs	r2, r2
 80090f2:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80090f4:	0052      	lsls	r2, r2, #1
 80090f6:	4313      	orrs	r3, r2
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 80090fc:	4652      	mov	r2, sl
 80090fe:	718a      	strb	r2, [r1, #6]
 8009100:	2200      	movs	r2, #0
 8009102:	4691      	mov	r9, r2
		if (extendCode == true) {
 8009104:	4652      	mov	r2, sl
 8009106:	2aff      	cmp	r2, #255	; 0xff
 8009108:	d903      	bls.n	8009112 <SendMessageFromPort+0x122>
			message[6+shift] = (uint8_t) (code >> 8);		
 800910a:	0a12      	lsrs	r2, r2, #8
 800910c:	71ca      	strb	r2, [r1, #7]
			++shift;
 800910e:	2201      	movs	r2, #1
 8009110:	4691      	mov	r9, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8009112:	2d2e      	cmp	r5, #46	; 0x2e
 8009114:	d933      	bls.n	800917e <SendMessageFromPort+0x18e>
			message[5] |= 0x80;		
 8009116:	2280      	movs	r2, #128	; 0x80
 8009118:	4252      	negs	r2, r2
 800911a:	4313      	orrs	r3, r2
 800911c:	4a83      	ldr	r2, [pc, #524]	; (800932c <SendMessageFromPort+0x33c>)
 800911e:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8009120:	4b88      	ldr	r3, [pc, #544]	; (8009344 <SendMessageFromPort+0x354>)
 8009122:	801d      	strh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 8009124:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8009126:	252e      	movs	r5, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8009128:	464b      	mov	r3, r9
 800912a:	3307      	adds	r3, #7
 800912c:	4694      	mov	ip, r2
 800912e:	4463      	add	r3, ip
 8009130:	9303      	str	r3, [sp, #12]
			while (totalNumberOfParams != 0)
 8009132:	4b84      	ldr	r3, [pc, #528]	; (8009344 <SendMessageFromPort+0x354>)
 8009134:	881f      	ldrh	r7, [r3, #0]
 8009136:	2f00      	cmp	r7, #0
 8009138:	d02f      	beq.n	800919a <SendMessageFromPort+0x1aa>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 800913a:	0029      	movs	r1, r5
 800913c:	0038      	movs	r0, r7
 800913e:	f7f6 fffd 	bl	800013c <__udivsi3>
 8009142:	b280      	uxth	r0, r0
 8009144:	2800      	cmp	r0, #0
 8009146:	d144      	bne.n	80091d2 <SendMessageFromPort+0x1e2>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8009148:	4b78      	ldr	r3, [pc, #480]	; (800932c <SendMessageFromPort+0x33c>)
 800914a:	795a      	ldrb	r2, [r3, #5]
 800914c:	237f      	movs	r3, #127	; 0x7f
 800914e:	4013      	ands	r3, r2
 8009150:	4a76      	ldr	r2, [pc, #472]	; (800932c <SendMessageFromPort+0x33c>)
 8009152:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8009154:	4d7c      	ldr	r5, [pc, #496]	; (8009348 <SendMessageFromPort+0x358>)
 8009156:	8829      	ldrh	r1, [r5, #0]
 8009158:	4b7c      	ldr	r3, [pc, #496]	; (800934c <SendMessageFromPort+0x35c>)
 800915a:	18c9      	adds	r1, r1, r3
 800915c:	003a      	movs	r2, r7
 800915e:	9803      	ldr	r0, [sp, #12]
 8009160:	f00a f831 	bl	80131c6 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	802b      	strh	r3, [r5, #0]
 8009168:	4a76      	ldr	r2, [pc, #472]	; (8009344 <SendMessageFromPort+0x354>)
 800916a:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 800916c:	1d3e      	adds	r6, r7, #4
 800916e:	444e      	add	r6, r9
 8009170:	b2f6      	uxtb	r6, r6
					numberOfParams = totalNumberOfParams;
 8009172:	003d      	movs	r5, r7
 8009174:	e7dd      	b.n	8009132 <SendMessageFromPort+0x142>
		if (src == 0)		src = myID;
 8009176:	4b76      	ldr	r3, [pc, #472]	; (8009350 <SendMessageFromPort+0x360>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	469b      	mov	fp, r3
 800917c:	e7ab      	b.n	80090d6 <SendMessageFromPort+0xe6>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800917e:	464b      	mov	r3, r9
 8009180:	3307      	adds	r3, #7
 8009182:	486a      	ldr	r0, [pc, #424]	; (800932c <SendMessageFromPort+0x33c>)
 8009184:	1818      	adds	r0, r3, r0
 8009186:	4b70      	ldr	r3, [pc, #448]	; (8009348 <SendMessageFromPort+0x358>)
 8009188:	8819      	ldrh	r1, [r3, #0]
 800918a:	4b70      	ldr	r3, [pc, #448]	; (800934c <SendMessageFromPort+0x35c>)
 800918c:	18c9      	adds	r1, r1, r3
 800918e:	002a      	movs	r2, r5
 8009190:	f00a f819 	bl	80131c6 <memcpy>
			length = numberOfParams + shift + 4;
 8009194:	1d2e      	adds	r6, r5, #4
 8009196:	444e      	add	r6, r9
 8009198:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 800919a:	4b6e      	ldr	r3, [pc, #440]	; (8009354 <SendMessageFromPort+0x364>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d057      	beq.n	8009252 <SendMessageFromPort+0x262>
			if (dstGroupID < BOS_BROADCAST)
 80091a2:	4b6d      	ldr	r3, [pc, #436]	; (8009358 <SendMessageFromPort+0x368>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2bff      	cmp	r3, #255	; 0xff
 80091a8:	d100      	bne.n	80091ac <SendMessageFromPort+0x1bc>
 80091aa:	e0aa      	b.n	8009302 <SendMessageFromPort+0x312>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80091ac:	4a6b      	ldr	r2, [pc, #428]	; (800935c <SendMessageFromPort+0x36c>)
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	4694      	mov	ip, r2
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	d06f      	beq.n	8009296 <SendMessageFromPort+0x2a6>
 80091b6:	2701      	movs	r7, #1
 80091b8:	409f      	lsls	r7, r3
 80091ba:	4869      	ldr	r0, [pc, #420]	; (8009360 <SendMessageFromPort+0x370>)
 80091bc:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 80091be:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80091c0:	495a      	ldr	r1, [pc, #360]	; (800932c <SendMessageFromPort+0x33c>)
 80091c2:	468a      	mov	sl, r1
 80091c4:	44aa      	add	sl, r5
 80091c6:	0021      	movs	r1, r4
 80091c8:	4664      	mov	r4, ip
 80091ca:	46b4      	mov	ip, r6
 80091cc:	464e      	mov	r6, r9
 80091ce:	4689      	mov	r9, r1
 80091d0:	e017      	b.n	8009202 <SendMessageFromPort+0x212>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 80091d2:	9500      	str	r5, [sp, #0]
 80091d4:	4653      	mov	r3, sl
 80091d6:	0022      	movs	r2, r4
 80091d8:	4659      	mov	r1, fp
 80091da:	4640      	mov	r0, r8
 80091dc:	f7ff ff08 	bl	8008ff0 <SendMessageFromPort>
					osDelay(10);
 80091e0:	200a      	movs	r0, #10
 80091e2:	f004 fd1c 	bl	800dc1e <osDelay>
					totalNumberOfParams -= numberOfParams;
 80091e6:	4a57      	ldr	r2, [pc, #348]	; (8009344 <SendMessageFromPort+0x354>)
 80091e8:	8813      	ldrh	r3, [r2, #0]
 80091ea:	1b5b      	subs	r3, r3, r5
 80091ec:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 80091ee:	4a56      	ldr	r2, [pc, #344]	; (8009348 <SendMessageFromPort+0x358>)
 80091f0:	8813      	ldrh	r3, [r2, #0]
 80091f2:	18eb      	adds	r3, r5, r3
 80091f4:	8013      	strh	r3, [r2, #0]
 80091f6:	e79c      	b.n	8009132 <SendMessageFromPort+0x142>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80091f8:	3301      	adds	r3, #1
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3002      	adds	r0, #2
 80091fe:	42a3      	cmp	r3, r4
 8009200:	d80e      	bhi.n	8009220 <SendMessageFromPort+0x230>
					if (InGroup(i, dstGroupID))
 8009202:	8801      	ldrh	r1, [r0, #0]
 8009204:	420f      	tst	r7, r1
 8009206:	d0f7      	beq.n	80091f8 <SendMessageFromPort+0x208>
						++groupMembers;							// Add this member
 8009208:	3201      	adds	r2, #1
 800920a:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800920c:	18a9      	adds	r1, r5, r2
 800920e:	3101      	adds	r1, #1
 8009210:	292d      	cmp	r1, #45	; 0x2d
 8009212:	dd00      	ble.n	8009216 <SendMessageFromPort+0x226>
 8009214:	e073      	b.n	80092fe <SendMessageFromPort+0x30e>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8009216:	4651      	mov	r1, sl
 8009218:	1889      	adds	r1, r1, r2
 800921a:	1989      	adds	r1, r1, r6
 800921c:	718b      	strb	r3, [r1, #6]
 800921e:	e7eb      	b.n	80091f8 <SendMessageFromPort+0x208>
 8009220:	464c      	mov	r4, r9
 8009222:	46b1      	mov	r9, r6
 8009224:	4666      	mov	r6, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8009226:	464b      	mov	r3, r9
 8009228:	3307      	adds	r3, #7
 800922a:	195b      	adds	r3, r3, r5
 800922c:	189b      	adds	r3, r3, r2
 800922e:	493f      	ldr	r1, [pc, #252]	; (800932c <SendMessageFromPort+0x33c>)
 8009230:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8009232:	18ad      	adds	r5, r5, r2
 8009234:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009236:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8009238:	2d2d      	cmp	r5, #45	; 0x2d
 800923a:	dc3d      	bgt.n	80092b8 <SendMessageFromPort+0x2c8>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 800923c:	4849      	ldr	r0, [pc, #292]	; (8009364 <SendMessageFromPort+0x374>)
 800923e:	7801      	ldrb	r1, [r0, #0]
 8009240:	3101      	adds	r1, #1
 8009242:	b2c9      	uxtb	r1, r1
 8009244:	7001      	strb	r1, [r0, #0]
 8009246:	4839      	ldr	r0, [pc, #228]	; (800932c <SendMessageFromPort+0x33c>)
 8009248:	18c3      	adds	r3, r0, r3
 800924a:	7059      	strb	r1, [r3, #1]
 800924c:	3602      	adds	r6, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800924e:	18b6      	adds	r6, r6, r2
 8009250:	b2f6      	uxtb	r6, r6
	message[2] = length;
 8009252:	4b36      	ldr	r3, [pc, #216]	; (800932c <SendMessageFromPort+0x33c>)
 8009254:	469a      	mov	sl, r3
 8009256:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 8009258:	1cf5      	adds	r5, r6, #3
 800925a:	002a      	movs	r2, r5
 800925c:	0019      	movs	r1, r3
 800925e:	4837      	ldr	r0, [pc, #220]	; (800933c <SendMessageFromPort+0x34c>)
 8009260:	f009 ffb1 	bl	80131c6 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8009264:	b2b7      	uxth	r7, r6
 8009266:	0029      	movs	r1, r5
 8009268:	4834      	ldr	r0, [pc, #208]	; (800933c <SendMessageFromPort+0x34c>)
 800926a:	f003 fdef 	bl	800ce4c <CalculateCRC8>
 800926e:	4653      	mov	r3, sl
 8009270:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8009272:	2238      	movs	r2, #56	; 0x38
 8009274:	2100      	movs	r1, #0
 8009276:	4831      	ldr	r0, [pc, #196]	; (800933c <SendMessageFromPort+0x34c>)
 8009278:	f009 ffae 	bl	80131d8 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 800927c:	3402      	adds	r4, #2
 800927e:	b2e4      	uxtb	r4, r4
 8009280:	2c01      	cmp	r4, #1
 8009282:	d80a      	bhi.n	800929a <SendMessageFromPort+0x2aa>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009284:	4658      	mov	r0, fp
 8009286:	f7fa f9d9 	bl	800363c <FindBroadcastRoutes>
 800928a:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800928c:	2401      	movs	r4, #1
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 800928e:	4b36      	ldr	r3, [pc, #216]	; (8009368 <SendMessageFromPort+0x378>)
 8009290:	4698      	mov	r8, r3
 8009292:	4e2f      	ldr	r6, [pc, #188]	; (8009350 <SendMessageFromPort+0x360>)
 8009294:	e01c      	b.n	80092d0 <SendMessageFromPort+0x2e0>
			uint8_t groupMembers = 0;
 8009296:	2200      	movs	r2, #0
 8009298:	e7c5      	b.n	8009226 <SendMessageFromPort+0x236>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 800929a:	1d3a      	adds	r2, r7, #4
 800929c:	b292      	uxth	r2, r2
 800929e:	2332      	movs	r3, #50	; 0x32
 80092a0:	4922      	ldr	r1, [pc, #136]	; (800932c <SendMessageFromPort+0x33c>)
 80092a2:	4640      	mov	r0, r8
 80092a4:	f004 fbd8 	bl	800da58 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 80092a8:	9902      	ldr	r1, [sp, #8]
 80092aa:	2000      	movs	r0, #0
 80092ac:	f005 fbb6 	bl	800ea1c <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 80092b0:	4b2e      	ldr	r3, [pc, #184]	; (800936c <SendMessageFromPort+0x37c>)
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
	
	return result;
 80092b6:	2000      	movs	r0, #0
}
 80092b8:	b005      	add	sp, #20
 80092ba:	bc3c      	pop	{r2, r3, r4, r5}
 80092bc:	4690      	mov	r8, r2
 80092be:	4699      	mov	r9, r3
 80092c0:	46a2      	mov	sl, r4
 80092c2:	46ab      	mov	fp, r5
 80092c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80092c6:	3401      	adds	r4, #1
 80092c8:	b2e4      	uxtb	r4, r4
 80092ca:	3501      	adds	r5, #1
 80092cc:	2c06      	cmp	r4, #6
 80092ce:	d0eb      	beq.n	80092a8 <SendMessageFromPort+0x2b8>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80092d0:	7833      	ldrb	r3, [r6, #0]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	4642      	mov	r2, r8
 80092d8:	5a9b      	ldrh	r3, [r3, r2]
 80092da:	412b      	asrs	r3, r5
 80092dc:	07db      	lsls	r3, r3, #31
 80092de:	d5f2      	bpl.n	80092c6 <SendMessageFromPort+0x2d6>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80092e0:	1d3a      	adds	r2, r7, #4
 80092e2:	b292      	uxth	r2, r2
 80092e4:	2332      	movs	r3, #50	; 0x32
 80092e6:	4911      	ldr	r1, [pc, #68]	; (800932c <SendMessageFromPort+0x33c>)
 80092e8:	0020      	movs	r0, r4
 80092ea:	f004 fbb5 	bl	800da58 <writePxDMAMutex>
				Delay_ms(1);
 80092ee:	2001      	movs	r0, #1
 80092f0:	f006 fcc0 	bl	800fc74 <HAL_Delay>
 80092f4:	e7e7      	b.n	80092c6 <SendMessageFromPort+0x2d6>
		return BOS_ERR_WrongParam; 
 80092f6:	2067      	movs	r0, #103	; 0x67
 80092f8:	e7de      	b.n	80092b8 <SendMessageFromPort+0x2c8>
 80092fa:	2067      	movs	r0, #103	; 0x67
 80092fc:	e7dc      	b.n	80092b8 <SendMessageFromPort+0x2c8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80092fe:	2069      	movs	r0, #105	; 0x69
 8009300:	e7da      	b.n	80092b8 <SendMessageFromPort+0x2c8>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009302:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009304:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009306:	2b2d      	cmp	r3, #45	; 0x2d
 8009308:	dcd6      	bgt.n	80092b8 <SendMessageFromPort+0x2c8>
				message[7+shift+numberOfParams] = ++bcastID;
 800930a:	4a16      	ldr	r2, [pc, #88]	; (8009364 <SendMessageFromPort+0x374>)
 800930c:	7813      	ldrb	r3, [r2, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	b2db      	uxtb	r3, r3
 8009312:	7013      	strb	r3, [r2, #0]
 8009314:	4a05      	ldr	r2, [pc, #20]	; (800932c <SendMessageFromPort+0x33c>)
 8009316:	1955      	adds	r5, r2, r5
 8009318:	444d      	add	r5, r9
 800931a:	71eb      	strb	r3, [r5, #7]
				length += 1;		// + bcastID
 800931c:	3601      	adds	r6, #1
 800931e:	b2f6      	uxtb	r6, r6
 8009320:	e797      	b.n	8009252 <SendMessageFromPort+0x262>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009322:	4653      	mov	r3, sl
 8009324:	2b00      	cmp	r3, #0
 8009326:	d100      	bne.n	800932a <SendMessageFromPort+0x33a>
 8009328:	e68c      	b.n	8009044 <SendMessageFromPort+0x54>
 800932a:	e6d4      	b.n	80090d6 <SendMessageFromPort+0xe6>
 800932c:	200006e8 	.word	0x200006e8
 8009330:	20000720 	.word	0x20000720
 8009334:	200006eb 	.word	0x200006eb
 8009338:	20000530 	.word	0x20000530
 800933c:	20000c00 	.word	0x20000c00
 8009340:	20006130 	.word	0x20006130
 8009344:	20000d36 	.word	0x20000d36
 8009348:	20000d34 	.word	0x20000d34
 800934c:	20000728 	.word	0x20000728
 8009350:	20000866 	.word	0x20000866
 8009354:	2000029c 	.word	0x2000029c
 8009358:	2000001d 	.word	0x2000001d
 800935c:	2000001c 	.word	0x2000001c
 8009360:	200006b0 	.word	0x200006b0
 8009364:	200004dc 	.word	0x200004dc
 8009368:	200004e0 	.word	0x200004e0
 800936c:	200008f8 	.word	0x200008f8

08009370 <ForwardReceivedMessage>:
{
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	b083      	sub	sp, #12
 8009374:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <ForwardReceivedMessage+0x34>)
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 800937c:	1e42      	subs	r2, r0, #1
 800937e:	00d3      	lsls	r3, r2, #3
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4a08      	ldr	r2, [pc, #32]	; (80093a8 <ForwardReceivedMessage+0x38>)
 8009386:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 8009388:	4b08      	ldr	r3, [pc, #32]	; (80093ac <ForwardReceivedMessage+0x3c>)
 800938a:	7818      	ldrb	r0, [r3, #0]
 800938c:	0021      	movs	r1, r4
 800938e:	f7fa f9f7 	bl	8003780 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8009392:	9500      	str	r5, [sp, #0]
 8009394:	2300      	movs	r3, #0
 8009396:	0022      	movs	r2, r4
 8009398:	2100      	movs	r1, #0
 800939a:	f7ff fe29 	bl	8008ff0 <SendMessageFromPort>
}
 800939e:	2000      	movs	r0, #0
 80093a0:	b003      	add	sp, #12
 80093a2:	bd30      	pop	{r4, r5, pc}
 80093a4:	2000029c 	.word	0x2000029c
 80093a8:	20000530 	.word	0x20000530
 80093ac:	20000866 	.word	0x20000866

080093b0 <BroadcastReceivedMessage>:
{
 80093b0:	b500      	push	{lr}
 80093b2:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <BroadcastReceivedMessage+0x38>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <BroadcastReceivedMessage+0x3c>)
 80093bc:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80093be:	28ff      	cmp	r0, #255	; 0xff
 80093c0:	d009      	beq.n	80093d6 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 80093c2:	9100      	str	r1, [sp, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	22fe      	movs	r2, #254	; 0xfe
 80093c8:	2100      	movs	r1, #0
 80093ca:	2000      	movs	r0, #0
 80093cc:	f7ff fe10 	bl	8008ff0 <SendMessageFromPort>
}
 80093d0:	2000      	movs	r0, #0
 80093d2:	b003      	add	sp, #12
 80093d4:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 80093d6:	9100      	str	r1, [sp, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	32ff      	adds	r2, #255	; 0xff
 80093dc:	2100      	movs	r1, #0
 80093de:	2000      	movs	r0, #0
 80093e0:	f7ff fe06 	bl	8008ff0 <SendMessageFromPort>
 80093e4:	e7f4      	b.n	80093d0 <BroadcastReceivedMessage+0x20>
 80093e6:	46c0      	nop			; (mov r8, r8)
 80093e8:	2000029c 	.word	0x2000029c
 80093ec:	2000001d 	.word	0x2000001d

080093f0 <BroadcastMessage>:
{
 80093f0:	b530      	push	{r4, r5, lr}
 80093f2:	b083      	sub	sp, #12
 80093f4:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 80093f6:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <BroadcastMessage+0x44>)
 80093f8:	2501      	movs	r5, #1
 80093fa:	701d      	strb	r5, [r3, #0]
 80093fc:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <BroadcastMessage+0x48>)
 80093fe:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009400:	29ff      	cmp	r1, #255	; 0xff
 8009402:	d00e      	beq.n	8009422 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8009404:	9400      	str	r4, [sp, #0]
 8009406:	0013      	movs	r3, r2
 8009408:	22fe      	movs	r2, #254	; 0xfe
 800940a:	0001      	movs	r1, r0
 800940c:	2000      	movs	r0, #0
 800940e:	f7ff fdef 	bl	8008ff0 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8009412:	0022      	movs	r2, r4
 8009414:	2100      	movs	r1, #0
 8009416:	4809      	ldr	r0, [pc, #36]	; (800943c <BroadcastMessage+0x4c>)
 8009418:	f009 fede 	bl	80131d8 <memset>
}
 800941c:	2000      	movs	r0, #0
 800941e:	b003      	add	sp, #12
 8009420:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8009422:	9400      	str	r4, [sp, #0]
 8009424:	0013      	movs	r3, r2
 8009426:	22ff      	movs	r2, #255	; 0xff
 8009428:	0001      	movs	r1, r0
 800942a:	2000      	movs	r0, #0
 800942c:	f7ff fde0 	bl	8008ff0 <SendMessageFromPort>
 8009430:	e7ef      	b.n	8009412 <BroadcastMessage+0x22>
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	2000029c 	.word	0x2000029c
 8009438:	2000001d 	.word	0x2000001d
 800943c:	20000728 	.word	0x20000728

08009440 <SendMessageToModule>:
{
 8009440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009442:	b083      	sub	sp, #12
 8009444:	0004      	movs	r4, r0
 8009446:	000e      	movs	r6, r1
 8009448:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 800944a:	28ff      	cmp	r0, #255	; 0xff
 800944c:	d012      	beq.n	8009474 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 800944e:	4f0d      	ldr	r7, [pc, #52]	; (8009484 <SendMessageToModule+0x44>)
 8009450:	7838      	ldrb	r0, [r7, #0]
 8009452:	0021      	movs	r1, r4
 8009454:	f7fa f994 	bl	8003780 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8009458:	7839      	ldrb	r1, [r7, #0]
 800945a:	9500      	str	r5, [sp, #0]
 800945c:	0033      	movs	r3, r6
 800945e:	0022      	movs	r2, r4
 8009460:	f7ff fdc6 	bl	8008ff0 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8009464:	002a      	movs	r2, r5
 8009466:	2100      	movs	r1, #0
 8009468:	4807      	ldr	r0, [pc, #28]	; (8009488 <SendMessageToModule+0x48>)
 800946a:	f009 feb5 	bl	80131d8 <memset>
}
 800946e:	2000      	movs	r0, #0
 8009470:	b003      	add	sp, #12
 8009472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8009474:	4b03      	ldr	r3, [pc, #12]	; (8009484 <SendMessageToModule+0x44>)
 8009476:	7818      	ldrb	r0, [r3, #0]
 8009478:	0013      	movs	r3, r2
 800947a:	000a      	movs	r2, r1
 800947c:	21ff      	movs	r1, #255	; 0xff
 800947e:	f7ff ffb7 	bl	80093f0 <BroadcastMessage>
 8009482:	e7f4      	b.n	800946e <SendMessageToModule+0x2e>
 8009484:	20000866 	.word	0x20000866
 8009488:	20000728 	.word	0x20000728

0800948c <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 800948c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948e:	46de      	mov	lr, fp
 8009490:	4657      	mov	r7, sl
 8009492:	464e      	mov	r6, r9
 8009494:	4645      	mov	r5, r8
 8009496:	b5e0      	push	{r5, r6, r7, lr}
 8009498:	b091      	sub	sp, #68	; 0x44
 800949a:	900f      	str	r0, [sp, #60]	; 0x3c
 800949c:	000c      	movs	r4, r1
 800949e:	9106      	str	r1, [sp, #24]
 80094a0:	0015      	movs	r5, r2
 80094a2:	920e      	str	r2, [sp, #56]	; 0x38
 80094a4:	001e      	movs	r6, r3
 80094a6:	ab1a      	add	r3, sp, #104	; 0x68
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	4698      	mov	r8, r3
 80094ac:	ab1d      	add	r3, sp, #116	; 0x74
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	469a      	mov	sl, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 80094b2:	4b5a      	ldr	r3, [pc, #360]	; (800961c <StartScastDMAStream+0x190>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	428b      	cmp	r3, r1
 80094b8:	d11d      	bne.n	80094f6 <StartScastDMAStream+0x6a>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80094ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094bc:	0e1b      	lsrs	r3, r3, #24
 80094be:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 80094c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 80094c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ca:	0a1b      	lsrs	r3, r3, #8
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80094d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80094d2:	0e1b      	lsrs	r3, r3, #24
 80094d4:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 80094d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80094d8:	0c1b      	lsrs	r3, r3, #16
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 80094de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	469b      	mov	fp, r3
 80094e6:	4d4e      	ldr	r5, [pc, #312]	; (8009620 <StartScastDMAStream+0x194>)
 80094e8:	231a      	movs	r3, #26
 80094ea:	4699      	mov	r9, r3
 80094ec:	44a9      	add	r9, r5
				temp2 = dstP;
 80094ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094f0:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80094f2:	4c4c      	ldr	r4, [pc, #304]	; (8009624 <StartScastDMAStream+0x198>)
 80094f4:	e05c      	b.n	80095b0 <StartScastDMAStream+0x124>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80094f6:	4b4b      	ldr	r3, [pc, #300]	; (8009624 <StartScastDMAStream+0x198>)
 80094f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094fa:	0e12      	lsrs	r2, r2, #24
 80094fc:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 80094fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009500:	0c12      	lsrs	r2, r2, #16
 8009502:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8009504:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009506:	0a12      	lsrs	r2, r2, #8
 8009508:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 800950a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800950c:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800950e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009510:	0e12      	lsrs	r2, r2, #24
 8009512:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8009514:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009516:	0c12      	lsrs	r2, r2, #16
 8009518:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 800951a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800951c:	0a12      	lsrs	r2, r2, #8
 800951e:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8009520:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009522:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8009524:	4642      	mov	r2, r8
 8009526:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8009528:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 800952a:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 800952c:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 800952e:	4652      	mov	r2, sl
 8009530:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8009532:	220d      	movs	r2, #13
 8009534:	211c      	movs	r1, #28
 8009536:	0020      	movs	r0, r4
 8009538:	f7ff ff82 	bl	8009440 <SendMessageToModule>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 800953c:	2000      	movs	r0, #0
 800953e:	b011      	add	sp, #68	; 0x44
 8009540:	bc3c      	pop	{r2, r3, r4, r5}
 8009542:	4690      	mov	r8, r2
 8009544:	4699      	mov	r9, r3
 8009546:	46a2      	mov	sl, r4
 8009548:	46ab      	mov	fp, r5
 800954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 800954c:	9906      	ldr	r1, [sp, #24]
 800954e:	f7fa f917 	bl	8003780 <FindRoute>
 8009552:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 8009554:	0031      	movs	r1, r6
 8009556:	9806      	ldr	r0, [sp, #24]
 8009558:	f7fa f912 	bl	8003780 <FindRoute>
			if (route[i] == dstM) {
 800955c:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 800955e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8009560:	42b0      	cmp	r0, r6
 8009562:	d134      	bne.n	80095ce <StartScastDMAStream+0x142>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009564:	9a08      	ldr	r2, [sp, #32]
 8009566:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8009568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800956a:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 800956c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800956e:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8009570:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009572:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009576:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800957a:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 800957c:	465a      	mov	r2, fp
 800957e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8009580:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009582:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8009584:	4642      	mov	r2, r8
 8009586:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8009588:	9a07      	ldr	r2, [sp, #28]
 800958a:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 800958c:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 800958e:	4653      	mov	r3, sl
 8009590:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8009592:	0031      	movs	r1, r6
 8009594:	9806      	ldr	r0, [sp, #24]
 8009596:	f7fa f8f3 	bl	8003780 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 800959a:	7878      	ldrb	r0, [r7, #1]
 800959c:	220c      	movs	r2, #12
 800959e:	211b      	movs	r1, #27
 80095a0:	f7ff ff4e 	bl	8009440 <SendMessageToModule>
			osDelay(10);
 80095a4:	200a      	movs	r0, #10
 80095a6:	f004 fb3a 	bl	800dc1e <osDelay>
 80095aa:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 80095ac:	454d      	cmp	r5, r9
 80095ae:	d013      	beq.n	80095d8 <StartScastDMAStream+0x14c>
		FindRoute(srcM, dstM);
 80095b0:	0031      	movs	r1, r6
 80095b2:	9806      	ldr	r0, [sp, #24]
 80095b4:	f7fa f8e4 	bl	8003780 <FindRoute>
 80095b8:	002f      	movs	r7, r5
		if (route[i]) 
 80095ba:	7868      	ldrb	r0, [r5, #1]
 80095bc:	2800      	cmp	r0, #0
 80095be:	d0f4      	beq.n	80095aa <StartScastDMAStream+0x11e>
			if (route[i+1]) {
 80095c0:	78a9      	ldrb	r1, [r5, #2]
 80095c2:	2900      	cmp	r1, #0
 80095c4:	d0c2      	beq.n	800954c <StartScastDMAStream+0xc0>
				temp1 = FindRoute(route[i], route[i+1]);
 80095c6:	f7fa f8db 	bl	8003780 <FindRoute>
 80095ca:	9007      	str	r0, [sp, #28]
 80095cc:	e7c2      	b.n	8009554 <StartScastDMAStream+0xc8>
				temp2 = FindRoute(route[i], route[i-1]);
 80095ce:	7839      	ldrb	r1, [r7, #0]
 80095d0:	f7fa f8d6 	bl	8003780 <FindRoute>
 80095d4:	0003      	movs	r3, r0
 80095d6:	e7c5      	b.n	8009564 <StartScastDMAStream+0xd8>
	if (srcM == dstM)
 80095d8:	9806      	ldr	r0, [sp, #24]
 80095da:	42b0      	cmp	r0, r6
 80095dc:	d118      	bne.n	8009610 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 80095de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80095e8:	4640      	mov	r0, r8
 80095ea:	f7ff fbe9 	bl	8008dc0 <SetupDMAStreams>
	if (stored) {		
 80095ee:	4653      	mov	r3, sl
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0a3      	beq.n	800953c <StartScastDMAStream+0xb0>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 80095f4:	2300      	movs	r3, #0
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009604:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009606:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009608:	4640      	mov	r0, r8
 800960a:	f7f9 fd7d 	bl	8003108 <SaveEEstreams>
 800960e:	e795      	b.n	800953c <StartScastDMAStream+0xb0>
		port = FindRoute(srcM, dstM);
 8009610:	0031      	movs	r1, r6
 8009612:	f7fa f8b5 	bl	8003780 <FindRoute>
 8009616:	900e      	str	r0, [sp, #56]	; 0x38
 8009618:	e7e1      	b.n	80095de <StartScastDMAStream+0x152>
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	20000866 	.word	0x20000866
 8009620:	20006233 	.word	0x20006233
 8009624:	20000728 	.word	0x20000728

08009628 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument) {
 8009628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962a:	46de      	mov	lr, fp
 800962c:	4657      	mov	r7, sl
 800962e:	464e      	mov	r6, r9
 8009630:	4645      	mov	r5, r8
 8009632:	b5e0      	push	{r5, r6, r7, lr}
 8009634:	b087      	sub	sp, #28
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	469b      	mov	fp, r3
								<= (MSG_RX_BUF_SIZE - parseStart - 1)) {
							memcpy(&cMessage[port - 1][0],
									&UARTRxBuf[port - 1][parseStart],
									packetLength);
						} else {				// Message wraps around
							memcpy(&cMessage[port - 1][0],
 800963a:	4bd5      	ldr	r3, [pc, #852]	; (8009990 <BackEndTask+0x368>)
 800963c:	3b70      	subs	r3, #112	; 0x70
 800963e:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],
 8009640:	4bd3      	ldr	r3, [pc, #844]	; (8009990 <BackEndTask+0x368>)
 8009642:	3b70      	subs	r3, #112	; 0x70
 8009644:	9305      	str	r3, [sp, #20]
 8009646:	e19e      	b.n	8009986 <BackEndTask+0x35e>
 8009648:	1ebb      	subs	r3, r7, #2
 800964a:	4698      	mov	r8, r3
 800964c:	4bd1      	ldr	r3, [pc, #836]	; (8009994 <BackEndTask+0x36c>)
 800964e:	4443      	add	r3, r8
 8009650:	4699      	mov	r9, r3
				for (int i = UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 8009652:	7819      	ldrb	r1, [r3, #0]
 8009654:	293f      	cmp	r1, #63	; 0x3f
 8009656:	dc17      	bgt.n	8009688 <BackEndTask+0x60>
							if (BOS.disableCLI == false) {
 8009658:	4bcf      	ldr	r3, [pc, #828]	; (8009998 <BackEndTask+0x370>)
 800965a:	7edb      	ldrb	r3, [r3, #27]
 800965c:	469c      	mov	ip, r3
				for (int i = UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 800965e:	000b      	movs	r3, r1
							if (BOS.disableCLI == false) {
 8009660:	2000      	movs	r0, #0
 8009662:	e004      	b.n	800966e <BackEndTask+0x46>
					} else if (i == (MSG_RX_BUF_SIZE - 1)
 8009664:	2b3f      	cmp	r3, #63	; 0x3f
 8009666:	d023      	beq.n	80096b0 <BackEndTask+0x88>
						i++) {
 8009668:	3301      	adds	r3, #1
				for (int i = UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d009      	beq.n	8009682 <BackEndTask+0x5a>
					if (i < (MSG_RX_BUF_SIZE - 1)
 800966e:	2b3e      	cmp	r3, #62	; 0x3e
 8009670:	dcf8      	bgt.n	8009664 <BackEndTask+0x3c>
							&& UARTRxBuf[port - 1][i] == 'H'
 8009672:	5cf2      	ldrb	r2, [r6, r3]
 8009674:	2a48      	cmp	r2, #72	; 0x48
 8009676:	d1f5      	bne.n	8009664 <BackEndTask+0x3c>
							&& UARTRxBuf[port - 1][i + 1] == 'Z') {
 8009678:	18f2      	adds	r2, r6, r3
 800967a:	7852      	ldrb	r2, [r2, #1]
 800967c:	2a5a      	cmp	r2, #90	; 0x5a
 800967e:	d1f1      	bne.n	8009664 <BackEndTask+0x3c>
 8009680:	469b      	mov	fp, r3
				if (emptyBuffer) {
 8009682:	2800      	cmp	r0, #0
 8009684:	d000      	beq.n	8009688 <BackEndTask+0x60>
 8009686:	e15f      	b.n	8009948 <BackEndTask+0x320>
				if (packetStart == MSG_RX_BUF_SIZE - 3) {
 8009688:	465b      	mov	r3, fp
 800968a:	2b3d      	cmp	r3, #61	; 0x3d
 800968c:	d051      	beq.n	8009732 <BackEndTask+0x10a>
				} else if (packetStart == MSG_RX_BUF_SIZE - 2) {
 800968e:	2b3e      	cmp	r3, #62	; 0x3e
 8009690:	d100      	bne.n	8009694 <BackEndTask+0x6c>
 8009692:	e090      	b.n	80097b6 <BackEndTask+0x18e>
				} else if (packetStart == MSG_RX_BUF_SIZE - 1) {
 8009694:	2b3f      	cmp	r3, #63	; 0x3f
 8009696:	d100      	bne.n	800969a <BackEndTask+0x72>
 8009698:	e092      	b.n	80097c0 <BackEndTask+0x198>
					packetLength = UARTRxBuf[port - 1][packetStart + 2];
 800969a:	4643      	mov	r3, r8
 800969c:	019a      	lsls	r2, r3, #6
 800969e:	4bbf      	ldr	r3, [pc, #764]	; (800999c <BackEndTask+0x374>)
 80096a0:	189b      	adds	r3, r3, r2
 80096a2:	445b      	add	r3, fp
 80096a4:	789b      	ldrb	r3, [r3, #2]
 80096a6:	9300      	str	r3, [sp, #0]
					parseStart = packetStart + 3;
 80096a8:	465b      	mov	r3, fp
 80096aa:	3303      	adds	r3, #3
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	e046      	b.n	800973e <BackEndTask+0x116>
 80096b0:	9600      	str	r6, [sp, #0]
							&& UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H'
 80096b2:	223f      	movs	r2, #63	; 0x3f
 80096b4:	4692      	mov	sl, r2
 80096b6:	44b2      	add	sl, r6
 80096b8:	4652      	mov	r2, sl
 80096ba:	7812      	ldrb	r2, [r2, #0]
 80096bc:	2a48      	cmp	r2, #72	; 0x48
 80096be:	d005      	beq.n	80096cc <BackEndTask+0xa4>
							if (BOS.disableCLI == false) {
 80096c0:	4663      	mov	r3, ip
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d000      	beq.n	80096c8 <BackEndTask+0xa0>
 80096c6:	e13f      	b.n	8009948 <BackEndTask+0x320>
 80096c8:	9a00      	ldr	r2, [sp, #0]
 80096ca:	e00c      	b.n	80096e6 <BackEndTask+0xbe>
							&& UARTRxBuf[port - 1][0] == 'Z')// HZ wrap around
 80096cc:	7832      	ldrb	r2, [r6, #0]
 80096ce:	2a5a      	cmp	r2, #90	; 0x5a
 80096d0:	d1f6      	bne.n	80096c0 <BackEndTask+0x98>
				if (emptyBuffer) {
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d074      	beq.n	80097c0 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 80096d6:	469b      	mov	fp, r3
 80096d8:	e136      	b.n	8009948 <BackEndTask+0x320>
													|| (j == MSG_RX_BUF_SIZE - 1
 80096da:	293f      	cmp	r1, #63	; 0x3f
 80096dc:	d024      	beq.n	8009728 <BackEndTask+0x100>
										j < MSG_RX_BUF_SIZE; j++) {
 80096de:	3101      	adds	r1, #1
								for (int j = UARTRxBufIndex[port - 1];
 80096e0:	2940      	cmp	r1, #64	; 0x40
 80096e2:	d100      	bne.n	80096e6 <BackEndTask+0xbe>
 80096e4:	e130      	b.n	8009948 <BackEndTask+0x320>
									if (UARTRxBuf[port - 1][j] == 0xD
 80096e6:	5c53      	ldrb	r3, [r2, r1]
 80096e8:	2b0d      	cmp	r3, #13
 80096ea:	d1f8      	bne.n	80096de <BackEndTask+0xb6>
											&& ((j < MSG_RX_BUF_SIZE - 1
 80096ec:	293e      	cmp	r1, #62	; 0x3e
 80096ee:	dcf4      	bgt.n	80096da <BackEndTask+0xb2>
													&& UARTRxBuf[port - 1][j + 1]
 80096f0:	1850      	adds	r0, r2, r1
 80096f2:	7843      	ldrb	r3, [r0, #1]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1f0      	bne.n	80096da <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] = 0;
 80096f8:	4643      	mov	r3, r8
 80096fa:	019a      	lsls	r2, r3, #6
 80096fc:	4ba7      	ldr	r3, [pc, #668]	; (800999c <BackEndTask+0x374>)
 80096fe:	189b      	adds	r3, r3, r2
 8009700:	2200      	movs	r2, #0
 8009702:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] = j + 1;// Advance buffer index
 8009704:	3101      	adds	r1, #1
 8009706:	464b      	mov	r3, r9
 8009708:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] = FREE;// Free the previous CLI port 
 800970a:	4ba5      	ldr	r3, [pc, #660]	; (80099a0 <BackEndTask+0x378>)
 800970c:	7819      	ldrb	r1, [r3, #0]
 800970e:	48a5      	ldr	r0, [pc, #660]	; (80099a4 <BackEndTask+0x37c>)
 8009710:	5442      	strb	r2, [r0, r1]
										portStatus[port] = CLI;	// Continue the CLI session on this port
 8009712:	3203      	adds	r2, #3
 8009714:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 8009716:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(
 8009718:	4ba3      	ldr	r3, [pc, #652]	; (80099a8 <BackEndTask+0x380>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	2300      	movs	r3, #0
 800971e:	3a01      	subs	r2, #1
 8009720:	2100      	movs	r1, #0
 8009722:	f005 fe9b 	bl	800f45c <xTaskGenericNotify>
										break;
 8009726:	e10f      	b.n	8009948 <BackEndTask+0x320>
															&& UARTRxBuf[port
 8009728:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 800972a:	2001      	movs	r0, #1
															&& UARTRxBuf[port
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1a8      	bne.n	8009682 <BackEndTask+0x5a>
 8009730:	e7e2      	b.n	80096f8 <BackEndTask+0xd0>
					packetLength = UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009732:	0033      	movs	r3, r6
 8009734:	333f      	adds	r3, #63	; 0x3f
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	9300      	str	r3, [sp, #0]
					parseStart = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	9302      	str	r3, [sp, #8]
				packetEnd = packetStart + (packetLength + 3);// Packet length is counted from Dst to before CRC
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	3303      	adds	r3, #3
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	445b      	add	r3, fp
 8009746:	469a      	mov	sl, r3
				if (packetEnd > MSG_RX_BUF_SIZE - 1)			// wrap-around
 8009748:	2b3f      	cmp	r3, #63	; 0x3f
 800974a:	dd03      	ble.n	8009754 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	425b      	negs	r3, r3
 8009750:	469c      	mov	ip, r3
 8009752:	44e2      	add	sl, ip
				if (packetStart != packetEnd)				// Non-empty packet
 8009754:	45da      	cmp	sl, fp
 8009756:	d100      	bne.n	800975a <BackEndTask+0x132>
 8009758:	e0d0      	b.n	80098fc <BackEndTask+0x2d4>
					Delay_ms(1);
 800975a:	2001      	movs	r0, #1
 800975c:	f006 fa8a 	bl	800fc74 <HAL_Delay>
					if (packetStart < packetEnd) {
 8009760:	45da      	cmp	sl, fp
 8009762:	dd34      	ble.n	80097ce <BackEndTask+0x1a6>
						memcpy(crcBuffer, &UARTRxBuf[port - 1][packetStart],
 8009764:	4b91      	ldr	r3, [pc, #580]	; (80099ac <BackEndTask+0x384>)
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	019b      	lsls	r3, r3, #6
 800976a:	445b      	add	r3, fp
 800976c:	4a8b      	ldr	r2, [pc, #556]	; (800999c <BackEndTask+0x374>)
 800976e:	4694      	mov	ip, r2
 8009770:	4463      	add	r3, ip
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	9a01      	ldr	r2, [sp, #4]
 8009776:	0019      	movs	r1, r3
 8009778:	488d      	ldr	r0, [pc, #564]	; (80099b0 <BackEndTask+0x388>)
 800977a:	f009 fd24 	bl	80131c6 <memcpy>
					crc8 = CalculateCRC8((uint32_t*) &crcBuffer,
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	1cd9      	adds	r1, r3, #3
 8009782:	488b      	ldr	r0, [pc, #556]	; (80099b0 <BackEndTask+0x388>)
 8009784:	f003 fb62 	bl	800ce4c <CalculateCRC8>
 8009788:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800978a:	2238      	movs	r2, #56	; 0x38
 800978c:	2100      	movs	r1, #0
 800978e:	4888      	ldr	r0, [pc, #544]	; (80099b0 <BackEndTask+0x388>)
 8009790:	f009 fd22 	bl	80131d8 <memset>
					if (crc8 == UARTRxBuf[port - 1][packetEnd]) {
 8009794:	4643      	mov	r3, r8
 8009796:	019b      	lsls	r3, r3, #6
 8009798:	4a80      	ldr	r2, [pc, #512]	; (800999c <BackEndTask+0x374>)
 800979a:	4694      	mov	ip, r2
 800979c:	4463      	add	r3, ip
 800979e:	4652      	mov	r2, sl
 80097a0:	5c9b      	ldrb	r3, [r3, r2]
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d040      	beq.n	800982a <BackEndTask+0x202>
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if (packetStart < packetEnd) {
					memset(&UARTRxBuf[port - 1][packetStart], 0,
							(packetLength) + 4);
 80097a8:	9a00      	ldr	r2, [sp, #0]
 80097aa:	3204      	adds	r2, #4
					memset(&UARTRxBuf[port - 1][packetStart], 0,
 80097ac:	2100      	movs	r1, #0
 80097ae:	9803      	ldr	r0, [sp, #12]
 80097b0:	f009 fd12 	bl	80131d8 <memset>
 80097b4:	e0b8      	b.n	8009928 <BackEndTask+0x300>
					packetLength = UARTRxBuf[port - 1][0];
 80097b6:	7833      	ldrb	r3, [r6, #0]
 80097b8:	9300      	str	r3, [sp, #0]
					parseStart = 1;
 80097ba:	2301      	movs	r3, #1
 80097bc:	9302      	str	r3, [sp, #8]
 80097be:	e7be      	b.n	800973e <BackEndTask+0x116>
					packetLength = UARTRxBuf[port - 1][1];
 80097c0:	7873      	ldrb	r3, [r6, #1]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	233f      	movs	r3, #63	; 0x3f
 80097c6:	469b      	mov	fp, r3
					parseStart = 2;
 80097c8:	3b3d      	subs	r3, #61	; 0x3d
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	e7b7      	b.n	800973e <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 80097ce:	2240      	movs	r2, #64	; 0x40
 80097d0:	465b      	mov	r3, fp
 80097d2:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer, &UARTRxBuf[port - 1][packetStart],
 80097d4:	4a75      	ldr	r2, [pc, #468]	; (80099ac <BackEndTask+0x384>)
 80097d6:	18b9      	adds	r1, r7, r2
 80097d8:	0189      	lsls	r1, r1, #6
 80097da:	4459      	add	r1, fp
 80097dc:	4a6f      	ldr	r2, [pc, #444]	; (800999c <BackEndTask+0x374>)
 80097de:	4694      	mov	ip, r2
 80097e0:	4461      	add	r1, ip
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	001a      	movs	r2, r3
 80097e6:	4872      	ldr	r0, [pc, #456]	; (80099b0 <BackEndTask+0x388>)
 80097e8:	f009 fced 	bl	80131c6 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],
 80097ec:	4a70      	ldr	r2, [pc, #448]	; (80099b0 <BackEndTask+0x388>)
 80097ee:	0010      	movs	r0, r2
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	469c      	mov	ip, r3
 80097f4:	4460      	add	r0, ip
										- (MSG_RX_BUF_SIZE - packetStart));
 80097f6:	9a01      	ldr	r2, [sp, #4]
 80097f8:	1ad2      	subs	r2, r2, r3
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],
 80097fa:	0031      	movs	r1, r6
 80097fc:	f009 fce3 	bl	80131c6 <memcpy>
					crc8 = CalculateCRC8((uint32_t*) &crcBuffer,
 8009800:	9b00      	ldr	r3, [sp, #0]
 8009802:	1cd9      	adds	r1, r3, #3
 8009804:	486a      	ldr	r0, [pc, #424]	; (80099b0 <BackEndTask+0x388>)
 8009806:	f003 fb21 	bl	800ce4c <CalculateCRC8>
 800980a:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800980c:	2238      	movs	r2, #56	; 0x38
 800980e:	2100      	movs	r1, #0
 8009810:	4867      	ldr	r0, [pc, #412]	; (80099b0 <BackEndTask+0x388>)
 8009812:	f009 fce1 	bl	80131d8 <memset>
					if (crc8 == UARTRxBuf[port - 1][packetEnd]) {
 8009816:	4643      	mov	r3, r8
 8009818:	019b      	lsls	r3, r3, #6
 800981a:	4a60      	ldr	r2, [pc, #384]	; (800999c <BackEndTask+0x374>)
 800981c:	4694      	mov	ip, r2
 800981e:	4463      	add	r3, ip
 8009820:	4652      	mov	r2, sl
 8009822:	5c9b      	ldrb	r3, [r3, r2]
 8009824:	9a01      	ldr	r2, [sp, #4]
 8009826:	4293      	cmp	r3, r2
 8009828:	d168      	bne.n	80098fc <BackEndTask+0x2d4>
						portStatus[port] = MSG;
 800982a:	2301      	movs	r3, #1
 800982c:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] = packetLength;
 800982e:	1ebb      	subs	r3, r7, #2
 8009830:	4a60      	ldr	r2, [pc, #384]	; (80099b4 <BackEndTask+0x38c>)
 8009832:	9900      	ldr	r1, [sp, #0]
 8009834:	54d1      	strb	r1, [r2, r3]
								<= (MSG_RX_BUF_SIZE - parseStart - 1)) {
 8009836:	233f      	movs	r3, #63	; 0x3f
 8009838:	9c02      	ldr	r4, [sp, #8]
 800983a:	1b1b      	subs	r3, r3, r4
						if ((packetLength)
 800983c:	000a      	movs	r2, r1
 800983e:	428b      	cmp	r3, r1
 8009840:	db27      	blt.n	8009892 <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],
 8009842:	00f8      	lsls	r0, r7, #3
 8009844:	1bc0      	subs	r0, r0, r7
 8009846:	00c0      	lsls	r0, r0, #3
 8009848:	9b05      	ldr	r3, [sp, #20]
 800984a:	469c      	mov	ip, r3
 800984c:	4460      	add	r0, ip
									&UARTRxBuf[port - 1][parseStart],
 800984e:	4b57      	ldr	r3, [pc, #348]	; (80099ac <BackEndTask+0x384>)
 8009850:	18f9      	adds	r1, r7, r3
 8009852:	0189      	lsls	r1, r1, #6
 8009854:	46a4      	mov	ip, r4
 8009856:	4461      	add	r1, ip
 8009858:	4b50      	ldr	r3, [pc, #320]	; (800999c <BackEndTask+0x374>)
 800985a:	18c9      	adds	r1, r1, r3
							memcpy(&cMessage[port - 1][0],
 800985c:	f009 fcb3 	bl	80131c6 <memcpy>
						if (packetStart < packetEnd) {
 8009860:	45da      	cmp	sl, fp
 8009862:	dd36      	ble.n	80098d2 <BackEndTask+0x2aa>
									(packetLength) + 4);
 8009864:	9a00      	ldr	r2, [sp, #0]
 8009866:	3204      	adds	r2, #4
							memset(&UARTRxBuf[port - 1][packetStart], 0,
 8009868:	4b50      	ldr	r3, [pc, #320]	; (80099ac <BackEndTask+0x384>)
 800986a:	18f8      	adds	r0, r7, r3
 800986c:	0180      	lsls	r0, r0, #6
 800986e:	4458      	add	r0, fp
 8009870:	4b4a      	ldr	r3, [pc, #296]	; (800999c <BackEndTask+0x374>)
 8009872:	18c0      	adds	r0, r0, r3
 8009874:	2100      	movs	r1, #0
 8009876:	f009 fcaf 	bl	80131d8 <memset>
						UARTRxBufIndex[port - 1] = (packetEnd + 1);	// Set buffer pointer after the CRC byte 
 800987a:	4653      	mov	r3, sl
 800987c:	3301      	adds	r3, #1
 800987e:	464a      	mov	r2, r9
 8009880:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009882:	4a4d      	ldr	r2, [pc, #308]	; (80099b8 <BackEndTask+0x390>)
 8009884:	8813      	ldrh	r3, [r2, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 800988a:	0028      	movs	r0, r5
 800988c:	f7ff fb74 	bl	8008f78 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8009890:	e05a      	b.n	8009948 <BackEndTask+0x320>
 8009892:	00fb      	lsls	r3, r7, #3
 8009894:	1bdb      	subs	r3, r3, r7
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	4698      	mov	r8, r3
									MSG_RX_BUF_SIZE - parseStart);
 800989a:	2440      	movs	r4, #64	; 0x40
 800989c:	9b02      	ldr	r3, [sp, #8]
 800989e:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],
 80098a0:	9a04      	ldr	r2, [sp, #16]
 80098a2:	4442      	add	r2, r8
 80098a4:	0010      	movs	r0, r2
									&UARTRxBuf[port - 1][parseStart],
 80098a6:	4a41      	ldr	r2, [pc, #260]	; (80099ac <BackEndTask+0x384>)
 80098a8:	18b9      	adds	r1, r7, r2
 80098aa:	0189      	lsls	r1, r1, #6
 80098ac:	469c      	mov	ip, r3
 80098ae:	4461      	add	r1, ip
 80098b0:	4b3a      	ldr	r3, [pc, #232]	; (800999c <BackEndTask+0x374>)
 80098b2:	18c9      	adds	r1, r1, r3
							memcpy(&cMessage[port - 1][0],
 80098b4:	0022      	movs	r2, r4
 80098b6:	f009 fc86 	bl	80131c6 <memcpy>
									&cMessage[port - 1][MSG_RX_BUF_SIZE
 80098ba:	4640      	mov	r0, r8
 80098bc:	3870      	subs	r0, #112	; 0x70
 80098be:	1900      	adds	r0, r0, r4
 80098c0:	4b33      	ldr	r3, [pc, #204]	; (8009990 <BackEndTask+0x368>)
 80098c2:	469c      	mov	ip, r3
 80098c4:	4460      	add	r0, ip
											- (MSG_RX_BUF_SIZE - parseStart));// wrap-around
 80098c6:	9b00      	ldr	r3, [sp, #0]
 80098c8:	1b1a      	subs	r2, r3, r4
							memcpy(
 80098ca:	0031      	movs	r1, r6
 80098cc:	f009 fc7b 	bl	80131c6 <memcpy>
 80098d0:	e7c6      	b.n	8009860 <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 80098d2:	2440      	movs	r4, #64	; 0x40
 80098d4:	465b      	mov	r3, fp
 80098d6:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart], 0,
 80098d8:	4b34      	ldr	r3, [pc, #208]	; (80099ac <BackEndTask+0x384>)
 80098da:	18f8      	adds	r0, r7, r3
 80098dc:	0180      	lsls	r0, r0, #6
 80098de:	4458      	add	r0, fp
 80098e0:	4b2e      	ldr	r3, [pc, #184]	; (800999c <BackEndTask+0x374>)
 80098e2:	18c0      	adds	r0, r0, r3
 80098e4:	0022      	movs	r2, r4
 80098e6:	2100      	movs	r1, #0
 80098e8:	f009 fc76 	bl	80131d8 <memset>
									((packetLength) + 4)
 80098ec:	9a00      	ldr	r2, [sp, #0]
 80098ee:	3204      	adds	r2, #4
											- (MSG_RX_BUF_SIZE - packetStart));
 80098f0:	1b12      	subs	r2, r2, r4
							memset(&UARTRxBuf[port - 1][0], 0,
 80098f2:	2100      	movs	r1, #0
 80098f4:	0030      	movs	r0, r6
 80098f6:	f009 fc6f 	bl	80131d8 <memset>
 80098fa:	e7be      	b.n	800987a <BackEndTask+0x252>
				} else {                // wrap around
					memset(&UARTRxBuf[port - 1][packetStart], 0,
					MSG_RX_BUF_SIZE - packetStart);
 80098fc:	2240      	movs	r2, #64	; 0x40
 80098fe:	465b      	mov	r3, fp
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart], 0,
 8009904:	4b29      	ldr	r3, [pc, #164]	; (80099ac <BackEndTask+0x384>)
 8009906:	18f8      	adds	r0, r7, r3
 8009908:	0180      	lsls	r0, r0, #6
 800990a:	4458      	add	r0, fp
 800990c:	4b23      	ldr	r3, [pc, #140]	; (800999c <BackEndTask+0x374>)
 800990e:	18c0      	adds	r0, r0, r3
 8009910:	4642      	mov	r2, r8
 8009912:	2100      	movs	r1, #0
 8009914:	f009 fc60 	bl	80131d8 <memset>
					memset(&UARTRxBuf[port - 1][0], 0,
							((packetLength) + 4)
 8009918:	9a00      	ldr	r2, [sp, #0]
 800991a:	3204      	adds	r2, #4
									- (MSG_RX_BUF_SIZE - packetStart));
 800991c:	4643      	mov	r3, r8
 800991e:	1ad2      	subs	r2, r2, r3
					memset(&UARTRxBuf[port - 1][0], 0,
 8009920:	2100      	movs	r1, #0
 8009922:	0030      	movs	r0, r6
 8009924:	f009 fc58 	bl	80131d8 <memset>
				}

				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] = (packetEnd + 1);	// Set buffer pointer after the CRC byte 
 8009928:	4653      	mov	r3, sl
 800992a:	3301      	adds	r3, #1
 800992c:	464a      	mov	r2, r9
 800992e:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009930:	4a22      	ldr	r2, [pc, #136]	; (80099bc <BackEndTask+0x394>)
 8009932:	8813      	ldrh	r3, [r2, #0]
 8009934:	3301      	adds	r3, #1
 8009936:	8013      	strh	r3, [r2, #0]
 8009938:	e014      	b.n	8009964 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port - 1] == true) {
				MsgDMAStopped[port - 1] = false;
				if (portStatus[port] == OVERRUN)
					portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port),
 800993a:	0028      	movs	r0, r5
 800993c:	f004 f824 	bl	800d988 <GetUart>
 8009940:	2240      	movs	r2, #64	; 0x40
 8009942:	0031      	movs	r1, r6
 8009944:	f008 ff20 	bl	8012788 <HAL_UART_Receive_DMA>
		for (port = 1; port <= NumOfPorts; port++) {
 8009948:	3501      	adds	r5, #1
 800994a:	b2ed      	uxtb	r5, r5
 800994c:	3701      	adds	r7, #1
 800994e:	3640      	adds	r6, #64	; 0x40
 8009950:	2d06      	cmp	r5, #6
 8009952:	d016      	beq.n	8009982 <BackEndTask+0x35a>
 8009954:	1e7c      	subs	r4, r7, #1
 8009956:	4b13      	ldr	r3, [pc, #76]	; (80099a4 <BackEndTask+0x37c>)
 8009958:	469c      	mov	ip, r3
 800995a:	4464      	add	r4, ip
			if (portStatus[port] == MSG || portStatus[port] == FREE) {
 800995c:	7823      	ldrb	r3, [r4, #0]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d800      	bhi.n	8009964 <BackEndTask+0x33c>
 8009962:	e671      	b.n	8009648 <BackEndTask+0x20>
 8009964:	1ebb      	subs	r3, r7, #2
 8009966:	4a16      	ldr	r2, [pc, #88]	; (80099c0 <BackEndTask+0x398>)
 8009968:	4694      	mov	ip, r2
 800996a:	4463      	add	r3, ip
			if (MsgDMAStopped[port - 1] == true) {
 800996c:	781a      	ldrb	r2, [r3, #0]
 800996e:	2a00      	cmp	r2, #0
 8009970:	d0ea      	beq.n	8009948 <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)
 8009976:	7823      	ldrb	r3, [r4, #0]
 8009978:	2b05      	cmp	r3, #5
 800997a:	d1de      	bne.n	800993a <BackEndTask+0x312>
					portStatus[port] = FREE;
 800997c:	2300      	movs	r3, #0
 800997e:	7023      	strb	r3, [r4, #0]
 8009980:	e7db      	b.n	800993a <BackEndTask+0x312>
						(uint8_t*) &UARTRxBuf[port - 1], MSG_RX_BUF_SIZE);
			}
		}

		taskYIELD();
 8009982:	f005 fff9 	bl	800f978 <vPortYield>
 8009986:	4e05      	ldr	r6, [pc, #20]	; (800999c <BackEndTask+0x374>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009988:	2702      	movs	r7, #2
		for (port = 1; port <= NumOfPorts; port++) {
 800998a:	2501      	movs	r5, #1
 800998c:	e7e2      	b.n	8009954 <BackEndTask+0x32c>
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	20000530 	.word	0x20000530
 8009994:	20000bf8 	.word	0x20000bf8
 8009998:	20006130 	.word	0x20006130
 800999c:	20000ab8 	.word	0x20000ab8
 80099a0:	2000029f 	.word	0x2000029f
 80099a4:	200008e0 	.word	0x200008e0
 80099a8:	20000c9c 	.word	0x20000c9c
 80099ac:	03fffffe 	.word	0x03fffffe
 80099b0:	20000c00 	.word	0x20000c00
 80099b4:	20000720 	.word	0x20000720
 80099b8:	20000d70 	.word	0x20000d70
 80099bc:	20000f18 	.word	0x20000f18
 80099c0:	20000ab0 	.word	0x20000ab0

080099c4 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;

	return result;
}
 80099c4:	2001      	movs	r0, #1
 80099c6:	4770      	bx	lr

080099c8 <PxMessagingTask>:
void PxMessagingTask(void *argument) {
 80099c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ca:	46de      	mov	lr, fp
 80099cc:	4657      	mov	r7, sl
 80099ce:	464e      	mov	r6, r9
 80099d0:	4645      	mov	r5, r8
 80099d2:	b5e0      	push	{r5, r6, r7, lr}
 80099d4:	b097      	sub	sp, #92	; 0x5c
	port = (int8_t) (unsigned) argument;
 80099d6:	b2c3      	uxtb	r3, r0
 80099d8:	9308      	str	r3, [sp, #32]
 80099da:	23ff      	movs	r3, #255	; 0xff
 80099dc:	4003      	ands	r3, r0
 80099de:	469b      	mov	fp, r3
		if (messageLength[port - 1]) {
 80099e0:	1e5d      	subs	r5, r3, #1
 80099e2:	00eb      	lsls	r3, r5, #3
 80099e4:	1b5b      	subs	r3, r3, r5
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	0019      	movs	r1, r3
		memset(cMessage[port - 1], 0, (size_t) messageLength[port - 1]);
 80099ea:	4ad6      	ldr	r2, [pc, #856]	; (8009d44 <PxMessagingTask+0x37c>)
 80099ec:	18d3      	adds	r3, r2, r3
 80099ee:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result = BOS_OK;
 80099f4:	2700      	movs	r7, #0
			if (cMessage[port - 1][2] >> 7) {
 80099f6:	000e      	movs	r6, r1
 80099f8:	1853      	adds	r3, r2, r1
 80099fa:	3302      	adds	r3, #2
 80099fc:	9309      	str	r3, [sp, #36]	; 0x24
 80099fe:	468a      	mov	sl, r1
 8009a00:	e026      	b.n	8009a50 <PxMessagingTask+0x88>
				longMessage = 1;
 8009a02:	4ad1      	ldr	r2, [pc, #836]	; (8009d48 <PxMessagingTask+0x380>)
 8009a04:	2001      	movs	r0, #1
 8009a06:	7010      	strb	r0, [r2, #0]
 8009a08:	e033      	b.n	8009a72 <PxMessagingTask+0xaa>
				code = cMessage[port - 1][3 + shift];
 8009a0a:	4bce      	ldr	r3, [pc, #824]	; (8009d44 <PxMessagingTask+0x37c>)
 8009a0c:	199b      	adds	r3, r3, r6
 8009a0e:	189a      	adds	r2, r3, r2
 8009a10:	78d3      	ldrb	r3, [r2, #3]
 8009a12:	4698      	mov	r8, r3
 8009a14:	e04a      	b.n	8009aac <PxMessagingTask+0xe4>
				if (code == CODE_UPDATE) {		// Remote bootloader update
 8009a16:	4643      	mov	r3, r8
 8009a18:	2b19      	cmp	r3, #25
 8009a1a:	d063      	beq.n	8009ae4 <PxMessagingTask+0x11c>
				} else if (code == CODE_UPDATE_VIA_PORT) {// Remote 'via port' bootloader update
 8009a1c:	2b1a      	cmp	r3, #26
 8009a1e:	d06b      	beq.n	8009af8 <PxMessagingTask+0x130>
		if (result == BOS_ERR_UnknownMessage) {
 8009a20:	2f01      	cmp	r7, #1
 8009a22:	d101      	bne.n	8009a28 <PxMessagingTask+0x60>
 8009a24:	f001 fabe 	bl	800afa4 <PxMessagingTask+0x15dc>
		memset(cMessage[port - 1], 0, (size_t) messageLength[port - 1]);
 8009a28:	4cc8      	ldr	r4, [pc, #800]	; (8009d4c <PxMessagingTask+0x384>)
 8009a2a:	5d62      	ldrb	r2, [r4, r5]
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	9807      	ldr	r0, [sp, #28]
 8009a30:	f009 fbd2 	bl	80131d8 <memset>
		messageLength[port - 1] = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	5563      	strb	r3, [r4, r5]
		if (portStatus[port] != STREAM && portStatus[port] != CLI
 8009a38:	4bc5      	ldr	r3, [pc, #788]	; (8009d50 <PxMessagingTask+0x388>)
				&& portStatus[port] != PORTBUTTON) {
 8009a3a:	465a      	mov	r2, fp
 8009a3c:	5c9b      	ldrb	r3, [r3, r2]
		if (portStatus[port] != STREAM && portStatus[port] != CLI
 8009a3e:	3b02      	subs	r3, #2
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d903      	bls.n	8009a4c <PxMessagingTask+0x84>
			portStatus[port] = FREE;
 8009a44:	4bc2      	ldr	r3, [pc, #776]	; (8009d50 <PxMessagingTask+0x388>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	4659      	mov	r1, fp
 8009a4a:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009a4c:	f005 ff94 	bl	800f978 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009a50:	2101      	movs	r1, #1
 8009a52:	4249      	negs	r1, r1
 8009a54:	2001      	movs	r0, #1
 8009a56:	f005 fcb5 	bl	800f3c4 <ulTaskNotifyTake>
		if (messageLength[port - 1]) {
 8009a5a:	4bbc      	ldr	r3, [pc, #752]	; (8009d4c <PxMessagingTask+0x384>)
 8009a5c:	5d59      	ldrb	r1, [r3, r5]
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	d0de      	beq.n	8009a20 <PxMessagingTask+0x58>
			if (cMessage[port - 1][2] >> 7) {
 8009a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b25a      	sxtb	r2, r3
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	dbca      	blt.n	8009a02 <PxMessagingTask+0x3a>
				longMessage = 0;
 8009a6c:	4ab6      	ldr	r2, [pc, #728]	; (8009d48 <PxMessagingTask+0x380>)
 8009a6e:	2000      	movs	r0, #0
 8009a70:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port - 1][0];
 8009a72:	4ab4      	ldr	r2, [pc, #720]	; (8009d44 <PxMessagingTask+0x37c>)
 8009a74:	5cb0      	ldrb	r0, [r6, r2]
 8009a76:	4681      	mov	r9, r0
			src = cMessage[port - 1][1];
 8009a78:	1992      	adds	r2, r2, r6
 8009a7a:	7852      	ldrb	r2, [r2, #1]
 8009a7c:	9204      	str	r2, [sp, #16]
			if (cMessage[port - 1][2] & 0x01) {	// 1st bit (LSB) Extended options - TODO handle extended options case
 8009a7e:	2201      	movs	r2, #1
 8009a80:	401a      	ands	r2, r3
			shift = 0;
 8009a82:	9206      	str	r2, [sp, #24]
			BOS.trace = (traceOptions_t) ((cMessage[port - 1][2] >> 2) & 0x03);	// 3rd-4th bits Trace 
 8009a84:	4cb3      	ldr	r4, [pc, #716]	; (8009d54 <PxMessagingTask+0x38c>)
 8009a86:	0718      	lsls	r0, r3, #28
 8009a88:	0f80      	lsrs	r0, r0, #30
 8009a8a:	71e0      	strb	r0, [r4, #7]
			BOS.response = (cMessage[port - 1][2]) & 0x60;// 6th-7th bits Response mode
 8009a8c:	2060      	movs	r0, #96	; 0x60
 8009a8e:	4018      	ands	r0, r3
 8009a90:	71a0      	strb	r0, [r4, #6]
			if (extendCode == true) {
 8009a92:	079b      	lsls	r3, r3, #30
 8009a94:	d5b9      	bpl.n	8009a0a <PxMessagingTask+0x42>
				code = (((uint16_t) cMessage[port - 1][4 + shift] << 8)
 8009a96:	4bab      	ldr	r3, [pc, #684]	; (8009d44 <PxMessagingTask+0x37c>)
 8009a98:	199b      	adds	r3, r3, r6
 8009a9a:	189b      	adds	r3, r3, r2
 8009a9c:	7918      	ldrb	r0, [r3, #4]
 8009a9e:	0200      	lsls	r0, r0, #8
						+ cMessage[port - 1][3 + shift]);
 8009aa0:	78db      	ldrb	r3, [r3, #3]
				code = (((uint16_t) cMessage[port - 1][4 + shift] << 8)
 8009aa2:	181b      	adds	r3, r3, r0
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4698      	mov	r8, r3
				++shift;
 8009aa8:	1c53      	adds	r3, r2, #1
 8009aaa:	9306      	str	r3, [sp, #24]
			if ((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1))
 8009aac:	464b      	mov	r3, r9
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2bfc      	cmp	r3, #252	; 0xfc
 8009ab4:	d901      	bls.n	8009aba <PxMessagingTask+0xf2>
 8009ab6:	f001 faae 	bl	800b016 <PxMessagingTask+0x164e>
 8009aba:	4ba7      	ldr	r3, [pc, #668]	; (8009d58 <PxMessagingTask+0x390>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	454b      	cmp	r3, r9
 8009ac0:	d101      	bne.n	8009ac6 <PxMessagingTask+0xfe>
 8009ac2:	f001 faa8 	bl	800b016 <PxMessagingTask+0x164e>
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d101      	bne.n	8009ace <PxMessagingTask+0x106>
 8009aca:	f001 fa9d 	bl	800b008 <PxMessagingTask+0x1640>
				ForwardReceivedMessage(port);
 8009ace:	9808      	ldr	r0, [sp, #32]
 8009ad0:	f7ff fc4e 	bl	8009370 <ForwardReceivedMessage>
				if (BOS.trace)
 8009ad4:	4b9f      	ldr	r3, [pc, #636]	; (8009d54 <PxMessagingTask+0x38c>)
 8009ad6:	79db      	ldrb	r3, [r3, #7]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d09c      	beq.n	8009a16 <PxMessagingTask+0x4e>
					indMode = IND_SHORT_BLINK;
 8009adc:	4b9f      	ldr	r3, [pc, #636]	; (8009d5c <PxMessagingTask+0x394>)
 8009ade:	2203      	movs	r2, #3
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	e798      	b.n	8009a16 <PxMessagingTask+0x4e>
					Delay_ms(100);
 8009ae4:	2064      	movs	r0, #100	; 0x64
 8009ae6:	f006 f8c5 	bl	800fc74 <HAL_Delay>
					remoteBootloaderUpdate(src, dst, port, 0);
 8009aea:	2300      	movs	r3, #0
 8009aec:	9a08      	ldr	r2, [sp, #32]
 8009aee:	4649      	mov	r1, r9
 8009af0:	9804      	ldr	r0, [sp, #16]
 8009af2:	f7f9 ff15 	bl	8003920 <remoteBootloaderUpdate>
 8009af6:	e793      	b.n	8009a20 <PxMessagingTask+0x58>
					Delay_ms(100);
 8009af8:	2064      	movs	r0, #100	; 0x64
 8009afa:	f006 f8bb 	bl	800fc74 <HAL_Delay>
					remoteBootloaderUpdate(src, dst, port,
 8009afe:	4b91      	ldr	r3, [pc, #580]	; (8009d44 <PxMessagingTask+0x37c>)
 8009b00:	199b      	adds	r3, r3, r6
 8009b02:	9a06      	ldr	r2, [sp, #24]
 8009b04:	5c9b      	ldrb	r3, [r3, r2]
 8009b06:	9a08      	ldr	r2, [sp, #32]
 8009b08:	4649      	mov	r1, r9
 8009b0a:	9804      	ldr	r0, [sp, #16]
 8009b0c:	f7f9 ff08 	bl	8003920 <remoteBootloaderUpdate>
 8009b10:	e786      	b.n	8009a20 <PxMessagingTask+0x58>
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 8009b12:	4b8c      	ldr	r3, [pc, #560]	; (8009d44 <PxMessagingTask+0x37c>)
 8009b14:	199b      	adds	r3, r3, r6
 8009b16:	1859      	adds	r1, r3, r1
 8009b18:	3901      	subs	r1, #1
 8009b1a:	780b      	ldrb	r3, [r1, #0]
								!= bcastLastID) {
 8009b1c:	4a90      	ldr	r2, [pc, #576]	; (8009d60 <PxMessagingTask+0x398>)
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d113      	bne.n	8009b4c <PxMessagingTask+0x184>
					result = BOS_ERR_MSG_Reflection;
 8009b24:	2703      	movs	r7, #3
				if (result == BOS_OK) {
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	d000      	beq.n	8009b2c <PxMessagingTask+0x164>
 8009b2a:	e779      	b.n	8009a20 <PxMessagingTask+0x58>
				shift += 4;
 8009b2c:	9c06      	ldr	r4, [sp, #24]
 8009b2e:	3404      	adds	r4, #4
				numOfParams = messageLength[port - 1] - shift;
 8009b30:	4b86      	ldr	r3, [pc, #536]	; (8009d4c <PxMessagingTask+0x384>)
 8009b32:	5d59      	ldrb	r1, [r3, r5]
 8009b34:	1b0a      	subs	r2, r1, r4
 8009b36:	b2d3      	uxtb	r3, r2
 8009b38:	9306      	str	r3, [sp, #24]
					switch (code) {
 8009b3a:	4643      	mov	r3, r8
 8009b3c:	2b24      	cmp	r3, #36	; 0x24
 8009b3e:	d901      	bls.n	8009b44 <PxMessagingTask+0x17c>
 8009b40:	f001 fa04 	bl	800af4c <PxMessagingTask+0x1584>
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4a87      	ldr	r2, [pc, #540]	; (8009d64 <PxMessagingTask+0x39c>)
 8009b48:	58d3      	ldr	r3, [r2, r3]
 8009b4a:	469f      	mov	pc, r3
					bcastID = bcastLastID =
 8009b4c:	4a84      	ldr	r2, [pc, #528]	; (8009d60 <PxMessagingTask+0x398>)
 8009b4e:	7013      	strb	r3, [r2, #0]
 8009b50:	4a85      	ldr	r2, [pc, #532]	; (8009d68 <PxMessagingTask+0x3a0>)
 8009b52:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009b54:	9908      	ldr	r1, [sp, #32]
 8009b56:	20ff      	movs	r0, #255	; 0xff
 8009b58:	f7ff fc2a 	bl	80093b0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] = 0;// Reset bcastID location 
 8009b5c:	4b7b      	ldr	r3, [pc, #492]	; (8009d4c <PxMessagingTask+0x384>)
 8009b5e:	5d5a      	ldrb	r2, [r3, r5]
 8009b60:	4b78      	ldr	r3, [pc, #480]	; (8009d44 <PxMessagingTask+0x37c>)
 8009b62:	199b      	adds	r3, r3, r6
 8009b64:	189b      	adds	r3, r3, r2
 8009b66:	3b01      	subs	r3, #1
 8009b68:	2200      	movs	r2, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	e7db      	b.n	8009b26 <PxMessagingTask+0x15e>
						for (p = 0; p < numOfParams; p++) {
 8009b6e:	9b06      	ldr	r3, [sp, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01f      	beq.n	8009bb4 <PxMessagingTask+0x1ec>
							arrayPortsDir[src - 1] |= (0x8000
 8009b74:	9b04      	ldr	r3, [sp, #16]
 8009b76:	1e58      	subs	r0, r3, #1
 8009b78:	0042      	lsls	r2, r0, #1
 8009b7a:	4b7c      	ldr	r3, [pc, #496]	; (8009d6c <PxMessagingTask+0x3a4>)
 8009b7c:	5ad3      	ldrh	r3, [r2, r3]
 8009b7e:	4652      	mov	r2, sl
 8009b80:	18a1      	adds	r1, r4, r2
 8009b82:	4a70      	ldr	r2, [pc, #448]	; (8009d44 <PxMessagingTask+0x37c>)
 8009b84:	1889      	adds	r1, r1, r2
 8009b86:	3201      	adds	r2, #1
 8009b88:	4452      	add	r2, sl
 8009b8a:	1914      	adds	r4, r2, r4
 8009b8c:	9a06      	ldr	r2, [sp, #24]
 8009b8e:	3a01      	subs	r2, #1
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	18a4      	adds	r4, r4, r2
									>> ((cMessage[port - 1][shift + p]) - 1));
 8009b94:	2780      	movs	r7, #128	; 0x80
 8009b96:	023f      	lsls	r7, r7, #8
 8009b98:	4684      	mov	ip, r0
 8009b9a:	780a      	ldrb	r2, [r1, #0]
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	0038      	movs	r0, r7
 8009ba0:	4110      	asrs	r0, r2
							arrayPortsDir[src - 1] |= (0x8000
 8009ba2:	4303      	orrs	r3, r0
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3101      	adds	r1, #1
						for (p = 0; p < numOfParams; p++) {
 8009ba8:	42a1      	cmp	r1, r4
 8009baa:	d1f6      	bne.n	8009b9a <PxMessagingTask+0x1d2>
 8009bac:	4660      	mov	r0, ip
 8009bae:	0040      	lsls	r0, r0, #1
 8009bb0:	4a6e      	ldr	r2, [pc, #440]	; (8009d6c <PxMessagingTask+0x3a4>)
 8009bb2:	5283      	strh	r3, [r0, r2]
						responseStatus = BOS_OK;
 8009bb4:	4b6e      	ldr	r3, [pc, #440]	; (8009d70 <PxMessagingTask+0x3a8>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
						break;
 8009bba:	2700      	movs	r7, #0
 8009bbc:	e734      	b.n	8009a28 <PxMessagingTask+0x60>
						indMode = IND_PING;
 8009bbe:	4b67      	ldr	r3, [pc, #412]	; (8009d5c <PxMessagingTask+0x394>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f004 f82a 	bl	800dc1e <osDelay>
						if (BOS.response == BOS_RESPONSE_ALL
 8009bca:	4b62      	ldr	r3, [pc, #392]	; (8009d54 <PxMessagingTask+0x38c>)
								|| BOS.response == BOS_RESPONSE_MSG)
 8009bcc:	799b      	ldrb	r3, [r3, #6]
 8009bce:	2240      	movs	r2, #64	; 0x40
 8009bd0:	4393      	bics	r3, r2
 8009bd2:	2700      	movs	r7, #0
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d000      	beq.n	8009bda <PxMessagingTask+0x212>
 8009bd8:	e726      	b.n	8009a28 <PxMessagingTask+0x60>
							SendMessageToModule(src, CODE_PING_RESPONSE, 0);
 8009bda:	003a      	movs	r2, r7
 8009bdc:	2102      	movs	r1, #2
 8009bde:	9804      	ldr	r0, [sp, #16]
 8009be0:	f7ff fc2e 	bl	8009440 <SendMessageToModule>
 8009be4:	e720      	b.n	8009a28 <PxMessagingTask+0x60>
						if (!moduleAlias[myID][0])
 8009be6:	4b5c      	ldr	r3, [pc, #368]	; (8009d58 <PxMessagingTask+0x390>)
 8009be8:	781a      	ldrb	r2, [r3, #0]
 8009bea:	0093      	lsls	r3, r2, #2
 8009bec:	189b      	adds	r3, r3, r2
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	4a60      	ldr	r2, [pc, #384]	; (8009d74 <PxMessagingTask+0x3ac>)
 8009bf2:	5c9b      	ldrb	r3, [r3, r2]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d117      	bne.n	8009c28 <PxMessagingTask+0x260>
							sprintf((char*) pcUserMessage,
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	495f      	ldr	r1, [pc, #380]	; (8009d78 <PxMessagingTask+0x3b0>)
 8009bfc:	485f      	ldr	r0, [pc, #380]	; (8009d7c <PxMessagingTask+0x3b4>)
 8009bfe:	f009 fbe9 	bl	80133d4 <siprintf>
								strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009c02:	4c5e      	ldr	r4, [pc, #376]	; (8009d7c <PxMessagingTask+0x3b4>)
 8009c04:	0020      	movs	r0, r4
 8009c06:	f7f6 fa87 	bl	8000118 <strlen>
						writePxMutex(PcPort, pcUserMessage,
 8009c0a:	b282      	uxth	r2, r0
 8009c0c:	4b5c      	ldr	r3, [pc, #368]	; (8009d80 <PxMessagingTask+0x3b8>)
 8009c0e:	7818      	ldrb	r0, [r3, #0]
 8009c10:	2301      	movs	r3, #1
 8009c12:	425b      	negs	r3, r3
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	3333      	adds	r3, #51	; 0x33
 8009c18:	0021      	movs	r1, r4
 8009c1a:	f003 fed3 	bl	800d9c4 <writePxMutex>
						responseStatus = BOS_OK;
 8009c1e:	4b54      	ldr	r3, [pc, #336]	; (8009d70 <PxMessagingTask+0x3a8>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
						break;
 8009c24:	2700      	movs	r7, #0
 8009c26:	e6ff      	b.n	8009a28 <PxMessagingTask+0x60>
									moduleAlias[src]);
 8009c28:	230a      	movs	r3, #10
 8009c2a:	9904      	ldr	r1, [sp, #16]
 8009c2c:	434b      	muls	r3, r1
 8009c2e:	4a51      	ldr	r2, [pc, #324]	; (8009d74 <PxMessagingTask+0x3ac>)
 8009c30:	189b      	adds	r3, r3, r2
							sprintf((char*) pcUserMessage,
 8009c32:	000a      	movs	r2, r1
 8009c34:	4953      	ldr	r1, [pc, #332]	; (8009d84 <PxMessagingTask+0x3bc>)
 8009c36:	4851      	ldr	r0, [pc, #324]	; (8009d7c <PxMessagingTask+0x3b4>)
 8009c38:	f009 fbcc 	bl	80133d4 <siprintf>
 8009c3c:	e7e1      	b.n	8009c02 <PxMessagingTask+0x23a>
						IND_ON();
 8009c3e:	2180      	movs	r1, #128	; 0x80
 8009c40:	2090      	movs	r0, #144	; 0x90
 8009c42:	2201      	movs	r2, #1
 8009c44:	0109      	lsls	r1, r1, #4
 8009c46:	05c0      	lsls	r0, r0, #23
 8009c48:	f007 fca8 	bl	801159c <HAL_GPIO_WritePin>
						break;
 8009c4c:	2700      	movs	r7, #0
 8009c4e:	e6eb      	b.n	8009a28 <PxMessagingTask+0x60>
						IND_OFF();
 8009c50:	2180      	movs	r1, #128	; 0x80
 8009c52:	2090      	movs	r0, #144	; 0x90
 8009c54:	2200      	movs	r2, #0
 8009c56:	0109      	lsls	r1, r1, #4
 8009c58:	05c0      	lsls	r0, r0, #23
 8009c5a:	f007 fc9f 	bl	801159c <HAL_GPIO_WritePin>
						break;
 8009c5e:	2700      	movs	r7, #0
 8009c60:	e6e2      	b.n	8009a28 <PxMessagingTask+0x60>
						IND_toggle();
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	2090      	movs	r0, #144	; 0x90
 8009c66:	0109      	lsls	r1, r1, #4
 8009c68:	05c0      	lsls	r0, r0, #23
 8009c6a:	f007 fc9d 	bl	80115a8 <HAL_GPIO_TogglePin>
						break;
 8009c6e:	2700      	movs	r7, #0
 8009c70:	e6da      	b.n	8009a28 <PxMessagingTask+0x60>
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009c72:	4f45      	ldr	r7, [pc, #276]	; (8009d88 <PxMessagingTask+0x3c0>)
 8009c74:	00ab      	lsls	r3, r5, #2
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009c76:	4a33      	ldr	r2, [pc, #204]	; (8009d44 <PxMessagingTask+0x37c>)
 8009c78:	1992      	adds	r2, r2, r6
 8009c7a:	1910      	adds	r0, r2, r4
 8009c7c:	7881      	ldrb	r1, [r0, #2]
 8009c7e:	468c      	mov	ip, r1
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009c80:	9904      	ldr	r1, [sp, #16]
 8009c82:	0209      	lsls	r1, r1, #8
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009c84:	4461      	add	r1, ip
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009c86:	53d9      	strh	r1, [r3, r7]
						neighbors[port - 1][1] =
 8009c88:	18fb      	adds	r3, r7, r3
								((uint16_t) cMessage[port - 1][shift] << 8)
 8009c8a:	5d11      	ldrb	r1, [r2, r4]
 8009c8c:	0209      	lsls	r1, r1, #8
										+ cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009c8e:	7842      	ldrb	r2, [r0, #1]
 8009c90:	1852      	adds	r2, r2, r1
						neighbors[port - 1][1] =
 8009c92:	805a      	strh	r2, [r3, #2]
						messageParams[1] = (uint8_t) myPN;
 8009c94:	4b3d      	ldr	r3, [pc, #244]	; (8009d8c <PxMessagingTask+0x3c4>)
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	4a3d      	ldr	r2, [pc, #244]	; (8009d90 <PxMessagingTask+0x3c8>)
 8009c9a:	7053      	strb	r3, [r2, #1]
						messageParams[0] = (uint8_t) (myPN >> 8);
 8009c9c:	0a1b      	lsrs	r3, r3, #8
 8009c9e:	7013      	strb	r3, [r2, #0]
						messageParams[2] = port;
 8009ca0:	9c08      	ldr	r4, [sp, #32]
 8009ca2:	7094      	strb	r4, [r2, #2]
						osDelay(2);
 8009ca4:	2002      	movs	r0, #2
 8009ca6:	f003 ffba 	bl	800dc1e <osDelay>
						SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009caa:	2303      	movs	r3, #3
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	3308      	adds	r3, #8
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	0020      	movs	r0, r4
 8009cb6:	f7ff f99b 	bl	8008ff0 <SendMessageFromPort>
						break;
 8009cba:	2700      	movs	r7, #0
 8009cbc:	e6b4      	b.n	8009a28 <PxMessagingTask+0x60>
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009cbe:	4f32      	ldr	r7, [pc, #200]	; (8009d88 <PxMessagingTask+0x3c0>)
 8009cc0:	00ab      	lsls	r3, r5, #2
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009cc2:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <PxMessagingTask+0x37c>)
 8009cc4:	1992      	adds	r2, r2, r6
 8009cc6:	1910      	adds	r0, r2, r4
 8009cc8:	7881      	ldrb	r1, [r0, #2]
 8009cca:	468c      	mov	ip, r1
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009ccc:	9904      	ldr	r1, [sp, #16]
 8009cce:	0209      	lsls	r1, r1, #8
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009cd0:	4461      	add	r1, ip
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009cd2:	53d9      	strh	r1, [r3, r7]
						neighbors[port - 1][1] =
 8009cd4:	18fb      	adds	r3, r7, r3
								((uint16_t) cMessage[port - 1][shift] << 8)
 8009cd6:	5d11      	ldrb	r1, [r2, r4]
 8009cd8:	0209      	lsls	r1, r1, #8
										+ cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009cda:	7842      	ldrb	r2, [r0, #1]
 8009cdc:	1852      	adds	r2, r2, r1
						neighbors[port - 1][1] =
 8009cde:	805a      	strh	r2, [r3, #2]
						responseStatus = BOS_OK;
 8009ce0:	4b23      	ldr	r3, [pc, #140]	; (8009d70 <PxMessagingTask+0x3a8>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	701a      	strb	r2, [r3, #0]
						break;
 8009ce6:	2700      	movs	r7, #0
 8009ce8:	e69e      	b.n	8009a28 <PxMessagingTask+0x60>
						ExploreNeighbors(port);
 8009cea:	9808      	ldr	r0, [sp, #32]
 8009cec:	f7f9 fc82 	bl	80035f4 <ExploreNeighbors>
						indMode = IND_TOPOLOGY;
 8009cf0:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <PxMessagingTask+0x394>)
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 8009cf6:	200a      	movs	r0, #10
 8009cf8:	f003 ff91 	bl	800dc1e <osDelay>
 8009cfc:	4f22      	ldr	r7, [pc, #136]	; (8009d88 <PxMessagingTask+0x3c0>)
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8009cfe:	2401      	movs	r4, #1
						temp = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	9305      	str	r3, [sp, #20]
 8009d04:	e004      	b.n	8009d10 <PxMessagingTask+0x348>
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8009d06:	3401      	adds	r4, #1
 8009d08:	b2e4      	uxtb	r4, r4
 8009d0a:	3704      	adds	r7, #4
 8009d0c:	2c06      	cmp	r4, #6
 8009d0e:	d011      	beq.n	8009d34 <PxMessagingTask+0x36c>
							if (neighbors[p - 1][0]) {
 8009d10:	883b      	ldrh	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0f7      	beq.n	8009d06 <PxMessagingTask+0x33e>
								messageParams[temp] = p;
 8009d16:	4a1e      	ldr	r2, [pc, #120]	; (8009d90 <PxMessagingTask+0x3c8>)
 8009d18:	9b05      	ldr	r3, [sp, #20]
 8009d1a:	54d4      	strb	r4, [r2, r3]
								memcpy(messageParams + temp + 1,
 8009d1c:	1c58      	adds	r0, r3, #1
 8009d1e:	4694      	mov	ip, r2
 8009d20:	4460      	add	r0, ip
 8009d22:	2204      	movs	r2, #4
 8009d24:	0039      	movs	r1, r7
 8009d26:	f009 fa4e 	bl	80131c6 <memcpy>
								temp += 5;
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	3305      	adds	r3, #5
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	e7e8      	b.n	8009d06 <PxMessagingTask+0x33e>
						SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE,
 8009d34:	466b      	mov	r3, sp
 8009d36:	8a9a      	ldrh	r2, [r3, #20]
 8009d38:	210d      	movs	r1, #13
 8009d3a:	9804      	ldr	r0, [sp, #16]
 8009d3c:	f7ff fb80 	bl	8009440 <SendMessageToModule>
						break;
 8009d40:	2700      	movs	r7, #0
 8009d42:	e671      	b.n	8009a28 <PxMessagingTask+0x60>
 8009d44:	20000530 	.word	0x20000530
 8009d48:	200006e5 	.word	0x200006e5
 8009d4c:	20000720 	.word	0x20000720
 8009d50:	200008e0 	.word	0x200008e0
 8009d54:	20006130 	.word	0x20006130
 8009d58:	20000866 	.word	0x20000866
 8009d5c:	200006e4 	.word	0x200006e4
 8009d60:	20000d72 	.word	0x20000d72
 8009d64:	08018284 	.word	0x08018284
 8009d68:	200004dc 	.word	0x200004dc
 8009d6c:	200065d8 	.word	0x200065d8
 8009d70:	200008f8 	.word	0x200008f8
 8009d74:	20000758 	.word	0x20000758
 8009d78:	08016b48 	.word	0x08016b48
 8009d7c:	20000ec8 	.word	0x20000ec8
 8009d80:	2000029f 	.word	0x2000029f
 8009d84:	08016b5c 	.word	0x08016b5c
 8009d88:	20000868 	.word	0x20000868
 8009d8c:	20000050 	.word	0x20000050
 8009d90:	20000728 	.word	0x20000728
						temp = numOfParams / 5;
 8009d94:	2105      	movs	r1, #5
 8009d96:	9806      	ldr	r0, [sp, #24]
 8009d98:	f7f6 f9d0 	bl	800013c <__udivsi3>
 8009d9c:	b2c2      	uxtb	r2, r0
 8009d9e:	9205      	str	r2, [sp, #20]
						for (uint8_t k = 0; k < temp; k++) {
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	d018      	beq.n	8009dd6 <PxMessagingTask+0x40e>
 8009da4:	4653      	mov	r3, sl
 8009da6:	191f      	adds	r7, r3, r4
 8009da8:	4bd4      	ldr	r3, [pc, #848]	; (800a0fc <PxMessagingTask+0x734>)
 8009daa:	18ff      	adds	r7, r7, r3
 8009dac:	3305      	adds	r3, #5
 8009dae:	4453      	add	r3, sl
 8009db0:	191c      	adds	r4, r3, r4
 8009db2:	1e53      	subs	r3, r2, #1
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	009a      	lsls	r2, r3, #2
 8009db8:	18d3      	adds	r3, r2, r3
 8009dba:	18e4      	adds	r4, r4, r3
									&neighbors2[(cMessage[port - 1][shift
 8009dbc:	4bd0      	ldr	r3, [pc, #832]	; (800a100 <PxMessagingTask+0x738>)
 8009dbe:	4698      	mov	r8, r3
 8009dc0:	7838      	ldrb	r0, [r7, #0]
											+ k * 5]) - 1][0],
 8009dc2:	3801      	subs	r0, #1
									&neighbors2[(cMessage[port - 1][shift
 8009dc4:	0080      	lsls	r0, r0, #2
 8009dc6:	4440      	add	r0, r8
							memcpy(
 8009dc8:	1c79      	adds	r1, r7, #1
 8009dca:	2204      	movs	r2, #4
 8009dcc:	f009 f9fb 	bl	80131c6 <memcpy>
 8009dd0:	3705      	adds	r7, #5
						for (uint8_t k = 0; k < temp; k++) {
 8009dd2:	42bc      	cmp	r4, r7
 8009dd4:	d1f4      	bne.n	8009dc0 <PxMessagingTask+0x3f8>
						responseStatus = BOS_OK;
 8009dd6:	4bcb      	ldr	r3, [pc, #812]	; (800a104 <PxMessagingTask+0x73c>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
						break;
 8009ddc:	2700      	movs	r7, #0
 8009dde:	e623      	b.n	8009a28 <PxMessagingTask+0x60>
 8009de0:	4653      	mov	r3, sl
 8009de2:	18e3      	adds	r3, r4, r3
 8009de4:	4ac5      	ldr	r2, [pc, #788]	; (800a0fc <PxMessagingTask+0x734>)
 8009de6:	4698      	mov	r8, r3
 8009de8:	4490      	add	r8, r2
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8009dea:	2701      	movs	r7, #1
							if (p != port)
 8009dec:	9b08      	ldr	r3, [sp, #32]
 8009dee:	42bb      	cmp	r3, r7
 8009df0:	d006      	beq.n	8009e00 <PxMessagingTask+0x438>
								SwapUartPins(GetUart(p),
 8009df2:	0038      	movs	r0, r7
 8009df4:	f003 fdc8 	bl	800d988 <GetUart>
 8009df8:	4643      	mov	r3, r8
 8009dfa:	7819      	ldrb	r1, [r3, #0]
 8009dfc:	f003 fe5a 	bl	800dab4 <SwapUartPins>
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8009e00:	3701      	adds	r7, #1
 8009e02:	b2ff      	uxtb	r7, r7
 8009e04:	2301      	movs	r3, #1
 8009e06:	469c      	mov	ip, r3
 8009e08:	44e0      	add	r8, ip
 8009e0a:	2f06      	cmp	r7, #6
 8009e0c:	d1ee      	bne.n	8009dec <PxMessagingTask+0x424>
						SwapUartPins(GetUart(port),
 8009e0e:	9808      	ldr	r0, [sp, #32]
 8009e10:	f003 fdba 	bl	800d988 <GetUart>
 8009e14:	4bb9      	ldr	r3, [pc, #740]	; (800a0fc <PxMessagingTask+0x734>)
 8009e16:	199b      	adds	r3, r3, r6
 8009e18:	191c      	adds	r4, r3, r4
 8009e1a:	7aa1      	ldrb	r1, [r4, #10]
 8009e1c:	f003 fe4a 	bl	800dab4 <SwapUartPins>
						break;
 8009e20:	2700      	movs	r7, #0
 8009e22:	e601      	b.n	8009a28 <PxMessagingTask+0x60>
						if (cMessage[port - 1][shift] == 0) /* Change my own ID */
 8009e24:	4bb5      	ldr	r3, [pc, #724]	; (800a0fc <PxMessagingTask+0x734>)
 8009e26:	199b      	adds	r3, r3, r6
 8009e28:	5d1b      	ldrb	r3, [r3, r4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <PxMessagingTask+0x47a>
							myID = cMessage[port - 1][1 + shift];
 8009e2e:	2238      	movs	r2, #56	; 0x38
 8009e30:	436a      	muls	r2, r5
 8009e32:	4bb2      	ldr	r3, [pc, #712]	; (800a0fc <PxMessagingTask+0x734>)
 8009e34:	189b      	adds	r3, r3, r2
 8009e36:	191c      	adds	r4, r3, r4
 8009e38:	7862      	ldrb	r2, [r4, #1]
 8009e3a:	4bb3      	ldr	r3, [pc, #716]	; (800a108 <PxMessagingTask+0x740>)
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	2700      	movs	r7, #0
 8009e40:	e5f2      	b.n	8009a28 <PxMessagingTask+0x60>
 8009e42:	2700      	movs	r7, #0
						else if (cMessage[port - 1][shift] == 1) { /* Change my neighbor's ID */
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d000      	beq.n	8009e4a <PxMessagingTask+0x482>
 8009e48:	e5ee      	b.n	8009a28 <PxMessagingTask+0x60>
							messageParams[0] = 0; /* change own ID */
 8009e4a:	49b0      	ldr	r1, [pc, #704]	; (800a10c <PxMessagingTask+0x744>)
 8009e4c:	700f      	strb	r7, [r1, #0]
							messageParams[1] = cMessage[port - 1][1 + shift]; /* The new ID */
 8009e4e:	2238      	movs	r2, #56	; 0x38
 8009e50:	436a      	muls	r2, r5
 8009e52:	4baa      	ldr	r3, [pc, #680]	; (800a0fc <PxMessagingTask+0x734>)
 8009e54:	189b      	adds	r3, r3, r2
 8009e56:	191b      	adds	r3, r3, r4
 8009e58:	785a      	ldrb	r2, [r3, #1]
 8009e5a:	704a      	strb	r2, [r1, #1]
							SendMessageFromPort(cMessage[port - 1][2 + shift],
 8009e5c:	7898      	ldrb	r0, [r3, #2]
 8009e5e:	2303      	movs	r3, #3
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	330d      	adds	r3, #13
 8009e64:	003a      	movs	r2, r7
 8009e66:	0039      	movs	r1, r7
 8009e68:	f7ff f8c2 	bl	8008ff0 <SendMessageFromPort>
 8009e6c:	e5dc      	b.n	8009a28 <PxMessagingTask+0x60>
						if (longMessage) {
 8009e6e:	4ba8      	ldr	r3, [pc, #672]	; (800a110 <PxMessagingTask+0x748>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d011      	beq.n	8009e9a <PxMessagingTask+0x4d2>
							memcpy(
 8009e76:	4ba7      	ldr	r3, [pc, #668]	; (800a114 <PxMessagingTask+0x74c>)
 8009e78:	4698      	mov	r8, r3
 8009e7a:	881f      	ldrh	r7, [r3, #0]
											+ longMessageLastPtr,
 8009e7c:	48a6      	ldr	r0, [pc, #664]	; (800a118 <PxMessagingTask+0x750>)
 8009e7e:	1838      	adds	r0, r7, r0
									&cMessage[port - 1][shift],
 8009e80:	4454      	add	r4, sl
 8009e82:	499e      	ldr	r1, [pc, #632]	; (800a0fc <PxMessagingTask+0x734>)
 8009e84:	1861      	adds	r1, r4, r1
							memcpy(
 8009e86:	9c06      	ldr	r4, [sp, #24]
 8009e88:	0022      	movs	r2, r4
 8009e8a:	f009 f99c 	bl	80131c6 <memcpy>
							longMessageLastPtr += numOfParams;
 8009e8e:	46a4      	mov	ip, r4
 8009e90:	4467      	add	r7, ip
 8009e92:	4643      	mov	r3, r8
 8009e94:	801f      	strh	r7, [r3, #0]
 8009e96:	2700      	movs	r7, #0
 8009e98:	e5c6      	b.n	8009a28 <PxMessagingTask+0x60>
							memcpy(
 8009e9a:	4b9e      	ldr	r3, [pc, #632]	; (800a114 <PxMessagingTask+0x74c>)
 8009e9c:	4699      	mov	r9, r3
 8009e9e:	881f      	ldrh	r7, [r3, #0]
											+ longMessageLastPtr,
 8009ea0:	4b9d      	ldr	r3, [pc, #628]	; (800a118 <PxMessagingTask+0x750>)
 8009ea2:	4698      	mov	r8, r3
 8009ea4:	18f8      	adds	r0, r7, r3
									&cMessage[port - 1][shift],
 8009ea6:	4454      	add	r4, sl
 8009ea8:	4994      	ldr	r1, [pc, #592]	; (800a0fc <PxMessagingTask+0x734>)
 8009eaa:	1861      	adds	r1, r4, r1
							memcpy(
 8009eac:	9c06      	ldr	r4, [sp, #24]
 8009eae:	0022      	movs	r2, r4
 8009eb0:	f009 f989 	bl	80131c6 <memcpy>
							longMessageLastPtr += numOfParams;
 8009eb4:	193c      	adds	r4, r7, r4
 8009eb6:	b2a4      	uxth	r4, r4
							N = (longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009eb8:	2116      	movs	r1, #22
 8009eba:	0020      	movs	r0, r4
 8009ebc:	f7f6 f93e 	bl	800013c <__udivsi3>
 8009ec0:	4b96      	ldr	r3, [pc, #600]	; (800a11c <PxMessagingTask+0x754>)
 8009ec2:	7018      	strb	r0, [r3, #0]
							memcpy(&array, &longMessageScratchpad,
 8009ec4:	0022      	movs	r2, r4
 8009ec6:	4641      	mov	r1, r8
 8009ec8:	4895      	ldr	r0, [pc, #596]	; (800a120 <PxMessagingTask+0x758>)
 8009eca:	f009 f97c 	bl	80131c6 <memcpy>
							longMessageLastPtr = 0;
 8009ece:	2700      	movs	r7, #0
 8009ed0:	464b      	mov	r3, r9
 8009ed2:	801f      	strh	r7, [r3, #0]
 8009ed4:	e5a8      	b.n	8009a28 <PxMessagingTask+0x60>
						for (p = 1; p <= NumOfPorts; p++) {
 8009ed6:	2401      	movs	r4, #1
						temp = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	9305      	str	r3, [sp, #20]
							if (GetUart(p)->AdvancedInit.Swap
 8009edc:	2780      	movs	r7, #128	; 0x80
 8009ede:	023f      	lsls	r7, r7, #8
 8009ee0:	e003      	b.n	8009eea <PxMessagingTask+0x522>
						for (p = 1; p <= NumOfPorts; p++) {
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	b2e4      	uxtb	r4, r4
 8009ee6:	2c06      	cmp	r4, #6
 8009ee8:	d00c      	beq.n	8009f04 <PxMessagingTask+0x53c>
							if (GetUart(p)->AdvancedInit.Swap
 8009eea:	0020      	movs	r0, r4
 8009eec:	f003 fd4c 	bl	800d988 <GetUart>
 8009ef0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	d1f5      	bne.n	8009ee2 <PxMessagingTask+0x51a>
								messageParams[temp++] = p;
 8009ef6:	9a05      	ldr	r2, [sp, #20]
 8009ef8:	1c53      	adds	r3, r2, #1
 8009efa:	4984      	ldr	r1, [pc, #528]	; (800a10c <PxMessagingTask+0x744>)
 8009efc:	548c      	strb	r4, [r1, r2]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	9305      	str	r3, [sp, #20]
 8009f02:	e7ee      	b.n	8009ee2 <PxMessagingTask+0x51a>
						SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE,
 8009f04:	466b      	mov	r3, sp
 8009f06:	8a9a      	ldrh	r2, [r3, #20]
 8009f08:	2114      	movs	r1, #20
 8009f0a:	9804      	ldr	r0, [sp, #16]
 8009f0c:	f7ff fa98 	bl	8009440 <SendMessageToModule>
						break;
 8009f10:	2700      	movs	r7, #0
 8009f12:	e589      	b.n	8009a28 <PxMessagingTask+0x60>
								((uint32_t) cMessage[port - 1][shift] << 24)
 8009f14:	4b79      	ldr	r3, [pc, #484]	; (800a0fc <PxMessagingTask+0x734>)
 8009f16:	199b      	adds	r3, r3, r6
 8009f18:	5d1a      	ldrb	r2, [r3, r4]
 8009f1a:	0612      	lsls	r2, r2, #24
										+ cMessage[port - 1][3 + shift];
 8009f1c:	191b      	adds	r3, r3, r4
 8009f1e:	78d9      	ldrb	r1, [r3, #3]
						temp32 =
 8009f20:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][1
 8009f22:	7859      	ldrb	r1, [r3, #1]
												+ shift] << 16)
 8009f24:	0409      	lsls	r1, r1, #16
						temp32 =
 8009f26:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][2
 8009f28:	7899      	ldrb	r1, [r3, #2]
												+ shift] << 8)
 8009f2a:	0209      	lsls	r1, r1, #8
						temp32 =
 8009f2c:	1852      	adds	r2, r2, r1
 8009f2e:	920b      	str	r2, [sp, #44]	; 0x2c
						if (cMessage[port - 1][4 + shift] == 0xFF)	// All ports
 8009f30:	791b      	ldrb	r3, [r3, #4]
 8009f32:	2bff      	cmp	r3, #255	; 0xff
 8009f34:	d01b      	beq.n	8009f6e <PxMessagingTask+0x5a6>
							for (p = 0; p < numOfParams; p++) {
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d015      	beq.n	8009f68 <PxMessagingTask+0x5a0>
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	1d1f      	adds	r7, r3, #4
 8009f40:	193f      	adds	r7, r7, r4
 8009f42:	4b6e      	ldr	r3, [pc, #440]	; (800a0fc <PxMessagingTask+0x734>)
 8009f44:	18ff      	adds	r7, r7, r3
 8009f46:	3305      	adds	r3, #5
 8009f48:	4453      	add	r3, sl
 8009f4a:	191c      	adds	r4, r3, r4
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	18e4      	adds	r4, r4, r3
								temp = cMessage[port - 1][4 + shift + p];
 8009f54:	783b      	ldrb	r3, [r7, #0]
 8009f56:	9305      	str	r3, [sp, #20]
								if (temp > 0 && temp <= NumOfPorts) {
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d914      	bls.n	8009f88 <PxMessagingTask+0x5c0>
 8009f5e:	3701      	adds	r7, #1
							for (p = 0; p < numOfParams; p++) {
 8009f60:	42a7      	cmp	r7, r4
 8009f62:	d1f7      	bne.n	8009f54 <PxMessagingTask+0x58c>
 8009f64:	2700      	movs	r7, #0
 8009f66:	e55f      	b.n	8009a28 <PxMessagingTask+0x60>
						temp = temp32 = 0;
 8009f68:	9305      	str	r3, [sp, #20]
							for (p = 0; p < numOfParams; p++) {
 8009f6a:	2700      	movs	r7, #0
 8009f6c:	e55c      	b.n	8009a28 <PxMessagingTask+0x60>
							for (p = 1; p <= NumOfPorts; p++) {
 8009f6e:	2401      	movs	r4, #1
								UpdateBaudrate(p, temp32);
 8009f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f72:	0020      	movs	r0, r4
 8009f74:	f003 fd94 	bl	800daa0 <UpdateBaudrate>
							for (p = 1; p <= NumOfPorts; p++) {
 8009f78:	3401      	adds	r4, #1
 8009f7a:	b2e4      	uxtb	r4, r4
 8009f7c:	2c06      	cmp	r4, #6
 8009f7e:	d1f7      	bne.n	8009f70 <PxMessagingTask+0x5a8>
						temp = temp32 = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	001f      	movs	r7, r3
 8009f86:	e54f      	b.n	8009a28 <PxMessagingTask+0x60>
									UpdateBaudrate(temp, temp32);
 8009f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f8a:	9805      	ldr	r0, [sp, #20]
 8009f8c:	f003 fd88 	bl	800daa0 <UpdateBaudrate>
 8009f90:	e7e5      	b.n	8009f5e <PxMessagingTask+0x596>
						SaveToRO();
 8009f92:	f001 f967 	bl	800b264 <SaveToRO>
						SaveEEportsDir();
 8009f96:	f7f8 febb 	bl	8002d10 <SaveEEportsDir>
						indMode = IND_PING;
 8009f9a:	4b62      	ldr	r3, [pc, #392]	; (800a124 <PxMessagingTask+0x75c>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	701a      	strb	r2, [r3, #0]
						break;
 8009fa0:	2700      	movs	r7, #0
 8009fa2:	e541      	b.n	8009a28 <PxMessagingTask+0x60>
						ClearEEportsDir();
 8009fa4:	f7f8 fede 	bl	8002d64 <ClearEEportsDir>
						ClearROtopology();
 8009fa8:	f001 fa64 	bl	800b474 <ClearROtopology>
						osDelay(100);
 8009fac:	2064      	movs	r0, #100	; 0x64
 8009fae:	f003 fe36 	bl	800dc1e <osDelay>
						indMode = IND_TOPOLOGY;
 8009fb2:	4b5c      	ldr	r3, [pc, #368]	; (800a124 <PxMessagingTask+0x75c>)
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	701a      	strb	r2, [r3, #0]
						break;
 8009fb8:	2700      	movs	r7, #0
 8009fba:	e535      	b.n	8009a28 <PxMessagingTask+0x60>
						pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009fbc:	f003 ff44 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 8009fc0:	900b      	str	r0, [sp, #44]	; 0x2c
						if (dst == BOS_BROADCAST)
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	2bff      	cmp	r3, #255	; 0xff
 8009fc6:	d026      	beq.n	800a016 <PxMessagingTask+0x64e>
						else if (dst == BOS_MULTICAST)
 8009fc8:	2bfe      	cmp	r3, #254	; 0xfe
 8009fca:	d02d      	beq.n	800a028 <PxMessagingTask+0x660>
							memcpy(cCLIString, &cMessage[port - 1][shift],
 8009fcc:	4454      	add	r4, sl
 8009fce:	494b      	ldr	r1, [pc, #300]	; (800a0fc <PxMessagingTask+0x734>)
 8009fd0:	1861      	adds	r1, r4, r1
 8009fd2:	9a06      	ldr	r2, [sp, #24]
 8009fd4:	4854      	ldr	r0, [pc, #336]	; (800a128 <PxMessagingTask+0x760>)
 8009fd6:	f009 f8f6 	bl	80131c6 <memcpy>
							temp = PcPort;
 8009fda:	4c54      	ldr	r4, [pc, #336]	; (800a12c <PxMessagingTask+0x764>)
							xReturned = FreeRTOS_CLIProcessCommand(cCLIString,
 8009fdc:	4b52      	ldr	r3, [pc, #328]	; (800a128 <PxMessagingTask+0x760>)
 8009fde:	4699      	mov	r9, r3
							if (BOS.response == BOS_RESPONSE_ALL) {
 8009fe0:	4b53      	ldr	r3, [pc, #332]	; (800a130 <PxMessagingTask+0x768>)
 8009fe2:	4698      	mov	r8, r3
							temp = PcPort;
 8009fe4:	7823      	ldrb	r3, [r4, #0]
 8009fe6:	9305      	str	r3, [sp, #20]
							PcPort = port;
 8009fe8:	9a08      	ldr	r2, [sp, #32]
 8009fea:	7022      	strb	r2, [r4, #0]
							xReturned = FreeRTOS_CLIProcessCommand(cCLIString,
 8009fec:	2299      	movs	r2, #153	; 0x99
 8009fee:	0092      	lsls	r2, r2, #2
 8009ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ff2:	4648      	mov	r0, r9
 8009ff4:	f003 feaa 	bl	800dd4c <FreeRTOS_CLIProcessCommand>
 8009ff8:	0007      	movs	r7, r0
							PcPort = temp;
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	7023      	strb	r3, [r4, #0]
							if (BOS.response == BOS_RESPONSE_ALL) {
 8009ffe:	4643      	mov	r3, r8
 800a000:	799b      	ldrb	r3, [r3, #6]
 800a002:	2b60      	cmp	r3, #96	; 0x60
 800a004:	d01b      	beq.n	800a03e <PxMessagingTask+0x676>
						} while (xReturned != pdFALSE);
 800a006:	2f00      	cmp	r7, #0
 800a008:	d1ec      	bne.n	8009fe4 <PxMessagingTask+0x61c>
						memset(cCLIString, 0x00, cmdMAX_INPUT_SIZE);
 800a00a:	2232      	movs	r2, #50	; 0x32
 800a00c:	2100      	movs	r1, #0
 800a00e:	4846      	ldr	r0, [pc, #280]	; (800a128 <PxMessagingTask+0x760>)
 800a010:	f009 f8e2 	bl	80131d8 <memset>
						break;
 800a014:	e508      	b.n	8009a28 <PxMessagingTask+0x60>
									(size_t) (numOfParams - 1));// remove bcastID
 800a016:	9a06      	ldr	r2, [sp, #24]
 800a018:	3a01      	subs	r2, #1
							memcpy(cCLIString, &cMessage[port - 1][shift],
 800a01a:	4454      	add	r4, sl
 800a01c:	4937      	ldr	r1, [pc, #220]	; (800a0fc <PxMessagingTask+0x734>)
 800a01e:	1861      	adds	r1, r4, r1
 800a020:	4841      	ldr	r0, [pc, #260]	; (800a128 <PxMessagingTask+0x760>)
 800a022:	f009 f8d0 	bl	80131c6 <memcpy>
 800a026:	e7d8      	b.n	8009fda <PxMessagingTask+0x612>
									(size_t) (numOfParams - temp - 2));	// remove bcastID + groupm members + group count
 800a028:	9b06      	ldr	r3, [sp, #24]
 800a02a:	9a05      	ldr	r2, [sp, #20]
 800a02c:	1a9a      	subs	r2, r3, r2
 800a02e:	3a02      	subs	r2, #2
							memcpy(cCLIString, &cMessage[port - 1][shift],
 800a030:	4454      	add	r4, sl
 800a032:	4932      	ldr	r1, [pc, #200]	; (800a0fc <PxMessagingTask+0x734>)
 800a034:	1861      	adds	r1, r4, r1
 800a036:	483c      	ldr	r0, [pc, #240]	; (800a128 <PxMessagingTask+0x760>)
 800a038:	f009 f8c5 	bl	80131c6 <memcpy>
 800a03c:	e7cd      	b.n	8009fda <PxMessagingTask+0x612>
								memcpy(messageParams, pcOutputString,
 800a03e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a040:	f7f6 f86a 	bl	8000118 <strlen>
 800a044:	0002      	movs	r2, r0
 800a046:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a048:	4830      	ldr	r0, [pc, #192]	; (800a10c <PxMessagingTask+0x744>)
 800a04a:	f009 f8bc 	bl	80131c6 <memcpy>
										strlen((char*) pcOutputString));
 800a04e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a050:	f7f6 f862 	bl	8000118 <strlen>
								SendMessageToModule(src, CODE_CLI_RESPONSE,
 800a054:	b282      	uxth	r2, r0
 800a056:	2118      	movs	r1, #24
 800a058:	9804      	ldr	r0, [sp, #16]
 800a05a:	f7ff f9f1 	bl	8009440 <SendMessageToModule>
								osDelay(10);
 800a05e:	200a      	movs	r0, #10
 800a060:	f003 fddd 	bl	800dc1e <osDelay>
 800a064:	e7cf      	b.n	800a006 <PxMessagingTask+0x63e>
						pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a066:	f003 feef 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 800a06a:	0007      	movs	r7, r0
						memset(pcOutputString, 0x00,
 800a06c:	f7f6 f854 	bl	8000118 <strlen>
 800a070:	0002      	movs	r2, r0
 800a072:	2100      	movs	r1, #0
 800a074:	0038      	movs	r0, r7
 800a076:	f009 f8af 	bl	80131d8 <memset>
						if (longMessage) {
 800a07a:	4b25      	ldr	r3, [pc, #148]	; (800a110 <PxMessagingTask+0x748>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d012      	beq.n	800a0a8 <PxMessagingTask+0x6e0>
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <PxMessagingTask+0x74c>)
 800a084:	4698      	mov	r8, r3
 800a086:	8818      	ldrh	r0, [r3, #0]
 800a088:	1838      	adds	r0, r7, r0
									&cMessage[port - 1][shift],
 800a08a:	4454      	add	r4, sl
 800a08c:	491b      	ldr	r1, [pc, #108]	; (800a0fc <PxMessagingTask+0x734>)
 800a08e:	1861      	adds	r1, r4, r1
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a090:	9c06      	ldr	r4, [sp, #24]
 800a092:	0022      	movs	r2, r4
 800a094:	f009 f897 	bl	80131c6 <memcpy>
							longMessageLastPtr += numOfParams;
 800a098:	4643      	mov	r3, r8
 800a09a:	881a      	ldrh	r2, [r3, #0]
 800a09c:	46a4      	mov	ip, r4
 800a09e:	4462      	add	r2, ip
 800a0a0:	4643      	mov	r3, r8
 800a0a2:	801a      	strh	r2, [r3, #0]
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	e4bf      	b.n	8009a28 <PxMessagingTask+0x60>
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a0a8:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <PxMessagingTask+0x74c>)
 800a0aa:	4698      	mov	r8, r3
 800a0ac:	8818      	ldrh	r0, [r3, #0]
 800a0ae:	1838      	adds	r0, r7, r0
									&cMessage[port - 1][shift],
 800a0b0:	4454      	add	r4, sl
 800a0b2:	4912      	ldr	r1, [pc, #72]	; (800a0fc <PxMessagingTask+0x734>)
 800a0b4:	1861      	adds	r1, r4, r1
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a0b6:	9a06      	ldr	r2, [sp, #24]
 800a0b8:	f009 f885 	bl	80131c6 <memcpy>
							longMessageLastPtr = 0;
 800a0bc:	2700      	movs	r7, #0
 800a0be:	4643      	mov	r3, r8
 800a0c0:	801f      	strh	r7, [r3, #0]
							responseStatus = BOS_OK;
 800a0c2:	4b10      	ldr	r3, [pc, #64]	; (800a104 <PxMessagingTask+0x73c>)
 800a0c4:	701f      	strb	r7, [r3, #0]
							xTaskNotify((xCommandConsoleTaskHandle), 0,
 800a0c6:	003b      	movs	r3, r7
 800a0c8:	003a      	movs	r2, r7
 800a0ca:	0039      	movs	r1, r7
 800a0cc:	4819      	ldr	r0, [pc, #100]	; (800a134 <PxMessagingTask+0x76c>)
 800a0ce:	6800      	ldr	r0, [r0, #0]
 800a0d0:	f005 f9c4 	bl	800f45c <xTaskGenericNotify>
 800a0d4:	e4a8      	b.n	8009a28 <PxMessagingTask+0x60>
						*((unsigned long*) 0x20007FF0) = 0xDEADBEEF;
 800a0d6:	4b18      	ldr	r3, [pc, #96]	; (800a138 <PxMessagingTask+0x770>)
 800a0d8:	4a18      	ldr	r2, [pc, #96]	; (800a13c <PxMessagingTask+0x774>)
 800a0da:	601a      	str	r2, [r3, #0]
						indMode = IND_PING;
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <PxMessagingTask+0x75c>)
 800a0de:	2201      	movs	r2, #1
 800a0e0:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 800a0e2:	200a      	movs	r0, #10
 800a0e4:	f003 fd9b 	bl	800dc1e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	4b14      	ldr	r3, [pc, #80]	; (800a140 <PxMessagingTask+0x778>)
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <PxMessagingTask+0x77c>)
 800a0f0:	60da      	str	r2, [r3, #12]
 800a0f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	e7fd      	b.n	800a0f6 <PxMessagingTask+0x72e>
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	20000530 	.word	0x20000530
 800a100:	2000087c 	.word	0x2000087c
 800a104:	200008f8 	.word	0x200008f8
 800a108:	20000866 	.word	0x20000866
 800a10c:	20000728 	.word	0x20000728
 800a110:	200006e5 	.word	0x200006e5
 800a114:	200006e6 	.word	0x200006e6
 800a118:	20000da8 	.word	0x20000da8
 800a11c:	2000001c 	.word	0x2000001c
 800a120:	200002a0 	.word	0x200002a0
 800a124:	200006e4 	.word	0x200006e4
 800a128:	20000d74 	.word	0x20000d74
 800a12c:	2000029f 	.word	0x2000029f
 800a130:	20006130 	.word	0x20006130
 800a134:	20000c9c 	.word	0x20000c9c
 800a138:	20007ff0 	.word	0x20007ff0
 800a13c:	deadbeef 	.word	0xdeadbeef
 800a140:	e000ed00 	.word	0xe000ed00
 800a144:	05fa0004 	.word	0x05fa0004
						SendMessageFromPort(cMessage[port - 1][shift], 0, 0,
 800a148:	4fef      	ldr	r7, [pc, #956]	; (800a508 <PxMessagingTask+0xb40>)
 800a14a:	19bf      	adds	r7, r7, r6
 800a14c:	5d38      	ldrb	r0, [r7, r4]
 800a14e:	2300      	movs	r3, #0
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	3319      	adds	r3, #25
 800a154:	2200      	movs	r2, #0
 800a156:	2100      	movs	r1, #0
 800a158:	f7fe ff4a 	bl	8008ff0 <SendMessageFromPort>
						osDelay(100);
 800a15c:	2064      	movs	r0, #100	; 0x64
 800a15e:	f003 fd5e 	bl	800dc1e <osDelay>
						remoteBootloaderUpdate(src, myID, port,
 800a162:	5d3b      	ldrb	r3, [r7, r4]
 800a164:	4ae9      	ldr	r2, [pc, #932]	; (800a50c <PxMessagingTask+0xb44>)
 800a166:	7811      	ldrb	r1, [r2, #0]
 800a168:	9a08      	ldr	r2, [sp, #32]
 800a16a:	9804      	ldr	r0, [sp, #16]
 800a16c:	f7f9 fbd8 	bl	8003920 <remoteBootloaderUpdate>
						break;
 800a170:	2700      	movs	r7, #0
 800a172:	e459      	b.n	8009a28 <PxMessagingTask+0x60>
						temp = cMessage[port - 1][11 + shift];
 800a174:	46a0      	mov	r8, r4
 800a176:	0027      	movs	r7, r4
 800a178:	370b      	adds	r7, #11
 800a17a:	4be3      	ldr	r3, [pc, #908]	; (800a508 <PxMessagingTask+0xb40>)
 800a17c:	199b      	adds	r3, r3, r6
 800a17e:	5ddb      	ldrb	r3, [r3, r7]
 800a180:	4699      	mov	r9, r3
						if (numOfParams == 15)
 800a182:	9b06      	ldr	r3, [sp, #24]
 800a184:	2b0f      	cmp	r3, #15
 800a186:	d100      	bne.n	800a18a <PxMessagingTask+0x7c2>
 800a188:	e087      	b.n	800a29a <PxMessagingTask+0x8d2>
						if (numOfParams == 17)
 800a18a:	9b06      	ldr	r3, [sp, #24]
 800a18c:	2b11      	cmp	r3, #17
 800a18e:	d100      	bne.n	800a192 <PxMessagingTask+0x7ca>
 800a190:	e08b      	b.n	800a2aa <PxMessagingTask+0x8e2>
												+ shift] << 16)
 800a192:	4643      	mov	r3, r8
 800a194:	1c58      	adds	r0, r3, #1
 800a196:	900c      	str	r0, [sp, #48]	; 0x30
												+ shift] << 8)
 800a198:	1c9c      	adds	r4, r3, #2
 800a19a:	940d      	str	r4, [sp, #52]	; 0x34
										+ cMessage[port - 1][3 + shift];
 800a19c:	1cd9      	adds	r1, r3, #3
 800a19e:	910e      	str	r1, [sp, #56]	; 0x38
								((uint32_t) cMessage[port - 1][shift] << 24)
 800a1a0:	4bd9      	ldr	r3, [pc, #868]	; (800a508 <PxMessagingTask+0xb40>)
 800a1a2:	199b      	adds	r3, r3, r6
 800a1a4:	4642      	mov	r2, r8
 800a1a6:	5c9a      	ldrb	r2, [r3, r2]
 800a1a8:	0612      	lsls	r2, r2, #24
										+ cMessage[port - 1][3 + shift];
 800a1aa:	5c59      	ldrb	r1, [r3, r1]
						count =
 800a1ac:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][1
 800a1ae:	5c19      	ldrb	r1, [r3, r0]
												+ shift] << 16)
 800a1b0:	0409      	lsls	r1, r1, #16
						count =
 800a1b2:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][2
 800a1b4:	5d19      	ldrb	r1, [r3, r4]
												+ shift] << 8)
 800a1b6:	0209      	lsls	r1, r1, #8
						count =
 800a1b8:	1852      	adds	r2, r2, r1
 800a1ba:	920b      	str	r2, [sp, #44]	; 0x2c
								((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800a1bc:	4642      	mov	r2, r8
 800a1be:	3204      	adds	r2, #4
 800a1c0:	920f      	str	r2, [sp, #60]	; 0x3c
												+ shift] << 16)
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	3105      	adds	r1, #5
 800a1c6:	9110      	str	r1, [sp, #64]	; 0x40
												+ shift] << 8)
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	3006      	adds	r0, #6
 800a1cc:	9011      	str	r0, [sp, #68]	; 0x44
										+ cMessage[port - 1][7 + shift];
 800a1ce:	4644      	mov	r4, r8
 800a1d0:	3407      	adds	r4, #7
 800a1d2:	9405      	str	r4, [sp, #20]
								((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800a1d4:	5c9c      	ldrb	r4, [r3, r2]
 800a1d6:	0624      	lsls	r4, r4, #24
										+ ((uint32_t) cMessage[port - 1][5
 800a1d8:	5c5a      	ldrb	r2, [r3, r1]
												+ shift] << 16)
 800a1da:	0412      	lsls	r2, r2, #16
										+ ((uint32_t) cMessage[port - 1][5
 800a1dc:	18a4      	adds	r4, r4, r2
										+ cMessage[port - 1][7 + shift];
 800a1de:	9a05      	ldr	r2, [sp, #20]
 800a1e0:	5c9a      	ldrb	r2, [r3, r2]
						timeout =
 800a1e2:	18a4      	adds	r4, r4, r2
										+ ((uint32_t) cMessage[port - 1][6
 800a1e4:	5c1b      	ldrb	r3, [r3, r0]
												+ shift] << 8)
 800a1e6:	021b      	lsls	r3, r3, #8
						timeout =
 800a1e8:	18e4      	adds	r4, r4, r3
						if (temp == false) {
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d164      	bne.n	800a2ba <PxMessagingTask+0x8f2>
							if (cMessage[port - 1][9 + shift]
 800a1f0:	4bc5      	ldr	r3, [pc, #788]	; (800a508 <PxMessagingTask+0xb40>)
 800a1f2:	199b      	adds	r3, r3, r6
 800a1f4:	4443      	add	r3, r8
 800a1f6:	7a5b      	ldrb	r3, [r3, #9]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d012      	beq.n	800a222 <PxMessagingTask+0x85a>
									&& cMessage[port - 1][10 + shift])
 800a1fc:	2138      	movs	r1, #56	; 0x38
 800a1fe:	4369      	muls	r1, r5
 800a200:	4ac1      	ldr	r2, [pc, #772]	; (800a508 <PxMessagingTask+0xb40>)
 800a202:	1852      	adds	r2, r2, r1
 800a204:	4442      	add	r2, r8
 800a206:	7a91      	ldrb	r1, [r2, #10]
 800a208:	2900      	cmp	r1, #0
 800a20a:	d00a      	beq.n	800a222 <PxMessagingTask+0x85a>
								SetupDMAStreams(cMessage[port - 1][8 + shift],
 800a20c:	2038      	movs	r0, #56	; 0x38
 800a20e:	4368      	muls	r0, r5
 800a210:	4abd      	ldr	r2, [pc, #756]	; (800a508 <PxMessagingTask+0xb40>)
 800a212:	1812      	adds	r2, r2, r0
 800a214:	4442      	add	r2, r8
 800a216:	7a10      	ldrb	r0, [r2, #8]
 800a218:	9100      	str	r1, [sp, #0]
 800a21a:	0022      	movs	r2, r4
 800a21c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a21e:	f7fe fdcf 	bl	8008dc0 <SetupDMAStreams>
							if (cMessage[port - 1][11 + shift]
 800a222:	4bb9      	ldr	r3, [pc, #740]	; (800a508 <PxMessagingTask+0xb40>)
 800a224:	199b      	adds	r3, r3, r6
 800a226:	5ddb      	ldrb	r3, [r3, r7]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d012      	beq.n	800a252 <PxMessagingTask+0x88a>
									&& cMessage[port - 1][12 + shift])
 800a22c:	2138      	movs	r1, #56	; 0x38
 800a22e:	4369      	muls	r1, r5
 800a230:	4ab5      	ldr	r2, [pc, #724]	; (800a508 <PxMessagingTask+0xb40>)
 800a232:	1852      	adds	r2, r2, r1
 800a234:	4442      	add	r2, r8
 800a236:	7b11      	ldrb	r1, [r2, #12]
 800a238:	2900      	cmp	r1, #0
 800a23a:	d00a      	beq.n	800a252 <PxMessagingTask+0x88a>
								SetupDMAStreams(cMessage[port - 1][8 + shift],
 800a23c:	2038      	movs	r0, #56	; 0x38
 800a23e:	4368      	muls	r0, r5
 800a240:	4ab1      	ldr	r2, [pc, #708]	; (800a508 <PxMessagingTask+0xb40>)
 800a242:	1812      	adds	r2, r2, r0
 800a244:	4442      	add	r2, r8
 800a246:	7a10      	ldrb	r0, [r2, #8]
 800a248:	9100      	str	r1, [sp, #0]
 800a24a:	0022      	movs	r2, r4
 800a24c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a24e:	f7fe fdb7 	bl	8008dc0 <SetupDMAStreams>
							if (cMessage[port - 1][13 + shift]
 800a252:	4bad      	ldr	r3, [pc, #692]	; (800a508 <PxMessagingTask+0xb40>)
 800a254:	199b      	adds	r3, r3, r6
 800a256:	4443      	add	r3, r8
 800a258:	7b5b      	ldrb	r3, [r3, #13]
 800a25a:	9305      	str	r3, [sp, #20]
 800a25c:	2700      	movs	r7, #0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <PxMessagingTask+0x89e>
 800a262:	f7ff fbe1 	bl	8009a28 <PxMessagingTask+0x60>
									&& cMessage[port - 1][14 + shift])
 800a266:	2238      	movs	r2, #56	; 0x38
 800a268:	436a      	muls	r2, r5
 800a26a:	4ba7      	ldr	r3, [pc, #668]	; (800a508 <PxMessagingTask+0xb40>)
 800a26c:	189b      	adds	r3, r3, r2
 800a26e:	4443      	add	r3, r8
 800a270:	7b9a      	ldrb	r2, [r3, #14]
 800a272:	42ba      	cmp	r2, r7
 800a274:	d101      	bne.n	800a27a <PxMessagingTask+0x8b2>
 800a276:	f000 fea0 	bl	800afba <PxMessagingTask+0x15f2>
								SetupDMAStreams(cMessage[port - 1][8 + shift],
 800a27a:	2138      	movs	r1, #56	; 0x38
 800a27c:	4369      	muls	r1, r5
 800a27e:	4ba2      	ldr	r3, [pc, #648]	; (800a508 <PxMessagingTask+0xb40>)
 800a280:	185b      	adds	r3, r3, r1
 800a282:	4443      	add	r3, r8
 800a284:	7a18      	ldrb	r0, [r3, #8]
 800a286:	9200      	str	r2, [sp, #0]
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	0022      	movs	r2, r4
 800a28c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a28e:	f7fe fd97 	bl	8008dc0 <SetupDMAStreams>
 800a292:	464b      	mov	r3, r9
 800a294:	9305      	str	r3, [sp, #20]
 800a296:	f7ff fbc7 	bl	8009a28 <PxMessagingTask+0x60>
							temp = cMessage[port - 1][13 + shift];
 800a29a:	2238      	movs	r2, #56	; 0x38
 800a29c:	436a      	muls	r2, r5
 800a29e:	4b9a      	ldr	r3, [pc, #616]	; (800a508 <PxMessagingTask+0xb40>)
 800a2a0:	189b      	adds	r3, r3, r2
 800a2a2:	191c      	adds	r4, r3, r4
 800a2a4:	7b63      	ldrb	r3, [r4, #13]
 800a2a6:	4699      	mov	r9, r3
 800a2a8:	e773      	b.n	800a192 <PxMessagingTask+0x7ca>
							temp = cMessage[port - 1][15 + shift];
 800a2aa:	2238      	movs	r2, #56	; 0x38
 800a2ac:	436a      	muls	r2, r5
 800a2ae:	4b96      	ldr	r3, [pc, #600]	; (800a508 <PxMessagingTask+0xb40>)
 800a2b0:	189b      	adds	r3, r3, r2
 800a2b2:	4443      	add	r3, r8
 800a2b4:	7bdb      	ldrb	r3, [r3, #15]
 800a2b6:	4699      	mov	r9, r3
 800a2b8:	e76b      	b.n	800a192 <PxMessagingTask+0x7ca>
 800a2ba:	46c2      	mov	sl, r8
									cMessage[port - 1][8 + shift]); /* Direction */
 800a2bc:	2338      	movs	r3, #56	; 0x38
 800a2be:	436b      	muls	r3, r5
 800a2c0:	4c91      	ldr	r4, [pc, #580]	; (800a508 <PxMessagingTask+0xb40>)
 800a2c2:	18e4      	adds	r4, r4, r3
 800a2c4:	4653      	mov	r3, sl
 800a2c6:	18e6      	adds	r6, r4, r3
							EE_WriteVariable(_EE_DMA_STREAM_BASE,
 800a2c8:	7a31      	ldrb	r1, [r6, #8]
 800a2ca:	20e4      	movs	r0, #228	; 0xe4
 800a2cc:	f7fd f972 	bl	80075b4 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][shift] << 8)
 800a2d0:	4653      	mov	r3, sl
 800a2d2:	5ce3      	ldrb	r3, [r4, r3]
 800a2d4:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2d8:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,
 800a2da:	18c9      	adds	r1, r1, r3
 800a2dc:	b289      	uxth	r1, r1
 800a2de:	20e5      	movs	r0, #229	; 0xe5
 800a2e0:	f7fd f968 	bl	80075b4 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][2 + shift]
 800a2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2e6:	5ce3      	ldrb	r3, [r4, r3]
											<< 8)
 800a2e8:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a2ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ec:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,
 800a2ee:	18c9      	adds	r1, r1, r3
 800a2f0:	b289      	uxth	r1, r1
 800a2f2:	20e6      	movs	r0, #230	; 0xe6
 800a2f4:	f7fd f95e 	bl	80075b4 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][4 + shift]
 800a2f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2fa:	5ce3      	ldrb	r3, [r4, r3]
											<< 8)
 800a2fc:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a2fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a300:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,
 800a302:	18c9      	adds	r1, r1, r3
 800a304:	b289      	uxth	r1, r1
 800a306:	20e7      	movs	r0, #231	; 0xe7
 800a308:	f7fd f954 	bl	80075b4 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][6 + shift]
 800a30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a30e:	5ce3      	ldrb	r3, [r4, r3]
											<< 8)
 800a310:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a312:	9a05      	ldr	r2, [sp, #20]
 800a314:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,
 800a316:	18c9      	adds	r1, r1, r3
 800a318:	b289      	uxth	r1, r1
 800a31a:	20e8      	movs	r0, #232	; 0xe8
 800a31c:	f7fd f94a 	bl	80075b4 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][9 + shift]
 800a320:	7a73      	ldrb	r3, [r6, #9]
											<< 8)
 800a322:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a324:	7ab1      	ldrb	r1, [r6, #10]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 800a326:	18c9      	adds	r1, r1, r3
 800a328:	b289      	uxth	r1, r1
 800a32a:	20e9      	movs	r0, #233	; 0xe9
 800a32c:	f7fd f942 	bl	80075b4 <EE_WriteVariable>
							if (numOfParams == 19)
 800a330:	9b06      	ldr	r3, [sp, #24]
 800a332:	2b13      	cmp	r3, #19
 800a334:	d115      	bne.n	800a362 <PxMessagingTask+0x99a>
										((uint16_t) cMessage[port - 1][11
 800a336:	3325      	adds	r3, #37	; 0x25
 800a338:	436b      	muls	r3, r5
 800a33a:	4d73      	ldr	r5, [pc, #460]	; (800a508 <PxMessagingTask+0xb40>)
 800a33c:	18ed      	adds	r5, r5, r3
 800a33e:	5deb      	ldrb	r3, [r5, r7]
												+ shift] << 8)
 800a340:	021b      	lsls	r3, r3, #8
												+ cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a342:	4455      	add	r5, sl
 800a344:	7b29      	ldrb	r1, [r5, #12]
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 800a346:	18c9      	adds	r1, r1, r3
 800a348:	b289      	uxth	r1, r1
 800a34a:	20ea      	movs	r0, #234	; 0xea
 800a34c:	f7fd f932 	bl	80075b4 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	4b6e      	ldr	r3, [pc, #440]	; (800a510 <PxMessagingTask+0xb48>)
 800a356:	4a6f      	ldr	r2, [pc, #444]	; (800a514 <PxMessagingTask+0xb4c>)
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	e7fd      	b.n	800a35e <PxMessagingTask+0x996>
							if (numOfParams == 21)
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	2b15      	cmp	r3, #21
 800a366:	d1f3      	bne.n	800a350 <PxMessagingTask+0x988>
										((uint16_t) cMessage[port - 1][13
 800a368:	3323      	adds	r3, #35	; 0x23
 800a36a:	435d      	muls	r5, r3
 800a36c:	4b66      	ldr	r3, [pc, #408]	; (800a508 <PxMessagingTask+0xb40>)
 800a36e:	195b      	adds	r3, r3, r5
 800a370:	4453      	add	r3, sl
 800a372:	7b5a      	ldrb	r2, [r3, #13]
												+ shift] << 8)
 800a374:	0212      	lsls	r2, r2, #8
												+ cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a376:	7b99      	ldrb	r1, [r3, #14]
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 800a378:	1889      	adds	r1, r1, r2
 800a37a:	b289      	uxth	r1, r1
 800a37c:	20eb      	movs	r0, #235	; 0xeb
 800a37e:	f7fd f919 	bl	80075b4 <EE_WriteVariable>
 800a382:	e7e5      	b.n	800a350 <PxMessagingTask+0x988>
						StartScastDMAStream(cMessage[port - 1][9 + shift], myID,
 800a384:	4f60      	ldr	r7, [pc, #384]	; (800a508 <PxMessagingTask+0xb40>)
 800a386:	19bf      	adds	r7, r7, r6
 800a388:	1939      	adds	r1, r7, r4
 800a38a:	7a8b      	ldrb	r3, [r1, #10]
 800a38c:	9306      	str	r3, [sp, #24]
 800a38e:	7aca      	ldrb	r2, [r1, #11]
 800a390:	485e      	ldr	r0, [pc, #376]	; (800a50c <PxMessagingTask+0xb44>)
 800a392:	7803      	ldrb	r3, [r0, #0]
 800a394:	4698      	mov	r8, r3
 800a396:	7a4b      	ldrb	r3, [r1, #9]
 800a398:	4699      	mov	r9, r3
 800a39a:	7b08      	ldrb	r0, [r1, #12]
 800a39c:	0003      	movs	r3, r0
 800a39e:	1e58      	subs	r0, r3, #1
 800a3a0:	4183      	sbcs	r3, r0
 800a3a2:	9303      	str	r3, [sp, #12]
								((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800a3a4:	7908      	ldrb	r0, [r1, #4]
 800a3a6:	0603      	lsls	r3, r0, #24
 800a3a8:	469c      	mov	ip, r3
										+ ((uint32_t) cMessage[port - 1][5
 800a3aa:	7948      	ldrb	r0, [r1, #5]
												+ shift] << 16)
 800a3ac:	0400      	lsls	r0, r0, #16
										+ ((uint32_t) cMessage[port - 1][5
 800a3ae:	4460      	add	r0, ip
										+ cMessage[port - 1][7 + shift];
 800a3b0:	79cb      	ldrb	r3, [r1, #7]
 800a3b2:	469c      	mov	ip, r3
						timeout =
 800a3b4:	4460      	add	r0, ip
										+ ((uint32_t) cMessage[port - 1][6
 800a3b6:	798b      	ldrb	r3, [r1, #6]
												+ shift] << 8)
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	469c      	mov	ip, r3
						timeout =
 800a3bc:	4460      	add	r0, ip
						StartScastDMAStream(cMessage[port - 1][9 + shift], myID,
 800a3be:	9002      	str	r0, [sp, #8]
								((uint32_t) cMessage[port - 1][shift] << 24)
 800a3c0:	5d38      	ldrb	r0, [r7, r4]
 800a3c2:	0600      	lsls	r0, r0, #24
										+ cMessage[port - 1][3 + shift];
 800a3c4:	78cc      	ldrb	r4, [r1, #3]
						count =
 800a3c6:	1900      	adds	r0, r0, r4
										+ ((uint32_t) cMessage[port - 1][1
 800a3c8:	784c      	ldrb	r4, [r1, #1]
												+ shift] << 16)
 800a3ca:	0424      	lsls	r4, r4, #16
						count =
 800a3cc:	1900      	adds	r0, r0, r4
										+ ((uint32_t) cMessage[port - 1][2
 800a3ce:	788c      	ldrb	r4, [r1, #2]
												+ shift] << 8)
 800a3d0:	0224      	lsls	r4, r4, #8
						count =
 800a3d2:	1900      	adds	r0, r0, r4
						StartScastDMAStream(cMessage[port - 1][9 + shift], myID,
 800a3d4:	9001      	str	r0, [sp, #4]
 800a3d6:	7a09      	ldrb	r1, [r1, #8]
 800a3d8:	9100      	str	r1, [sp, #0]
 800a3da:	9b06      	ldr	r3, [sp, #24]
 800a3dc:	4641      	mov	r1, r8
 800a3de:	4648      	mov	r0, r9
 800a3e0:	f7ff f854 	bl	800948c <StartScastDMAStream>
						break;
 800a3e4:	2700      	movs	r7, #0
 800a3e6:	f7ff fb1f 	bl	8009a28 <PxMessagingTask+0x60>
						if (cMessage[port - 1][shift] == REMOTE_MEMORY_ADD)	// request for a memory address
 800a3ea:	0023      	movs	r3, r4
 800a3ec:	4a46      	ldr	r2, [pc, #280]	; (800a508 <PxMessagingTask+0xb40>)
 800a3ee:	1992      	adds	r2, r2, r6
 800a3f0:	5d12      	ldrb	r2, [r2, r4]
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d000      	beq.n	800a3f8 <PxMessagingTask+0xa30>
 800a3f6:	e093      	b.n	800a520 <PxMessagingTask+0xb58>
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a3f8:	3238      	adds	r2, #56	; 0x38
 800a3fa:	436a      	muls	r2, r5
 800a3fc:	4b42      	ldr	r3, [pc, #264]	; (800a508 <PxMessagingTask+0xb40>)
 800a3fe:	189b      	adds	r3, r3, r2
 800a400:	191c      	adds	r4, r3, r4
 800a402:	78a3      	ldrb	r3, [r4, #2]
									<< 24)
 800a404:	061b      	lsls	r3, r3, #24
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800a406:	78e2      	ldrb	r2, [r4, #3]
											<< 16)
 800a408:	0412      	lsls	r2, r2, #16
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800a40a:	189b      	adds	r3, r3, r2
									+ cMessage[port - 1][5 + shift];
 800a40c:	7962      	ldrb	r2, [r4, #5]
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a40e:	189b      	adds	r3, r3, r2
									+ ((uint32_t) cMessage[port - 1][4 + shift]
 800a410:	7922      	ldrb	r2, [r4, #4]
											<< 8)
 800a412:	0212      	lsls	r2, r2, #8
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a414:	189b      	adds	r3, r3, r2
							switch (cMessage[port - 1][1 + shift])// requested format
 800a416:	7862      	ldrb	r2, [r4, #1]
 800a418:	3a01      	subs	r2, #1
 800a41a:	b2d1      	uxtb	r1, r2
 800a41c:	2907      	cmp	r1, #7
 800a41e:	d901      	bls.n	800a424 <PxMessagingTask+0xa5c>
 800a420:	f000 fdb7 	bl	800af92 <PxMessagingTask+0x15ca>
 800a424:	b2d2      	uxtb	r2, r2
 800a426:	0092      	lsls	r2, r2, #2
 800a428:	493b      	ldr	r1, [pc, #236]	; (800a518 <PxMessagingTask+0xb50>)
 800a42a:	588a      	ldr	r2, [r1, r2]
 800a42c:	4697      	mov	pc, r2
								messageParams[0] = *(__IO uint8_t*) temp32;
 800a42e:	781a      	ldrb	r2, [r3, #0]
 800a430:	4b3a      	ldr	r3, [pc, #232]	; (800a51c <PxMessagingTask+0xb54>)
 800a432:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,
 800a434:	2201      	movs	r2, #1
 800a436:	211f      	movs	r1, #31
 800a438:	9804      	ldr	r0, [sp, #16]
 800a43a:	f7ff f801 	bl	8009440 <SendMessageToModule>
								break;
 800a43e:	2700      	movs	r7, #0
 800a440:	f7ff faf2 	bl	8009a28 <PxMessagingTask+0x60>
								messageParams[0] = *(__IO int8_t*) temp32;
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	4b35      	ldr	r3, [pc, #212]	; (800a51c <PxMessagingTask+0xb54>)
 800a448:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,
 800a44a:	2201      	movs	r2, #1
 800a44c:	211f      	movs	r1, #31
 800a44e:	9804      	ldr	r0, [sp, #16]
 800a450:	f7fe fff6 	bl	8009440 <SendMessageToModule>
								break;
 800a454:	2700      	movs	r7, #0
 800a456:	f7ff fae7 	bl	8009a28 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO uint16_t*) temp32)
 800a45a:	8819      	ldrh	r1, [r3, #0]
								messageParams[0] =
 800a45c:	4a2f      	ldr	r2, [pc, #188]	; (800a51c <PxMessagingTask+0xb54>)
 800a45e:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO uint16_t*) temp32)
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	0a1b      	lsrs	r3, r3, #8
								messageParams[1] =
 800a464:	7053      	strb	r3, [r2, #1]
								SendMessageToModule(src,
 800a466:	2202      	movs	r2, #2
 800a468:	211f      	movs	r1, #31
 800a46a:	9804      	ldr	r0, [sp, #16]
 800a46c:	f7fe ffe8 	bl	8009440 <SendMessageToModule>
								break;
 800a470:	2700      	movs	r7, #0
 800a472:	f7ff fad9 	bl	8009a28 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO int16_t*) temp32)
 800a476:	8819      	ldrh	r1, [r3, #0]
								messageParams[0] =
 800a478:	4a28      	ldr	r2, [pc, #160]	; (800a51c <PxMessagingTask+0xb54>)
 800a47a:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO int16_t*) temp32)
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b21b      	sxth	r3, r3
 800a480:	121b      	asrs	r3, r3, #8
								messageParams[1] =
 800a482:	7053      	strb	r3, [r2, #1]
								SendMessageToModule(src,
 800a484:	2202      	movs	r2, #2
 800a486:	211f      	movs	r1, #31
 800a488:	9804      	ldr	r0, [sp, #16]
 800a48a:	f7fe ffd9 	bl	8009440 <SendMessageToModule>
								break;
 800a48e:	2700      	movs	r7, #0
 800a490:	f7ff faca 	bl	8009a28 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a494:	6819      	ldr	r1, [r3, #0]
								messageParams[0] =
 800a496:	4a21      	ldr	r2, [pc, #132]	; (800a51c <PxMessagingTask+0xb54>)
 800a498:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a49a:	6819      	ldr	r1, [r3, #0]
												>> 8);
 800a49c:	0a09      	lsrs	r1, r1, #8
								messageParams[1] =
 800a49e:	7051      	strb	r1, [r2, #1]
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a4a0:	6819      	ldr	r1, [r3, #0]
												>> 16);
 800a4a2:	0c09      	lsrs	r1, r1, #16
								messageParams[2] =
 800a4a4:	7091      	strb	r1, [r2, #2]
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a4a6:	681b      	ldr	r3, [r3, #0]
												>> 24);
 800a4a8:	0e1b      	lsrs	r3, r3, #24
								messageParams[3] =
 800a4aa:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	211f      	movs	r1, #31
 800a4b0:	9804      	ldr	r0, [sp, #16]
 800a4b2:	f7fe ffc5 	bl	8009440 <SendMessageToModule>
								break;
 800a4b6:	2700      	movs	r7, #0
 800a4b8:	f7ff fab6 	bl	8009a28 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a4bc:	6819      	ldr	r1, [r3, #0]
								messageParams[0] =
 800a4be:	4a17      	ldr	r2, [pc, #92]	; (800a51c <PxMessagingTask+0xb54>)
 800a4c0:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a4c2:	6819      	ldr	r1, [r3, #0]
												>> 8);
 800a4c4:	1209      	asrs	r1, r1, #8
								messageParams[1] =
 800a4c6:	7051      	strb	r1, [r2, #1]
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a4c8:	6819      	ldr	r1, [r3, #0]
												>> 16);
 800a4ca:	1409      	asrs	r1, r1, #16
								messageParams[2] =
 800a4cc:	7091      	strb	r1, [r2, #2]
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a4ce:	681b      	ldr	r3, [r3, #0]
												>> 24);
 800a4d0:	161b      	asrs	r3, r3, #24
								messageParams[3] =
 800a4d2:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800a4d4:	2204      	movs	r2, #4
 800a4d6:	211f      	movs	r1, #31
 800a4d8:	9804      	ldr	r0, [sp, #16]
 800a4da:	f7fe ffb1 	bl	8009440 <SendMessageToModule>
								break;
 800a4de:	2700      	movs	r7, #0
 800a4e0:	f7ff faa2 	bl	8009a28 <PxMessagingTask+0x60>
										*(__IO uint8_t*) (temp32 + 0);
 800a4e4:	7819      	ldrb	r1, [r3, #0]
								messageParams[0] =
 800a4e6:	4a0d      	ldr	r2, [pc, #52]	; (800a51c <PxMessagingTask+0xb54>)
 800a4e8:	7011      	strb	r1, [r2, #0]
										*(__IO uint8_t*) (temp32 + 1);
 800a4ea:	7859      	ldrb	r1, [r3, #1]
								messageParams[1] =
 800a4ec:	7051      	strb	r1, [r2, #1]
										*(__IO uint8_t*) (temp32 + 2);
 800a4ee:	7899      	ldrb	r1, [r3, #2]
								messageParams[2] =
 800a4f0:	7091      	strb	r1, [r2, #2]
										*(__IO uint8_t*) (temp32 + 3);
 800a4f2:	78db      	ldrb	r3, [r3, #3]
								messageParams[3] =
 800a4f4:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800a4f6:	2208      	movs	r2, #8
 800a4f8:	211f      	movs	r1, #31
 800a4fa:	9804      	ldr	r0, [sp, #16]
 800a4fc:	f7fe ffa0 	bl	8009440 <SendMessageToModule>
								break;	// You cannot bitwise floats	
 800a500:	2700      	movs	r7, #0
 800a502:	f7ff fa91 	bl	8009a28 <PxMessagingTask+0x60>
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	20000530 	.word	0x20000530
 800a50c:	20000866 	.word	0x20000866
 800a510:	e000ed00 	.word	0xe000ed00
 800a514:	05fa0004 	.word	0x05fa0004
 800a518:	08018318 	.word	0x08018318
 800a51c:	20000728 	.word	0x20000728
						} else if (cMessage[port - 1][shift]
 800a520:	2a02      	cmp	r2, #2
 800a522:	d000      	beq.n	800a526 <PxMessagingTask+0xb5e>
 800a524:	e097      	b.n	800a656 <PxMessagingTask+0xc8e>
							cMessage[port - 1][messageLength[port - 1] - 1] = 0;// adding string termination
 800a526:	48e6      	ldr	r0, [pc, #920]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a528:	3236      	adds	r2, #54	; 0x36
 800a52a:	436a      	muls	r2, r5
 800a52c:	1882      	adds	r2, r0, r2
 800a52e:	1851      	adds	r1, r2, r1
 800a530:	3901      	subs	r1, #1
 800a532:	2200      	movs	r2, #0
 800a534:	700a      	strb	r2, [r1, #0]
									(char*) &cMessage[port - 1][1 + shift]); // extrating module parameter
 800a536:	3301      	adds	r3, #1
 800a538:	4453      	add	r3, sl
 800a53a:	1818      	adds	r0, r3, r0
							temp = IsModuleParameter(
 800a53c:	f7f9 f808 	bl	8003550 <IsModuleParameter>
 800a540:	9005      	str	r0, [sp, #20]
							if (temp == 0) {		// Parameter does not exist
 800a542:	2800      	cmp	r0, #0
 800a544:	d107      	bne.n	800a556 <PxMessagingTask+0xb8e>
								SendMessageToModule(src,
 800a546:	2201      	movs	r2, #1
 800a548:	211f      	movs	r1, #31
 800a54a:	9804      	ldr	r0, [sp, #16]
 800a54c:	f7fe ff78 	bl	8009440 <SendMessageToModule>
 800a550:	2700      	movs	r7, #0
 800a552:	f7ff fa69 	bl	8009a28 <PxMessagingTask+0x60>
								temp32 = (uint32_t) modParam[temp - 1].paramPtr;
 800a556:	3801      	subs	r0, #1
 800a558:	4ada      	ldr	r2, [pc, #872]	; (800a8c4 <PxMessagingTask+0xefc>)
 800a55a:	210c      	movs	r1, #12
 800a55c:	4341      	muls	r1, r0
 800a55e:	588b      	ldr	r3, [r1, r2]
										modParam[temp - 1].paramFormat;
 800a560:	1852      	adds	r2, r2, r1
 800a562:	7912      	ldrb	r2, [r2, #4]
								messageParams[0] =
 800a564:	49d8      	ldr	r1, [pc, #864]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a566:	700a      	strb	r2, [r1, #0]
								switch (messageParams[0])	// requested format
 800a568:	3a01      	subs	r2, #1
 800a56a:	b2d1      	uxtb	r1, r2
 800a56c:	2907      	cmp	r1, #7
 800a56e:	d901      	bls.n	800a574 <PxMessagingTask+0xbac>
 800a570:	f000 fd12 	bl	800af98 <PxMessagingTask+0x15d0>
 800a574:	b2d2      	uxtb	r2, r2
 800a576:	0092      	lsls	r2, r2, #2
 800a578:	49d4      	ldr	r1, [pc, #848]	; (800a8cc <PxMessagingTask+0xf04>)
 800a57a:	588a      	ldr	r2, [r1, r2]
 800a57c:	4697      	mov	pc, r2
									messageParams[1] = *(__IO uint8_t*) temp32;
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	4bd1      	ldr	r3, [pc, #836]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a582:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a584:	2202      	movs	r2, #2
 800a586:	211f      	movs	r1, #31
 800a588:	9804      	ldr	r0, [sp, #16]
 800a58a:	f7fe ff59 	bl	8009440 <SendMessageToModule>
									break;
 800a58e:	2700      	movs	r7, #0
 800a590:	f7ff fa4a 	bl	8009a28 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO int8_t*) temp32;
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	4bcc      	ldr	r3, [pc, #816]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a598:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a59a:	2202      	movs	r2, #2
 800a59c:	211f      	movs	r1, #31
 800a59e:	9804      	ldr	r0, [sp, #16]
 800a5a0:	f7fe ff4e 	bl	8009440 <SendMessageToModule>
									break;
 800a5a4:	2700      	movs	r7, #0
 800a5a6:	f7ff fa3f 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a5aa:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a5ac:	4ac6      	ldr	r2, [pc, #792]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a5ae:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	0a1b      	lsrs	r3, r3, #8
									messageParams[2] =
 800a5b4:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a5b6:	2203      	movs	r2, #3
 800a5b8:	211f      	movs	r1, #31
 800a5ba:	9804      	ldr	r0, [sp, #16]
 800a5bc:	f7fe ff40 	bl	8009440 <SendMessageToModule>
									break;
 800a5c0:	2700      	movs	r7, #0
 800a5c2:	f7ff fa31 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a5c6:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a5c8:	4abf      	ldr	r2, [pc, #764]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a5ca:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b21b      	sxth	r3, r3
 800a5d0:	121b      	asrs	r3, r3, #8
									messageParams[2] =
 800a5d2:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a5d4:	2203      	movs	r2, #3
 800a5d6:	211f      	movs	r1, #31
 800a5d8:	9804      	ldr	r0, [sp, #16]
 800a5da:	f7fe ff31 	bl	8009440 <SendMessageToModule>
									break;
 800a5de:	2700      	movs	r7, #0
 800a5e0:	f7ff fa22 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a5e4:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a5e6:	4ab8      	ldr	r2, [pc, #736]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a5e8:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a5ea:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a5ec:	0a09      	lsrs	r1, r1, #8
									messageParams[2] =
 800a5ee:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a5f0:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a5f2:	0c09      	lsrs	r1, r1, #16
									messageParams[3] =
 800a5f4:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a5f6:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a5f8:	0e1b      	lsrs	r3, r3, #24
									messageParams[4] =
 800a5fa:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a5fc:	2205      	movs	r2, #5
 800a5fe:	211f      	movs	r1, #31
 800a600:	9804      	ldr	r0, [sp, #16]
 800a602:	f7fe ff1d 	bl	8009440 <SendMessageToModule>
									break;
 800a606:	2700      	movs	r7, #0
 800a608:	f7ff fa0e 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a60c:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a60e:	4aae      	ldr	r2, [pc, #696]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a610:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a612:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a614:	1209      	asrs	r1, r1, #8
									messageParams[2] =
 800a616:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a618:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a61a:	1409      	asrs	r1, r1, #16
									messageParams[3] =
 800a61c:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a61e:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a620:	161b      	asrs	r3, r3, #24
									messageParams[4] =
 800a622:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a624:	2205      	movs	r2, #5
 800a626:	211f      	movs	r1, #31
 800a628:	9804      	ldr	r0, [sp, #16]
 800a62a:	f7fe ff09 	bl	8009440 <SendMessageToModule>
									break;
 800a62e:	2700      	movs	r7, #0
 800a630:	f7ff f9fa 	bl	8009a28 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO uint8_t*) (temp32
 800a634:	7819      	ldrb	r1, [r3, #0]
 800a636:	4aa4      	ldr	r2, [pc, #656]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a638:	7051      	strb	r1, [r2, #1]
									messageParams[2] = *(__IO uint8_t*) (temp32
 800a63a:	7859      	ldrb	r1, [r3, #1]
 800a63c:	7091      	strb	r1, [r2, #2]
									messageParams[3] = *(__IO uint8_t*) (temp32
 800a63e:	7899      	ldrb	r1, [r3, #2]
 800a640:	70d1      	strb	r1, [r2, #3]
									messageParams[4] = *(__IO uint8_t*) (temp32
 800a642:	78db      	ldrb	r3, [r3, #3]
 800a644:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a646:	2209      	movs	r2, #9
 800a648:	211f      	movs	r1, #31
 800a64a:	9804      	ldr	r0, [sp, #16]
 800a64c:	f7fe fef8 	bl	8009440 <SendMessageToModule>
									break;
 800a650:	2700      	movs	r7, #0
 800a652:	f7ff f9e9 	bl	8009a28 <PxMessagingTask+0x60>
							}
 800a656:	2700      	movs	r7, #0
						} else if (cMessage[port - 1][shift] >= REMOTE_BOS_VAR)	// request for a BOS var
 800a658:	2a02      	cmp	r2, #2
 800a65a:	d801      	bhi.n	800a660 <PxMessagingTask+0xc98>
 800a65c:	f7ff f9e4 	bl	8009a28 <PxMessagingTask+0x60>
									BOS_var_reg[cMessage[port - 1][shift]
 800a660:	3a04      	subs	r2, #4
 800a662:	0092      	lsls	r2, r2, #2
 800a664:	4b9a      	ldr	r3, [pc, #616]	; (800a8d0 <PxMessagingTask+0xf08>)
 800a666:	58d1      	ldr	r1, [r2, r3]
											- REMOTE_BOS_VAR - 1] & 0x000F;	// send variable format (lower 4 bits)
 800a668:	220f      	movs	r2, #15
 800a66a:	400a      	ands	r2, r1
							messageParams[0] =
 800a66c:	4b96      	ldr	r3, [pc, #600]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a66e:	701a      	strb	r2, [r3, #0]
							if (messageParams[0] == 0) {// Variable does not exist
 800a670:	42ba      	cmp	r2, r7
 800a672:	d106      	bne.n	800a682 <PxMessagingTask+0xcba>
								SendMessageToModule(src,
 800a674:	2201      	movs	r2, #1
 800a676:	211f      	movs	r1, #31
 800a678:	9804      	ldr	r0, [sp, #16]
 800a67a:	f7fe fee1 	bl	8009440 <SendMessageToModule>
 800a67e:	f7ff f9d3 	bl	8009a28 <PxMessagingTask+0x60>
												- REMOTE_BOS_VAR - 1] >> 16)
 800a682:	0c09      	lsrs	r1, r1, #16
								temp32 =
 800a684:	2380      	movs	r3, #128	; 0x80
 800a686:	059b      	lsls	r3, r3, #22
 800a688:	18cb      	adds	r3, r1, r3
								switch (messageParams[0])	// requested format
 800a68a:	3a01      	subs	r2, #1
 800a68c:	b2d0      	uxtb	r0, r2
 800a68e:	2807      	cmp	r0, #7
 800a690:	d901      	bls.n	800a696 <PxMessagingTask+0xcce>
 800a692:	f000 fc84 	bl	800af9e <PxMessagingTask+0x15d6>
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	0092      	lsls	r2, r2, #2
 800a69a:	488e      	ldr	r0, [pc, #568]	; (800a8d4 <PxMessagingTask+0xf0c>)
 800a69c:	5882      	ldr	r2, [r0, r2]
 800a69e:	4697      	mov	pc, r2
									messageParams[1] = *(__IO uint8_t*) temp32;
 800a6a0:	781a      	ldrb	r2, [r3, #0]
 800a6a2:	4b89      	ldr	r3, [pc, #548]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a6a4:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	211f      	movs	r1, #31
 800a6aa:	9804      	ldr	r0, [sp, #16]
 800a6ac:	f7fe fec8 	bl	8009440 <SendMessageToModule>
									break;
 800a6b0:	2700      	movs	r7, #0
 800a6b2:	f7ff f9b9 	bl	8009a28 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO int8_t*) temp32;
 800a6b6:	781a      	ldrb	r2, [r3, #0]
 800a6b8:	4b83      	ldr	r3, [pc, #524]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a6ba:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a6bc:	2202      	movs	r2, #2
 800a6be:	211f      	movs	r1, #31
 800a6c0:	9804      	ldr	r0, [sp, #16]
 800a6c2:	f7fe febd 	bl	8009440 <SendMessageToModule>
									break;
 800a6c6:	2700      	movs	r7, #0
 800a6c8:	f7ff f9ae 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a6cc:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a6ce:	4a7e      	ldr	r2, [pc, #504]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a6d0:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	0a1b      	lsrs	r3, r3, #8
									messageParams[2] =
 800a6d6:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a6d8:	2203      	movs	r2, #3
 800a6da:	211f      	movs	r1, #31
 800a6dc:	9804      	ldr	r0, [sp, #16]
 800a6de:	f7fe feaf 	bl	8009440 <SendMessageToModule>
									break;
 800a6e2:	2700      	movs	r7, #0
 800a6e4:	f7ff f9a0 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a6e8:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a6ea:	4a77      	ldr	r2, [pc, #476]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a6ec:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b21b      	sxth	r3, r3
 800a6f2:	121b      	asrs	r3, r3, #8
									messageParams[2] =
 800a6f4:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a6f6:	2203      	movs	r2, #3
 800a6f8:	211f      	movs	r1, #31
 800a6fa:	9804      	ldr	r0, [sp, #16]
 800a6fc:	f7fe fea0 	bl	8009440 <SendMessageToModule>
									break;
 800a700:	2700      	movs	r7, #0
 800a702:	f7ff f991 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a706:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a708:	4a6f      	ldr	r2, [pc, #444]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a70a:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a70c:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a70e:	0a09      	lsrs	r1, r1, #8
									messageParams[2] =
 800a710:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a712:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a714:	0c09      	lsrs	r1, r1, #16
									messageParams[3] =
 800a716:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a718:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a71a:	0e1b      	lsrs	r3, r3, #24
									messageParams[4] =
 800a71c:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a71e:	2205      	movs	r2, #5
 800a720:	211f      	movs	r1, #31
 800a722:	9804      	ldr	r0, [sp, #16]
 800a724:	f7fe fe8c 	bl	8009440 <SendMessageToModule>
									break;
 800a728:	2700      	movs	r7, #0
 800a72a:	f7ff f97d 	bl	8009a28 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a72e:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a730:	4a65      	ldr	r2, [pc, #404]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a732:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a734:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a736:	1209      	asrs	r1, r1, #8
									messageParams[2] =
 800a738:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a73a:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a73c:	1409      	asrs	r1, r1, #16
									messageParams[3] =
 800a73e:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a740:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a742:	161b      	asrs	r3, r3, #24
									messageParams[4] =
 800a744:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a746:	2205      	movs	r2, #5
 800a748:	211f      	movs	r1, #31
 800a74a:	9804      	ldr	r0, [sp, #16]
 800a74c:	f7fe fe78 	bl	8009440 <SendMessageToModule>
									break;
 800a750:	2700      	movs	r7, #0
 800a752:	f7ff f969 	bl	8009a28 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO uint8_t*) (temp32
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	4b5b      	ldr	r3, [pc, #364]	; (800a8c8 <PxMessagingTask+0xf00>)
 800a75a:	705a      	strb	r2, [r3, #1]
											+ 1);
 800a75c:	4a5e      	ldr	r2, [pc, #376]	; (800a8d8 <PxMessagingTask+0xf10>)
 800a75e:	188a      	adds	r2, r1, r2
									messageParams[2] = *(__IO uint8_t*) (temp32
 800a760:	7812      	ldrb	r2, [r2, #0]
 800a762:	709a      	strb	r2, [r3, #2]
											+ 2);
 800a764:	4a5d      	ldr	r2, [pc, #372]	; (800a8dc <PxMessagingTask+0xf14>)
 800a766:	188a      	adds	r2, r1, r2
									messageParams[3] = *(__IO uint8_t*) (temp32
 800a768:	7812      	ldrb	r2, [r2, #0]
 800a76a:	70da      	strb	r2, [r3, #3]
											+ 3);  // You cannot bitwise floats	
 800a76c:	4a5c      	ldr	r2, [pc, #368]	; (800a8e0 <PxMessagingTask+0xf18>)
 800a76e:	4694      	mov	ip, r2
 800a770:	4461      	add	r1, ip
									messageParams[4] = *(__IO uint8_t*) (temp32
 800a772:	780a      	ldrb	r2, [r1, #0]
 800a774:	711a      	strb	r2, [r3, #4]
									SendMessageToModule(src,
 800a776:	2209      	movs	r2, #9
 800a778:	211f      	movs	r1, #31
 800a77a:	9804      	ldr	r0, [sp, #16]
 800a77c:	f7fe fe60 	bl	8009440 <SendMessageToModule>
									break;
 800a780:	2700      	movs	r7, #0
 800a782:	f7ff f951 	bl	8009a28 <PxMessagingTask+0x60>
								|| remoteBuffer == REMOTE_MODULE_PARAM)	// We requested a BOS variable or module param
 800a786:	4b57      	ldr	r3, [pc, #348]	; (800a8e4 <PxMessagingTask+0xf1c>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	2002      	movs	r0, #2
 800a78e:	4240      	negs	r0, r0
 800a790:	17c1      	asrs	r1, r0, #31
 800a792:	1812      	adds	r2, r2, r0
 800a794:	414b      	adcs	r3, r1
						if (remoteBuffer == REMOTE_BOS_VAR
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00b      	beq.n	800a7b2 <PxMessagingTask+0xdea>
						if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800a79a:	4b53      	ldr	r3, [pc, #332]	; (800a8e8 <PxMessagingTask+0xf20>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b10      	cmp	r3, #16
 800a7a0:	d101      	bne.n	800a7a6 <PxMessagingTask+0xdde>
 800a7a2:	f000 fc0e 	bl	800afc2 <PxMessagingTask+0x15fa>
							responseStatus = BOS_OK;
 800a7a6:	4b50      	ldr	r3, [pc, #320]	; (800a8e8 <PxMessagingTask+0xf20>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
 800a7ac:	2700      	movs	r7, #0
 800a7ae:	f7ff f93b 	bl	8009a28 <PxMessagingTask+0x60>
						if (remoteBuffer == REMOTE_BOS_VAR
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <PxMessagingTask+0xdf2>
 800a7b6:	2a01      	cmp	r2, #1
 800a7b8:	d8ef      	bhi.n	800a79a <PxMessagingTask+0xdd2>
									(varFormat_t) cMessage[port - 1][shift];
 800a7ba:	2138      	movs	r1, #56	; 0x38
 800a7bc:	4369      	muls	r1, r5
 800a7be:	4a40      	ldr	r2, [pc, #256]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a7c0:	1852      	adds	r2, r2, r1
 800a7c2:	5d12      	ldrb	r2, [r2, r4]
							remoteVarFormat =
 800a7c4:	4949      	ldr	r1, [pc, #292]	; (800a8ec <PxMessagingTask+0xf24>)
 800a7c6:	700a      	strb	r2, [r1, #0]
							switch (cMessage[port - 1][shift])	// Remote format
 800a7c8:	2a08      	cmp	r2, #8
 800a7ca:	d8e6      	bhi.n	800a79a <PxMessagingTask+0xdd2>
 800a7cc:	0092      	lsls	r2, r2, #2
 800a7ce:	4948      	ldr	r1, [pc, #288]	; (800a8f0 <PxMessagingTask+0xf28>)
 800a7d0:	588a      	ldr	r2, [r1, r2]
 800a7d2:	4697      	mov	pc, r2
								responseStatus = BOS_ERR_REMOTE_READ_NO_VAR;
 800a7d4:	4b44      	ldr	r3, [pc, #272]	; (800a8e8 <PxMessagingTask+0xf20>)
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	701a      	strb	r2, [r3, #0]
 800a7da:	2700      	movs	r7, #0
 800a7dc:	f7ff f924 	bl	8009a28 <PxMessagingTask+0x60>
								remoteBuffer = cMessage[port - 1][1 + shift];
 800a7e0:	4a40      	ldr	r2, [pc, #256]	; (800a8e4 <PxMessagingTask+0xf1c>)
 800a7e2:	2038      	movs	r0, #56	; 0x38
 800a7e4:	4368      	muls	r0, r5
 800a7e6:	4936      	ldr	r1, [pc, #216]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a7e8:	1809      	adds	r1, r1, r0
 800a7ea:	1909      	adds	r1, r1, r4
 800a7ec:	784b      	ldrb	r3, [r1, #1]
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6053      	str	r3, [r2, #4]
								break;
 800a7f4:	e7d1      	b.n	800a79a <PxMessagingTask+0xdd2>
								remoteBuffer = (int8_t) cMessage[port - 1][1
 800a7f6:	4a3b      	ldr	r2, [pc, #236]	; (800a8e4 <PxMessagingTask+0xf1c>)
 800a7f8:	2038      	movs	r0, #56	; 0x38
 800a7fa:	4368      	muls	r0, r5
 800a7fc:	4930      	ldr	r1, [pc, #192]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a7fe:	1809      	adds	r1, r1, r0
 800a800:	1909      	adds	r1, r1, r4
 800a802:	2301      	movs	r3, #1
 800a804:	56cb      	ldrsb	r3, [r1, r3]
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	17db      	asrs	r3, r3, #31
 800a80a:	6053      	str	r3, [r2, #4]
								break;
 800a80c:	e7c5      	b.n	800a79a <PxMessagingTask+0xdd2>
								remoteBuffer = ((uint16_t) cMessage[port - 1][1
 800a80e:	4a35      	ldr	r2, [pc, #212]	; (800a8e4 <PxMessagingTask+0xf1c>)
										+ ((uint16_t) cMessage[port - 1][2
 800a810:	2038      	movs	r0, #56	; 0x38
 800a812:	4368      	muls	r0, r5
 800a814:	492a      	ldr	r1, [pc, #168]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a816:	1809      	adds	r1, r1, r0
 800a818:	1909      	adds	r1, r1, r4
 800a81a:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8);
 800a81c:	021b      	lsls	r3, r3, #8
										+ shift] << 0)
 800a81e:	7849      	ldrb	r1, [r1, #1]
										+ ((uint16_t) cMessage[port - 1][2
 800a820:	185b      	adds	r3, r3, r1
 800a822:	6013      	str	r3, [r2, #0]
 800a824:	17db      	asrs	r3, r3, #31
 800a826:	6053      	str	r3, [r2, #4]
								break;
 800a828:	e7b7      	b.n	800a79a <PxMessagingTask+0xdd2>
								remoteBuffer = ((int16_t) cMessage[port - 1][1
 800a82a:	4a2e      	ldr	r2, [pc, #184]	; (800a8e4 <PxMessagingTask+0xf1c>)
										+ ((int16_t) cMessage[port - 1][2
 800a82c:	2038      	movs	r0, #56	; 0x38
 800a82e:	4368      	muls	r0, r5
 800a830:	4923      	ldr	r1, [pc, #140]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a832:	1809      	adds	r1, r1, r0
 800a834:	1909      	adds	r1, r1, r4
 800a836:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8);
 800a838:	021b      	lsls	r3, r3, #8
										+ shift] << 0)
 800a83a:	7849      	ldrb	r1, [r1, #1]
										+ ((int16_t) cMessage[port - 1][2
 800a83c:	185b      	adds	r3, r3, r1
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	17db      	asrs	r3, r3, #31
 800a842:	6053      	str	r3, [r2, #4]
								break;
 800a844:	e7a9      	b.n	800a79a <PxMessagingTask+0xdd2>
								remoteBuffer = ((uint32_t) cMessage[port - 1][1
 800a846:	4a27      	ldr	r2, [pc, #156]	; (800a8e4 <PxMessagingTask+0xf1c>)
										+ ((uint32_t) cMessage[port - 1][2
 800a848:	2038      	movs	r0, #56	; 0x38
 800a84a:	4368      	muls	r0, r5
 800a84c:	491c      	ldr	r1, [pc, #112]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a84e:	1809      	adds	r1, r1, r0
 800a850:	1909      	adds	r1, r1, r4
 800a852:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8)
 800a854:	021b      	lsls	r3, r3, #8
										+ ((uint32_t) cMessage[port - 1][3
 800a856:	78c8      	ldrb	r0, [r1, #3]
												+ shift] << 16)
 800a858:	0400      	lsls	r0, r0, #16
										+ ((uint32_t) cMessage[port - 1][3
 800a85a:	181b      	adds	r3, r3, r0
										+ shift] << 0)
 800a85c:	7848      	ldrb	r0, [r1, #1]
										+ ((uint32_t) cMessage[port - 1][3
 800a85e:	181b      	adds	r3, r3, r0
										+ ((uint32_t) cMessage[port - 1][4
 800a860:	7909      	ldrb	r1, [r1, #4]
												+ shift] << 24);
 800a862:	0609      	lsls	r1, r1, #24
										+ ((uint32_t) cMessage[port - 1][4
 800a864:	185b      	adds	r3, r3, r1
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	2300      	movs	r3, #0
 800a86a:	6053      	str	r3, [r2, #4]
								break;
 800a86c:	e795      	b.n	800a79a <PxMessagingTask+0xdd2>
								remoteBuffer = ((int32_t) cMessage[port - 1][1
 800a86e:	4a1d      	ldr	r2, [pc, #116]	; (800a8e4 <PxMessagingTask+0xf1c>)
										+ ((int32_t) cMessage[port - 1][2
 800a870:	2038      	movs	r0, #56	; 0x38
 800a872:	4368      	muls	r0, r5
 800a874:	4912      	ldr	r1, [pc, #72]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a876:	1809      	adds	r1, r1, r0
 800a878:	1909      	adds	r1, r1, r4
 800a87a:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8)
 800a87c:	021b      	lsls	r3, r3, #8
										+ shift] << 0)
 800a87e:	7848      	ldrb	r0, [r1, #1]
										+ ((int32_t) cMessage[port - 1][2
 800a880:	181b      	adds	r3, r3, r0
										+ ((int32_t) cMessage[port - 1][3
 800a882:	78c8      	ldrb	r0, [r1, #3]
												+ shift] << 16)
 800a884:	0400      	lsls	r0, r0, #16
										+ ((int32_t) cMessage[port - 1][3
 800a886:	181b      	adds	r3, r3, r0
										+ ((int32_t) cMessage[port - 1][4
 800a888:	7909      	ldrb	r1, [r1, #4]
												+ shift] << 24);
 800a88a:	0609      	lsls	r1, r1, #24
										+ ((int32_t) cMessage[port - 1][4
 800a88c:	185b      	adds	r3, r3, r1
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	17db      	asrs	r3, r3, #31
 800a892:	6053      	str	r3, [r2, #4]
								break;
 800a894:	e781      	b.n	800a79a <PxMessagingTask+0xdd2>
								remoteBuffer = ((uint32_t) cMessage[port - 1][1
 800a896:	4a13      	ldr	r2, [pc, #76]	; (800a8e4 <PxMessagingTask+0xf1c>)
										+ ((uint32_t) cMessage[port - 1][2
 800a898:	2038      	movs	r0, #56	; 0x38
 800a89a:	4368      	muls	r0, r5
 800a89c:	4908      	ldr	r1, [pc, #32]	; (800a8c0 <PxMessagingTask+0xef8>)
 800a89e:	1809      	adds	r1, r1, r0
 800a8a0:	1909      	adds	r1, r1, r4
 800a8a2:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8)
 800a8a4:	021b      	lsls	r3, r3, #8
										+ ((uint32_t) cMessage[port - 1][3
 800a8a6:	78c8      	ldrb	r0, [r1, #3]
												+ shift] << 16)
 800a8a8:	0400      	lsls	r0, r0, #16
										+ ((uint32_t) cMessage[port - 1][3
 800a8aa:	181b      	adds	r3, r3, r0
										+ shift] << 0)
 800a8ac:	7848      	ldrb	r0, [r1, #1]
										+ ((uint32_t) cMessage[port - 1][3
 800a8ae:	181b      	adds	r3, r3, r0
										+ ((uint32_t) cMessage[port - 1][4
 800a8b0:	7909      	ldrb	r1, [r1, #4]
												+ shift] << 24);
 800a8b2:	0609      	lsls	r1, r1, #24
										+ ((uint32_t) cMessage[port - 1][4
 800a8b4:	185b      	adds	r3, r3, r1
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6053      	str	r3, [r2, #4]
								break;
 800a8bc:	e76d      	b.n	800a79a <PxMessagingTask+0xdd2>
 800a8be:	46c0      	nop			; (mov r8, r8)
 800a8c0:	20000530 	.word	0x20000530
 800a8c4:	20000088 	.word	0x20000088
 800a8c8:	20000728 	.word	0x20000728
 800a8cc:	08018338 	.word	0x08018338
 800a8d0:	200060b8 	.word	0x200060b8
 800a8d4:	08018358 	.word	0x08018358
 800a8d8:	20000001 	.word	0x20000001
 800a8dc:	20000002 	.word	0x20000002
 800a8e0:	20000003 	.word	0x20000003
 800a8e4:	200008f0 	.word	0x200008f0
 800a8e8:	200008f8 	.word	0x200008f8
 800a8ec:	20000070 	.word	0x20000070
 800a8f0:	08018378 	.word	0x08018378
						responseStatus = BOS_OK;		// Initialize response
 800a8f4:	4bcd      	ldr	r3, [pc, #820]	; (800ac2c <PxMessagingTask+0x1264>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]
						if (cMessage[port - 1][shift])	// request for a BOS var
 800a8fa:	0027      	movs	r7, r4
 800a8fc:	4bcc      	ldr	r3, [pc, #816]	; (800ac30 <PxMessagingTask+0x1268>)
 800a8fe:	199b      	adds	r3, r3, r6
 800a900:	5d1b      	ldrb	r3, [r3, r4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d100      	bne.n	800a908 <PxMessagingTask+0xf40>
 800a906:	e10b      	b.n	800ab20 <PxMessagingTask+0x1158>
							if (cMessage[port - 1][shift] <= MAX_BOS_VARS) {
 800a908:	2b1e      	cmp	r3, #30
 800a90a:	d900      	bls.n	800a90e <PxMessagingTask+0xf46>
 800a90c:	e104      	b.n	800ab18 <PxMessagingTask+0x1150>
										- 1] >> 16) + SRAM_BASE;// Get var memory addres
 800a90e:	1e5c      	subs	r4, r3, #1
								temp32 = (BOS_var_reg[cMessage[port - 1][shift]
 800a910:	00a2      	lsls	r2, r4, #2
 800a912:	4bc8      	ldr	r3, [pc, #800]	; (800ac34 <PxMessagingTask+0x126c>)
 800a914:	58d1      	ldr	r1, [r2, r3]
										- 1] >> 16) + SRAM_BASE;// Get var memory addres
 800a916:	0c0b      	lsrs	r3, r1, #16
								temp32 = (BOS_var_reg[cMessage[port - 1][shift]
 800a918:	2280      	movs	r2, #128	; 0x80
 800a91a:	0592      	lsls	r2, r2, #22
 800a91c:	4694      	mov	ip, r2
 800a91e:	4463      	add	r3, ip
								switch (cMessage[port - 1][1 + shift])// requested format
 800a920:	1c7a      	adds	r2, r7, #1
 800a922:	4690      	mov	r8, r2
 800a924:	2038      	movs	r0, #56	; 0x38
 800a926:	4368      	muls	r0, r5
 800a928:	4ac1      	ldr	r2, [pc, #772]	; (800ac30 <PxMessagingTask+0x1268>)
 800a92a:	1812      	adds	r2, r2, r0
 800a92c:	4640      	mov	r0, r8
 800a92e:	5c12      	ldrb	r2, [r2, r0]
 800a930:	4691      	mov	r9, r2
 800a932:	3a01      	subs	r2, #1
 800a934:	b2d0      	uxtb	r0, r2
 800a936:	2807      	cmp	r0, #7
 800a938:	d81b      	bhi.n	800a972 <PxMessagingTask+0xfaa>
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	0092      	lsls	r2, r2, #2
 800a93e:	48be      	ldr	r0, [pc, #760]	; (800ac38 <PxMessagingTask+0x1270>)
 800a940:	5882      	ldr	r2, [r0, r2]
 800a942:	4697      	mov	pc, r2
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800a944:	070a      	lsls	r2, r1, #28
 800a946:	d109      	bne.n	800a95c <PxMessagingTask+0xf94>
										temp32 = (uint32_t) malloc(
 800a948:	2001      	movs	r0, #1
 800a94a:	f008 fc07 	bl	801315c <malloc>
 800a94e:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800a950:	d00c      	beq.n	800a96c <PxMessagingTask+0xfa4>
													- 1] = ((temp32 - SRAM_BASE)
 800a952:	00a4      	lsls	r4, r4, #2
													<< 16)
 800a954:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800a956:	4448      	add	r0, r9
													- 1] = ((temp32 - SRAM_BASE)
 800a958:	4ab6      	ldr	r2, [pc, #728]	; (800ac34 <PxMessagingTask+0x126c>)
 800a95a:	50a0      	str	r0, [r4, r2]
												- 1][2 + shift];
 800a95c:	2138      	movs	r1, #56	; 0x38
 800a95e:	4369      	muls	r1, r5
 800a960:	4ab3      	ldr	r2, [pc, #716]	; (800ac30 <PxMessagingTask+0x1268>)
 800a962:	1852      	adds	r2, r2, r1
 800a964:	19d2      	adds	r2, r2, r7
 800a966:	7892      	ldrb	r2, [r2, #2]
										*(__IO uint8_t*) temp32 = cMessage[port
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	e002      	b.n	800a972 <PxMessagingTask+0xfaa>
											responseStatus =
 800a96c:	4baf      	ldr	r3, [pc, #700]	; (800ac2c <PxMessagingTask+0x1264>)
 800a96e:	2212      	movs	r2, #18
 800a970:	701a      	strb	r2, [r3, #0]
								if ((BOS_var_reg[cMessage[port - 1][shift] - 1]
 800a972:	2338      	movs	r3, #56	; 0x38
 800a974:	436b      	muls	r3, r5
 800a976:	4aae      	ldr	r2, [pc, #696]	; (800ac30 <PxMessagingTask+0x1268>)
 800a978:	18d2      	adds	r2, r2, r3
 800a97a:	5dd3      	ldrb	r3, [r2, r7]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	0098      	lsls	r0, r3, #2
 800a980:	49ac      	ldr	r1, [pc, #688]	; (800ac34 <PxMessagingTask+0x126c>)
 800a982:	5841      	ldr	r1, [r0, r1]
										!= cMessage[port - 1][1 + shift]) {
 800a984:	4640      	mov	r0, r8
 800a986:	5c12      	ldrb	r2, [r2, r0]
										& 0x000F)
 800a988:	200f      	movs	r0, #15
 800a98a:	4008      	ands	r0, r1
								if ((BOS_var_reg[cMessage[port - 1][shift] - 1]
 800a98c:	4290      	cmp	r0, r2
 800a98e:	d009      	beq.n	800a9a4 <PxMessagingTask+0xfdc>
									BOS_var_reg[cMessage[port - 1][shift] - 1] &=
 800a990:	009b      	lsls	r3, r3, #2
													+ cMessage[port - 1][1
 800a992:	48aa      	ldr	r0, [pc, #680]	; (800ac3c <PxMessagingTask+0x1274>)
 800a994:	4684      	mov	ip, r0
 800a996:	4462      	add	r2, ip
									BOS_var_reg[cMessage[port - 1][shift] - 1] &=
 800a998:	400a      	ands	r2, r1
 800a99a:	49a6      	ldr	r1, [pc, #664]	; (800ac34 <PxMessagingTask+0x126c>)
 800a99c:	505a      	str	r2, [r3, r1]
									responseStatus =
 800a99e:	4ba3      	ldr	r3, [pc, #652]	; (800ac2c <PxMessagingTask+0x1264>)
 800a9a0:	2214      	movs	r2, #20
 800a9a2:	701a      	strb	r2, [r3, #0]
						if (BOS.response == BOS_RESPONSE_ALL
 800a9a4:	4ba6      	ldr	r3, [pc, #664]	; (800ac40 <PxMessagingTask+0x1278>)
								|| BOS.response == BOS_RESPONSE_MSG) {
 800a9a6:	799b      	ldrb	r3, [r3, #6]
 800a9a8:	2240      	movs	r2, #64	; 0x40
 800a9aa:	4393      	bics	r3, r2
 800a9ac:	2700      	movs	r7, #0
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d001      	beq.n	800a9b6 <PxMessagingTask+0xfee>
 800a9b2:	f7ff f839 	bl	8009a28 <PxMessagingTask+0x60>
							messageParams[0] = responseStatus;
 800a9b6:	4b9d      	ldr	r3, [pc, #628]	; (800ac2c <PxMessagingTask+0x1264>)
 800a9b8:	781a      	ldrb	r2, [r3, #0]
 800a9ba:	4ba2      	ldr	r3, [pc, #648]	; (800ac44 <PxMessagingTask+0x127c>)
 800a9bc:	701a      	strb	r2, [r3, #0]
							SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE,
 800a9be:	2201      	movs	r2, #1
 800a9c0:	2121      	movs	r1, #33	; 0x21
 800a9c2:	9804      	ldr	r0, [sp, #16]
 800a9c4:	f7fe fd3c 	bl	8009440 <SendMessageToModule>
 800a9c8:	f7ff f82e 	bl	8009a28 <PxMessagingTask+0x60>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800a9cc:	070a      	lsls	r2, r1, #28
 800a9ce:	d10a      	bne.n	800a9e6 <PxMessagingTask+0x101e>
										temp32 = (uint32_t) malloc(
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	f008 fbc3 	bl	801315c <malloc>
 800a9d6:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800a9d8:	d100      	bne.n	800a9dc <PxMessagingTask+0x1014>
 800a9da:	e369      	b.n	800b0b0 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800a9dc:	00a4      	lsls	r4, r4, #2
													<< 16)
 800a9de:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800a9e0:	3002      	adds	r0, #2
													- 1] = ((temp32 - SRAM_BASE)
 800a9e2:	4a94      	ldr	r2, [pc, #592]	; (800ac34 <PxMessagingTask+0x126c>)
 800a9e4:	50a0      	str	r0, [r4, r2]
												(int8_t) cMessage[port - 1][2
 800a9e6:	2138      	movs	r1, #56	; 0x38
 800a9e8:	4369      	muls	r1, r5
 800a9ea:	4a91      	ldr	r2, [pc, #580]	; (800ac30 <PxMessagingTask+0x1268>)
 800a9ec:	1852      	adds	r2, r2, r1
 800a9ee:	19d2      	adds	r2, r2, r7
 800a9f0:	7892      	ldrb	r2, [r2, #2]
 800a9f2:	b252      	sxtb	r2, r2
										*(__IO int8_t*) temp32 =
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	e7bc      	b.n	800a972 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800a9f8:	070a      	lsls	r2, r1, #28
 800a9fa:	d10a      	bne.n	800aa12 <PxMessagingTask+0x104a>
										temp32 = (uint32_t) malloc(
 800a9fc:	2002      	movs	r0, #2
 800a9fe:	f008 fbad 	bl	801315c <malloc>
 800aa02:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800aa04:	d100      	bne.n	800aa08 <PxMessagingTask+0x1040>
 800aa06:	e353      	b.n	800b0b0 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800aa08:	00a4      	lsls	r4, r4, #2
													<< 16)
 800aa0a:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800aa0c:	3003      	adds	r0, #3
													- 1] = ((temp32 - SRAM_BASE)
 800aa0e:	4a89      	ldr	r2, [pc, #548]	; (800ac34 <PxMessagingTask+0x126c>)
 800aa10:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800aa12:	2138      	movs	r1, #56	; 0x38
 800aa14:	4369      	muls	r1, r5
 800aa16:	4a86      	ldr	r2, [pc, #536]	; (800ac30 <PxMessagingTask+0x1268>)
 800aa18:	1852      	adds	r2, r2, r1
 800aa1a:	19d2      	adds	r2, r2, r7
 800aa1c:	78d1      	ldrb	r1, [r2, #3]
																<< 8);
 800aa1e:	0209      	lsls	r1, r1, #8
												((uint16_t) cMessage[port - 1][2
 800aa20:	7892      	ldrb	r2, [r2, #2]
														+ ((uint16_t) cMessage[port
 800aa22:	1852      	adds	r2, r2, r1
 800aa24:	b292      	uxth	r2, r2
										*(__IO uint16_t*) temp32 =
 800aa26:	801a      	strh	r2, [r3, #0]
 800aa28:	e7a3      	b.n	800a972 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800aa2a:	070a      	lsls	r2, r1, #28
 800aa2c:	d10a      	bne.n	800aa44 <PxMessagingTask+0x107c>
										temp32 = (uint32_t) malloc(
 800aa2e:	2002      	movs	r0, #2
 800aa30:	f008 fb94 	bl	801315c <malloc>
 800aa34:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800aa36:	d100      	bne.n	800aa3a <PxMessagingTask+0x1072>
 800aa38:	e33a      	b.n	800b0b0 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800aa3a:	00a4      	lsls	r4, r4, #2
													<< 16)
 800aa3c:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800aa3e:	3004      	adds	r0, #4
													- 1] = ((temp32 - SRAM_BASE)
 800aa40:	4a7c      	ldr	r2, [pc, #496]	; (800ac34 <PxMessagingTask+0x126c>)
 800aa42:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800aa44:	2138      	movs	r1, #56	; 0x38
 800aa46:	4369      	muls	r1, r5
 800aa48:	4a79      	ldr	r2, [pc, #484]	; (800ac30 <PxMessagingTask+0x1268>)
 800aa4a:	1852      	adds	r2, r2, r1
 800aa4c:	19d2      	adds	r2, r2, r7
 800aa4e:	78d1      	ldrb	r1, [r2, #3]
																<< 8);
 800aa50:	0209      	lsls	r1, r1, #8
												((int16_t) cMessage[port - 1][2
 800aa52:	7892      	ldrb	r2, [r2, #2]
														+ ((int16_t) cMessage[port
 800aa54:	1852      	adds	r2, r2, r1
 800aa56:	b212      	sxth	r2, r2
										*(__IO int16_t*) temp32 =
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	e78a      	b.n	800a972 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800aa5c:	070a      	lsls	r2, r1, #28
 800aa5e:	d10a      	bne.n	800aa76 <PxMessagingTask+0x10ae>
										temp32 = (uint32_t) malloc(
 800aa60:	2004      	movs	r0, #4
 800aa62:	f008 fb7b 	bl	801315c <malloc>
 800aa66:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800aa68:	d100      	bne.n	800aa6c <PxMessagingTask+0x10a4>
 800aa6a:	e321      	b.n	800b0b0 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800aa6c:	00a4      	lsls	r4, r4, #2
													<< 16)
 800aa6e:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800aa70:	3005      	adds	r0, #5
													- 1] = ((temp32 - SRAM_BASE)
 800aa72:	4a70      	ldr	r2, [pc, #448]	; (800ac34 <PxMessagingTask+0x126c>)
 800aa74:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800aa76:	2238      	movs	r2, #56	; 0x38
 800aa78:	436a      	muls	r2, r5
 800aa7a:	496d      	ldr	r1, [pc, #436]	; (800ac30 <PxMessagingTask+0x1268>)
 800aa7c:	1889      	adds	r1, r1, r2
 800aa7e:	19c9      	adds	r1, r1, r7
														+ ((uint32_t) cMessage[port
 800aa80:	78ca      	ldrb	r2, [r1, #3]
																<< 8)
 800aa82:	0212      	lsls	r2, r2, #8
														+ ((uint32_t) cMessage[port
 800aa84:	7908      	ldrb	r0, [r1, #4]
																<< 16)
 800aa86:	0400      	lsls	r0, r0, #16
														+ ((uint32_t) cMessage[port
 800aa88:	1812      	adds	r2, r2, r0
														+ shift] << 0)
 800aa8a:	7888      	ldrb	r0, [r1, #2]
														+ ((uint32_t) cMessage[port
 800aa8c:	1812      	adds	r2, r2, r0
														+ ((uint32_t) cMessage[port
 800aa8e:	7949      	ldrb	r1, [r1, #5]
																<< 24);
 800aa90:	0609      	lsls	r1, r1, #24
														+ ((uint32_t) cMessage[port
 800aa92:	1852      	adds	r2, r2, r1
										*(__IO uint32_t*) temp32 =
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	e76c      	b.n	800a972 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800aa98:	070a      	lsls	r2, r1, #28
 800aa9a:	d10a      	bne.n	800aab2 <PxMessagingTask+0x10ea>
										temp32 = (uint32_t) malloc(
 800aa9c:	2004      	movs	r0, #4
 800aa9e:	f008 fb5d 	bl	801315c <malloc>
 800aaa2:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800aaa4:	d100      	bne.n	800aaa8 <PxMessagingTask+0x10e0>
 800aaa6:	e303      	b.n	800b0b0 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800aaa8:	00a4      	lsls	r4, r4, #2
													<< 16)
 800aaaa:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800aaac:	3006      	adds	r0, #6
													- 1] = ((temp32 - SRAM_BASE)
 800aaae:	4a61      	ldr	r2, [pc, #388]	; (800ac34 <PxMessagingTask+0x126c>)
 800aab0:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800aab2:	2238      	movs	r2, #56	; 0x38
 800aab4:	436a      	muls	r2, r5
 800aab6:	495e      	ldr	r1, [pc, #376]	; (800ac30 <PxMessagingTask+0x1268>)
 800aab8:	1889      	adds	r1, r1, r2
 800aaba:	19c9      	adds	r1, r1, r7
														+ ((int32_t) cMessage[port
 800aabc:	78ca      	ldrb	r2, [r1, #3]
																<< 8)
 800aabe:	0212      	lsls	r2, r2, #8
														+ shift] << 0)
 800aac0:	7888      	ldrb	r0, [r1, #2]
														+ ((int32_t) cMessage[port
 800aac2:	1812      	adds	r2, r2, r0
														+ ((int32_t) cMessage[port
 800aac4:	7908      	ldrb	r0, [r1, #4]
																<< 16)
 800aac6:	0400      	lsls	r0, r0, #16
														+ ((int32_t) cMessage[port
 800aac8:	1812      	adds	r2, r2, r0
														+ ((int32_t) cMessage[port
 800aaca:	7949      	ldrb	r1, [r1, #5]
																<< 24);
 800aacc:	0609      	lsls	r1, r1, #24
														+ ((int32_t) cMessage[port
 800aace:	1852      	adds	r2, r2, r1
										*(__IO int32_t*) temp32 =
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	e74e      	b.n	800a972 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800aad4:	070a      	lsls	r2, r1, #28
 800aad6:	d10a      	bne.n	800aaee <PxMessagingTask+0x1126>
										temp32 = (uint32_t) malloc(
 800aad8:	2004      	movs	r0, #4
 800aada:	f008 fb3f 	bl	801315c <malloc>
 800aade:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800aae0:	d100      	bne.n	800aae4 <PxMessagingTask+0x111c>
 800aae2:	e2e5      	b.n	800b0b0 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800aae4:	00a4      	lsls	r4, r4, #2
													<< 16)
 800aae6:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800aae8:	3007      	adds	r0, #7
													- 1] = ((temp32 - SRAM_BASE)
 800aaea:	4a52      	ldr	r2, [pc, #328]	; (800ac34 <PxMessagingTask+0x126c>)
 800aaec:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800aaee:	2238      	movs	r2, #56	; 0x38
 800aaf0:	436a      	muls	r2, r5
 800aaf2:	494f      	ldr	r1, [pc, #316]	; (800ac30 <PxMessagingTask+0x1268>)
 800aaf4:	1889      	adds	r1, r1, r2
 800aaf6:	19c9      	adds	r1, r1, r7
														+ ((uint32_t) cMessage[port
 800aaf8:	78ca      	ldrb	r2, [r1, #3]
																<< 8)
 800aafa:	0212      	lsls	r2, r2, #8
														+ ((uint32_t) cMessage[port
 800aafc:	7908      	ldrb	r0, [r1, #4]
																<< 16)
 800aafe:	0400      	lsls	r0, r0, #16
														+ ((uint32_t) cMessage[port
 800ab00:	1812      	adds	r2, r2, r0
														+ shift] << 0)
 800ab02:	7888      	ldrb	r0, [r1, #2]
														+ ((uint32_t) cMessage[port
 800ab04:	1812      	adds	r2, r2, r0
														+ ((uint32_t) cMessage[port
 800ab06:	7949      	ldrb	r1, [r1, #5]
																<< 24);
 800ab08:	0609      	lsls	r1, r1, #24
														+ ((uint32_t) cMessage[port
 800ab0a:	1852      	adds	r2, r2, r1
										remoteBuffer =
 800ab0c:	494e      	ldr	r1, [pc, #312]	; (800ac48 <PxMessagingTask+0x1280>)
 800ab0e:	600a      	str	r2, [r1, #0]
 800ab10:	2000      	movs	r0, #0
 800ab12:	6048      	str	r0, [r1, #4]
										*(float*) temp32 =
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	e72c      	b.n	800a972 <PxMessagingTask+0xfaa>
								responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;// BOS var index out of range
 800ab18:	4b44      	ldr	r3, [pc, #272]	; (800ac2c <PxMessagingTask+0x1264>)
 800ab1a:	2213      	movs	r2, #19
 800ab1c:	701a      	strb	r2, [r3, #0]
 800ab1e:	e741      	b.n	800a9a4 <PxMessagingTask+0xfdc>
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800ab20:	2238      	movs	r2, #56	; 0x38
 800ab22:	436a      	muls	r2, r5
 800ab24:	4b42      	ldr	r3, [pc, #264]	; (800ac30 <PxMessagingTask+0x1268>)
 800ab26:	189b      	adds	r3, r3, r2
 800ab28:	191b      	adds	r3, r3, r4
 800ab2a:	789c      	ldrb	r4, [r3, #2]
									<< 24)
 800ab2c:	0624      	lsls	r4, r4, #24
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800ab2e:	78da      	ldrb	r2, [r3, #3]
											<< 16)
 800ab30:	0412      	lsls	r2, r2, #16
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800ab32:	18a4      	adds	r4, r4, r2
									+ cMessage[port - 1][5 + shift];
 800ab34:	795a      	ldrb	r2, [r3, #5]
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800ab36:	18a4      	adds	r4, r4, r2
									+ ((uint32_t) cMessage[port - 1][4 + shift]
 800ab38:	791b      	ldrb	r3, [r3, #4]
											<< 8)
 800ab3a:	021b      	lsls	r3, r3, #8
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800ab3c:	18e4      	adds	r4, r4, r3
									&& temp32 < (SRAM_BASE + SRAM_SIZE))// SRAM
 800ab3e:	23e0      	movs	r3, #224	; 0xe0
 800ab40:	061b      	lsls	r3, r3, #24
 800ab42:	18e2      	adds	r2, r4, r3
							if (temp32 >= SRAM_BASE
 800ab44:	4b41      	ldr	r3, [pc, #260]	; (800ac4c <PxMessagingTask+0x1284>)
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d900      	bls.n	800ab4c <PxMessagingTask+0x1184>
 800ab4a:	e083      	b.n	800ac54 <PxMessagingTask+0x128c>
								switch (cMessage[port - 1][1 + shift])// Requested format
 800ab4c:	2238      	movs	r2, #56	; 0x38
 800ab4e:	436a      	muls	r2, r5
 800ab50:	4b37      	ldr	r3, [pc, #220]	; (800ac30 <PxMessagingTask+0x1268>)
 800ab52:	189b      	adds	r3, r3, r2
 800ab54:	19db      	adds	r3, r3, r7
 800ab56:	785b      	ldrb	r3, [r3, #1]
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	2a07      	cmp	r2, #7
 800ab5e:	d900      	bls.n	800ab62 <PxMessagingTask+0x119a>
 800ab60:	e720      	b.n	800a9a4 <PxMessagingTask+0xfdc>
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4a3a      	ldr	r2, [pc, #232]	; (800ac50 <PxMessagingTask+0x1288>)
 800ab68:	58d3      	ldr	r3, [r2, r3]
 800ab6a:	469f      	mov	pc, r3
											cMessage[port - 1][6 + shift];
 800ab6c:	2238      	movs	r2, #56	; 0x38
 800ab6e:	436a      	muls	r2, r5
 800ab70:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <PxMessagingTask+0x1268>)
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	19df      	adds	r7, r3, r7
 800ab76:	79bb      	ldrb	r3, [r7, #6]
									*(__IO uint8_t*) temp32 =
 800ab78:	7023      	strb	r3, [r4, #0]
									break;
 800ab7a:	e713      	b.n	800a9a4 <PxMessagingTask+0xfdc>
											(int8_t) cMessage[port - 1][6
 800ab7c:	2238      	movs	r2, #56	; 0x38
 800ab7e:	436a      	muls	r2, r5
 800ab80:	4b2b      	ldr	r3, [pc, #172]	; (800ac30 <PxMessagingTask+0x1268>)
 800ab82:	189b      	adds	r3, r3, r2
 800ab84:	19df      	adds	r7, r3, r7
 800ab86:	2306      	movs	r3, #6
 800ab88:	56fb      	ldrsb	r3, [r7, r3]
									*(__IO int8_t*) temp32 =
 800ab8a:	7023      	strb	r3, [r4, #0]
									break;
 800ab8c:	e70a      	b.n	800a9a4 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8);
 800ab8e:	2238      	movs	r2, #56	; 0x38
 800ab90:	436a      	muls	r2, r5
 800ab92:	4b27      	ldr	r3, [pc, #156]	; (800ac30 <PxMessagingTask+0x1268>)
 800ab94:	189b      	adds	r3, r3, r2
 800ab96:	19df      	adds	r7, r3, r7
 800ab98:	79fa      	ldrb	r2, [r7, #7]
 800ab9a:	0212      	lsls	r2, r2, #8
											((uint16_t) cMessage[port - 1][6
 800ab9c:	79bb      	ldrb	r3, [r7, #6]
													+ ((uint16_t) cMessage[port
 800ab9e:	189b      	adds	r3, r3, r2
 800aba0:	b29b      	uxth	r3, r3
									*(__IO uint16_t*) temp32 =
 800aba2:	8023      	strh	r3, [r4, #0]
									break;
 800aba4:	e6fe      	b.n	800a9a4 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8);
 800aba6:	2238      	movs	r2, #56	; 0x38
 800aba8:	436a      	muls	r2, r5
 800abaa:	4b21      	ldr	r3, [pc, #132]	; (800ac30 <PxMessagingTask+0x1268>)
 800abac:	189b      	adds	r3, r3, r2
 800abae:	19df      	adds	r7, r3, r7
 800abb0:	79fa      	ldrb	r2, [r7, #7]
 800abb2:	0212      	lsls	r2, r2, #8
											((int16_t) cMessage[port - 1][6
 800abb4:	79bb      	ldrb	r3, [r7, #6]
													+ ((int16_t) cMessage[port
 800abb6:	189b      	adds	r3, r3, r2
 800abb8:	b21b      	sxth	r3, r3
									*(__IO int16_t*) temp32 =
 800abba:	8023      	strh	r3, [r4, #0]
									break;
 800abbc:	e6f2      	b.n	800a9a4 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8)
 800abbe:	2238      	movs	r2, #56	; 0x38
 800abc0:	436a      	muls	r2, r5
 800abc2:	4b1b      	ldr	r3, [pc, #108]	; (800ac30 <PxMessagingTask+0x1268>)
 800abc4:	189b      	adds	r3, r3, r2
 800abc6:	19df      	adds	r7, r3, r7
													+ ((uint32_t) cMessage[port
 800abc8:	79fb      	ldrb	r3, [r7, #7]
															- 1][7 + shift] << 8)
 800abca:	021b      	lsls	r3, r3, #8
													+ ((uint32_t) cMessage[port
 800abcc:	7a3a      	ldrb	r2, [r7, #8]
															<< 16)
 800abce:	0412      	lsls	r2, r2, #16
													+ ((uint32_t) cMessage[port
 800abd0:	189b      	adds	r3, r3, r2
													+ shift] << 0)
 800abd2:	79ba      	ldrb	r2, [r7, #6]
													+ ((uint32_t) cMessage[port
 800abd4:	189b      	adds	r3, r3, r2
													+ ((uint32_t) cMessage[port
 800abd6:	7a7a      	ldrb	r2, [r7, #9]
															<< 24);
 800abd8:	0612      	lsls	r2, r2, #24
													+ ((uint32_t) cMessage[port
 800abda:	189b      	adds	r3, r3, r2
									*(__IO uint32_t*) temp32 =
 800abdc:	6023      	str	r3, [r4, #0]
									break;
 800abde:	e6e1      	b.n	800a9a4 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8)
 800abe0:	2238      	movs	r2, #56	; 0x38
 800abe2:	436a      	muls	r2, r5
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <PxMessagingTask+0x1268>)
 800abe6:	189b      	adds	r3, r3, r2
 800abe8:	19df      	adds	r7, r3, r7
													+ ((int32_t) cMessage[port
 800abea:	79fb      	ldrb	r3, [r7, #7]
															- 1][7 + shift] << 8)
 800abec:	021b      	lsls	r3, r3, #8
													+ shift] << 0)
 800abee:	79ba      	ldrb	r2, [r7, #6]
													+ ((int32_t) cMessage[port
 800abf0:	189b      	adds	r3, r3, r2
													+ ((int32_t) cMessage[port
 800abf2:	7a3a      	ldrb	r2, [r7, #8]
															<< 16)
 800abf4:	0412      	lsls	r2, r2, #16
													+ ((int32_t) cMessage[port
 800abf6:	189b      	adds	r3, r3, r2
													+ ((int32_t) cMessage[port
 800abf8:	7a7a      	ldrb	r2, [r7, #9]
															<< 24);
 800abfa:	0612      	lsls	r2, r2, #24
													+ ((int32_t) cMessage[port
 800abfc:	189b      	adds	r3, r3, r2
									*(__IO int32_t*) temp32 =
 800abfe:	6023      	str	r3, [r4, #0]
									break;
 800ac00:	e6d0      	b.n	800a9a4 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8)
 800ac02:	2238      	movs	r2, #56	; 0x38
 800ac04:	436a      	muls	r2, r5
 800ac06:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <PxMessagingTask+0x1268>)
 800ac08:	189b      	adds	r3, r3, r2
 800ac0a:	19df      	adds	r7, r3, r7
													+ ((uint32_t) cMessage[port
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
															- 1][7 + shift] << 8)
 800ac0e:	021b      	lsls	r3, r3, #8
													+ ((uint32_t) cMessage[port
 800ac10:	7a3a      	ldrb	r2, [r7, #8]
															<< 16)
 800ac12:	0412      	lsls	r2, r2, #16
													+ ((uint32_t) cMessage[port
 800ac14:	189b      	adds	r3, r3, r2
													+ shift] << 0)
 800ac16:	79ba      	ldrb	r2, [r7, #6]
													+ ((uint32_t) cMessage[port
 800ac18:	189b      	adds	r3, r3, r2
													+ ((uint32_t) cMessage[port
 800ac1a:	7a7a      	ldrb	r2, [r7, #9]
															<< 24);
 800ac1c:	0612      	lsls	r2, r2, #24
													+ ((uint32_t) cMessage[port
 800ac1e:	189b      	adds	r3, r3, r2
									remoteBuffer =
 800ac20:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <PxMessagingTask+0x1280>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	2100      	movs	r1, #0
 800ac26:	6051      	str	r1, [r2, #4]
									*(float*) temp32 = *(float*) &remoteBuffer;
 800ac28:	6023      	str	r3, [r4, #0]
									break;
 800ac2a:	e6bb      	b.n	800a9a4 <PxMessagingTask+0xfdc>
 800ac2c:	200008f8 	.word	0x200008f8
 800ac30:	20000530 	.word	0x20000530
 800ac34:	200060b8 	.word	0x200060b8
 800ac38:	0801839c 	.word	0x0801839c
 800ac3c:	0000fff0 	.word	0x0000fff0
 800ac40:	20006130 	.word	0x20006130
 800ac44:	20000728 	.word	0x20000728
 800ac48:	200008f0 	.word	0x200008f0
 800ac4c:	00007fff 	.word	0x00007fff
 800ac50:	080183bc 	.word	0x080183bc
							} else if (temp32 >= FLASH_BASE
 800ac54:	4adc      	ldr	r2, [pc, #880]	; (800afc8 <PxMessagingTask+0x1600>)
 800ac56:	23f8      	movs	r3, #248	; 0xf8
 800ac58:	061b      	lsls	r3, r3, #24
 800ac5a:	18e3      	adds	r3, r4, r3
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d900      	bls.n	800ac62 <PxMessagingTask+0x129a>
 800ac60:	e0a7      	b.n	800adb2 <PxMessagingTask+0x13ea>
								HAL_FLASH_Unlock();
 800ac62:	f006 f9f3 	bl	801104c <HAL_FLASH_Unlock>
								if (code == CODE_WRITE_REMOTE_FORCE) {
 800ac66:	4643      	mov	r3, r8
 800ac68:	2b22      	cmp	r3, #34	; 0x22
 800ac6a:	d111      	bne.n	800ac90 <PxMessagingTask+0x12c8>
									erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	9313      	str	r3, [sp, #76]	; 0x4c
									erase.PageAddress = temp32;
 800ac70:	9414      	str	r4, [sp, #80]	; 0x50
									erase.NbPages = 1;
 800ac72:	3301      	adds	r3, #1
 800ac74:	9315      	str	r3, [sp, #84]	; 0x54
									status = HAL_FLASHEx_Erase(&erase,
 800ac76:	a912      	add	r1, sp, #72	; 0x48
 800ac78:	a813      	add	r0, sp, #76	; 0x4c
 800ac7a:	f006 fabb 	bl	80111f4 <HAL_FLASHEx_Erase>
 800ac7e:	900a      	str	r0, [sp, #40]	; 0x28
									if (status != HAL_OK
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d102      	bne.n	800ac8a <PxMessagingTask+0x12c2>
											|| eraseError != 0xFFFFFFFF)
 800ac84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac86:	3301      	adds	r3, #1
 800ac88:	d002      	beq.n	800ac90 <PxMessagingTask+0x12c8>
										responseStatus =
 800ac8a:	4bd0      	ldr	r3, [pc, #832]	; (800afcc <PxMessagingTask+0x1604>)
 800ac8c:	2216      	movs	r2, #22
 800ac8e:	701a      	strb	r2, [r3, #0]
								if (responseStatus == BOS_OK) {
 800ac90:	4bce      	ldr	r3, [pc, #824]	; (800afcc <PxMessagingTask+0x1604>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d116      	bne.n	800acc6 <PxMessagingTask+0x12fe>
									switch (cMessage[port - 1][1 + shift])// Requested format
 800ac98:	2238      	movs	r2, #56	; 0x38
 800ac9a:	436a      	muls	r2, r5
 800ac9c:	4bcc      	ldr	r3, [pc, #816]	; (800afd0 <PxMessagingTask+0x1608>)
 800ac9e:	189b      	adds	r3, r3, r2
 800aca0:	19db      	adds	r3, r3, r7
 800aca2:	785b      	ldrb	r3, [r3, #1]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	2a07      	cmp	r2, #7
 800acaa:	d80c      	bhi.n	800acc6 <PxMessagingTask+0x12fe>
 800acac:	b2db      	uxtb	r3, r3
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4ac8      	ldr	r2, [pc, #800]	; (800afd4 <PxMessagingTask+0x160c>)
 800acb2:	58d3      	ldr	r3, [r2, r3]
 800acb4:	469f      	mov	pc, r3
										if (*(__IO uint16_t*) temp32
 800acb6:	8823      	ldrh	r3, [r4, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	4ac7      	ldr	r2, [pc, #796]	; (800afd8 <PxMessagingTask+0x1610>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d00c      	beq.n	800acda <PxMessagingTask+0x1312>
											responseStatus =
 800acc0:	4bc2      	ldr	r3, [pc, #776]	; (800afcc <PxMessagingTask+0x1604>)
 800acc2:	2216      	movs	r2, #22
 800acc4:	701a      	strb	r2, [r3, #0]
								HAL_FLASH_Lock();
 800acc6:	f006 f9d3 	bl	8011070 <HAL_FLASH_Lock>
								if (status != HAL_OK)
 800acca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800accc:	2b00      	cmp	r3, #0
 800acce:	d100      	bne.n	800acd2 <PxMessagingTask+0x130a>
 800acd0:	e668      	b.n	800a9a4 <PxMessagingTask+0xfdc>
									responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800acd2:	4bbe      	ldr	r3, [pc, #760]	; (800afcc <PxMessagingTask+0x1604>)
 800acd4:	2216      	movs	r2, #22
 800acd6:	701a      	strb	r2, [r3, #0]
 800acd8:	e664      	b.n	800a9a4 <PxMessagingTask+0xfdc>
											remoteBuffer = cMessage[port - 1][6
 800acda:	2238      	movs	r2, #56	; 0x38
 800acdc:	436a      	muls	r2, r5
 800acde:	4bbc      	ldr	r3, [pc, #752]	; (800afd0 <PxMessagingTask+0x1608>)
 800ace0:	189b      	adds	r3, r3, r2
 800ace2:	19df      	adds	r7, r3, r7
 800ace4:	79ba      	ldrb	r2, [r7, #6]
 800ace6:	2300      	movs	r3, #0
 800ace8:	49bc      	ldr	r1, [pc, #752]	; (800afdc <PxMessagingTask+0x1614>)
 800acea:	600a      	str	r2, [r1, #0]
 800acec:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800acee:	0021      	movs	r1, r4
 800acf0:	2001      	movs	r0, #1
 800acf2:	f006 f9f5 	bl	80110e0 <HAL_FLASH_Program>
 800acf6:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800acf8:	e7e5      	b.n	800acc6 <PxMessagingTask+0x12fe>
										if (*(__IO uint16_t*) temp32
 800acfa:	8823      	ldrh	r3, [r4, #0]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	4ab6      	ldr	r2, [pc, #728]	; (800afd8 <PxMessagingTask+0x1610>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d003      	beq.n	800ad0c <PxMessagingTask+0x1344>
											responseStatus =
 800ad04:	4bb1      	ldr	r3, [pc, #708]	; (800afcc <PxMessagingTask+0x1604>)
 800ad06:	2216      	movs	r2, #22
 800ad08:	701a      	strb	r2, [r3, #0]
											break;
 800ad0a:	e7dc      	b.n	800acc6 <PxMessagingTask+0x12fe>
																	- 1][7
 800ad0c:	2238      	movs	r2, #56	; 0x38
 800ad0e:	436a      	muls	r2, r5
 800ad10:	4baf      	ldr	r3, [pc, #700]	; (800afd0 <PxMessagingTask+0x1608>)
 800ad12:	189b      	adds	r3, r3, r2
 800ad14:	19df      	adds	r7, r3, r7
															+ ((uint16_t) cMessage[port
 800ad16:	79fa      	ldrb	r2, [r7, #7]
																	<< 8);
 800ad18:	0212      	lsls	r2, r2, #8
															- 1][6 + shift] << 0)
 800ad1a:	79bb      	ldrb	r3, [r7, #6]
															+ ((uint16_t) cMessage[port
 800ad1c:	18d2      	adds	r2, r2, r3
 800ad1e:	17d3      	asrs	r3, r2, #31
											remoteBuffer =
 800ad20:	49ae      	ldr	r1, [pc, #696]	; (800afdc <PxMessagingTask+0x1614>)
 800ad22:	600a      	str	r2, [r1, #0]
 800ad24:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800ad26:	0021      	movs	r1, r4
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f006 f9d9 	bl	80110e0 <HAL_FLASH_Program>
 800ad2e:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800ad30:	e7c9      	b.n	800acc6 <PxMessagingTask+0x12fe>
										if (*(__IO uint32_t*) temp32
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	d003      	beq.n	800ad40 <PxMessagingTask+0x1378>
											responseStatus =
 800ad38:	4ba4      	ldr	r3, [pc, #656]	; (800afcc <PxMessagingTask+0x1604>)
 800ad3a:	2216      	movs	r2, #22
 800ad3c:	701a      	strb	r2, [r3, #0]
											break;
 800ad3e:	e7c2      	b.n	800acc6 <PxMessagingTask+0x12fe>
																	- 1][7
 800ad40:	2238      	movs	r2, #56	; 0x38
 800ad42:	436a      	muls	r2, r5
 800ad44:	4ba2      	ldr	r3, [pc, #648]	; (800afd0 <PxMessagingTask+0x1608>)
 800ad46:	189b      	adds	r3, r3, r2
 800ad48:	19df      	adds	r7, r3, r7
															+ ((uint32_t) cMessage[port
 800ad4a:	79fa      	ldrb	r2, [r7, #7]
																	<< 8)
 800ad4c:	0212      	lsls	r2, r2, #8
															+ ((uint32_t) cMessage[port
 800ad4e:	7a3b      	ldrb	r3, [r7, #8]
																	<< 16)
 800ad50:	041b      	lsls	r3, r3, #16
															+ ((uint32_t) cMessage[port
 800ad52:	18d2      	adds	r2, r2, r3
															- 1][6 + shift] << 0)
 800ad54:	79bb      	ldrb	r3, [r7, #6]
															+ ((uint32_t) cMessage[port
 800ad56:	18d2      	adds	r2, r2, r3
															+ ((uint32_t) cMessage[port
 800ad58:	7a7b      	ldrb	r3, [r7, #9]
																	<< 24);
 800ad5a:	061b      	lsls	r3, r3, #24
															+ ((uint32_t) cMessage[port
 800ad5c:	18d2      	adds	r2, r2, r3
 800ad5e:	2300      	movs	r3, #0
											remoteBuffer =
 800ad60:	499e      	ldr	r1, [pc, #632]	; (800afdc <PxMessagingTask+0x1614>)
 800ad62:	600a      	str	r2, [r1, #0]
 800ad64:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800ad66:	0021      	movs	r1, r4
 800ad68:	2002      	movs	r0, #2
 800ad6a:	f006 f9b9 	bl	80110e0 <HAL_FLASH_Program>
 800ad6e:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800ad70:	e7a9      	b.n	800acc6 <PxMessagingTask+0x12fe>
										if (*(__IO uint32_t*) temp32
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	d003      	beq.n	800ad80 <PxMessagingTask+0x13b8>
											responseStatus =
 800ad78:	4b94      	ldr	r3, [pc, #592]	; (800afcc <PxMessagingTask+0x1604>)
 800ad7a:	2216      	movs	r2, #22
 800ad7c:	701a      	strb	r2, [r3, #0]
											break;
 800ad7e:	e7a2      	b.n	800acc6 <PxMessagingTask+0x12fe>
																	- 1][7
 800ad80:	2238      	movs	r2, #56	; 0x38
 800ad82:	436a      	muls	r2, r5
 800ad84:	4b92      	ldr	r3, [pc, #584]	; (800afd0 <PxMessagingTask+0x1608>)
 800ad86:	189b      	adds	r3, r3, r2
 800ad88:	19df      	adds	r7, r3, r7
															+ ((uint32_t) cMessage[port
 800ad8a:	79fa      	ldrb	r2, [r7, #7]
																	<< 8)
 800ad8c:	0212      	lsls	r2, r2, #8
															+ ((uint32_t) cMessage[port
 800ad8e:	7a3b      	ldrb	r3, [r7, #8]
																	<< 16)
 800ad90:	041b      	lsls	r3, r3, #16
															+ ((uint32_t) cMessage[port
 800ad92:	18d2      	adds	r2, r2, r3
															- 1][6 + shift] << 0)
 800ad94:	79bb      	ldrb	r3, [r7, #6]
															+ ((uint32_t) cMessage[port
 800ad96:	18d2      	adds	r2, r2, r3
															+ ((uint32_t) cMessage[port
 800ad98:	7a7b      	ldrb	r3, [r7, #9]
																	<< 24);
 800ad9a:	061b      	lsls	r3, r3, #24
															+ ((uint32_t) cMessage[port
 800ad9c:	18d2      	adds	r2, r2, r3
 800ad9e:	2300      	movs	r3, #0
											remoteBuffer =
 800ada0:	498e      	ldr	r1, [pc, #568]	; (800afdc <PxMessagingTask+0x1614>)
 800ada2:	600a      	str	r2, [r1, #0]
 800ada4:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800ada6:	0021      	movs	r1, r4
 800ada8:	2003      	movs	r0, #3
 800adaa:	f006 f999 	bl	80110e0 <HAL_FLASH_Program>
 800adae:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800adb0:	e789      	b.n	800acc6 <PxMessagingTask+0x12fe>
								responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800adb2:	4b86      	ldr	r3, [pc, #536]	; (800afcc <PxMessagingTask+0x1604>)
 800adb4:	2215      	movs	r2, #21
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	e5f4      	b.n	800a9a4 <PxMessagingTask+0xfdc>
						responseStatus = (BOS_Status) cMessage[port - 1][shift];
 800adba:	4b85      	ldr	r3, [pc, #532]	; (800afd0 <PxMessagingTask+0x1608>)
 800adbc:	199b      	adds	r3, r3, r6
 800adbe:	5d1a      	ldrb	r2, [r3, r4]
 800adc0:	4b82      	ldr	r3, [pc, #520]	; (800afcc <PxMessagingTask+0x1604>)
 800adc2:	701a      	strb	r2, [r3, #0]
						break;
 800adc4:	2700      	movs	r7, #0
 800adc6:	f7fe fe2f 	bl	8009a28 <PxMessagingTask+0x60>
						writePxMutex(cMessage[port - 1][shift],
 800adca:	9a06      	ldr	r2, [sp, #24]
 800adcc:	3a01      	subs	r2, #1
 800adce:	b292      	uxth	r2, r2
								(char*) &cMessage[port - 1][shift + 1],
 800add0:	1c61      	adds	r1, r4, #1
 800add2:	4451      	add	r1, sl
 800add4:	4b7e      	ldr	r3, [pc, #504]	; (800afd0 <PxMessagingTask+0x1608>)
 800add6:	18c9      	adds	r1, r1, r3
						writePxMutex(cMessage[port - 1][shift],
 800add8:	199b      	adds	r3, r3, r6
 800adda:	5d18      	ldrb	r0, [r3, r4]
 800addc:	230a      	movs	r3, #10
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	f002 fdf0 	bl	800d9c4 <writePxMutex>
						break;
 800ade4:	2700      	movs	r7, #0
 800ade6:	f7fe fe1f 	bl	8009a28 <PxMessagingTask+0x60>
							 switch(cMessage[port-1][0+shift])
 800adea:	9406      	str	r4, [sp, #24]
 800adec:	4b78      	ldr	r3, [pc, #480]	; (800afd0 <PxMessagingTask+0x1608>)
 800adee:	199b      	adds	r3, r3, r6
 800adf0:	5d18      	ldrb	r0, [r3, r4]
 800adf2:	282b      	cmp	r0, #43	; 0x2b
 800adf4:	d900      	bls.n	800adf8 <PxMessagingTask+0x1430>
 800adf6:	e0a9      	b.n	800af4c <PxMessagingTask+0x1584>
 800adf8:	0083      	lsls	r3, r0, #2
 800adfa:	4a79      	ldr	r2, [pc, #484]	; (800afe0 <PxMessagingTask+0x1618>)
 800adfc:	58d3      	ldr	r3, [r2, r3]
 800adfe:	469f      	mov	pc, r3
										MBmessageParams[0] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800ae00:	2338      	movs	r3, #56	; 0x38
 800ae02:	436b      	muls	r3, r5
 800ae04:	4f72      	ldr	r7, [pc, #456]	; (800afd0 <PxMessagingTask+0x1608>)
 800ae06:	18ff      	adds	r7, r7, r3
 800ae08:	9b06      	ldr	r3, [sp, #24]
 800ae0a:	469c      	mov	ip, r3
 800ae0c:	4467      	add	r7, ip
 800ae0e:	78bb      	ldrb	r3, [r7, #2]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	78fa      	ldrb	r2, [r7, #3]
 800ae14:	0412      	lsls	r2, r2, #16
 800ae16:	189b      	adds	r3, r3, r2
 800ae18:	787a      	ldrb	r2, [r7, #1]
 800ae1a:	189b      	adds	r3, r3, r2
 800ae1c:	793a      	ldrb	r2, [r7, #4]
 800ae1e:	0612      	lsls	r2, r2, #24
 800ae20:	189b      	adds	r3, r3, r2
 800ae22:	4a70      	ldr	r2, [pc, #448]	; (800afe4 <PxMessagingTask+0x161c>)
 800ae24:	6013      	str	r3, [r2, #0]
										MBmessageParams[1] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800ae26:	79bb      	ldrb	r3, [r7, #6]
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	79f9      	ldrb	r1, [r7, #7]
 800ae2c:	0409      	lsls	r1, r1, #16
 800ae2e:	185b      	adds	r3, r3, r1
 800ae30:	7979      	ldrb	r1, [r7, #5]
 800ae32:	185b      	adds	r3, r3, r1
 800ae34:	7a39      	ldrb	r1, [r7, #8]
 800ae36:	0609      	lsls	r1, r1, #24
 800ae38:	185b      	adds	r3, r3, r1
 800ae3a:	6053      	str	r3, [r2, #4]
										MBmessageParams[2] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800ae3c:	7abb      	ldrb	r3, [r7, #10]
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	7af9      	ldrb	r1, [r7, #11]
 800ae42:	0409      	lsls	r1, r1, #16
 800ae44:	185b      	adds	r3, r3, r1
 800ae46:	7a79      	ldrb	r1, [r7, #9]
 800ae48:	185b      	adds	r3, r3, r1
 800ae4a:	7b39      	ldrb	r1, [r7, #12]
 800ae4c:	0609      	lsls	r1, r1, #24
 800ae4e:	185b      	adds	r3, r3, r1
 800ae50:	6093      	str	r3, [r2, #8]
									break;
 800ae52:	e07b      	b.n	800af4c <PxMessagingTask+0x1584>
										MBmessageParams[3] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800ae54:	2338      	movs	r3, #56	; 0x38
 800ae56:	436b      	muls	r3, r5
 800ae58:	4f5d      	ldr	r7, [pc, #372]	; (800afd0 <PxMessagingTask+0x1608>)
 800ae5a:	18ff      	adds	r7, r7, r3
 800ae5c:	9b06      	ldr	r3, [sp, #24]
 800ae5e:	469c      	mov	ip, r3
 800ae60:	4467      	add	r7, ip
 800ae62:	78bb      	ldrb	r3, [r7, #2]
 800ae64:	021b      	lsls	r3, r3, #8
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	0412      	lsls	r2, r2, #16
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	787a      	ldrb	r2, [r7, #1]
 800ae6e:	189b      	adds	r3, r3, r2
 800ae70:	793a      	ldrb	r2, [r7, #4]
 800ae72:	0612      	lsls	r2, r2, #24
 800ae74:	189b      	adds	r3, r3, r2
 800ae76:	4a5b      	ldr	r2, [pc, #364]	; (800afe4 <PxMessagingTask+0x161c>)
 800ae78:	60d3      	str	r3, [r2, #12]
										MBmessageParams[4] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800ae7a:	79bb      	ldrb	r3, [r7, #6]
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	79f9      	ldrb	r1, [r7, #7]
 800ae80:	0409      	lsls	r1, r1, #16
 800ae82:	185b      	adds	r3, r3, r1
 800ae84:	7979      	ldrb	r1, [r7, #5]
 800ae86:	185b      	adds	r3, r3, r1
 800ae88:	7a39      	ldrb	r1, [r7, #8]
 800ae8a:	0609      	lsls	r1, r1, #24
 800ae8c:	185b      	adds	r3, r3, r1
 800ae8e:	6113      	str	r3, [r2, #16]
										MBmessageParams[5] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800ae90:	7abb      	ldrb	r3, [r7, #10]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	7af9      	ldrb	r1, [r7, #11]
 800ae96:	0409      	lsls	r1, r1, #16
 800ae98:	185b      	adds	r3, r3, r1
 800ae9a:	7a79      	ldrb	r1, [r7, #9]
 800ae9c:	185b      	adds	r3, r3, r1
 800ae9e:	7b39      	ldrb	r1, [r7, #12]
 800aea0:	0609      	lsls	r1, r1, #24
 800aea2:	185b      	adds	r3, r3, r1
 800aea4:	6153      	str	r3, [r2, #20]
									break;
 800aea6:	e051      	b.n	800af4c <PxMessagingTask+0x1584>
										MBmessageParams[6] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800aea8:	2338      	movs	r3, #56	; 0x38
 800aeaa:	436b      	muls	r3, r5
 800aeac:	4a48      	ldr	r2, [pc, #288]	; (800afd0 <PxMessagingTask+0x1608>)
 800aeae:	18d2      	adds	r2, r2, r3
 800aeb0:	9b06      	ldr	r3, [sp, #24]
 800aeb2:	469c      	mov	ip, r3
 800aeb4:	4462      	add	r2, ip
 800aeb6:	7893      	ldrb	r3, [r2, #2]
 800aeb8:	021b      	lsls	r3, r3, #8
 800aeba:	78d1      	ldrb	r1, [r2, #3]
 800aebc:	0409      	lsls	r1, r1, #16
 800aebe:	185b      	adds	r3, r3, r1
 800aec0:	7851      	ldrb	r1, [r2, #1]
 800aec2:	185b      	adds	r3, r3, r1
 800aec4:	7912      	ldrb	r2, [r2, #4]
 800aec6:	0612      	lsls	r2, r2, #24
 800aec8:	189b      	adds	r3, r3, r2
 800aeca:	4a46      	ldr	r2, [pc, #280]	; (800afe4 <PxMessagingTask+0x161c>)
 800aecc:	6193      	str	r3, [r2, #24]
						ADCPort=cMessage[port-1][shift];
 800aece:	4b46      	ldr	r3, [pc, #280]	; (800afe8 <PxMessagingTask+0x1620>)
 800aed0:	8018      	strh	r0, [r3, #0]
						ADCSide=cMessage[port-1][shift+1];
 800aed2:	2238      	movs	r2, #56	; 0x38
 800aed4:	436a      	muls	r2, r5
 800aed6:	4b3e      	ldr	r3, [pc, #248]	; (800afd0 <PxMessagingTask+0x1608>)
 800aed8:	189b      	adds	r3, r3, r2
 800aeda:	9a06      	ldr	r2, [sp, #24]
 800aedc:	4694      	mov	ip, r2
 800aede:	4463      	add	r3, ip
 800aee0:	785b      	ldrb	r3, [r3, #1]
 800aee2:	4a42      	ldr	r2, [pc, #264]	; (800afec <PxMessagingTask+0x1624>)
 800aee4:	8013      	strh	r3, [r2, #0]
						if(0==ADCSide){
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d146      	bne.n	800af78 <PxMessagingTask+0x15b0>
						ADCSelectChannel(ADCPort,"top");
 800aeea:	4f41      	ldr	r7, [pc, #260]	; (800aff0 <PxMessagingTask+0x1628>)
 800aeec:	0039      	movs	r1, r7
 800aeee:	f7fd fc93 	bl	8008818 <ADCSelectChannel>
						ReadADCChannel(ADCPort,"top",&ADCValue);}
 800aef2:	4b3d      	ldr	r3, [pc, #244]	; (800afe8 <PxMessagingTask+0x1620>)
 800aef4:	7818      	ldrb	r0, [r3, #0]
 800aef6:	4a3f      	ldr	r2, [pc, #252]	; (800aff4 <PxMessagingTask+0x162c>)
 800aef8:	0039      	movs	r1, r7
 800aefa:	f7fd fcbb 	bl	8008874 <ReadADCChannel>
						ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800aefe:	493e      	ldr	r1, [pc, #248]	; (800aff8 <PxMessagingTask+0x1630>)
 800af00:	483e      	ldr	r0, [pc, #248]	; (800affc <PxMessagingTask+0x1634>)
 800af02:	f7fd fb19 	bl	8008538 <ReadTempAndVref>
						ADCPort=cMessage[port-1][shift];
 800af06:	4f32      	ldr	r7, [pc, #200]	; (800afd0 <PxMessagingTask+0x1608>)
 800af08:	19bf      	adds	r7, r7, r6
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	5cf8      	ldrb	r0, [r7, r3]
 800af0e:	4b36      	ldr	r3, [pc, #216]	; (800afe8 <PxMessagingTask+0x1620>)
 800af10:	8018      	strh	r0, [r3, #0]
						GetReadPrecentage(ADCPort,&ADCPercentage);
 800af12:	493b      	ldr	r1, [pc, #236]	; (800b000 <PxMessagingTask+0x1638>)
 800af14:	f7fd fbba 	bl	800868c <GetReadPrecentage>
										MBmessageParams[7] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	469c      	mov	ip, r3
 800af1c:	4467      	add	r7, ip
 800af1e:	79bb      	ldrb	r3, [r7, #6]
 800af20:	021b      	lsls	r3, r3, #8
 800af22:	79fa      	ldrb	r2, [r7, #7]
 800af24:	0412      	lsls	r2, r2, #16
 800af26:	189b      	adds	r3, r3, r2
 800af28:	797a      	ldrb	r2, [r7, #5]
 800af2a:	189b      	adds	r3, r3, r2
 800af2c:	7a3a      	ldrb	r2, [r7, #8]
 800af2e:	0612      	lsls	r2, r2, #24
 800af30:	189b      	adds	r3, r3, r2
 800af32:	4a2c      	ldr	r2, [pc, #176]	; (800afe4 <PxMessagingTask+0x161c>)
 800af34:	61d3      	str	r3, [r2, #28]
										MBmessageParams[8] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800af36:	7abb      	ldrb	r3, [r7, #10]
 800af38:	021b      	lsls	r3, r3, #8
 800af3a:	7af9      	ldrb	r1, [r7, #11]
 800af3c:	0409      	lsls	r1, r1, #16
 800af3e:	185b      	adds	r3, r3, r1
 800af40:	7a79      	ldrb	r1, [r7, #9]
 800af42:	185b      	adds	r3, r3, r1
 800af44:	7b39      	ldrb	r1, [r7, #12]
 800af46:	0609      	lsls	r1, r1, #24
 800af48:	185b      	adds	r3, r3, r1
 800af4a:	6213      	str	r3, [r2, #32]
						result = (BOS_Status) User_MessagingParser(code, port,
 800af4c:	9400      	str	r4, [sp, #0]
 800af4e:	464b      	mov	r3, r9
 800af50:	9a04      	ldr	r2, [sp, #16]
 800af52:	9908      	ldr	r1, [sp, #32]
 800af54:	4640      	mov	r0, r8
 800af56:	f7fe fd35 	bl	80099c4 <User_MessagingParser>
 800af5a:	0007      	movs	r7, r0
						if (result == BOS_ERR_UnknownMessage) {
 800af5c:	2801      	cmp	r0, #1
 800af5e:	d001      	beq.n	800af64 <PxMessagingTask+0x159c>
 800af60:	f7fe fd62 	bl	8009a28 <PxMessagingTask+0x60>
							result = (BOS_Status) Module_MessagingTask(code,
 800af64:	9400      	str	r4, [sp, #0]
 800af66:	464b      	mov	r3, r9
 800af68:	9a04      	ldr	r2, [sp, #16]
 800af6a:	9908      	ldr	r1, [sp, #32]
 800af6c:	4640      	mov	r0, r8
 800af6e:	f000 fcf1 	bl	800b954 <Module_MessagingTask>
 800af72:	0007      	movs	r7, r0
 800af74:	f7fe fd54 	bl	8009a20 <PxMessagingTask+0x58>
						else if (1==ADCSide){
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d1c0      	bne.n	800aefe <PxMessagingTask+0x1536>
							ADCSelectChannel(ADCPort,"bottom");
 800af7c:	4f21      	ldr	r7, [pc, #132]	; (800b004 <PxMessagingTask+0x163c>)
 800af7e:	0039      	movs	r1, r7
 800af80:	f7fd fc4a 	bl	8008818 <ADCSelectChannel>
							ReadADCChannel(ADCPort,"bottom",&ADCValue);}
 800af84:	4b18      	ldr	r3, [pc, #96]	; (800afe8 <PxMessagingTask+0x1620>)
 800af86:	7818      	ldrb	r0, [r3, #0]
 800af88:	4a1a      	ldr	r2, [pc, #104]	; (800aff4 <PxMessagingTask+0x162c>)
 800af8a:	0039      	movs	r1, r7
 800af8c:	f7fd fc72 	bl	8008874 <ReadADCChannel>
 800af90:	e7b5      	b.n	800aefe <PxMessagingTask+0x1536>
							switch (cMessage[port - 1][1 + shift])// requested format
 800af92:	2700      	movs	r7, #0
 800af94:	f7fe fd44 	bl	8009a20 <PxMessagingTask+0x58>
								switch (messageParams[0])	// requested format
 800af98:	2700      	movs	r7, #0
 800af9a:	f7fe fd41 	bl	8009a20 <PxMessagingTask+0x58>
								switch (messageParams[0])	// requested format
 800af9e:	2700      	movs	r7, #0
 800afa0:	f7fe fd3e 	bl	8009a20 <PxMessagingTask+0x58>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800afa4:	2200      	movs	r2, #0
 800afa6:	2100      	movs	r1, #0
 800afa8:	9804      	ldr	r0, [sp, #16]
 800afaa:	f7fe fa49 	bl	8009440 <SendMessageToModule>
			result = BOS_OK;
 800afae:	2700      	movs	r7, #0
 800afb0:	f7fe fd3a 	bl	8009a28 <PxMessagingTask+0x60>
					switch (code) {
 800afb4:	2700      	movs	r7, #0
 800afb6:	f7fe fd37 	bl	8009a28 <PxMessagingTask+0x60>
 800afba:	9205      	str	r2, [sp, #20]
 800afbc:	2700      	movs	r7, #0
 800afbe:	f7fe fd33 	bl	8009a28 <PxMessagingTask+0x60>
 800afc2:	2700      	movs	r7, #0
 800afc4:	f7fe fd30 	bl	8009a28 <PxMessagingTask+0x60>
 800afc8:	0001ffff 	.word	0x0001ffff
 800afcc:	200008f8 	.word	0x200008f8
 800afd0:	20000530 	.word	0x20000530
 800afd4:	080183dc 	.word	0x080183dc
 800afd8:	0000ffff 	.word	0x0000ffff
 800afdc:	200008f0 	.word	0x200008f0
 800afe0:	080183fc 	.word	0x080183fc
 800afe4:	20000d4c 	.word	0x20000d4c
 800afe8:	20000d3c 	.word	0x20000d3c
 800afec:	20000d3e 	.word	0x20000d3e
 800aff0:	080163bc 	.word	0x080163bc
 800aff4:	20000d40 	.word	0x20000d40
 800aff8:	20000d48 	.word	0x20000d48
 800affc:	20000d44 	.word	0x20000d44
 800b000:	20000d38 	.word	0x20000d38
 800b004:	080163c0 	.word	0x080163c0
					|| (dst && (dst < BOS_MULTICAST) && (dst != myID)
 800b008:	454b      	cmp	r3, r9
 800b00a:	d004      	beq.n	800b016 <PxMessagingTask+0x164e>
							&& (myID == 1) && (code != CODE_MODULE_ID))) {
 800b00c:	4643      	mov	r3, r8
 800b00e:	2b10      	cmp	r3, #16
 800b010:	d001      	beq.n	800b016 <PxMessagingTask+0x164e>
 800b012:	f7fe fd5c 	bl	8009ace <PxMessagingTask+0x106>
				if (dst == BOS_BROADCAST
 800b016:	464b      	mov	r3, r9
 800b018:	2bff      	cmp	r3, #255	; 0xff
 800b01a:	d101      	bne.n	800b020 <PxMessagingTask+0x1658>
 800b01c:	f7fe fd79 	bl	8009b12 <PxMessagingTask+0x14a>
				if (dst == BOS_MULTICAST
 800b020:	2bfe      	cmp	r3, #254	; 0xfe
 800b022:	d001      	beq.n	800b028 <PxMessagingTask+0x1660>
 800b024:	f7fe fd7f 	bl	8009b26 <PxMessagingTask+0x15e>
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 800b028:	4b29      	ldr	r3, [pc, #164]	; (800b0d0 <PxMessagingTask+0x1708>)
 800b02a:	199b      	adds	r3, r3, r6
 800b02c:	1859      	adds	r1, r3, r1
 800b02e:	3901      	subs	r1, #1
 800b030:	780b      	ldrb	r3, [r1, #0]
								!= bcastLastID) {
 800b032:	4a28      	ldr	r2, [pc, #160]	; (800b0d4 <PxMessagingTask+0x170c>)
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 800b034:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 800b036:	2703      	movs	r7, #3
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d101      	bne.n	800b040 <PxMessagingTask+0x1678>
 800b03c:	f7fe fcf0 	bl	8009a20 <PxMessagingTask+0x58>
					bcastID = bcastLastID =
 800b040:	4a24      	ldr	r2, [pc, #144]	; (800b0d4 <PxMessagingTask+0x170c>)
 800b042:	7013      	strb	r3, [r2, #0]
 800b044:	4a24      	ldr	r2, [pc, #144]	; (800b0d8 <PxMessagingTask+0x1710>)
 800b046:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800b048:	9908      	ldr	r1, [sp, #32]
 800b04a:	20fe      	movs	r0, #254	; 0xfe
 800b04c:	f7fe f9b0 	bl	80093b0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] = 0;// Reset bcastID location 
 800b050:	4b22      	ldr	r3, [pc, #136]	; (800b0dc <PxMessagingTask+0x1714>)
 800b052:	5d59      	ldrb	r1, [r3, r5]
 800b054:	4b1e      	ldr	r3, [pc, #120]	; (800b0d0 <PxMessagingTask+0x1708>)
 800b056:	199b      	adds	r3, r3, r6
 800b058:	185a      	adds	r2, r3, r1
 800b05a:	3a01      	subs	r2, #1
 800b05c:	2000      	movs	r0, #0
 800b05e:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port - 1][messageLength[port - 1] - 2];	// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b060:	1e8a      	subs	r2, r1, #2
 800b062:	5c9c      	ldrb	r4, [r3, r2]
 800b064:	9405      	str	r4, [sp, #20]
					for (i = 0; i < temp; i++) {
 800b066:	2c00      	cmp	r4, #0
 800b068:	d02e      	beq.n	800b0c8 <PxMessagingTask+0x1700>
										- 2 - temp + i]) {
 800b06a:	1b13      	subs	r3, r2, r4
 800b06c:	469c      	mov	ip, r3
								== cMessage[port - 1][messageLength[port - 1]
 800b06e:	4b1c      	ldr	r3, [pc, #112]	; (800b0e0 <PxMessagingTask+0x1718>)
 800b070:	7818      	ldrb	r0, [r3, #0]
 800b072:	4b17      	ldr	r3, [pc, #92]	; (800b0d0 <PxMessagingTask+0x1708>)
 800b074:	199b      	adds	r3, r3, r6
						if (myID
 800b076:	4662      	mov	r2, ip
 800b078:	5c9b      	ldrb	r3, [r3, r2]
 800b07a:	4283      	cmp	r3, r0
 800b07c:	d011      	beq.n	800b0a2 <PxMessagingTask+0x16da>
 800b07e:	4653      	mov	r3, sl
 800b080:	3301      	adds	r3, #1
 800b082:	4463      	add	r3, ip
 800b084:	4a12      	ldr	r2, [pc, #72]	; (800b0d0 <PxMessagingTask+0x1708>)
 800b086:	189b      	adds	r3, r3, r2
 800b088:	3201      	adds	r2, #1
 800b08a:	4452      	add	r2, sl
 800b08c:	1e67      	subs	r7, r4, #1
 800b08e:	b2ff      	uxtb	r7, r7
 800b090:	19d2      	adds	r2, r2, r7
 800b092:	4462      	add	r2, ip
					for (i = 0; i < temp; i++) {
 800b094:	4293      	cmp	r3, r2
 800b096:	d017      	beq.n	800b0c8 <PxMessagingTask+0x1700>
 800b098:	3301      	adds	r3, #1
								== cMessage[port - 1][messageLength[port - 1]
 800b09a:	1e5c      	subs	r4, r3, #1
						if (myID
 800b09c:	7824      	ldrb	r4, [r4, #0]
 800b09e:	4284      	cmp	r4, r0
 800b0a0:	d1f8      	bne.n	800b094 <PxMessagingTask+0x16cc>
				shift += 4;
 800b0a2:	9c06      	ldr	r4, [sp, #24]
 800b0a4:	3404      	adds	r4, #4
				numOfParams = messageLength[port - 1] - shift;
 800b0a6:	1b0a      	subs	r2, r1, r4
 800b0a8:	b2d3      	uxtb	r3, r2
 800b0aa:	9306      	str	r3, [sp, #24]
 800b0ac:	f7fe fd45 	bl	8009b3a <PxMessagingTask+0x172>
								if ((BOS_var_reg[cMessage[port - 1][shift] - 1]
 800b0b0:	2338      	movs	r3, #56	; 0x38
 800b0b2:	436b      	muls	r3, r5
 800b0b4:	4a06      	ldr	r2, [pc, #24]	; (800b0d0 <PxMessagingTask+0x1708>)
 800b0b6:	18d2      	adds	r2, r2, r3
 800b0b8:	5dd3      	ldrb	r3, [r2, r7]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	0098      	lsls	r0, r3, #2
 800b0be:	4909      	ldr	r1, [pc, #36]	; (800b0e4 <PxMessagingTask+0x171c>)
 800b0c0:	5841      	ldr	r1, [r0, r1]
										!= cMessage[port - 1][1 + shift]) {
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	5c12      	ldrb	r2, [r2, r0]
 800b0c6:	e463      	b.n	800a990 <PxMessagingTask+0xfc8>
								responseStatus = BOS_ERR_REMOTE_READ_NO_VAR;
 800b0c8:	2766      	movs	r7, #102	; 0x66
 800b0ca:	f7fe fcad 	bl	8009a28 <PxMessagingTask+0x60>
 800b0ce:	46c0      	nop			; (mov r8, r8)
 800b0d0:	20000530 	.word	0x20000530
 800b0d4:	20000d72 	.word	0x20000d72
 800b0d8:	200004dc 	.word	0x200004dc
 800b0dc:	20000720 	.word	0x20000720
 800b0e0:	20000866 	.word	0x20000866
 800b0e4:	200060b8 	.word	0x200060b8

0800b0e8 <unitCommand>:
//	/* There is no more data to return after this single string, so return pdFALSE. */
//	return pdFALSE;
//}

static portBASE_TYPE unitCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	0004      	movs	r4, r0
 800b0ee:	0010      	movs	r0, r2
	Module_Status result = H12R0_OK;
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9301      	str	r3, [sp, #4]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	d101      	bne.n	800b0fc <unitCommand+0x14>
 800b0f8:	b672      	cpsid	i
 800b0fa:	e7fe      	b.n	800b0fa <unitCommand+0x12>

	/* 1st parameter for naming of uart port: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800b0fc:	aa01      	add	r2, sp, #4
 800b0fe:	2101      	movs	r1, #1
 800b100:	f002 fea6 	bl	800de50 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);

	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 800b104:	7803      	ldrb	r3, [r0, #0]
 800b106:	2b76      	cmp	r3, #118	; 0x76
 800b108:	d007      	beq.n	800b11a <unitCommand+0x32>
		result = H12R0_ERR_WrongParams;
	}

	/* Respond to the command */
	if (H12R0_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 800b10a:	2213      	movs	r2, #19
 800b10c:	4906      	ldr	r1, [pc, #24]	; (800b128 <unitCommand+0x40>)
 800b10e:	0020      	movs	r0, r4
 800b110:	f008 f859 	bl	80131c6 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b114:	2000      	movs	r0, #0
 800b116:	b002      	add	sp, #8
 800b118:	bd10      	pop	{r4, pc}
			strcpy((char*) pcWriteBuffer,
 800b11a:	221e      	movs	r2, #30
 800b11c:	4903      	ldr	r1, [pc, #12]	; (800b12c <unitCommand+0x44>)
 800b11e:	0020      	movs	r0, r4
 800b120:	f008 f851 	bl	80131c6 <memcpy>
 800b124:	e7f6      	b.n	800b114 <unitCommand+0x2c>
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	08016d68 	.word	0x08016d68
 800b12c:	080187c0 	.word	0x080187c0

0800b130 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 800b130:	b510      	push	{r4, lr}
 800b132:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b134:	4b12      	ldr	r3, [pc, #72]	; (800b180 <CheckForEnterKey+0x50>)
 800b136:	781c      	ldrb	r4, [r3, #0]
 800b138:	3c01      	subs	r4, #1
 800b13a:	01a2      	lsls	r2, r4, #6
 800b13c:	4b11      	ldr	r3, [pc, #68]	; (800b184 <CheckForEnterKey+0x54>)
 800b13e:	5cd3      	ldrb	r3, [r2, r3]
 800b140:	2b0d      	cmp	r3, #13
 800b142:	d00a      	beq.n	800b15a <CheckForEnterKey+0x2a>
 800b144:	490f      	ldr	r1, [pc, #60]	; (800b184 <CheckForEnterKey+0x54>)
 800b146:	1851      	adds	r1, r2, r1
 800b148:	2301      	movs	r3, #1
 800b14a:	0018      	movs	r0, r3
 800b14c:	5cca      	ldrb	r2, [r1, r3]
 800b14e:	2a0d      	cmp	r2, #13
 800b150:	d004      	beq.n	800b15c <CheckForEnterKey+0x2c>
 800b152:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	d1f8      	bne.n	800b14a <CheckForEnterKey+0x1a>
 800b158:	e010      	b.n	800b17c <CheckForEnterKey+0x4c>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b15a:	2000      	movs	r0, #0
			UARTRxBuf[PcPort - 1][chr] = 0;
 800b15c:	01a4      	lsls	r4, r4, #6
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <CheckForEnterKey+0x54>)
 800b160:	191c      	adds	r4, r3, r4
 800b162:	2300      	movs	r3, #0
 800b164:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800b166:	4a08      	ldr	r2, [pc, #32]	; (800b188 <CheckForEnterKey+0x58>)
 800b168:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 800b16a:	4a08      	ldr	r2, [pc, #32]	; (800b18c <CheckForEnterKey+0x5c>)
 800b16c:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 800b16e:	4a08      	ldr	r2, [pc, #32]	; (800b190 <CheckForEnterKey+0x60>)
 800b170:	6810      	ldr	r0, [r2, #0]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	2200      	movs	r2, #0
 800b176:	2103      	movs	r1, #3
 800b178:	f004 fa60 	bl	800f63c <xTimerGenericCommand>
}
 800b17c:	b002      	add	sp, #8
 800b17e:	bd10      	pop	{r4, pc}
 800b180:	2000029f 	.word	0x2000029f
 800b184:	20000ab8 	.word	0x20000ab8
 800b188:	20000f28 	.word	0x20000f28
 800b18c:	200062c4 	.word	0x200062c4
 800b190:	20000f30 	.word	0x20000f30

0800b194 <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 800b194:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 800b196:	f004 fb8d 	bl	800f8b4 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800b19a:	28ff      	cmp	r0, #255	; 0xff
 800b19c:	d000      	beq.n	800b1a0 <HandleTimeout+0xc>
}
 800b19e:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4a02      	ldr	r2, [pc, #8]	; (800b1ac <HandleTimeout+0x18>)
 800b1a4:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 800b1a6:	4a02      	ldr	r2, [pc, #8]	; (800b1b0 <HandleTimeout+0x1c>)
 800b1a8:	7013      	strb	r3, [r2, #0]
}
 800b1aa:	e7f8      	b.n	800b19e <HandleTimeout+0xa>
 800b1ac:	200062c4 	.word	0x200062c4
 800b1b0:	20000f28 	.word	0x20000f28

0800b1b4 <SystemClock_Config>:
void SystemClock_Config(void) {
 800b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b6:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b1b8:	2401      	movs	r4, #1
 800b1ba:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b1bc:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b1be:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b1c4:	2702      	movs	r7, #2
 800b1c6:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b1c8:	2680      	movs	r6, #128	; 0x80
 800b1ca:	0276      	lsls	r6, r6, #9
 800b1cc:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b1ce:	2380      	movs	r3, #128	; 0x80
 800b1d0:	035b      	lsls	r3, r3, #13
 800b1d2:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b1d4:	2500      	movs	r5, #0
 800b1d6:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b1d8:	a80d      	add	r0, sp, #52	; 0x34
 800b1da:	f006 f9f5 	bl	80115c8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800b1de:	2307      	movs	r3, #7
 800b1e0:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b1e2:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b1e4:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b1e6:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	a809      	add	r0, sp, #36	; 0x24
 800b1ec:	f006 fcae 	bl	8011b4c <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800b1f0:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <SystemClock_Config+0xa8>)
 800b1f2:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b1f4:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b1f6:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b1f8:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b1fa:	a802      	add	r0, sp, #8
 800b1fc:	f006 fe54 	bl	8011ea8 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b200:	4d17      	ldr	r5, [pc, #92]	; (800b260 <SystemClock_Config+0xac>)
 800b202:	69ea      	ldr	r2, [r5, #28]
 800b204:	2180      	movs	r1, #128	; 0x80
 800b206:	0549      	lsls	r1, r1, #21
 800b208:	430a      	orrs	r2, r1
 800b20a:	61ea      	str	r2, [r5, #28]
 800b20c:	69eb      	ldr	r3, [r5, #28]
 800b20e:	400b      	ands	r3, r1
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800b214:	f006 f9ce 	bl	80115b4 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b218:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b21a:	23c0      	movs	r3, #192	; 0xc0
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b220:	a802      	add	r0, sp, #8
 800b222:	f006 fe41 	bl	8011ea8 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800b226:	f006 fe1b 	bl	8011e60 <HAL_RCC_GetHCLKFreq>
 800b22a:	21fa      	movs	r1, #250	; 0xfa
 800b22c:	0089      	lsls	r1, r1, #2
 800b22e:	f7f4 ff85 	bl	800013c <__udivsi3>
 800b232:	f005 f8bd 	bl	80103b0 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b236:	2004      	movs	r0, #4
 800b238:	f005 f8d6 	bl	80103e8 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800b23c:	69ab      	ldr	r3, [r5, #24]
 800b23e:	4323      	orrs	r3, r4
 800b240:	61ab      	str	r3, [r5, #24]
 800b242:	69ab      	ldr	r3, [r5, #24]
 800b244:	401c      	ands	r4, r3
 800b246:	9401      	str	r4, [sp, #4]
 800b248:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b24a:	2001      	movs	r0, #1
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	4240      	negs	r0, r0
 800b252:	f005 f865 	bl	8010320 <HAL_NVIC_SetPriority>
}
 800b256:	b01b      	add	sp, #108	; 0x6c
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	00040003 	.word	0x00040003
 800b260:	40021000 	.word	0x40021000

0800b264 <SaveToRO>:
uint8_t SaveToRO(void) {
 800b264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b266:	46de      	mov	lr, fp
 800b268:	4657      	mov	r7, sl
 800b26a:	464e      	mov	r6, r9
 800b26c:	4645      	mov	r5, r8
 800b26e:	b5e0      	push	{r5, r6, r7, lr}
 800b270:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800b272:	2215      	movs	r2, #21
 800b274:	2100      	movs	r1, #0
 800b276:	a802      	add	r0, sp, #8
 800b278:	f007 ffae 	bl	80131d8 <memset>
	HAL_FLASH_Unlock();
 800b27c:	f005 fee6 	bl	801104c <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b280:	4872      	ldr	r0, [pc, #456]	; (800b44c <SaveToRO+0x1e8>)
 800b282:	f005 ffa5 	bl	80111d0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800b286:	4872      	ldr	r0, [pc, #456]	; (800b450 <SaveToRO+0x1ec>)
 800b288:	f005 fefc 	bl	8011084 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d112      	bne.n	800b2b6 <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b290:	4a70      	ldr	r2, [pc, #448]	; (800b454 <SaveToRO+0x1f0>)
 800b292:	6913      	ldr	r3, [r2, #16]
 800b294:	2102      	movs	r1, #2
 800b296:	438b      	bics	r3, r1
 800b298:	6113      	str	r3, [r2, #16]
	if (myID) {
 800b29a:	4b6f      	ldr	r3, [pc, #444]	; (800b458 <SaveToRO+0x1f4>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d113      	bne.n	800b2ca <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b2a2:	4b6e      	ldr	r3, [pc, #440]	; (800b45c <SaveToRO+0x1f8>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d100      	bne.n	800b2ac <SaveToRO+0x48>
 800b2aa:	e0ca      	b.n	800b442 <SaveToRO+0x1de>
 800b2ac:	2500      	movs	r5, #0
 800b2ae:	4c6c      	ldr	r4, [pc, #432]	; (800b460 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) {
 800b2b0:	4b6c      	ldr	r3, [pc, #432]	; (800b464 <SaveToRO+0x200>)
 800b2b2:	4698      	mov	r8, r3
 800b2b4:	e06e      	b.n	800b394 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800b2b6:	4b6c      	ldr	r3, [pc, #432]	; (800b468 <SaveToRO+0x204>)
 800b2b8:	69d8      	ldr	r0, [r3, #28]
 800b2ba:	b2c0      	uxtb	r0, r0
}
 800b2bc:	b009      	add	sp, #36	; 0x24
 800b2be:	bc3c      	pop	{r2, r3, r4, r5}
 800b2c0:	4690      	mov	r8, r2
 800b2c2:	4699      	mov	r9, r3
 800b2c4:	46a2      	mov	sl, r4
 800b2c6:	46ab      	mov	fp, r5
 800b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800b2ca:	4a68      	ldr	r2, [pc, #416]	; (800b46c <SaveToRO+0x208>)
 800b2cc:	7812      	ldrb	r2, [r2, #0]
 800b2ce:	0212      	lsls	r2, r2, #8
 800b2d0:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b2d2:	b292      	uxth	r2, r2
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	495d      	ldr	r1, [pc, #372]	; (800b44c <SaveToRO+0x1e8>)
 800b2d8:	2001      	movs	r0, #1
 800b2da:	f005 ff01 	bl	80110e0 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800b2de:	485c      	ldr	r0, [pc, #368]	; (800b450 <SaveToRO+0x1ec>)
 800b2e0:	f005 fed0 	bl	8011084 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d111      	bne.n	800b30c <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b2e8:	4a5a      	ldr	r2, [pc, #360]	; (800b454 <SaveToRO+0x1f0>)
 800b2ea:	6913      	ldr	r3, [r2, #16]
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	438b      	bics	r3, r1
 800b2f0:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800b2f2:	4b5e      	ldr	r3, [pc, #376]	; (800b46c <SaveToRO+0x208>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b2fa:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d0d0      	beq.n	800b2a2 <SaveToRO+0x3e>
 800b300:	2316      	movs	r3, #22
 800b302:	469b      	mov	fp, r3
 800b304:	4b5a      	ldr	r3, [pc, #360]	; (800b470 <SaveToRO+0x20c>)
 800b306:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 800b308:	4698      	mov	r8, r3
 800b30a:	e02a      	b.n	800b362 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800b30c:	4b56      	ldr	r3, [pc, #344]	; (800b468 <SaveToRO+0x204>)
 800b30e:	69d8      	ldr	r0, [r3, #28]
 800b310:	b2c0      	uxtb	r0, r0
 800b312:	e7d3      	b.n	800b2bc <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800b314:	4b54      	ldr	r3, [pc, #336]	; (800b468 <SaveToRO+0x204>)
 800b316:	69d8      	ldr	r0, [r3, #28]
 800b318:	b2c0      	uxtb	r0, r0
 800b31a:	e7cf      	b.n	800b2bc <SaveToRO+0x58>
 800b31c:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b31e:	42b4      	cmp	r4, r6
 800b320:	d017      	beq.n	800b352 <SaveToRO+0xee>
				if (array[i - 1][0]) {
 800b322:	4643      	mov	r3, r8
 800b324:	5afb      	ldrh	r3, [r7, r3]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d0f8      	beq.n	800b31c <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800b32a:	8822      	ldrh	r2, [r4, #0]
 800b32c:	4b47      	ldr	r3, [pc, #284]	; (800b44c <SaveToRO+0x1e8>)
 800b32e:	18e9      	adds	r1, r5, r3
 800b330:	2300      	movs	r3, #0
 800b332:	2001      	movs	r0, #1
 800b334:	f005 fed4 	bl	80110e0 <HAL_FLASH_Program>
					add += 2;
 800b338:	3502      	adds	r5, #2
 800b33a:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800b33c:	4844      	ldr	r0, [pc, #272]	; (800b450 <SaveToRO+0x1ec>)
 800b33e:	f005 fea1 	bl	8011084 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b342:	2800      	cmp	r0, #0
 800b344:	d1e6      	bne.n	800b314 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b346:	4a43      	ldr	r2, [pc, #268]	; (800b454 <SaveToRO+0x1f0>)
 800b348:	6913      	ldr	r3, [r2, #16]
 800b34a:	2101      	movs	r1, #1
 800b34c:	438b      	bics	r3, r1
 800b34e:	6113      	str	r3, [r2, #16]
 800b350:	e7e4      	b.n	800b31c <SaveToRO+0xb8>
		for (uint8_t i = 1; i <= N; i++) {
 800b352:	464b      	mov	r3, r9
 800b354:	3301      	adds	r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	4699      	mov	r9, r3
 800b35a:	4b44      	ldr	r3, [pc, #272]	; (800b46c <SaveToRO+0x208>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	454b      	cmp	r3, r9
 800b360:	d39f      	bcc.n	800b2a2 <SaveToRO+0x3e>
 800b362:	465e      	mov	r6, fp
 800b364:	464b      	mov	r3, r9
 800b366:	435e      	muls	r6, r3
 800b368:	0034      	movs	r4, r6
 800b36a:	3c16      	subs	r4, #22
 800b36c:	4454      	add	r4, sl
 800b36e:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 800b370:	1e5f      	subs	r7, r3, #1
 800b372:	465b      	mov	r3, fp
 800b374:	435f      	muls	r7, r3
 800b376:	e7d4      	b.n	800b322 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800b378:	4b3b      	ldr	r3, [pc, #236]	; (800b468 <SaveToRO+0x204>)
 800b37a:	69d8      	ldr	r0, [r3, #28]
 800b37c:	b2c0      	uxtb	r0, r0
 800b37e:	e79d      	b.n	800b2bc <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b380:	4b39      	ldr	r3, [pc, #228]	; (800b468 <SaveToRO+0x204>)
 800b382:	69d8      	ldr	r0, [r3, #28]
 800b384:	b2c0      	uxtb	r0, r0
 800b386:	e799      	b.n	800b2bc <SaveToRO+0x58>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b388:	3501      	adds	r5, #1
 800b38a:	b2ed      	uxtb	r5, r5
 800b38c:	4b33      	ldr	r3, [pc, #204]	; (800b45c <SaveToRO+0x1f8>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	42ab      	cmp	r3, r5
 800b392:	d956      	bls.n	800b442 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) {
 800b394:	9501      	str	r5, [sp, #4]
 800b396:	00ab      	lsls	r3, r5, #2
 800b398:	195b      	adds	r3, r3, r5
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4642      	mov	r2, r8
 800b39e:	5c9b      	ldrb	r3, [r3, r2]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0f1      	beq.n	800b388 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b3a4:	23fe      	movs	r3, #254	; 0xfe
 800b3a6:	aa02      	add	r2, sp, #8
 800b3a8:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b3aa:	00a9      	lsls	r1, r5, #2
 800b3ac:	1949      	adds	r1, r1, r5
 800b3ae:	0089      	lsls	r1, r1, #2
 800b3b0:	4b2c      	ldr	r3, [pc, #176]	; (800b464 <SaveToRO+0x200>)
 800b3b2:	469c      	mov	ip, r3
 800b3b4:	4461      	add	r1, ip
 800b3b6:	2214      	movs	r2, #20
 800b3b8:	ab02      	add	r3, sp, #8
 800b3ba:	1c58      	adds	r0, r3, #1
 800b3bc:	f007 ff03 	bl	80131c6 <memcpy>
 800b3c0:	2314      	movs	r3, #20
 800b3c2:	469b      	mov	fp, r3
 800b3c4:	44a3      	add	fp, r4
						*(uint16_t*) &snipBuffer[j * 2]);
 800b3c6:	ae02      	add	r6, sp, #8
 800b3c8:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b3ca:	4f22      	ldr	r7, [pc, #136]	; (800b454 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b3cc:	5b32      	ldrh	r2, [r6, r4]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	0021      	movs	r1, r4
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	f005 fe84 	bl	80110e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b3d8:	481d      	ldr	r0, [pc, #116]	; (800b450 <SaveToRO+0x1ec>)
 800b3da:	f005 fe53 	bl	8011084 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d1ca      	bne.n	800b378 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	4393      	bics	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b3ea:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800b3ec:	455c      	cmp	r4, fp
 800b3ee:	d1ed      	bne.n	800b3cc <SaveToRO+0x168>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b3f0:	2700      	movs	r7, #0
 800b3f2:	9a01      	ldr	r2, [sp, #4]
 800b3f4:	0093      	lsls	r3, r2, #2
 800b3f6:	189e      	adds	r6, r3, r2
 800b3f8:	00b6      	lsls	r6, r6, #2
 800b3fa:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <SaveToRO+0x200>)
 800b3fc:	469a      	mov	sl, r3
 800b3fe:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b400:	4b14      	ldr	r3, [pc, #80]	; (800b454 <SaveToRO+0x1f0>)
 800b402:	469b      	mov	fp, r3
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b404:	4653      	mov	r3, sl
 800b406:	68de      	ldr	r6, [r3, #12]
 800b408:	0030      	movs	r0, r6
 800b40a:	f7f4 fe85 	bl	8000118 <strlen>
 800b40e:	3001      	adds	r0, #1
 800b410:	0840      	lsrs	r0, r0, #1
 800b412:	4287      	cmp	r7, r0
 800b414:	d2b8      	bcs.n	800b388 <SaveToRO+0x124>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800b416:	007b      	lsls	r3, r7, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b418:	5af2      	ldrh	r2, [r6, r3]
 800b41a:	2300      	movs	r3, #0
 800b41c:	0021      	movs	r1, r4
 800b41e:	2001      	movs	r0, #1
 800b420:	f005 fe5e 	bl	80110e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b424:	480a      	ldr	r0, [pc, #40]	; (800b450 <SaveToRO+0x1ec>)
 800b426:	f005 fe2d 	bl	8011084 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d1a8      	bne.n	800b380 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b42e:	465b      	mov	r3, fp
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	2201      	movs	r2, #1
 800b434:	4393      	bics	r3, r2
 800b436:	465a      	mov	r2, fp
 800b438:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b43a:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b43c:	3701      	adds	r7, #1
 800b43e:	b2ff      	uxtb	r7, r7
 800b440:	e7e0      	b.n	800b404 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b442:	f005 fe15 	bl	8011070 <HAL_FLASH_Lock>
	return result;
 800b446:	2000      	movs	r0, #0
 800b448:	e738      	b.n	800b2bc <SaveToRO+0x58>
 800b44a:	46c0      	nop			; (mov r8, r8)
 800b44c:	0801d800 	.word	0x0801d800
 800b450:	0000c350 	.word	0x0000c350
 800b454:	40022000 	.word	0x40022000
 800b458:	20000866 	.word	0x20000866
 800b45c:	20000a07 	.word	0x20000a07
 800b460:	0801dc00 	.word	0x0801dc00
 800b464:	2000614c 	.word	0x2000614c
 800b468:	20006650 	.word	0x20006650
 800b46c:	2000001c 	.word	0x2000001c
 800b470:	200002a0 	.word	0x200002a0

0800b474 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800b474:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b476:	228f      	movs	r2, #143	; 0x8f
 800b478:	0092      	lsls	r2, r2, #2
 800b47a:	2100      	movs	r1, #0
 800b47c:	4805      	ldr	r0, [pc, #20]	; (800b494 <ClearROtopology+0x20>)
 800b47e:	f007 feab 	bl	80131d8 <memset>
	N = 1;
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <ClearROtopology+0x24>)
 800b484:	2201      	movs	r2, #1
 800b486:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800b488:	4b04      	ldr	r3, [pc, #16]	; (800b49c <ClearROtopology+0x28>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b48e:	f7ff fee9 	bl	800b264 <SaveToRO>
}
 800b492:	bd10      	pop	{r4, pc}
 800b494:	200002a0 	.word	0x200002a0
 800b498:	2000001c 	.word	0x2000001c
 800b49c:	20000866 	.word	0x20000866

0800b4a0 <Module_Init>:
void Module_Init(void) {
 800b4a0:	b500      	push	{lr}
 800b4a2:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800b4a4:	f002 f8f0 	bl	800d688 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b4a8:	f002 f906 	bl	800d6b8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b4ac:	f002 f91c 	bl	800d6e8 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800b4b0:	f002 f932 	bl	800d718 <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 800b4b4:	f002 f948 	bl	800d748 <MX_USART6_UART_Init>
	xTaskCreate(VoltageTask, (const char* ) "VoltageTask",
 800b4b8:	22a0      	movs	r2, #160	; 0xa0
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9303      	str	r3, [sp, #12]
 800b4be:	9302      	str	r3, [sp, #8]
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <Module_Init+0x40>)
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	0052      	lsls	r2, r2, #1
 800b4cc:	4905      	ldr	r1, [pc, #20]	; (800b4e4 <Module_Init+0x44>)
 800b4ce:	4806      	ldr	r0, [pc, #24]	; (800b4e8 <Module_Init+0x48>)
 800b4d0:	f003 f9a0 	bl	800e814 <xTaskGenericCreate>
	MX_ADC_Init();
 800b4d4:	f7fd f806 	bl	80084e4 <MX_ADC_Init>
	ADC_Channel_config();
 800b4d8:	f000 fc3c 	bl	800bd54 <ADC_Channel_config>
}
 800b4dc:	b005      	add	sp, #20
 800b4de:	bd00      	pop	{pc}
 800b4e0:	20000f24 	.word	0x20000f24
 800b4e4:	080184d0 	.word	0x080184d0
 800b4e8:	0800b7dd 	.word	0x0800b7dd

0800b4ec <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800b4ec:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 800b4ee:	4808      	ldr	r0, [pc, #32]	; (800b510 <RegisterModuleCLICommands+0x24>)
 800b4f0:	f002 fc10 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 800b4f4:	4807      	ldr	r0, [pc, #28]	; (800b514 <RegisterModuleCLICommands+0x28>)
 800b4f6:	f002 fc0d 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 800b4fa:	4807      	ldr	r0, [pc, #28]	; (800b518 <RegisterModuleCLICommands+0x2c>)
 800b4fc:	f002 fc0a 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 800b500:	4806      	ldr	r0, [pc, #24]	; (800b51c <RegisterModuleCLICommands+0x30>)
 800b502:	f002 fc07 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800b506:	4806      	ldr	r0, [pc, #24]	; (800b520 <RegisterModuleCLICommands+0x34>)
 800b508:	f002 fc04 	bl	800dd14 <FreeRTOS_CLIRegisterCommand>
}
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	0801855c 	.word	0x0801855c
 800b514:	080187b0 	.word	0x080187b0
 800b518:	0801856c 	.word	0x0801856c
 800b51c:	080187e0 	.word	0x080187e0
 800b520:	0801854c 	.word	0x0801854c

0800b524 <GetPort>:
	if (huart->Instance == USART4)
 800b524:	6800      	ldr	r0, [r0, #0]
 800b526:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <GetPort+0x3c>)
 800b528:	4298      	cmp	r0, r3
 800b52a:	d011      	beq.n	800b550 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800b52c:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <GetPort+0x40>)
 800b52e:	4298      	cmp	r0, r3
 800b530:	d010      	beq.n	800b554 <GetPort+0x30>
	else if (huart->Instance == USART6)
 800b532:	4b0d      	ldr	r3, [pc, #52]	; (800b568 <GetPort+0x44>)
 800b534:	4298      	cmp	r0, r3
 800b536:	d00f      	beq.n	800b558 <GetPort+0x34>
	else if (huart->Instance == USART3)
 800b538:	4b0c      	ldr	r3, [pc, #48]	; (800b56c <GetPort+0x48>)
 800b53a:	4298      	cmp	r0, r3
 800b53c:	d00e      	beq.n	800b55c <GetPort+0x38>
	return 0;
 800b53e:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <GetPort+0x4c>)
 800b540:	469c      	mov	ip, r3
 800b542:	4460      	add	r0, ip
 800b544:	4243      	negs	r3, r0
 800b546:	4158      	adcs	r0, r3
 800b548:	4240      	negs	r0, r0
 800b54a:	2305      	movs	r3, #5
 800b54c:	4018      	ands	r0, r3
}
 800b54e:	4770      	bx	lr
		return P1;
 800b550:	2001      	movs	r0, #1
 800b552:	e7fc      	b.n	800b54e <GetPort+0x2a>
		return P2;
 800b554:	2002      	movs	r0, #2
 800b556:	e7fa      	b.n	800b54e <GetPort+0x2a>
		return P3;
 800b558:	2003      	movs	r0, #3
 800b55a:	e7f8      	b.n	800b54e <GetPort+0x2a>
		return P4;
 800b55c:	2004      	movs	r0, #4
 800b55e:	e7f6      	b.n	800b54e <GetPort+0x2a>
 800b560:	40004c00 	.word	0x40004c00
 800b564:	40004400 	.word	0x40004400
 800b568:	40011400 	.word	0x40011400
 800b56c:	40004800 	.word	0x40004800
 800b570:	bffec800 	.word	0xbffec800

0800b574 <SendResults>:
		uint8_t Module, float *Buffer) {
 800b574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b576:	b087      	sub	sp, #28
 800b578:	1c05      	adds	r5, r0, #0
 800b57a:	000c      	movs	r4, r1
 800b57c:	9302      	str	r3, [sp, #8]
 800b57e:	ab0c      	add	r3, sp, #48	; 0x30
 800b580:	781e      	ldrb	r6, [r3, #0]
	uint32_t RawMsgInt = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 800b586:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b588:	f002 fc5e 	bl	800de48 <FreeRTOS_CLIGetOutputBuffer>
 800b58c:	9003      	str	r0, [sp, #12]
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE)
 800b58e:	2c04      	cmp	r4, #4
 800b590:	d100      	bne.n	800b594 <SendResults+0x20>
 800b592:	e0bd      	b.n	800b710 <SendResults+0x19c>
 800b594:	2c02      	cmp	r4, #2
 800b596:	d11d      	bne.n	800b5d4 <SendResults+0x60>
		if (H12R0_DATA_FORMAT == FMT_UINT32) {
 800b598:	4b5f      	ldr	r3, [pc, #380]	; (800b718 <SendResults+0x1a4>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b05      	cmp	r3, #5
 800b59e:	d06c      	beq.n	800b67a <SendResults+0x106>
		} else if (H12R0_DATA_FORMAT == FMT_FLOAT) {
 800b5a0:	2b07      	cmp	r3, #7
 800b5a2:	d000      	beq.n	800b5a6 <SendResults+0x32>
 800b5a4:	e0ad      	b.n	800b702 <SendResults+0x18e>
			if (Module == myID) {
 800b5a6:	4b5d      	ldr	r3, [pc, #372]	; (800b71c <SendResults+0x1a8>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	42b3      	cmp	r3, r6
 800b5ac:	d100      	bne.n	800b5b0 <SendResults+0x3c>
 800b5ae:	e092      	b.n	800b6d6 <SendResults+0x162>
				messageParams[0] = Port;
 800b5b0:	4b5b      	ldr	r3, [pc, #364]	; (800b720 <SendResults+0x1ac>)
 800b5b2:	9a02      	ldr	r2, [sp, #8]
 800b5b4:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800b5b6:	aa05      	add	r2, sp, #20
 800b5b8:	78d1      	ldrb	r1, [r2, #3]
 800b5ba:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800b5bc:	7891      	ldrb	r1, [r2, #2]
 800b5be:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800b5c0:	7851      	ldrb	r1, [r2, #1]
 800b5c2:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800b5c4:	7812      	ldrb	r2, [r2, #0]
 800b5c6:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800b5c8:	2205      	movs	r2, #5
 800b5ca:	2123      	movs	r1, #35	; 0x23
 800b5cc:	0030      	movs	r0, r6
 800b5ce:	f7fd ff37 	bl	8009440 <SendMessageToModule>
 800b5d2:	e096      	b.n	800b702 <SendResults+0x18e>
			strUnit = malloc(6 * sizeof(char));
 800b5d4:	2006      	movs	r0, #6
 800b5d6:	f007 fdc1 	bl	801315c <malloc>
 800b5da:	0007      	movs	r7, r0
			memset(strUnit, 0, (6 * sizeof(char)));
 800b5dc:	2300      	movs	r3, #0
 800b5de:	8083      	strh	r3, [r0, #4]
			sprintf((char*) strUnit, "Volt");
 800b5e0:	4b50      	ldr	r3, [pc, #320]	; (800b724 <SendResults+0x1b0>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	6002      	str	r2, [r0, #0]
 800b5e6:	791b      	ldrb	r3, [r3, #4]
 800b5e8:	7103      	strb	r3, [r0, #4]
	switch (Mode) {
 800b5ea:	2c08      	cmp	r4, #8
 800b5ec:	d900      	bls.n	800b5f0 <SendResults+0x7c>
 800b5ee:	e08c      	b.n	800b70a <SendResults+0x196>
 800b5f0:	00a3      	lsls	r3, r4, #2
 800b5f2:	4a4d      	ldr	r2, [pc, #308]	; (800b728 <SendResults+0x1b4>)
 800b5f4:	58d3      	ldr	r3, [r2, r3]
 800b5f6:	469f      	mov	pc, r3
		if (H12R0_DATA_FORMAT == FMT_UINT32) {
 800b5f8:	4b47      	ldr	r3, [pc, #284]	; (800b718 <SendResults+0x1a4>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b05      	cmp	r3, #5
 800b5fe:	d01d      	beq.n	800b63c <SendResults+0xc8>
		} else if (H12R0_DATA_FORMAT == FMT_FLOAT) {
 800b600:	2b07      	cmp	r3, #7
 800b602:	d17e      	bne.n	800b702 <SendResults+0x18e>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 800b604:	1c28      	adds	r0, r5, #0
 800b606:	f7f7 f985 	bl	8002914 <__aeabi_f2d>
 800b60a:	9000      	str	r0, [sp, #0]
 800b60c:	9101      	str	r1, [sp, #4]
 800b60e:	003a      	movs	r2, r7
 800b610:	4946      	ldr	r1, [pc, #280]	; (800b72c <SendResults+0x1b8>)
 800b612:	9d03      	ldr	r5, [sp, #12]
 800b614:	0028      	movs	r0, r5
 800b616:	f007 fedd 	bl	80133d4 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800b61a:	0028      	movs	r0, r5
 800b61c:	f7f4 fd7c 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b620:	23fa      	movs	r3, #250	; 0xfa
 800b622:	b282      	uxth	r2, r0
 800b624:	4942      	ldr	r1, [pc, #264]	; (800b730 <SendResults+0x1bc>)
 800b626:	7808      	ldrb	r0, [r1, #0]
 800b628:	2101      	movs	r1, #1
 800b62a:	4249      	negs	r1, r1
 800b62c:	9100      	str	r1, [sp, #0]
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	0029      	movs	r1, r5
 800b632:	f002 f9c7 	bl	800d9c4 <writePxMutex>
			CheckForEnterKey();
 800b636:	f7ff fd7b 	bl	800b130 <CheckForEnterKey>
 800b63a:	e062      	b.n	800b702 <SendResults+0x18e>
			RawMsgInt = Raw_Msg * 10;
 800b63c:	493d      	ldr	r1, [pc, #244]	; (800b734 <SendResults+0x1c0>)
 800b63e:	1c28      	adds	r0, r5, #0
 800b640:	f7f5 f890 	bl	8000764 <__aeabi_fmul>
 800b644:	f7f4 ff92 	bl	800056c <__aeabi_f2uiz>
 800b648:	0003      	movs	r3, r0
 800b64a:	9004      	str	r0, [sp, #16]
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800b64c:	003a      	movs	r2, r7
 800b64e:	493a      	ldr	r1, [pc, #232]	; (800b738 <SendResults+0x1c4>)
 800b650:	9d03      	ldr	r5, [sp, #12]
 800b652:	0028      	movs	r0, r5
 800b654:	f007 febe 	bl	80133d4 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800b658:	0028      	movs	r0, r5
 800b65a:	f7f4 fd5d 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b65e:	23fa      	movs	r3, #250	; 0xfa
 800b660:	b282      	uxth	r2, r0
 800b662:	4933      	ldr	r1, [pc, #204]	; (800b730 <SendResults+0x1bc>)
 800b664:	7808      	ldrb	r0, [r1, #0]
 800b666:	2101      	movs	r1, #1
 800b668:	4249      	negs	r1, r1
 800b66a:	9100      	str	r1, [sp, #0]
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	0029      	movs	r1, r5
 800b670:	f002 f9a8 	bl	800d9c4 <writePxMutex>
			CheckForEnterKey();
 800b674:	f7ff fd5c 	bl	800b130 <CheckForEnterKey>
 800b678:	e043      	b.n	800b702 <SendResults+0x18e>
			RawMsgInt = Raw_Msg * 10;
 800b67a:	492e      	ldr	r1, [pc, #184]	; (800b734 <SendResults+0x1c0>)
 800b67c:	1c28      	adds	r0, r5, #0
 800b67e:	f7f5 f871 	bl	8000764 <__aeabi_fmul>
 800b682:	f7f4 ff73 	bl	800056c <__aeabi_f2uiz>
 800b686:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800b688:	4b24      	ldr	r3, [pc, #144]	; (800b71c <SendResults+0x1a8>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	42b3      	cmp	r3, r6
 800b68e:	d011      	beq.n	800b6b4 <SendResults+0x140>
				messageParams[0] = Port;
 800b690:	4b23      	ldr	r3, [pc, #140]	; (800b720 <SendResults+0x1ac>)
 800b692:	9a02      	ldr	r2, [sp, #8]
 800b694:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800b696:	aa04      	add	r2, sp, #16
 800b698:	78d1      	ldrb	r1, [r2, #3]
 800b69a:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800b69c:	7891      	ldrb	r1, [r2, #2]
 800b69e:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800b6a0:	7851      	ldrb	r1, [r2, #1]
 800b6a2:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800b6a4:	7812      	ldrb	r2, [r2, #0]
 800b6a6:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800b6a8:	2205      	movs	r2, #5
 800b6aa:	2123      	movs	r1, #35	; 0x23
 800b6ac:	0030      	movs	r0, r6
 800b6ae:	f7fd fec7 	bl	8009440 <SendMessageToModule>
 800b6b2:	e026      	b.n	800b702 <SendResults+0x18e>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800b6b4:	ab04      	add	r3, sp, #16
 800b6b6:	78da      	ldrb	r2, [r3, #3]
 800b6b8:	4920      	ldr	r1, [pc, #128]	; (800b73c <SendResults+0x1c8>)
 800b6ba:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800b6bc:	789a      	ldrb	r2, [r3, #2]
 800b6be:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800b6c0:	785a      	ldrb	r2, [r3, #1]
 800b6c2:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b6c8:	230a      	movs	r3, #10
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	2204      	movs	r2, #4
 800b6ce:	9802      	ldr	r0, [sp, #8]
 800b6d0:	f002 f978 	bl	800d9c4 <writePxMutex>
 800b6d4:	e015      	b.n	800b702 <SendResults+0x18e>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800b6d6:	ab05      	add	r3, sp, #20
 800b6d8:	78da      	ldrb	r2, [r3, #3]
 800b6da:	4918      	ldr	r1, [pc, #96]	; (800b73c <SendResults+0x1c8>)
 800b6dc:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800b6de:	789a      	ldrb	r2, [r3, #2]
 800b6e0:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800b6e2:	785a      	ldrb	r2, [r3, #1]
 800b6e4:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b6ea:	230a      	movs	r3, #10
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	2204      	movs	r2, #4
 800b6f0:	9802      	ldr	r0, [sp, #8]
 800b6f2:	f002 f967 	bl	800d9c4 <writePxMutex>
 800b6f6:	e004      	b.n	800b702 <SendResults+0x18e>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800b6f8:	2204      	movs	r2, #4
 800b6fa:	a905      	add	r1, sp, #20
 800b6fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b6fe:	f007 fd62 	bl	80131c6 <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800b702:	3c02      	subs	r4, #2
 800b704:	23fd      	movs	r3, #253	; 0xfd
 800b706:	421c      	tst	r4, r3
 800b708:	d002      	beq.n	800b710 <SendResults+0x19c>
		free(strUnit);
 800b70a:	0038      	movs	r0, r7
 800b70c:	f007 fd30 	bl	8013170 <free>
}
 800b710:	2000      	movs	r0, #0
 800b712:	b007      	add	sp, #28
 800b714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	20000084 	.word	0x20000084
 800b71c:	20000866 	.word	0x20000866
 800b720:	20000728 	.word	0x20000728
 800b724:	080184dc 	.word	0x080184dc
 800b728:	080184ac 	.word	0x080184ac
 800b72c:	080184f4 	.word	0x080184f4
 800b730:	2000029f 	.word	0x2000029f
 800b734:	41200000 	.word	0x41200000
 800b738:	080184e4 	.word	0x080184e4
 800b73c:	20000f2c 	.word	0x20000f2c

0800b740 <sampleCommand>:
//	/* There is no more data to return after this single string, so return pdFALSE. */
//	return pdFALSE;
//}

static portBASE_TYPE sampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800b740:	b510      	push	{r4, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b746:	d101      	bne.n	800b74c <sampleCommand+0xc>
 800b748:	b672      	cpsid	i
 800b74a:	e7fe      	b.n	800b74a <sampleCommand+0xa>
	*volt = measured_volt;
 800b74c:	4b0b      	ldr	r3, [pc, #44]	; (800b77c <sampleCommand+0x3c>)
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <sampleCommand+0x40>)
 800b752:	6018      	str	r0, [r3, #0]
//		break;
//	default:
//		SampleC(&DATA_To_SEND);
//	}

	global_mode = SAMPLE_CLI_CASE;
 800b754:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <sampleCommand+0x44>)
 800b756:	2206      	movs	r2, #6
 800b758:	701a      	strb	r2, [r3, #0]
//	SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
	SendResults(DATA_To_SEND, global_mode, 0, 0, 0, NULL);
 800b75a:	2300      	movs	r3, #0
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	2200      	movs	r2, #0
 800b762:	2106      	movs	r1, #6
 800b764:	f7ff ff06 	bl	800b574 <SendResults>


	if (result != H12R0_OK)
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b768:	2299      	movs	r2, #153	; 0x99
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	2100      	movs	r1, #0
 800b76e:	0020      	movs	r0, r4
 800b770:	f007 fd32 	bl	80131d8 <memset>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b774:	2000      	movs	r0, #0
 800b776:	b002      	add	sp, #8
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	46c0      	nop			; (mov r8, r8)
 800b77c:	200064d0 	.word	0x200064d0
 800b780:	20000f1c 	.word	0x20000f1c
 800b784:	200062c4 	.word	0x200062c4

0800b788 <CalculationVolt>:
{
 800b788:	b510      	push	{r4, lr}
	raw_adc = Volt_buffer[0];
 800b78a:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <CalculationVolt+0x38>)
 800b78c:	6818      	ldr	r0, [r3, #0]
 800b78e:	f7f5 faff 	bl	8000d90 <__aeabi_ui2f>
 800b792:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <CalculationVolt+0x3c>)
 800b794:	6018      	str	r0, [r3, #0]
	adc_volt = (raw_adc * 3.3) / 4095;
 800b796:	f7f7 f8bd 	bl	8002914 <__aeabi_f2d>
 800b79a:	4a0b      	ldr	r2, [pc, #44]	; (800b7c8 <CalculationVolt+0x40>)
 800b79c:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <CalculationVolt+0x44>)
 800b79e:	f7f6 fa5d 	bl	8001c5c <__aeabi_dmul>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	4b0a      	ldr	r3, [pc, #40]	; (800b7d0 <CalculationVolt+0x48>)
 800b7a6:	f7f5 fe4f 	bl	8001448 <__aeabi_ddiv>
 800b7aa:	f7f7 f905 	bl	80029b8 <__aeabi_d2f>
 800b7ae:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <CalculationVolt+0x4c>)
 800b7b0:	6018      	str	r0, [r3, #0]
	measured_volt = adc_volt * 4;
 800b7b2:	2181      	movs	r1, #129	; 0x81
 800b7b4:	05c9      	lsls	r1, r1, #23
 800b7b6:	f7f4 ffd5 	bl	8000764 <__aeabi_fmul>
 800b7ba:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <CalculationVolt+0x50>)
 800b7bc:	6018      	str	r0, [r3, #0]
}
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	20000f20 	.word	0x20000f20
 800b7c4:	20006378 	.word	0x20006378
 800b7c8:	66666666 	.word	0x66666666
 800b7cc:	400a6666 	.word	0x400a6666
 800b7d0:	40affe00 	.word	0x40affe00
 800b7d4:	200064dc 	.word	0x200064dc
 800b7d8:	200064d0 	.word	0x200064d0

0800b7dc <VoltageTask>:
void VoltageTask(void *argument) {
 800b7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7de:	46c6      	mov	lr, r8
 800b7e0:	b500      	push	{lr}
 800b7e2:	b082      	sub	sp, #8
	HAL_ADC_Start_IT(&hadc);
 800b7e4:	4832      	ldr	r0, [pc, #200]	; (800b8b0 <VoltageTask+0xd4>)
 800b7e6:	f004 fbc7 	bl	800ff78 <HAL_ADC_Start_IT>
		DATA_To_SEND = CalculationVolt();
 800b7ea:	4d32      	ldr	r5, [pc, #200]	; (800b8b4 <VoltageTask+0xd8>)
		switch (global_mode) {
 800b7ec:	4c32      	ldr	r4, [pc, #200]	; (800b8b8 <VoltageTask+0xdc>)
			SendResults(DATA_To_SEND, global_mode, 0, global_port,
 800b7ee:	4b33      	ldr	r3, [pc, #204]	; (800b8bc <VoltageTask+0xe0>)
 800b7f0:	4698      	mov	r8, r3
 800b7f2:	e019      	b.n	800b828 <VoltageTask+0x4c>
			t0 = HAL_GetTick();
 800b7f4:	f004 fa38 	bl	800fc68 <HAL_GetTick>
 800b7f8:	0006      	movs	r6, r0
			SendResults(DATA_To_SEND, global_mode, 0, 0, 0, NULL);
 800b7fa:	4b2f      	ldr	r3, [pc, #188]	; (800b8b8 <VoltageTask+0xdc>)
 800b7fc:	7819      	ldrb	r1, [r3, #0]
 800b7fe:	4b2d      	ldr	r3, [pc, #180]	; (800b8b4 <VoltageTask+0xd8>)
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	2300      	movs	r3, #0
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	2200      	movs	r2, #0
 800b80a:	f7ff feb3 	bl	800b574 <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800b80e:	4f2c      	ldr	r7, [pc, #176]	; (800b8c0 <VoltageTask+0xe4>)
 800b810:	e001      	b.n	800b816 <VoltageTask+0x3a>
				taskYIELD();
 800b812:	f004 f8b1 	bl	800f978 <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800b816:	f004 fa27 	bl	800fc68 <HAL_GetTick>
 800b81a:	1b80      	subs	r0, r0, r6
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	3b01      	subs	r3, #1
 800b820:	4298      	cmp	r0, r3
 800b822:	d3f6      	bcc.n	800b812 <VoltageTask+0x36>
		taskYIELD();
 800b824:	f004 f8a8 	bl	800f978 <vPortYield>
		DATA_To_SEND = CalculationVolt();
 800b828:	f7ff ffae 	bl	800b788 <CalculationVolt>
 800b82c:	6028      	str	r0, [r5, #0]
		switch (global_mode) {
 800b82e:	7823      	ldrb	r3, [r4, #0]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d007      	beq.n	800b844 <VoltageTask+0x68>
 800b834:	2b03      	cmp	r3, #3
 800b836:	d021      	beq.n	800b87c <VoltageTask+0xa0>
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d0db      	beq.n	800b7f4 <VoltageTask+0x18>
			global_mode = IDLE_CASE;
 800b83c:	4b1e      	ldr	r3, [pc, #120]	; (800b8b8 <VoltageTask+0xdc>)
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
			break;
 800b842:	e7ef      	b.n	800b824 <VoltageTask+0x48>
			t0 = HAL_GetTick();
 800b844:	f004 fa10 	bl	800fc68 <HAL_GetTick>
 800b848:	0006      	movs	r6, r0
			SendResults(DATA_To_SEND, global_mode, 0, global_port,
 800b84a:	4643      	mov	r3, r8
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4a1a      	ldr	r2, [pc, #104]	; (800b8b8 <VoltageTask+0xdc>)
 800b850:	7811      	ldrb	r1, [r2, #0]
 800b852:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <VoltageTask+0xd8>)
 800b854:	6810      	ldr	r0, [r2, #0]
 800b856:	2200      	movs	r2, #0
 800b858:	9201      	str	r2, [sp, #4]
 800b85a:	4a1a      	ldr	r2, [pc, #104]	; (800b8c4 <VoltageTask+0xe8>)
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	9200      	str	r2, [sp, #0]
 800b860:	2200      	movs	r2, #0
 800b862:	f7ff fe87 	bl	800b574 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800b866:	4f16      	ldr	r7, [pc, #88]	; (800b8c0 <VoltageTask+0xe4>)
 800b868:	e001      	b.n	800b86e <VoltageTask+0x92>
				taskYIELD();
 800b86a:	f004 f885 	bl	800f978 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800b86e:	f004 f9fb 	bl	800fc68 <HAL_GetTick>
 800b872:	1b80      	subs	r0, r0, r6
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	4298      	cmp	r0, r3
 800b878:	d3f7      	bcc.n	800b86a <VoltageTask+0x8e>
 800b87a:	e7d3      	b.n	800b824 <VoltageTask+0x48>
			t0 = HAL_GetTick();
 800b87c:	f004 f9f4 	bl	800fc68 <HAL_GetTick>
 800b880:	0006      	movs	r6, r0
			SendResults(DATA_To_SEND, global_mode, 0, 0, 0,ptr_volt_buffer);
 800b882:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <VoltageTask+0xdc>)
 800b884:	7819      	ldrb	r1, [r3, #0]
 800b886:	4b0b      	ldr	r3, [pc, #44]	; (800b8b4 <VoltageTask+0xd8>)
 800b888:	6818      	ldr	r0, [r3, #0]
 800b88a:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <VoltageTask+0xec>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	9301      	str	r3, [sp, #4]
 800b890:	2300      	movs	r3, #0
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	2200      	movs	r2, #0
 800b896:	f7ff fe6d 	bl	800b574 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800b89a:	4f09      	ldr	r7, [pc, #36]	; (800b8c0 <VoltageTask+0xe4>)
 800b89c:	e001      	b.n	800b8a2 <VoltageTask+0xc6>
				taskYIELD();
 800b89e:	f004 f86b 	bl	800f978 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800b8a2:	f004 f9e1 	bl	800fc68 <HAL_GetTick>
 800b8a6:	1b80      	subs	r0, r0, r6
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	4298      	cmp	r0, r3
 800b8ac:	d3f7      	bcc.n	800b89e <VoltageTask+0xc2>
 800b8ae:	e7b9      	b.n	800b824 <VoltageTask+0x48>
 800b8b0:	200061e8 	.word	0x200061e8
 800b8b4:	20000f1c 	.word	0x20000f1c
 800b8b8:	200062c4 	.word	0x200062c4
 800b8bc:	200062c5 	.word	0x200062c5
 800b8c0:	2000645c 	.word	0x2000645c
 800b8c4:	200064d4 	.word	0x200064d4
 800b8c8:	200062c0 	.word	0x200062c0

0800b8cc <StreamVToPort>:
		uint32_t Timeout) {
 800b8cc:	b510      	push	{r4, lr}
 800b8ce:	b082      	sub	sp, #8
	global_port = Port;
 800b8d0:	4c18      	ldr	r4, [pc, #96]	; (800b934 <StreamVToPort+0x68>)
 800b8d2:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800b8d4:	4818      	ldr	r0, [pc, #96]	; (800b938 <StreamVToPort+0x6c>)
 800b8d6:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800b8d8:	4918      	ldr	r1, [pc, #96]	; (800b93c <StreamVToPort+0x70>)
 800b8da:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800b8dc:	4a18      	ldr	r2, [pc, #96]	; (800b940 <StreamVToPort+0x74>)
 800b8de:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800b8e0:	4a18      	ldr	r2, [pc, #96]	; (800b944 <StreamVToPort+0x78>)
 800b8e2:	2102      	movs	r1, #2
 800b8e4:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800b8e6:	1e5a      	subs	r2, r3, #1
 800b8e8:	3203      	adds	r2, #3
 800b8ea:	d902      	bls.n	800b8f2 <StreamVToPort+0x26>
}
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	b002      	add	sp, #8
 800b8f0:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800b8f2:	0158      	lsls	r0, r3, #5
 800b8f4:	1ac0      	subs	r0, r0, r3
 800b8f6:	0080      	lsls	r0, r0, #2
 800b8f8:	18c0      	adds	r0, r0, r3
 800b8fa:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800b8fc:	21fa      	movs	r1, #250	; 0xfa
 800b8fe:	0089      	lsls	r1, r1, #2
 800b900:	f7f4 fc1c 	bl	800013c <__udivsi3>
 800b904:	0001      	movs	r1, r0
 800b906:	4b10      	ldr	r3, [pc, #64]	; (800b948 <StreamVToPort+0x7c>)
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	23ff      	movs	r3, #255	; 0xff
 800b90c:	2200      	movs	r2, #0
 800b90e:	480f      	ldr	r0, [pc, #60]	; (800b94c <StreamVToPort+0x80>)
 800b910:	f003 fe74 	bl	800f5fc <xTimerCreate>
 800b914:	0004      	movs	r4, r0
 800b916:	4b0e      	ldr	r3, [pc, #56]	; (800b950 <StreamVToPort+0x84>)
 800b918:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800b91a:	f003 f907 	bl	800eb2c <xTaskGetTickCount>
 800b91e:	0002      	movs	r2, r0
 800b920:	2301      	movs	r3, #1
 800b922:	425b      	negs	r3, r3
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	2300      	movs	r3, #0
 800b928:	2101      	movs	r1, #1
 800b92a:	0020      	movs	r0, r4
 800b92c:	f003 fe86 	bl	800f63c <xTimerGenericCommand>
 800b930:	e7dc      	b.n	800b8ec <StreamVToPort+0x20>
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	200062c5 	.word	0x200062c5
 800b938:	200064d4 	.word	0x200064d4
 800b93c:	2000645c 	.word	0x2000645c
 800b940:	200064e0 	.word	0x200064e0
 800b944:	200062c4 	.word	0x200062c4
 800b948:	0800b195 	.word	0x0800b195
 800b94c:	08018518 	.word	0x08018518
 800b950:	20000f30 	.word	0x20000f30

0800b954 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800b954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b956:	b083      	sub	sp, #12
 800b958:	ab08      	add	r3, sp, #32
 800b95a:	781e      	ldrb	r6, [r3, #0]
	switch (code) {
 800b95c:	4b20      	ldr	r3, [pc, #128]	; (800b9e0 <Module_MessagingTask+0x8c>)
 800b95e:	4298      	cmp	r0, r3
 800b960:	d037      	beq.n	800b9d2 <Module_MessagingTask+0x7e>
 800b962:	4b20      	ldr	r3, [pc, #128]	; (800b9e4 <Module_MessagingTask+0x90>)
 800b964:	4298      	cmp	r0, r3
 800b966:	d026      	beq.n	800b9b6 <Module_MessagingTask+0x62>
 800b968:	3b02      	subs	r3, #2
 800b96a:	4298      	cmp	r0, r3
 800b96c:	d001      	beq.n	800b972 <Module_MessagingTask+0x1e>
		result = H12R0_ERR_UnknownMessage;
 800b96e:	2001      	movs	r0, #1
 800b970:	e01f      	b.n	800b9b2 <Module_MessagingTask+0x5e>
			period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800b972:	1e4c      	subs	r4, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800b974:	4d1c      	ldr	r5, [pc, #112]	; (800b9e8 <Module_MessagingTask+0x94>)
 800b976:	00e7      	lsls	r7, r4, #3
 800b978:	1b38      	subs	r0, r7, r4
 800b97a:	00c0      	lsls	r0, r0, #3
 800b97c:	1828      	adds	r0, r5, r0
 800b97e:	1980      	adds	r0, r0, r6
 800b980:	7943      	ldrb	r3, [r0, #5]
 800b982:	061b      	lsls	r3, r3, #24
					+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)
 800b984:	7982      	ldrb	r2, [r0, #6]
 800b986:	0412      	lsls	r2, r2, #16
 800b988:	189b      	adds	r3, r3, r2
					+ cMessage[port - 1][8 + shift];
 800b98a:	7a02      	ldrb	r2, [r0, #8]
			timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800b98c:	189b      	adds	r3, r3, r2
					+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800b98e:	79c2      	ldrb	r2, [r0, #7]
 800b990:	0212      	lsls	r2, r2, #8
			timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800b992:	189b      	adds	r3, r3, r2
			period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800b994:	7842      	ldrb	r2, [r0, #1]
 800b996:	0612      	lsls	r2, r2, #24
					+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)
 800b998:	7881      	ldrb	r1, [r0, #2]
 800b99a:	0409      	lsls	r1, r1, #16
 800b99c:	1852      	adds	r2, r2, r1
					+ cMessage[port - 1][4 + shift];
 800b99e:	7901      	ldrb	r1, [r0, #4]
			period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800b9a0:	1852      	adds	r2, r2, r1
					+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800b9a2:	78c1      	ldrb	r1, [r0, #3]
 800b9a4:	0209      	lsls	r1, r1, #8
			period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800b9a6:	1852      	adds	r2, r2, r1
			StreamVToPort(cMessage[port - 1][9 + shift],
 800b9a8:	7a81      	ldrb	r1, [r0, #10]
 800b9aa:	7a40      	ldrb	r0, [r0, #9]
 800b9ac:	f7ff ff8e 	bl	800b8cc <StreamVToPort>
	Module_Status result = H12R0_OK;
 800b9b0:	2000      	movs	r0, #0
}
 800b9b2:	b003      	add	sp, #12
 800b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			global_mode = IDLE_CASE;
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <Module_MessagingTask+0x98>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	701a      	strb	r2, [r3, #0]
			xTimerStop(xTimer, portMAX_DELAY);
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <Module_MessagingTask+0x9c>)
 800b9be:	6818      	ldr	r0, [r3, #0]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	425b      	negs	r3, r3
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	2103      	movs	r1, #3
 800b9ca:	f003 fe37 	bl	800f63c <xTimerGenericCommand>
	Module_Status result = H12R0_OK;
 800b9ce:	2000      	movs	r0, #0
			break;
 800b9d0:	e7ef      	b.n	800b9b2 <Module_MessagingTask+0x5e>
	*volt = measured_volt;
 800b9d2:	4b08      	ldr	r3, [pc, #32]	; (800b9f4 <Module_MessagingTask+0xa0>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <Module_MessagingTask+0xa4>)
 800b9d8:	601a      	str	r2, [r3, #0]
	Module_Status result = H12R0_OK;
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e7e9      	b.n	800b9b2 <Module_MessagingTask+0x5e>
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	00000259 	.word	0x00000259
 800b9e4:	0000025a 	.word	0x0000025a
 800b9e8:	20000530 	.word	0x20000530
 800b9ec:	200062c4 	.word	0x200062c4
 800b9f0:	20000f30 	.word	0x20000f30
 800b9f4:	200064d0 	.word	0x200064d0
 800b9f8:	200064d8 	.word	0x200064d8

0800b9fc <StreamVToBuffer>:
int StreamVToBuffer(float *Buffer, uint32_t Period, uint32_t Timeout) {
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	b082      	sub	sp, #8
	global_period = Period;
 800ba00:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <StreamVToBuffer+0x64>)
 800ba02:	6019      	str	r1, [r3, #0]
	global_timeout = Timeout;
 800ba04:	4b17      	ldr	r3, [pc, #92]	; (800ba64 <StreamVToBuffer+0x68>)
 800ba06:	601a      	str	r2, [r3, #0]
	ptr_volt_buffer = Buffer;
 800ba08:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <StreamVToBuffer+0x6c>)
 800ba0a:	6018      	str	r0, [r3, #0]
	global_mode = STREAM_BUFFER_CASE;
 800ba0c:	4b17      	ldr	r3, [pc, #92]	; (800ba6c <StreamVToBuffer+0x70>)
 800ba0e:	2103      	movs	r1, #3
 800ba10:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800ba12:	1e53      	subs	r3, r2, #1
 800ba14:	3303      	adds	r3, #3
 800ba16:	d902      	bls.n	800ba1e <StreamVToBuffer+0x22>
}
 800ba18:	2000      	movs	r0, #0
 800ba1a:	b002      	add	sp, #8
 800ba1c:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800ba1e:	0150      	lsls	r0, r2, #5
 800ba20:	1a80      	subs	r0, r0, r2
 800ba22:	0080      	lsls	r0, r0, #2
 800ba24:	1880      	adds	r0, r0, r2
 800ba26:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Measurement Timeout",
 800ba28:	21fa      	movs	r1, #250	; 0xfa
 800ba2a:	0089      	lsls	r1, r1, #2
 800ba2c:	f7f4 fb86 	bl	800013c <__udivsi3>
 800ba30:	0001      	movs	r1, r0
 800ba32:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <StreamVToBuffer+0x74>)
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	23ff      	movs	r3, #255	; 0xff
 800ba38:	2200      	movs	r2, #0
 800ba3a:	480e      	ldr	r0, [pc, #56]	; (800ba74 <StreamVToBuffer+0x78>)
 800ba3c:	f003 fdde 	bl	800f5fc <xTimerCreate>
 800ba40:	0004      	movs	r4, r0
 800ba42:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <StreamVToBuffer+0x7c>)
 800ba44:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800ba46:	f003 f871 	bl	800eb2c <xTaskGetTickCount>
 800ba4a:	0002      	movs	r2, r0
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	425b      	negs	r3, r3
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	2300      	movs	r3, #0
 800ba54:	2101      	movs	r1, #1
 800ba56:	0020      	movs	r0, r4
 800ba58:	f003 fdf0 	bl	800f63c <xTimerGenericCommand>
 800ba5c:	e7dc      	b.n	800ba18 <StreamVToBuffer+0x1c>
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	2000645c 	.word	0x2000645c
 800ba64:	200064e0 	.word	0x200064e0
 800ba68:	200062c0 	.word	0x200062c0
 800ba6c:	200062c4 	.word	0x200062c4
 800ba70:	0800b195 	.word	0x0800b195
 800ba74:	08018504 	.word	0x08018504
 800ba78:	20000f30 	.word	0x20000f30

0800ba7c <Stop>:
int Stop(void) {
 800ba7c:	b500      	push	{lr}
 800ba7e:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800ba80:	2300      	movs	r3, #0
 800ba82:	4a06      	ldr	r2, [pc, #24]	; (800ba9c <Stop+0x20>)
 800ba84:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800ba86:	4a06      	ldr	r2, [pc, #24]	; (800baa0 <Stop+0x24>)
 800ba88:	6810      	ldr	r0, [r2, #0]
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2103      	movs	r1, #3
 800ba90:	f003 fdd4 	bl	800f63c <xTimerGenericCommand>
}
 800ba94:	2000      	movs	r0, #0
 800ba96:	b003      	add	sp, #12
 800ba98:	bd00      	pop	{pc}
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	200062c4 	.word	0x200062c4
 800baa0:	20000f30 	.word	0x20000f30

0800baa4 <stopCommand>:
//	/* There is no more data to return after this single string, so return pdFALSE. */
//	return pdFALSE;
//}

static portBASE_TYPE stopCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800baa4:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d101      	bne.n	800baae <stopCommand+0xa>
 800baaa:	b672      	cpsid	i
 800baac:	e7fe      	b.n	800baac <stopCommand+0x8>
	volt_buffer = 0;
 800baae:	4b03      	ldr	r3, [pc, #12]	; (800babc <stopCommand+0x18>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
	Stop();
 800bab4:	f7ff ffe2 	bl	800ba7c <Stop>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800bab8:	2000      	movs	r0, #0
 800baba:	bd10      	pop	{r4, pc}
 800babc:	20006374 	.word	0x20006374

0800bac0 <StreamVToCLI>:
{
 800bac0:	b510      	push	{r4, lr}
 800bac2:	b082      	sub	sp, #8
	global_period=Period;
 800bac4:	4b19      	ldr	r3, [pc, #100]	; (800bb2c <StreamVToCLI+0x6c>)
 800bac6:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800bac8:	4b19      	ldr	r3, [pc, #100]	; (800bb30 <StreamVToCLI+0x70>)
 800baca:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800bacc:	4b19      	ldr	r3, [pc, #100]	; (800bb34 <StreamVToCLI+0x74>)
 800bace:	2201      	movs	r2, #1
 800bad0:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800bad2:	1e4b      	subs	r3, r1, #1
 800bad4:	3303      	adds	r3, #3
 800bad6:	d909      	bls.n	800baec <StreamVToCLI+0x2c>
	if (global_timeout > 0)
 800bad8:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <StreamVToCLI+0x70>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <StreamVToCLI+0x26>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800bae0:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <StreamVToCLI+0x78>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	701a      	strb	r2, [r3, #0]
}
 800bae6:	2000      	movs	r0, #0
 800bae8:	b002      	add	sp, #8
 800baea:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800baec:	0148      	lsls	r0, r1, #5
 800baee:	1a40      	subs	r0, r0, r1
 800baf0:	0080      	lsls	r0, r0, #2
 800baf2:	1840      	adds	r0, r0, r1
 800baf4:	00c0      	lsls	r0, r0, #3
 800baf6:	21fa      	movs	r1, #250	; 0xfa
 800baf8:	0089      	lsls	r1, r1, #2
 800bafa:	f7f4 fb1f 	bl	800013c <__udivsi3>
 800bafe:	0001      	movs	r1, r0
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <StreamVToCLI+0x7c>)
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	23ff      	movs	r3, #255	; 0xff
 800bb06:	2200      	movs	r2, #0
 800bb08:	480d      	ldr	r0, [pc, #52]	; (800bb40 <StreamVToCLI+0x80>)
 800bb0a:	f003 fd77 	bl	800f5fc <xTimerCreate>
 800bb0e:	0004      	movs	r4, r0
 800bb10:	4b0c      	ldr	r3, [pc, #48]	; (800bb44 <StreamVToCLI+0x84>)
 800bb12:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800bb14:	f003 f80a 	bl	800eb2c <xTaskGetTickCount>
 800bb18:	0002      	movs	r2, r0
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	425b      	negs	r3, r3
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	2300      	movs	r3, #0
 800bb22:	2101      	movs	r1, #1
 800bb24:	0020      	movs	r0, r4
 800bb26:	f003 fd89 	bl	800f63c <xTimerGenericCommand>
 800bb2a:	e7d5      	b.n	800bad8 <StreamVToCLI+0x18>
 800bb2c:	2000645c 	.word	0x2000645c
 800bb30:	200064e0 	.word	0x200064e0
 800bb34:	200062c4 	.word	0x200062c4
 800bb38:	20000f28 	.word	0x20000f28
 800bb3c:	0800b195 	.word	0x0800b195
 800bb40:	08018504 	.word	0x08018504
 800bb44:	20000f30 	.word	0x20000f30

0800bb48 <demoCommand>:
//	return pdFALSE;
//}


portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800bb48:	b530      	push	{r4, r5, lr}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800bb4e:	d101      	bne.n	800bb54 <demoCommand+0xc>
 800bb50:	b672      	cpsid	i
 800bb52:	e7fe      	b.n	800bb52 <demoCommand+0xa>



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800bb54:	221e      	movs	r2, #30
 800bb56:	4915      	ldr	r1, [pc, #84]	; (800bbac <demoCommand+0x64>)
 800bb58:	f007 fb35 	bl	80131c6 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bb5c:	0020      	movs	r0, r4
 800bb5e:	f7f4 fadb 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bb62:	b282      	uxth	r2, r0
 800bb64:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <demoCommand+0x68>)
 800bb66:	7818      	ldrb	r0, [r3, #0]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	425b      	negs	r3, r3
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	3333      	adds	r3, #51	; 0x33
 800bb70:	0021      	movs	r1, r4
 800bb72:	f001 ff27 	bl	800d9c4 <writePxMutex>
		StreamVToCLI(500, 10000);
 800bb76:	20fa      	movs	r0, #250	; 0xfa
 800bb78:	490e      	ldr	r1, [pc, #56]	; (800bbb4 <demoCommand+0x6c>)
 800bb7a:	0040      	lsls	r0, r0, #1
 800bb7c:	f7ff ffa0 	bl	800bac0 <StreamVToCLI>
//		default:
//			StreamCToCLI(500, 10000);
//		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800bb80:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <demoCommand+0x70>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d006      	beq.n	800bb96 <demoCommand+0x4e>
 800bb88:	4d0b      	ldr	r5, [pc, #44]	; (800bbb8 <demoCommand+0x70>)
			Delay_ms(1);
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	f004 f872 	bl	800fc74 <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800bb90:	782b      	ldrb	r3, [r5, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1f9      	bne.n	800bb8a <demoCommand+0x42>
	if (result != H12R0_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800bb96:	0020      	movs	r0, r4
 800bb98:	f7f4 fabe 	bl	8000118 <strlen>
 800bb9c:	0002      	movs	r2, r0
 800bb9e:	2100      	movs	r1, #0
 800bba0:	0020      	movs	r0, r4
 800bba2:	f007 fb19 	bl	80131d8 <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800bba6:	2000      	movs	r0, #0
 800bba8:	b003      	add	sp, #12
 800bbaa:	bd30      	pop	{r4, r5, pc}
 800bbac:	0801852c 	.word	0x0801852c
 800bbb0:	2000029f 	.word	0x2000029f
 800bbb4:	00002710 	.word	0x00002710
 800bbb8:	20000f28 	.word	0x20000f28

0800bbbc <streamCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800bbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbbe:	46c6      	mov	lr, r8
 800bbc0:	b500      	push	{lr}
 800bbc2:	b08a      	sub	sp, #40	; 0x28
 800bbc4:	0004      	movs	r4, r0
 800bbc6:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength2 = 0;
 800bbcc:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength3 = 0;
 800bbce:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength4 = 0;
 800bbd0:	9306      	str	r3, [sp, #24]
	configASSERT(pcWriteBuffer);
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d101      	bne.n	800bbda <streamCommand+0x1e>
 800bbd6:	b672      	cpsid	i
 800bbd8:	e7fe      	b.n	800bbd8 <streamCommand+0x1c>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800bbda:	aa09      	add	r2, sp, #36	; 0x24
 800bbdc:	2101      	movs	r1, #1
 800bbde:	9f03      	ldr	r7, [sp, #12]
 800bbe0:	0038      	movs	r0, r7
 800bbe2:	f002 f935 	bl	800de50 <FreeRTOS_CLIGetParameter>
 800bbe6:	0006      	movs	r6, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800bbe8:	aa08      	add	r2, sp, #32
 800bbea:	2102      	movs	r1, #2
 800bbec:	0038      	movs	r0, r7
 800bbee:	f002 f92f 	bl	800de50 <FreeRTOS_CLIGetParameter>
 800bbf2:	0005      	movs	r5, r0
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800bbf4:	aa07      	add	r2, sp, #28
 800bbf6:	2103      	movs	r1, #3
 800bbf8:	9703      	str	r7, [sp, #12]
 800bbfa:	0038      	movs	r0, r7
 800bbfc:	f002 f928 	bl	800de50 <FreeRTOS_CLIGetParameter>
 800bc00:	0007      	movs	r7, r0
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800bc02:	aa06      	add	r2, sp, #24
 800bc04:	2104      	movs	r1, #4
 800bc06:	9803      	ldr	r0, [sp, #12]
 800bc08:	f002 f922 	bl	800de50 <FreeRTOS_CLIGetParameter>
 800bc0c:	9005      	str	r0, [sp, #20]
	if (NULL != pcParameterString1) {
 800bc0e:	2e00      	cmp	r6, #0
 800bc10:	d03a      	beq.n	800bc88 <streamCommand+0xcc>
		period = atoi((char*) pcParameterString1);
 800bc12:	0030      	movs	r0, r6
 800bc14:	f007 fa5f 	bl	80130d6 <atoi>
 800bc18:	9003      	str	r0, [sp, #12]
	Module_Status result = H12R0_OK;
 800bc1a:	2600      	movs	r6, #0
	if (NULL != pcParameterString2) {
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	d03c      	beq.n	800bc9a <streamCommand+0xde>
		if (!strncmp((const char*) pcParameterString2, "inf", 3)) {
 800bc20:	2203      	movs	r2, #3
 800bc22:	4942      	ldr	r1, [pc, #264]	; (800bd2c <streamCommand+0x170>)
 800bc24:	0028      	movs	r0, r5
 800bc26:	f007 fc19 	bl	801345c <strncmp>
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d130      	bne.n	800bc90 <streamCommand+0xd4>
			timeout = portMAX_DELAY;
 800bc2e:	2501      	movs	r5, #1
 800bc30:	426d      	negs	r5, r5
	if (NULL != pcParameterString3
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	d050      	beq.n	800bcd8 <streamCommand+0x11c>
			&& !strncmp((const char*) pcParameterString3, "buffer", 6)) {
 800bc36:	2206      	movs	r2, #6
 800bc38:	493d      	ldr	r1, [pc, #244]	; (800bd30 <streamCommand+0x174>)
 800bc3a:	0038      	movs	r0, r7
 800bc3c:	f007 fc0e 	bl	801345c <strncmp>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d02d      	beq.n	800bca0 <streamCommand+0xe4>
	else if (NULL != pcParameterString3 && NULL != pcParameterString4
 800bc44:	9b05      	ldr	r3, [sp, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d03c      	beq.n	800bcc4 <streamCommand+0x108>
			&& pcParameterString3[0] == 'p') {
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	56fb      	ldrsb	r3, [r7, r3]
 800bc4e:	2b70      	cmp	r3, #112	; 0x70
 800bc50:	d138      	bne.n	800bcc4 <streamCommand+0x108>
		port = (uint8_t) atol((char*) pcParameterString3 + 1);
 800bc52:	1c78      	adds	r0, r7, #1
 800bc54:	f007 fa45 	bl	80130e2 <atol>
 800bc58:	9004      	str	r0, [sp, #16]
 800bc5a:	466b      	mov	r3, sp
 800bc5c:	7c1b      	ldrb	r3, [r3, #16]
 800bc5e:	4698      	mov	r8, r3
		module = (uint8_t) GetID((char*) pcParameterString4);
 800bc60:	9805      	ldr	r0, [sp, #20]
 800bc62:	f7f8 f983 	bl	8003f6c <GetID>
 800bc66:	b2c7      	uxtb	r7, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800bc68:	2f64      	cmp	r7, #100	; 0x64
 800bc6a:	d024      	beq.n	800bcb6 <streamCommand+0xfa>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, port,
 800bc6c:	466b      	mov	r3, sp
 800bc6e:	7c1a      	ldrb	r2, [r3, #16]
 800bc70:	003b      	movs	r3, r7
 800bc72:	4930      	ldr	r1, [pc, #192]	; (800bd34 <streamCommand+0x178>)
 800bc74:	0020      	movs	r0, r4
 800bc76:	f007 fbad 	bl	80133d4 <siprintf>
			StreamVToPort(port, module, period, timeout);
 800bc7a:	002b      	movs	r3, r5
 800bc7c:	9a03      	ldr	r2, [sp, #12]
 800bc7e:	0039      	movs	r1, r7
 800bc80:	4640      	mov	r0, r8
 800bc82:	f7ff fe23 	bl	800b8cc <StreamVToPort>
			return pdFALSE;
 800bc86:	e022      	b.n	800bcce <streamCommand+0x112>
		result = H12R0_ERR_WrongParams;
 800bc88:	2602      	movs	r6, #2
	uint32_t period = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9303      	str	r3, [sp, #12]
 800bc8e:	e7c5      	b.n	800bc1c <streamCommand+0x60>
			timeout = atoi((char*) pcParameterString2);
 800bc90:	0028      	movs	r0, r5
 800bc92:	f007 fa20 	bl	80130d6 <atoi>
 800bc96:	0005      	movs	r5, r0
 800bc98:	e7cb      	b.n	800bc32 <streamCommand+0x76>
		result = H12R0_ERR_WrongParams;
 800bc9a:	2602      	movs	r6, #2
	uint32_t timeout = 0;
 800bc9c:	2500      	movs	r5, #0
 800bc9e:	e7c8      	b.n	800bc32 <streamCommand+0x76>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageBuffer);
 800bca0:	225e      	movs	r2, #94	; 0x5e
 800bca2:	4925      	ldr	r1, [pc, #148]	; (800bd38 <streamCommand+0x17c>)
 800bca4:	0020      	movs	r0, r4
 800bca6:	f007 fa8e 	bl	80131c6 <memcpy>
		StreamVToBuffer(&volt_buffer, period, timeout);
 800bcaa:	002a      	movs	r2, r5
 800bcac:	9903      	ldr	r1, [sp, #12]
 800bcae:	4823      	ldr	r0, [pc, #140]	; (800bd3c <streamCommand+0x180>)
 800bcb0:	f7ff fea4 	bl	800b9fc <StreamVToBuffer>
		return pdFALSE;
 800bcb4:	e00b      	b.n	800bcce <streamCommand+0x112>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongName);
 800bcb6:	2214      	movs	r2, #20
 800bcb8:	4921      	ldr	r1, [pc, #132]	; (800bd40 <streamCommand+0x184>)
 800bcba:	0020      	movs	r0, r4
 800bcbc:	f007 fa83 	bl	80131c6 <memcpy>
	if (H12R0_ERR_WrongParams == result) {
 800bcc0:	2e02      	cmp	r6, #2
 800bcc2:	d104      	bne.n	800bcce <streamCommand+0x112>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800bcc4:	2212      	movs	r2, #18
 800bcc6:	491f      	ldr	r1, [pc, #124]	; (800bd44 <streamCommand+0x188>)
 800bcc8:	0020      	movs	r0, r4
 800bcca:	f007 fa7c 	bl	80131c6 <memcpy>
}
 800bcce:	2000      	movs	r0, #0
 800bcd0:	b00a      	add	sp, #40	; 0x28
 800bcd2:	bc04      	pop	{r2}
 800bcd4:	4690      	mov	r8, r2
 800bcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800bcd8:	2225      	movs	r2, #37	; 0x25
 800bcda:	491b      	ldr	r1, [pc, #108]	; (800bd48 <streamCommand+0x18c>)
 800bcdc:	0020      	movs	r0, r4
 800bcde:	f007 fa72 	bl	80131c6 <memcpy>
				writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bce2:	0020      	movs	r0, r4
 800bce4:	f7f4 fa18 	bl	8000118 <strlen>
 800bce8:	b282      	uxth	r2, r0
 800bcea:	4b18      	ldr	r3, [pc, #96]	; (800bd4c <streamCommand+0x190>)
 800bcec:	7818      	ldrb	r0, [r3, #0]
 800bcee:	2301      	movs	r3, #1
 800bcf0:	425b      	negs	r3, r3
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	3333      	adds	r3, #51	; 0x33
 800bcf6:	0021      	movs	r1, r4
 800bcf8:	f001 fe64 	bl	800d9c4 <writePxMutex>
				StreamVToCLI(period, timeout);
 800bcfc:	0029      	movs	r1, r5
 800bcfe:	9803      	ldr	r0, [sp, #12]
 800bd00:	f7ff fede 	bl	800bac0 <StreamVToCLI>
				while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800bd04:	4b12      	ldr	r3, [pc, #72]	; (800bd50 <streamCommand+0x194>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <streamCommand+0x15c>
 800bd0c:	4d10      	ldr	r5, [pc, #64]	; (800bd50 <streamCommand+0x194>)
 800bd0e:	f003 fe33 	bl	800f978 <vPortYield>
 800bd12:	782b      	ldrb	r3, [r5, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1fa      	bne.n	800bd0e <streamCommand+0x152>
				memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800bd18:	0020      	movs	r0, r4
 800bd1a:	f7f4 f9fd 	bl	8000118 <strlen>
 800bd1e:	0002      	movs	r2, r0
 800bd20:	2100      	movs	r1, #0
 800bd22:	0020      	movs	r0, r4
 800bd24:	f007 fa58 	bl	80131d8 <memset>
 800bd28:	e7ca      	b.n	800bcc0 <streamCommand+0x104>
 800bd2a:	46c0      	nop			; (mov r8, r8)
 800bd2c:	080186c0 	.word	0x080186c0
 800bd30:	080186c4 	.word	0x080186c4
 800bd34:	0801872c 	.word	0x0801872c
 800bd38:	080186cc 	.word	0x080186cc
 800bd3c:	20006374 	.word	0x20006374
 800bd40:	08018760 	.word	0x08018760
 800bd44:	0801879c 	.word	0x0801879c
 800bd48:	08018774 	.word	0x08018774
 800bd4c:	2000029f 	.word	0x2000029f
 800bd50:	20000f28 	.word	0x20000f28

0800bd54 <ADC_Channel_config>:
//	      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
//	      GPIO_InitStruct.Pull = GPIO_NOPULL;
//	      HAL_GPIO_Init(Thermocable_input_GPIO_Port, &GPIO_InitStruct);
//}

void ADC_Channel_config(void){
 800bd54:	b500      	push	{lr}
 800bd56:	b089      	sub	sp, #36	; 0x24

	ADC_ChannelConfTypeDef sConfig = {0};
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd58:	2214      	movs	r2, #20
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4668      	mov	r0, sp
 800bd5e:	f007 fa3b 	bl	80131d8 <memset>
	sConfig.Channel = ADC_CHANNEL_8;
 800bd62:	2308      	movs	r3, #8
 800bd64:	9305      	str	r3, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bd66:	2380      	movs	r3, #128	; 0x80
 800bd68:	015b      	lsls	r3, r3, #5
 800bd6a:	9306      	str	r3, [sp, #24]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800bd6c:	2307      	movs	r3, #7
 800bd6e:	9307      	str	r3, [sp, #28]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800bd70:	a905      	add	r1, sp, #20
 800bd72:	4807      	ldr	r0, [pc, #28]	; (800bd90 <ADC_Channel_config+0x3c>)
 800bd74:	f004 f9e2 	bl	801013c <HAL_ADC_ConfigChannel>
	  {

	  }
	      GPIO_InitStruct.Pin = Voltage_input_Pin;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	9300      	str	r3, [sp, #0]
	      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd7c:	3302      	adds	r3, #2
 800bd7e:	9301      	str	r3, [sp, #4]
	      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	9302      	str	r3, [sp, #8]
	      HAL_GPIO_Init(Voltage_input_GPIO_Port, &GPIO_InitStruct);
 800bd84:	4669      	mov	r1, sp
 800bd86:	4803      	ldr	r0, [pc, #12]	; (800bd94 <ADC_Channel_config+0x40>)
 800bd88:	f005 fa94 	bl	80112b4 <HAL_GPIO_Init>
}
 800bd8c:	b009      	add	sp, #36	; 0x24
 800bd8e:	bd00      	pop	{pc}
 800bd90:	200061e8 	.word	0x200061e8
 800bd94:	48000400 	.word	0x48000400

0800bd98 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bd98:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bd9a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bda0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bda2:	2280      	movs	r2, #128	; 0x80
 800bda4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bda6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bda8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bdaa:	3320      	adds	r3, #32
 800bdac:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bdae:	2380      	movs	r3, #128	; 0x80
 800bdb0:	019b      	lsls	r3, r3, #6
 800bdb2:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bdb4:	f004 fc52 	bl	801065c <HAL_DMA_Init>
}
 800bdb8:	bd10      	pop	{r4, pc}

0800bdba <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bdba:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bdbc:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bdbe:	2310      	movs	r3, #16
 800bdc0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bdc6:	2280      	movs	r2, #128	; 0x80
 800bdc8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bdca:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bdcc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800bdce:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bdd0:	2380      	movs	r3, #128	; 0x80
 800bdd2:	019b      	lsls	r3, r3, #6
 800bdd4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bdd6:	f004 fc41 	bl	801065c <HAL_DMA_Init>
}
 800bdda:	bd10      	pop	{r4, pc}

0800bddc <DMA_Init>:
{
 800bddc:	b510      	push	{r4, lr}
 800bdde:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800bde0:	4b1d      	ldr	r3, [pc, #116]	; (800be58 <DMA_Init+0x7c>)
 800bde2:	6959      	ldr	r1, [r3, #20]
 800bde4:	2201      	movs	r2, #1
 800bde6:	4311      	orrs	r1, r2
 800bde8:	6159      	str	r1, [r3, #20]
 800bdea:	6959      	ldr	r1, [r3, #20]
 800bdec:	400a      	ands	r2, r1
 800bdee:	9200      	str	r2, [sp, #0]
 800bdf0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800bdf2:	6959      	ldr	r1, [r3, #20]
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	4311      	orrs	r1, r2
 800bdf8:	6159      	str	r1, [r3, #20]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	401a      	ands	r2, r3
 800bdfe:	9201      	str	r2, [sp, #4]
 800be00:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800be02:	4c16      	ldr	r4, [pc, #88]	; (800be5c <DMA_Init+0x80>)
 800be04:	4916      	ldr	r1, [pc, #88]	; (800be60 <DMA_Init+0x84>)
 800be06:	0020      	movs	r0, r4
 800be08:	f7ff ffc6 	bl	800bd98 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800be0c:	0020      	movs	r0, r4
 800be0e:	3038      	adds	r0, #56	; 0x38
 800be10:	4914      	ldr	r1, [pc, #80]	; (800be64 <DMA_Init+0x88>)
 800be12:	f7ff ffc1 	bl	800bd98 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800be16:	0020      	movs	r0, r4
 800be18:	3070      	adds	r0, #112	; 0x70
 800be1a:	4913      	ldr	r1, [pc, #76]	; (800be68 <DMA_Init+0x8c>)
 800be1c:	f7ff ffbc 	bl	800bd98 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800be20:	0020      	movs	r0, r4
 800be22:	30a8      	adds	r0, #168	; 0xa8
 800be24:	4911      	ldr	r1, [pc, #68]	; (800be6c <DMA_Init+0x90>)
 800be26:	f7ff ffb7 	bl	800bd98 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800be2a:	0020      	movs	r0, r4
 800be2c:	30e0      	adds	r0, #224	; 0xe0
 800be2e:	4910      	ldr	r1, [pc, #64]	; (800be70 <DMA_Init+0x94>)
 800be30:	f7ff ffb2 	bl	800bd98 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800be34:	4c0f      	ldr	r4, [pc, #60]	; (800be74 <DMA_Init+0x98>)
 800be36:	4910      	ldr	r1, [pc, #64]	; (800be78 <DMA_Init+0x9c>)
 800be38:	0020      	movs	r0, r4
 800be3a:	f7ff ffbe 	bl	800bdba <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800be3e:	0020      	movs	r0, r4
 800be40:	3038      	adds	r0, #56	; 0x38
 800be42:	490e      	ldr	r1, [pc, #56]	; (800be7c <DMA_Init+0xa0>)
 800be44:	f7ff ffb9 	bl	800bdba <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800be48:	0020      	movs	r0, r4
 800be4a:	3070      	adds	r0, #112	; 0x70
 800be4c:	490c      	ldr	r1, [pc, #48]	; (800be80 <DMA_Init+0xa4>)
 800be4e:	f7ff ffb4 	bl	800bdba <DMA_MSG_TX_CH_Init>
}
 800be52:	b002      	add	sp, #8
 800be54:	bd10      	pop	{r4, pc}
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	40021000 	.word	0x40021000
 800be5c:	20000f34 	.word	0x20000f34
 800be60:	40020008 	.word	0x40020008
 800be64:	40020030 	.word	0x40020030
 800be68:	40020058 	.word	0x40020058
 800be6c:	4002006c 	.word	0x4002006c
 800be70:	4002041c 	.word	0x4002041c
 800be74:	20001084 	.word	0x20001084
 800be78:	4002001c 	.word	0x4002001c
 800be7c:	40020044 	.word	0x40020044
 800be80:	40020080 	.word	0x40020080

0800be84 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800be84:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800be86:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be88:	2300      	movs	r3, #0
 800be8a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800be8c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800be8e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be90:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be92:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800be94:	3320      	adds	r3, #32
 800be96:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800be98:	2380      	movs	r3, #128	; 0x80
 800be9a:	015b      	lsls	r3, r3, #5
 800be9c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800be9e:	f004 fbdd 	bl	801065c <HAL_DMA_Init>
}
 800bea2:	bd10      	pop	{r4, pc}

0800bea4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800bea4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bea6:	6803      	ldr	r3, [r0, #0]
 800bea8:	4a20      	ldr	r2, [pc, #128]	; (800bf2c <SetupDMAInterrupts+0x88>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d020      	beq.n	800bef0 <SetupDMAInterrupts+0x4c>
 800beae:	d827      	bhi.n	800bf00 <SetupDMAInterrupts+0x5c>
 800beb0:	4a1f      	ldr	r2, [pc, #124]	; (800bf30 <SetupDMAInterrupts+0x8c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00e      	beq.n	800bed4 <SetupDMAInterrupts+0x30>
 800beb6:	d815      	bhi.n	800bee4 <SetupDMAInterrupts+0x40>
 800beb8:	4a1e      	ldr	r2, [pc, #120]	; (800bf34 <SetupDMAInterrupts+0x90>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d107      	bne.n	800bece <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800bebe:	2200      	movs	r2, #0
 800bec0:	2009      	movs	r0, #9
 800bec2:	f004 fa2d 	bl	8010320 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800bec6:	2009      	movs	r0, #9
 800bec8:	f004 fa5e 	bl	8010388 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800becc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bece:	4a1a      	ldr	r2, [pc, #104]	; (800bf38 <SetupDMAInterrupts+0x94>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d1fb      	bne.n	800becc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800bed4:	2200      	movs	r2, #0
 800bed6:	200a      	movs	r0, #10
 800bed8:	f004 fa22 	bl	8010320 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bedc:	200a      	movs	r0, #10
 800bede:	f004 fa53 	bl	8010388 <HAL_NVIC_EnableIRQ>
			break;
 800bee2:	e7f3      	b.n	800becc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800bee4:	4a15      	ldr	r2, [pc, #84]	; (800bf3c <SetupDMAInterrupts+0x98>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d002      	beq.n	800bef0 <SetupDMAInterrupts+0x4c>
 800beea:	4a15      	ldr	r2, [pc, #84]	; (800bf40 <SetupDMAInterrupts+0x9c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d1ed      	bne.n	800becc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800bef0:	2200      	movs	r2, #0
 800bef2:	200b      	movs	r0, #11
 800bef4:	f004 fa14 	bl	8010320 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bef8:	200b      	movs	r0, #11
 800befa:	f004 fa45 	bl	8010388 <HAL_NVIC_EnableIRQ>
}
 800befe:	e7e5      	b.n	800becc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800bf00:	4a10      	ldr	r2, [pc, #64]	; (800bf44 <SetupDMAInterrupts+0xa0>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d0e6      	beq.n	800bed4 <SetupDMAInterrupts+0x30>
 800bf06:	d909      	bls.n	800bf1c <SetupDMAInterrupts+0x78>
 800bf08:	4a0f      	ldr	r2, [pc, #60]	; (800bf48 <SetupDMAInterrupts+0xa4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d0f0      	beq.n	800bef0 <SetupDMAInterrupts+0x4c>
 800bf0e:	4a0f      	ldr	r2, [pc, #60]	; (800bf4c <SetupDMAInterrupts+0xa8>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d0ed      	beq.n	800bef0 <SetupDMAInterrupts+0x4c>
 800bf14:	4a0e      	ldr	r2, [pc, #56]	; (800bf50 <SetupDMAInterrupts+0xac>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d1d8      	bne.n	800becc <SetupDMAInterrupts+0x28>
 800bf1a:	e7e9      	b.n	800bef0 <SetupDMAInterrupts+0x4c>
 800bf1c:	4a0d      	ldr	r2, [pc, #52]	; (800bf54 <SetupDMAInterrupts+0xb0>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d0e6      	beq.n	800bef0 <SetupDMAInterrupts+0x4c>
 800bf22:	4a0d      	ldr	r2, [pc, #52]	; (800bf58 <SetupDMAInterrupts+0xb4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d0d5      	beq.n	800bed4 <SetupDMAInterrupts+0x30>
 800bf28:	e7d0      	b.n	800becc <SetupDMAInterrupts+0x28>
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	4002006c 	.word	0x4002006c
 800bf30:	40020030 	.word	0x40020030
 800bf34:	40020008 	.word	0x40020008
 800bf38:	4002001c 	.word	0x4002001c
 800bf3c:	40020044 	.word	0x40020044
 800bf40:	40020058 	.word	0x40020058
 800bf44:	4002041c 	.word	0x4002041c
 800bf48:	40020444 	.word	0x40020444
 800bf4c:	40020458 	.word	0x40020458
 800bf50:	40020430 	.word	0x40020430
 800bf54:	40020080 	.word	0x40020080
 800bf58:	40020408 	.word	0x40020408

0800bf5c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800bf5c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bf5e:	6803      	ldr	r3, [r0, #0]
 800bf60:	4a1a      	ldr	r2, [pc, #104]	; (800bfcc <UnSetupDMAInterrupts+0x70>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d018      	beq.n	800bf98 <UnSetupDMAInterrupts+0x3c>
 800bf66:	d81b      	bhi.n	800bfa0 <UnSetupDMAInterrupts+0x44>
 800bf68:	4a19      	ldr	r2, [pc, #100]	; (800bfd0 <UnSetupDMAInterrupts+0x74>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d00a      	beq.n	800bf84 <UnSetupDMAInterrupts+0x28>
 800bf6e:	d80d      	bhi.n	800bf8c <UnSetupDMAInterrupts+0x30>
 800bf70:	4a18      	ldr	r2, [pc, #96]	; (800bfd4 <UnSetupDMAInterrupts+0x78>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d103      	bne.n	800bf7e <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800bf76:	2009      	movs	r0, #9
 800bf78:	f004 fa10 	bl	801039c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800bf7c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bf7e:	4a16      	ldr	r2, [pc, #88]	; (800bfd8 <UnSetupDMAInterrupts+0x7c>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d1fb      	bne.n	800bf7c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bf84:	200a      	movs	r0, #10
 800bf86:	f004 fa09 	bl	801039c <HAL_NVIC_DisableIRQ>
			break;
 800bf8a:	e7f7      	b.n	800bf7c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bf8c:	4a13      	ldr	r2, [pc, #76]	; (800bfdc <UnSetupDMAInterrupts+0x80>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d002      	beq.n	800bf98 <UnSetupDMAInterrupts+0x3c>
 800bf92:	4a13      	ldr	r2, [pc, #76]	; (800bfe0 <UnSetupDMAInterrupts+0x84>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d1f1      	bne.n	800bf7c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bf98:	200b      	movs	r0, #11
 800bf9a:	f004 f9ff 	bl	801039c <HAL_NVIC_DisableIRQ>
}
 800bf9e:	e7ed      	b.n	800bf7c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bfa0:	4a10      	ldr	r2, [pc, #64]	; (800bfe4 <UnSetupDMAInterrupts+0x88>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d0ee      	beq.n	800bf84 <UnSetupDMAInterrupts+0x28>
 800bfa6:	d909      	bls.n	800bfbc <UnSetupDMAInterrupts+0x60>
 800bfa8:	4a0f      	ldr	r2, [pc, #60]	; (800bfe8 <UnSetupDMAInterrupts+0x8c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d0f4      	beq.n	800bf98 <UnSetupDMAInterrupts+0x3c>
 800bfae:	4a0f      	ldr	r2, [pc, #60]	; (800bfec <UnSetupDMAInterrupts+0x90>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d0f1      	beq.n	800bf98 <UnSetupDMAInterrupts+0x3c>
 800bfb4:	4a0e      	ldr	r2, [pc, #56]	; (800bff0 <UnSetupDMAInterrupts+0x94>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d1e0      	bne.n	800bf7c <UnSetupDMAInterrupts+0x20>
 800bfba:	e7ed      	b.n	800bf98 <UnSetupDMAInterrupts+0x3c>
 800bfbc:	4a0d      	ldr	r2, [pc, #52]	; (800bff4 <UnSetupDMAInterrupts+0x98>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d0ea      	beq.n	800bf98 <UnSetupDMAInterrupts+0x3c>
 800bfc2:	4a0d      	ldr	r2, [pc, #52]	; (800bff8 <UnSetupDMAInterrupts+0x9c>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d0dd      	beq.n	800bf84 <UnSetupDMAInterrupts+0x28>
 800bfc8:	e7d8      	b.n	800bf7c <UnSetupDMAInterrupts+0x20>
 800bfca:	46c0      	nop			; (mov r8, r8)
 800bfcc:	4002006c 	.word	0x4002006c
 800bfd0:	40020030 	.word	0x40020030
 800bfd4:	40020008 	.word	0x40020008
 800bfd8:	4002001c 	.word	0x4002001c
 800bfdc:	40020044 	.word	0x40020044
 800bfe0:	40020058 	.word	0x40020058
 800bfe4:	4002041c 	.word	0x4002041c
 800bfe8:	40020444 	.word	0x40020444
 800bfec:	40020458 	.word	0x40020458
 800bff0:	40020430 	.word	0x40020430
 800bff4:	40020080 	.word	0x40020080
 800bff8:	40020408 	.word	0x40020408

0800bffc <DMA_MSG_TX_UnSetup>:
{	
 800bffc:	b510      	push	{r4, lr}
 800bffe:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c000:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c002:	f7ff ffab 	bl	800bf5c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c006:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c008:	2300      	movs	r3, #0
 800c00a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c00c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c00e:	bd10      	pop	{r4, pc}

0800c010 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c010:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c012:	6803      	ldr	r3, [r0, #0]
 800c014:	4abd      	ldr	r2, [pc, #756]	; (800c30c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d02f      	beq.n	800c07a <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c01a:	4abd      	ldr	r2, [pc, #756]	; (800c310 <RemapAndLinkDMAtoUARTRx+0x300>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d100      	bne.n	800c022 <RemapAndLinkDMAtoUARTRx+0x12>
 800c020:	e087      	b.n	800c132 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c022:	4abc      	ldr	r2, [pc, #752]	; (800c314 <RemapAndLinkDMAtoUARTRx+0x304>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d100      	bne.n	800c02a <RemapAndLinkDMAtoUARTRx+0x1a>
 800c028:	e0dc      	b.n	800c1e4 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c02a:	4abb      	ldr	r2, [pc, #748]	; (800c318 <RemapAndLinkDMAtoUARTRx+0x308>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d000      	beq.n	800c032 <RemapAndLinkDMAtoUARTRx+0x22>
 800c030:	e18a      	b.n	800c348 <RemapAndLinkDMAtoUARTRx+0x338>
 800c032:	680b      	ldr	r3, [r1, #0]
 800c034:	4ab9      	ldr	r2, [pc, #740]	; (800c31c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d100      	bne.n	800c03c <RemapAndLinkDMAtoUARTRx+0x2c>
 800c03a:	e12d      	b.n	800c298 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c03c:	4ab8      	ldr	r2, [pc, #736]	; (800c320 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d100      	bne.n	800c044 <RemapAndLinkDMAtoUARTRx+0x34>
 800c042:	e134      	b.n	800c2ae <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c044:	4ab7      	ldr	r2, [pc, #732]	; (800c324 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d100      	bne.n	800c04c <RemapAndLinkDMAtoUARTRx+0x3c>
 800c04a:	e13c      	b.n	800c2c6 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c04c:	4ab6      	ldr	r2, [pc, #728]	; (800c328 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d100      	bne.n	800c054 <RemapAndLinkDMAtoUARTRx+0x44>
 800c052:	e144      	b.n	800c2de <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c054:	4ab5      	ldr	r2, [pc, #724]	; (800c32c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d100      	bne.n	800c05c <RemapAndLinkDMAtoUARTRx+0x4c>
 800c05a:	e14c      	b.n	800c2f6 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c05c:	4ab4      	ldr	r2, [pc, #720]	; (800c330 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d11e      	bne.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c062:	4ab4      	ldr	r2, [pc, #720]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c064:	23a8      	movs	r3, #168	; 0xa8
 800c066:	58d4      	ldr	r4, [r2, r3]
 800c068:	4db3      	ldr	r5, [pc, #716]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c06a:	402c      	ands	r4, r5
 800c06c:	50d4      	str	r4, [r2, r3]
 800c06e:	58d5      	ldr	r5, [r2, r3]
 800c070:	24b0      	movs	r4, #176	; 0xb0
 800c072:	0124      	lsls	r4, r4, #4
 800c074:	432c      	orrs	r4, r5
 800c076:	50d4      	str	r4, [r2, r3]
 800c078:	e012      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c07a:	680b      	ldr	r3, [r1, #0]
 800c07c:	4aa7      	ldr	r2, [pc, #668]	; (800c31c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d011      	beq.n	800c0a6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c082:	4aa7      	ldr	r2, [pc, #668]	; (800c320 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d019      	beq.n	800c0bc <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c088:	4aa6      	ldr	r2, [pc, #664]	; (800c324 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d022      	beq.n	800c0d4 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c08e:	4aa6      	ldr	r2, [pc, #664]	; (800c328 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d02b      	beq.n	800c0ec <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c094:	4aa5      	ldr	r2, [pc, #660]	; (800c32c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d034      	beq.n	800c104 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c09a:	4aa5      	ldr	r2, [pc, #660]	; (800c330 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d03c      	beq.n	800c11a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c0a0:	6641      	str	r1, [r0, #100]	; 0x64
 800c0a2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c0a6:	4aa5      	ldr	r2, [pc, #660]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0a8:	23a8      	movs	r3, #168	; 0xa8
 800c0aa:	58d4      	ldr	r4, [r2, r3]
 800c0ac:	250f      	movs	r5, #15
 800c0ae:	43ac      	bics	r4, r5
 800c0b0:	50d4      	str	r4, [r2, r3]
 800c0b2:	58d4      	ldr	r4, [r2, r3]
 800c0b4:	3d07      	subs	r5, #7
 800c0b6:	432c      	orrs	r4, r5
 800c0b8:	50d4      	str	r4, [r2, r3]
 800c0ba:	e7f1      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c0bc:	4a9f      	ldr	r2, [pc, #636]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0be:	23a8      	movs	r3, #168	; 0xa8
 800c0c0:	58d4      	ldr	r4, [r2, r3]
 800c0c2:	4d9d      	ldr	r5, [pc, #628]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c0c4:	402c      	ands	r4, r5
 800c0c6:	50d4      	str	r4, [r2, r3]
 800c0c8:	58d5      	ldr	r5, [r2, r3]
 800c0ca:	2480      	movs	r4, #128	; 0x80
 800c0cc:	0124      	lsls	r4, r4, #4
 800c0ce:	432c      	orrs	r4, r5
 800c0d0:	50d4      	str	r4, [r2, r3]
 800c0d2:	e7e5      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c0d4:	4a99      	ldr	r2, [pc, #612]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0d6:	23a8      	movs	r3, #168	; 0xa8
 800c0d8:	58d4      	ldr	r4, [r2, r3]
 800c0da:	4d99      	ldr	r5, [pc, #612]	; (800c340 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c0dc:	402c      	ands	r4, r5
 800c0de:	50d4      	str	r4, [r2, r3]
 800c0e0:	58d5      	ldr	r5, [r2, r3]
 800c0e2:	2480      	movs	r4, #128	; 0x80
 800c0e4:	0324      	lsls	r4, r4, #12
 800c0e6:	432c      	orrs	r4, r5
 800c0e8:	50d4      	str	r4, [r2, r3]
 800c0ea:	e7d9      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c0ec:	4a93      	ldr	r2, [pc, #588]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0ee:	23a8      	movs	r3, #168	; 0xa8
 800c0f0:	58d4      	ldr	r4, [r2, r3]
 800c0f2:	4d94      	ldr	r5, [pc, #592]	; (800c344 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c0f4:	402c      	ands	r4, r5
 800c0f6:	50d4      	str	r4, [r2, r3]
 800c0f8:	58d5      	ldr	r5, [r2, r3]
 800c0fa:	2480      	movs	r4, #128	; 0x80
 800c0fc:	0424      	lsls	r4, r4, #16
 800c0fe:	432c      	orrs	r4, r5
 800c100:	50d4      	str	r4, [r2, r3]
 800c102:	e7cd      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c104:	4a8b      	ldr	r2, [pc, #556]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c106:	23a8      	movs	r3, #168	; 0xa8
 800c108:	58d4      	ldr	r4, [r2, r3]
 800c10a:	25f0      	movs	r5, #240	; 0xf0
 800c10c:	43ac      	bics	r4, r5
 800c10e:	50d4      	str	r4, [r2, r3]
 800c110:	58d4      	ldr	r4, [r2, r3]
 800c112:	3d70      	subs	r5, #112	; 0x70
 800c114:	432c      	orrs	r4, r5
 800c116:	50d4      	str	r4, [r2, r3]
 800c118:	e7c2      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c11a:	4a86      	ldr	r2, [pc, #536]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c11c:	23a8      	movs	r3, #168	; 0xa8
 800c11e:	58d4      	ldr	r4, [r2, r3]
 800c120:	4d85      	ldr	r5, [pc, #532]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c122:	402c      	ands	r4, r5
 800c124:	50d4      	str	r4, [r2, r3]
 800c126:	58d5      	ldr	r5, [r2, r3]
 800c128:	2480      	movs	r4, #128	; 0x80
 800c12a:	0124      	lsls	r4, r4, #4
 800c12c:	432c      	orrs	r4, r5
 800c12e:	50d4      	str	r4, [r2, r3]
 800c130:	e7b6      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c132:	680b      	ldr	r3, [r1, #0]
 800c134:	4a79      	ldr	r2, [pc, #484]	; (800c31c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d01a      	beq.n	800c170 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c13a:	4a79      	ldr	r2, [pc, #484]	; (800c320 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d022      	beq.n	800c186 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c140:	4a78      	ldr	r2, [pc, #480]	; (800c324 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d02b      	beq.n	800c19e <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c146:	4a78      	ldr	r2, [pc, #480]	; (800c328 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d034      	beq.n	800c1b6 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c14c:	4a77      	ldr	r2, [pc, #476]	; (800c32c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d03d      	beq.n	800c1ce <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c152:	4a77      	ldr	r2, [pc, #476]	; (800c330 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d1a3      	bne.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c158:	4a76      	ldr	r2, [pc, #472]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c15a:	23a8      	movs	r3, #168	; 0xa8
 800c15c:	58d4      	ldr	r4, [r2, r3]
 800c15e:	4d76      	ldr	r5, [pc, #472]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c160:	402c      	ands	r4, r5
 800c162:	50d4      	str	r4, [r2, r3]
 800c164:	58d5      	ldr	r5, [r2, r3]
 800c166:	2490      	movs	r4, #144	; 0x90
 800c168:	0124      	lsls	r4, r4, #4
 800c16a:	432c      	orrs	r4, r5
 800c16c:	50d4      	str	r4, [r2, r3]
 800c16e:	e797      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c170:	4a72      	ldr	r2, [pc, #456]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c172:	23a8      	movs	r3, #168	; 0xa8
 800c174:	58d4      	ldr	r4, [r2, r3]
 800c176:	250f      	movs	r5, #15
 800c178:	43ac      	bics	r4, r5
 800c17a:	50d4      	str	r4, [r2, r3]
 800c17c:	58d4      	ldr	r4, [r2, r3]
 800c17e:	3d06      	subs	r5, #6
 800c180:	432c      	orrs	r4, r5
 800c182:	50d4      	str	r4, [r2, r3]
 800c184:	e78c      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c186:	4a6d      	ldr	r2, [pc, #436]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c188:	23a8      	movs	r3, #168	; 0xa8
 800c18a:	58d4      	ldr	r4, [r2, r3]
 800c18c:	4d6a      	ldr	r5, [pc, #424]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c18e:	402c      	ands	r4, r5
 800c190:	50d4      	str	r4, [r2, r3]
 800c192:	58d5      	ldr	r5, [r2, r3]
 800c194:	2490      	movs	r4, #144	; 0x90
 800c196:	0124      	lsls	r4, r4, #4
 800c198:	432c      	orrs	r4, r5
 800c19a:	50d4      	str	r4, [r2, r3]
 800c19c:	e780      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c19e:	4a67      	ldr	r2, [pc, #412]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c1a0:	23a8      	movs	r3, #168	; 0xa8
 800c1a2:	58d4      	ldr	r4, [r2, r3]
 800c1a4:	4d66      	ldr	r5, [pc, #408]	; (800c340 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c1a6:	402c      	ands	r4, r5
 800c1a8:	50d4      	str	r4, [r2, r3]
 800c1aa:	58d5      	ldr	r5, [r2, r3]
 800c1ac:	2490      	movs	r4, #144	; 0x90
 800c1ae:	0324      	lsls	r4, r4, #12
 800c1b0:	432c      	orrs	r4, r5
 800c1b2:	50d4      	str	r4, [r2, r3]
 800c1b4:	e774      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c1b6:	4a61      	ldr	r2, [pc, #388]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c1b8:	23a8      	movs	r3, #168	; 0xa8
 800c1ba:	58d4      	ldr	r4, [r2, r3]
 800c1bc:	4d61      	ldr	r5, [pc, #388]	; (800c344 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c1be:	402c      	ands	r4, r5
 800c1c0:	50d4      	str	r4, [r2, r3]
 800c1c2:	58d5      	ldr	r5, [r2, r3]
 800c1c4:	2490      	movs	r4, #144	; 0x90
 800c1c6:	0424      	lsls	r4, r4, #16
 800c1c8:	432c      	orrs	r4, r5
 800c1ca:	50d4      	str	r4, [r2, r3]
 800c1cc:	e768      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c1ce:	4a59      	ldr	r2, [pc, #356]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c1d0:	23a8      	movs	r3, #168	; 0xa8
 800c1d2:	58d4      	ldr	r4, [r2, r3]
 800c1d4:	25f0      	movs	r5, #240	; 0xf0
 800c1d6:	43ac      	bics	r4, r5
 800c1d8:	50d4      	str	r4, [r2, r3]
 800c1da:	58d4      	ldr	r4, [r2, r3]
 800c1dc:	3d60      	subs	r5, #96	; 0x60
 800c1de:	432c      	orrs	r4, r5
 800c1e0:	50d4      	str	r4, [r2, r3]
 800c1e2:	e75d      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c1e4:	680b      	ldr	r3, [r1, #0]
 800c1e6:	4a4d      	ldr	r2, [pc, #308]	; (800c31c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d01b      	beq.n	800c224 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c1ec:	4a4c      	ldr	r2, [pc, #304]	; (800c320 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d023      	beq.n	800c23a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c1f2:	4a4c      	ldr	r2, [pc, #304]	; (800c324 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d02c      	beq.n	800c252 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c1f8:	4a4b      	ldr	r2, [pc, #300]	; (800c328 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d035      	beq.n	800c26a <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c1fe:	4a4b      	ldr	r2, [pc, #300]	; (800c32c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d03e      	beq.n	800c282 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c204:	4a4a      	ldr	r2, [pc, #296]	; (800c330 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d000      	beq.n	800c20c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800c20a:	e749      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c20c:	4a49      	ldr	r2, [pc, #292]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c20e:	23a8      	movs	r3, #168	; 0xa8
 800c210:	58d4      	ldr	r4, [r2, r3]
 800c212:	4d49      	ldr	r5, [pc, #292]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c214:	402c      	ands	r4, r5
 800c216:	50d4      	str	r4, [r2, r3]
 800c218:	58d5      	ldr	r5, [r2, r3]
 800c21a:	24a0      	movs	r4, #160	; 0xa0
 800c21c:	0124      	lsls	r4, r4, #4
 800c21e:	432c      	orrs	r4, r5
 800c220:	50d4      	str	r4, [r2, r3]
 800c222:	e73d      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c224:	4a45      	ldr	r2, [pc, #276]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c226:	23a8      	movs	r3, #168	; 0xa8
 800c228:	58d4      	ldr	r4, [r2, r3]
 800c22a:	250f      	movs	r5, #15
 800c22c:	43ac      	bics	r4, r5
 800c22e:	50d4      	str	r4, [r2, r3]
 800c230:	58d4      	ldr	r4, [r2, r3]
 800c232:	3d05      	subs	r5, #5
 800c234:	432c      	orrs	r4, r5
 800c236:	50d4      	str	r4, [r2, r3]
 800c238:	e732      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c23a:	4a40      	ldr	r2, [pc, #256]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c23c:	23a8      	movs	r3, #168	; 0xa8
 800c23e:	58d4      	ldr	r4, [r2, r3]
 800c240:	4d3d      	ldr	r5, [pc, #244]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c242:	402c      	ands	r4, r5
 800c244:	50d4      	str	r4, [r2, r3]
 800c246:	58d5      	ldr	r5, [r2, r3]
 800c248:	24a0      	movs	r4, #160	; 0xa0
 800c24a:	0124      	lsls	r4, r4, #4
 800c24c:	432c      	orrs	r4, r5
 800c24e:	50d4      	str	r4, [r2, r3]
 800c250:	e726      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c252:	4a3a      	ldr	r2, [pc, #232]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c254:	23a8      	movs	r3, #168	; 0xa8
 800c256:	58d4      	ldr	r4, [r2, r3]
 800c258:	4d39      	ldr	r5, [pc, #228]	; (800c340 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c25a:	402c      	ands	r4, r5
 800c25c:	50d4      	str	r4, [r2, r3]
 800c25e:	58d5      	ldr	r5, [r2, r3]
 800c260:	24a0      	movs	r4, #160	; 0xa0
 800c262:	0324      	lsls	r4, r4, #12
 800c264:	432c      	orrs	r4, r5
 800c266:	50d4      	str	r4, [r2, r3]
 800c268:	e71a      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c26a:	4a34      	ldr	r2, [pc, #208]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c26c:	23a8      	movs	r3, #168	; 0xa8
 800c26e:	58d4      	ldr	r4, [r2, r3]
 800c270:	4d34      	ldr	r5, [pc, #208]	; (800c344 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c272:	402c      	ands	r4, r5
 800c274:	50d4      	str	r4, [r2, r3]
 800c276:	58d5      	ldr	r5, [r2, r3]
 800c278:	24a0      	movs	r4, #160	; 0xa0
 800c27a:	0424      	lsls	r4, r4, #16
 800c27c:	432c      	orrs	r4, r5
 800c27e:	50d4      	str	r4, [r2, r3]
 800c280:	e70e      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c282:	4a2c      	ldr	r2, [pc, #176]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c284:	23a8      	movs	r3, #168	; 0xa8
 800c286:	58d4      	ldr	r4, [r2, r3]
 800c288:	25f0      	movs	r5, #240	; 0xf0
 800c28a:	43ac      	bics	r4, r5
 800c28c:	50d4      	str	r4, [r2, r3]
 800c28e:	58d4      	ldr	r4, [r2, r3]
 800c290:	3d50      	subs	r5, #80	; 0x50
 800c292:	432c      	orrs	r4, r5
 800c294:	50d4      	str	r4, [r2, r3]
 800c296:	e703      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c298:	4a28      	ldr	r2, [pc, #160]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c29a:	23a8      	movs	r3, #168	; 0xa8
 800c29c:	58d4      	ldr	r4, [r2, r3]
 800c29e:	250f      	movs	r5, #15
 800c2a0:	43ac      	bics	r4, r5
 800c2a2:	50d4      	str	r4, [r2, r3]
 800c2a4:	58d4      	ldr	r4, [r2, r3]
 800c2a6:	3d04      	subs	r5, #4
 800c2a8:	432c      	orrs	r4, r5
 800c2aa:	50d4      	str	r4, [r2, r3]
 800c2ac:	e6f8      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c2ae:	4a23      	ldr	r2, [pc, #140]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c2b0:	23a8      	movs	r3, #168	; 0xa8
 800c2b2:	58d4      	ldr	r4, [r2, r3]
 800c2b4:	4d20      	ldr	r5, [pc, #128]	; (800c338 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c2b6:	402c      	ands	r4, r5
 800c2b8:	50d4      	str	r4, [r2, r3]
 800c2ba:	58d5      	ldr	r5, [r2, r3]
 800c2bc:	24b0      	movs	r4, #176	; 0xb0
 800c2be:	0124      	lsls	r4, r4, #4
 800c2c0:	432c      	orrs	r4, r5
 800c2c2:	50d4      	str	r4, [r2, r3]
 800c2c4:	e6ec      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c2c6:	4a1d      	ldr	r2, [pc, #116]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c2c8:	23a8      	movs	r3, #168	; 0xa8
 800c2ca:	58d4      	ldr	r4, [r2, r3]
 800c2cc:	4d1c      	ldr	r5, [pc, #112]	; (800c340 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c2ce:	402c      	ands	r4, r5
 800c2d0:	50d4      	str	r4, [r2, r3]
 800c2d2:	58d5      	ldr	r5, [r2, r3]
 800c2d4:	24b0      	movs	r4, #176	; 0xb0
 800c2d6:	0324      	lsls	r4, r4, #12
 800c2d8:	432c      	orrs	r4, r5
 800c2da:	50d4      	str	r4, [r2, r3]
 800c2dc:	e6e0      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c2de:	4a17      	ldr	r2, [pc, #92]	; (800c33c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c2e0:	23a8      	movs	r3, #168	; 0xa8
 800c2e2:	58d4      	ldr	r4, [r2, r3]
 800c2e4:	4d17      	ldr	r5, [pc, #92]	; (800c344 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c2e6:	402c      	ands	r4, r5
 800c2e8:	50d4      	str	r4, [r2, r3]
 800c2ea:	58d5      	ldr	r5, [r2, r3]
 800c2ec:	24b0      	movs	r4, #176	; 0xb0
 800c2ee:	0424      	lsls	r4, r4, #16
 800c2f0:	432c      	orrs	r4, r5
 800c2f2:	50d4      	str	r4, [r2, r3]
 800c2f4:	e6d4      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c2f6:	4a0f      	ldr	r2, [pc, #60]	; (800c334 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c2f8:	23a8      	movs	r3, #168	; 0xa8
 800c2fa:	58d4      	ldr	r4, [r2, r3]
 800c2fc:	25f0      	movs	r5, #240	; 0xf0
 800c2fe:	43ac      	bics	r4, r5
 800c300:	50d4      	str	r4, [r2, r3]
 800c302:	58d4      	ldr	r4, [r2, r3]
 800c304:	3d40      	subs	r5, #64	; 0x40
 800c306:	432c      	orrs	r4, r5
 800c308:	50d4      	str	r4, [r2, r3]
 800c30a:	e6c9      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
 800c30c:	40013800 	.word	0x40013800
 800c310:	40004400 	.word	0x40004400
 800c314:	40004800 	.word	0x40004800
 800c318:	40004c00 	.word	0x40004c00
 800c31c:	40020008 	.word	0x40020008
 800c320:	40020030 	.word	0x40020030
 800c324:	40020058 	.word	0x40020058
 800c328:	4002006c 	.word	0x4002006c
 800c32c:	4002041c 	.word	0x4002041c
 800c330:	40020430 	.word	0x40020430
 800c334:	40020400 	.word	0x40020400
 800c338:	fffff0ff 	.word	0xfffff0ff
 800c33c:	40020000 	.word	0x40020000
 800c340:	fff0ffff 	.word	0xfff0ffff
 800c344:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c348:	4ab9      	ldr	r2, [pc, #740]	; (800c630 <RemapAndLinkDMAtoUARTRx+0x620>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d159      	bne.n	800c402 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800c34e:	680b      	ldr	r3, [r1, #0]
 800c350:	4ab8      	ldr	r2, [pc, #736]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d01b      	beq.n	800c38e <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c356:	4ab8      	ldr	r2, [pc, #736]	; (800c638 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d023      	beq.n	800c3a4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c35c:	4ab7      	ldr	r2, [pc, #732]	; (800c63c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d02c      	beq.n	800c3bc <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c362:	4ab7      	ldr	r2, [pc, #732]	; (800c640 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d035      	beq.n	800c3d4 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c368:	4ab6      	ldr	r2, [pc, #728]	; (800c644 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d03e      	beq.n	800c3ec <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c36e:	4ab6      	ldr	r2, [pc, #728]	; (800c648 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d000      	beq.n	800c376 <RemapAndLinkDMAtoUARTRx+0x366>
 800c374:	e694      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c376:	4ab5      	ldr	r2, [pc, #724]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c378:	23a8      	movs	r3, #168	; 0xa8
 800c37a:	58d4      	ldr	r4, [r2, r3]
 800c37c:	4db4      	ldr	r5, [pc, #720]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c37e:	402c      	ands	r4, r5
 800c380:	50d4      	str	r4, [r2, r3]
 800c382:	58d5      	ldr	r5, [r2, r3]
 800c384:	24c0      	movs	r4, #192	; 0xc0
 800c386:	0124      	lsls	r4, r4, #4
 800c388:	432c      	orrs	r4, r5
 800c38a:	50d4      	str	r4, [r2, r3]
 800c38c:	e688      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c38e:	4ab1      	ldr	r2, [pc, #708]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c390:	23a8      	movs	r3, #168	; 0xa8
 800c392:	58d4      	ldr	r4, [r2, r3]
 800c394:	250f      	movs	r5, #15
 800c396:	43ac      	bics	r4, r5
 800c398:	50d4      	str	r4, [r2, r3]
 800c39a:	58d4      	ldr	r4, [r2, r3]
 800c39c:	3d03      	subs	r5, #3
 800c39e:	432c      	orrs	r4, r5
 800c3a0:	50d4      	str	r4, [r2, r3]
 800c3a2:	e67d      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c3a4:	4aab      	ldr	r2, [pc, #684]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3a6:	23a8      	movs	r3, #168	; 0xa8
 800c3a8:	58d4      	ldr	r4, [r2, r3]
 800c3aa:	4da9      	ldr	r5, [pc, #676]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c3ac:	402c      	ands	r4, r5
 800c3ae:	50d4      	str	r4, [r2, r3]
 800c3b0:	58d5      	ldr	r5, [r2, r3]
 800c3b2:	24c0      	movs	r4, #192	; 0xc0
 800c3b4:	0124      	lsls	r4, r4, #4
 800c3b6:	432c      	orrs	r4, r5
 800c3b8:	50d4      	str	r4, [r2, r3]
 800c3ba:	e671      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c3bc:	4aa5      	ldr	r2, [pc, #660]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3be:	23a8      	movs	r3, #168	; 0xa8
 800c3c0:	58d4      	ldr	r4, [r2, r3]
 800c3c2:	4da5      	ldr	r5, [pc, #660]	; (800c658 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c3c4:	402c      	ands	r4, r5
 800c3c6:	50d4      	str	r4, [r2, r3]
 800c3c8:	58d5      	ldr	r5, [r2, r3]
 800c3ca:	24c0      	movs	r4, #192	; 0xc0
 800c3cc:	0324      	lsls	r4, r4, #12
 800c3ce:	432c      	orrs	r4, r5
 800c3d0:	50d4      	str	r4, [r2, r3]
 800c3d2:	e665      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c3d4:	4a9f      	ldr	r2, [pc, #636]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3d6:	23a8      	movs	r3, #168	; 0xa8
 800c3d8:	58d4      	ldr	r4, [r2, r3]
 800c3da:	4da0      	ldr	r5, [pc, #640]	; (800c65c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c3dc:	402c      	ands	r4, r5
 800c3de:	50d4      	str	r4, [r2, r3]
 800c3e0:	58d5      	ldr	r5, [r2, r3]
 800c3e2:	24c0      	movs	r4, #192	; 0xc0
 800c3e4:	0424      	lsls	r4, r4, #16
 800c3e6:	432c      	orrs	r4, r5
 800c3e8:	50d4      	str	r4, [r2, r3]
 800c3ea:	e659      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c3ec:	4a97      	ldr	r2, [pc, #604]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c3ee:	23a8      	movs	r3, #168	; 0xa8
 800c3f0:	58d4      	ldr	r4, [r2, r3]
 800c3f2:	25f0      	movs	r5, #240	; 0xf0
 800c3f4:	43ac      	bics	r4, r5
 800c3f6:	50d4      	str	r4, [r2, r3]
 800c3f8:	58d4      	ldr	r4, [r2, r3]
 800c3fa:	3d30      	subs	r5, #48	; 0x30
 800c3fc:	432c      	orrs	r4, r5
 800c3fe:	50d4      	str	r4, [r2, r3]
 800c400:	e64e      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c402:	4a97      	ldr	r2, [pc, #604]	; (800c660 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d159      	bne.n	800c4bc <RemapAndLinkDMAtoUARTRx+0x4ac>
 800c408:	680b      	ldr	r3, [r1, #0]
 800c40a:	4a8a      	ldr	r2, [pc, #552]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d01b      	beq.n	800c448 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c410:	4a89      	ldr	r2, [pc, #548]	; (800c638 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d023      	beq.n	800c45e <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c416:	4a89      	ldr	r2, [pc, #548]	; (800c63c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d02c      	beq.n	800c476 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c41c:	4a88      	ldr	r2, [pc, #544]	; (800c640 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d035      	beq.n	800c48e <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c422:	4a88      	ldr	r2, [pc, #544]	; (800c644 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d03e      	beq.n	800c4a6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c428:	4a87      	ldr	r2, [pc, #540]	; (800c648 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d000      	beq.n	800c430 <RemapAndLinkDMAtoUARTRx+0x420>
 800c42e:	e637      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c430:	4a86      	ldr	r2, [pc, #536]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c432:	23a8      	movs	r3, #168	; 0xa8
 800c434:	58d4      	ldr	r4, [r2, r3]
 800c436:	4d86      	ldr	r5, [pc, #536]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c438:	402c      	ands	r4, r5
 800c43a:	50d4      	str	r4, [r2, r3]
 800c43c:	58d5      	ldr	r5, [r2, r3]
 800c43e:	24d0      	movs	r4, #208	; 0xd0
 800c440:	0124      	lsls	r4, r4, #4
 800c442:	432c      	orrs	r4, r5
 800c444:	50d4      	str	r4, [r2, r3]
 800c446:	e62b      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c448:	4a82      	ldr	r2, [pc, #520]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c44a:	23a8      	movs	r3, #168	; 0xa8
 800c44c:	58d4      	ldr	r4, [r2, r3]
 800c44e:	250f      	movs	r5, #15
 800c450:	43ac      	bics	r4, r5
 800c452:	50d4      	str	r4, [r2, r3]
 800c454:	58d4      	ldr	r4, [r2, r3]
 800c456:	3d02      	subs	r5, #2
 800c458:	432c      	orrs	r4, r5
 800c45a:	50d4      	str	r4, [r2, r3]
 800c45c:	e620      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c45e:	4a7d      	ldr	r2, [pc, #500]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c460:	23a8      	movs	r3, #168	; 0xa8
 800c462:	58d4      	ldr	r4, [r2, r3]
 800c464:	4d7a      	ldr	r5, [pc, #488]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c466:	402c      	ands	r4, r5
 800c468:	50d4      	str	r4, [r2, r3]
 800c46a:	58d5      	ldr	r5, [r2, r3]
 800c46c:	24d0      	movs	r4, #208	; 0xd0
 800c46e:	0124      	lsls	r4, r4, #4
 800c470:	432c      	orrs	r4, r5
 800c472:	50d4      	str	r4, [r2, r3]
 800c474:	e614      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c476:	4a77      	ldr	r2, [pc, #476]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c478:	23a8      	movs	r3, #168	; 0xa8
 800c47a:	58d4      	ldr	r4, [r2, r3]
 800c47c:	4d76      	ldr	r5, [pc, #472]	; (800c658 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c47e:	402c      	ands	r4, r5
 800c480:	50d4      	str	r4, [r2, r3]
 800c482:	58d5      	ldr	r5, [r2, r3]
 800c484:	24d0      	movs	r4, #208	; 0xd0
 800c486:	0324      	lsls	r4, r4, #12
 800c488:	432c      	orrs	r4, r5
 800c48a:	50d4      	str	r4, [r2, r3]
 800c48c:	e608      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c48e:	4a71      	ldr	r2, [pc, #452]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c490:	23a8      	movs	r3, #168	; 0xa8
 800c492:	58d4      	ldr	r4, [r2, r3]
 800c494:	4d71      	ldr	r5, [pc, #452]	; (800c65c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c496:	402c      	ands	r4, r5
 800c498:	50d4      	str	r4, [r2, r3]
 800c49a:	58d5      	ldr	r5, [r2, r3]
 800c49c:	24d0      	movs	r4, #208	; 0xd0
 800c49e:	0424      	lsls	r4, r4, #16
 800c4a0:	432c      	orrs	r4, r5
 800c4a2:	50d4      	str	r4, [r2, r3]
 800c4a4:	e5fc      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c4a6:	4a69      	ldr	r2, [pc, #420]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c4a8:	23a8      	movs	r3, #168	; 0xa8
 800c4aa:	58d4      	ldr	r4, [r2, r3]
 800c4ac:	25f0      	movs	r5, #240	; 0xf0
 800c4ae:	43ac      	bics	r4, r5
 800c4b0:	50d4      	str	r4, [r2, r3]
 800c4b2:	58d4      	ldr	r4, [r2, r3]
 800c4b4:	3d20      	subs	r5, #32
 800c4b6:	432c      	orrs	r4, r5
 800c4b8:	50d4      	str	r4, [r2, r3]
 800c4ba:	e5f1      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c4bc:	4a69      	ldr	r2, [pc, #420]	; (800c664 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d159      	bne.n	800c576 <RemapAndLinkDMAtoUARTRx+0x566>
 800c4c2:	680b      	ldr	r3, [r1, #0]
 800c4c4:	4a5b      	ldr	r2, [pc, #364]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d01b      	beq.n	800c502 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c4ca:	4a5b      	ldr	r2, [pc, #364]	; (800c638 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d023      	beq.n	800c518 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c4d0:	4a5a      	ldr	r2, [pc, #360]	; (800c63c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d02c      	beq.n	800c530 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c4d6:	4a5a      	ldr	r2, [pc, #360]	; (800c640 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d035      	beq.n	800c548 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c4dc:	4a59      	ldr	r2, [pc, #356]	; (800c644 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d03e      	beq.n	800c560 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c4e2:	4a59      	ldr	r2, [pc, #356]	; (800c648 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d000      	beq.n	800c4ea <RemapAndLinkDMAtoUARTRx+0x4da>
 800c4e8:	e5da      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c4ea:	4a58      	ldr	r2, [pc, #352]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c4ec:	23a8      	movs	r3, #168	; 0xa8
 800c4ee:	58d4      	ldr	r4, [r2, r3]
 800c4f0:	4d57      	ldr	r5, [pc, #348]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c4f2:	402c      	ands	r4, r5
 800c4f4:	50d4      	str	r4, [r2, r3]
 800c4f6:	58d5      	ldr	r5, [r2, r3]
 800c4f8:	24e0      	movs	r4, #224	; 0xe0
 800c4fa:	0124      	lsls	r4, r4, #4
 800c4fc:	432c      	orrs	r4, r5
 800c4fe:	50d4      	str	r4, [r2, r3]
 800c500:	e5ce      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c502:	4a54      	ldr	r2, [pc, #336]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c504:	23a8      	movs	r3, #168	; 0xa8
 800c506:	58d4      	ldr	r4, [r2, r3]
 800c508:	250f      	movs	r5, #15
 800c50a:	43ac      	bics	r4, r5
 800c50c:	50d4      	str	r4, [r2, r3]
 800c50e:	58d4      	ldr	r4, [r2, r3]
 800c510:	3d01      	subs	r5, #1
 800c512:	432c      	orrs	r4, r5
 800c514:	50d4      	str	r4, [r2, r3]
 800c516:	e5c3      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c518:	4a4e      	ldr	r2, [pc, #312]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c51a:	23a8      	movs	r3, #168	; 0xa8
 800c51c:	58d4      	ldr	r4, [r2, r3]
 800c51e:	4d4c      	ldr	r5, [pc, #304]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c520:	402c      	ands	r4, r5
 800c522:	50d4      	str	r4, [r2, r3]
 800c524:	58d5      	ldr	r5, [r2, r3]
 800c526:	24e0      	movs	r4, #224	; 0xe0
 800c528:	0124      	lsls	r4, r4, #4
 800c52a:	432c      	orrs	r4, r5
 800c52c:	50d4      	str	r4, [r2, r3]
 800c52e:	e5b7      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c530:	4a48      	ldr	r2, [pc, #288]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c532:	23a8      	movs	r3, #168	; 0xa8
 800c534:	58d4      	ldr	r4, [r2, r3]
 800c536:	4d48      	ldr	r5, [pc, #288]	; (800c658 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c538:	402c      	ands	r4, r5
 800c53a:	50d4      	str	r4, [r2, r3]
 800c53c:	58d5      	ldr	r5, [r2, r3]
 800c53e:	24e0      	movs	r4, #224	; 0xe0
 800c540:	0324      	lsls	r4, r4, #12
 800c542:	432c      	orrs	r4, r5
 800c544:	50d4      	str	r4, [r2, r3]
 800c546:	e5ab      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c548:	4a42      	ldr	r2, [pc, #264]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c54a:	23a8      	movs	r3, #168	; 0xa8
 800c54c:	58d4      	ldr	r4, [r2, r3]
 800c54e:	4d43      	ldr	r5, [pc, #268]	; (800c65c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c550:	402c      	ands	r4, r5
 800c552:	50d4      	str	r4, [r2, r3]
 800c554:	58d5      	ldr	r5, [r2, r3]
 800c556:	24e0      	movs	r4, #224	; 0xe0
 800c558:	0424      	lsls	r4, r4, #16
 800c55a:	432c      	orrs	r4, r5
 800c55c:	50d4      	str	r4, [r2, r3]
 800c55e:	e59f      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c560:	4a3a      	ldr	r2, [pc, #232]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c562:	23a8      	movs	r3, #168	; 0xa8
 800c564:	58d4      	ldr	r4, [r2, r3]
 800c566:	25f0      	movs	r5, #240	; 0xf0
 800c568:	43ac      	bics	r4, r5
 800c56a:	50d4      	str	r4, [r2, r3]
 800c56c:	58d4      	ldr	r4, [r2, r3]
 800c56e:	3d10      	subs	r5, #16
 800c570:	432c      	orrs	r4, r5
 800c572:	50d4      	str	r4, [r2, r3]
 800c574:	e594      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c576:	4a3c      	ldr	r2, [pc, #240]	; (800c668 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d000      	beq.n	800c57e <RemapAndLinkDMAtoUARTRx+0x56e>
 800c57c:	e590      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
 800c57e:	680b      	ldr	r3, [r1, #0]
 800c580:	4a2c      	ldr	r2, [pc, #176]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d01b      	beq.n	800c5be <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c586:	4a2c      	ldr	r2, [pc, #176]	; (800c638 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d022      	beq.n	800c5d2 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c58c:	4a2b      	ldr	r2, [pc, #172]	; (800c63c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d02b      	beq.n	800c5ea <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c592:	4a2b      	ldr	r2, [pc, #172]	; (800c640 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d034      	beq.n	800c602 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c598:	4a2a      	ldr	r2, [pc, #168]	; (800c644 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d03d      	beq.n	800c61a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c59e:	4a2a      	ldr	r2, [pc, #168]	; (800c648 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d000      	beq.n	800c5a6 <RemapAndLinkDMAtoUARTRx+0x596>
 800c5a4:	e57c      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c5a6:	4a29      	ldr	r2, [pc, #164]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c5a8:	23a8      	movs	r3, #168	; 0xa8
 800c5aa:	58d4      	ldr	r4, [r2, r3]
 800c5ac:	4d28      	ldr	r5, [pc, #160]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c5ae:	402c      	ands	r4, r5
 800c5b0:	50d4      	str	r4, [r2, r3]
 800c5b2:	58d5      	ldr	r5, [r2, r3]
 800c5b4:	24f0      	movs	r4, #240	; 0xf0
 800c5b6:	0124      	lsls	r4, r4, #4
 800c5b8:	432c      	orrs	r4, r5
 800c5ba:	50d4      	str	r4, [r2, r3]
 800c5bc:	e570      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c5be:	4a25      	ldr	r2, [pc, #148]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c5c0:	23a8      	movs	r3, #168	; 0xa8
 800c5c2:	58d5      	ldr	r5, [r2, r3]
 800c5c4:	260f      	movs	r6, #15
 800c5c6:	43b5      	bics	r5, r6
 800c5c8:	50d5      	str	r5, [r2, r3]
 800c5ca:	58d4      	ldr	r4, [r2, r3]
 800c5cc:	4334      	orrs	r4, r6
 800c5ce:	50d4      	str	r4, [r2, r3]
 800c5d0:	e566      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c5d2:	4a20      	ldr	r2, [pc, #128]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c5d4:	23a8      	movs	r3, #168	; 0xa8
 800c5d6:	58d4      	ldr	r4, [r2, r3]
 800c5d8:	4d1d      	ldr	r5, [pc, #116]	; (800c650 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c5da:	402c      	ands	r4, r5
 800c5dc:	50d4      	str	r4, [r2, r3]
 800c5de:	58d5      	ldr	r5, [r2, r3]
 800c5e0:	24f0      	movs	r4, #240	; 0xf0
 800c5e2:	0124      	lsls	r4, r4, #4
 800c5e4:	432c      	orrs	r4, r5
 800c5e6:	50d4      	str	r4, [r2, r3]
 800c5e8:	e55a      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c5ea:	4a1a      	ldr	r2, [pc, #104]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c5ec:	23a8      	movs	r3, #168	; 0xa8
 800c5ee:	58d4      	ldr	r4, [r2, r3]
 800c5f0:	4d19      	ldr	r5, [pc, #100]	; (800c658 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c5f2:	402c      	ands	r4, r5
 800c5f4:	50d4      	str	r4, [r2, r3]
 800c5f6:	58d5      	ldr	r5, [r2, r3]
 800c5f8:	24f0      	movs	r4, #240	; 0xf0
 800c5fa:	0324      	lsls	r4, r4, #12
 800c5fc:	432c      	orrs	r4, r5
 800c5fe:	50d4      	str	r4, [r2, r3]
 800c600:	e54e      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c602:	4a14      	ldr	r2, [pc, #80]	; (800c654 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c604:	23a8      	movs	r3, #168	; 0xa8
 800c606:	58d4      	ldr	r4, [r2, r3]
 800c608:	4d14      	ldr	r5, [pc, #80]	; (800c65c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c60a:	402c      	ands	r4, r5
 800c60c:	50d4      	str	r4, [r2, r3]
 800c60e:	58d5      	ldr	r5, [r2, r3]
 800c610:	24f0      	movs	r4, #240	; 0xf0
 800c612:	0424      	lsls	r4, r4, #16
 800c614:	432c      	orrs	r4, r5
 800c616:	50d4      	str	r4, [r2, r3]
 800c618:	e542      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c61a:	4a0c      	ldr	r2, [pc, #48]	; (800c64c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c61c:	23a8      	movs	r3, #168	; 0xa8
 800c61e:	58d5      	ldr	r5, [r2, r3]
 800c620:	26f0      	movs	r6, #240	; 0xf0
 800c622:	43b5      	bics	r5, r6
 800c624:	50d5      	str	r5, [r2, r3]
 800c626:	58d4      	ldr	r4, [r2, r3]
 800c628:	4334      	orrs	r4, r6
 800c62a:	50d4      	str	r4, [r2, r3]
 800c62c:	e538      	b.n	800c0a0 <RemapAndLinkDMAtoUARTRx+0x90>
 800c62e:	46c0      	nop			; (mov r8, r8)
 800c630:	40005000 	.word	0x40005000
 800c634:	40020008 	.word	0x40020008
 800c638:	40020030 	.word	0x40020030
 800c63c:	40020058 	.word	0x40020058
 800c640:	4002006c 	.word	0x4002006c
 800c644:	4002041c 	.word	0x4002041c
 800c648:	40020430 	.word	0x40020430
 800c64c:	40020400 	.word	0x40020400
 800c650:	fffff0ff 	.word	0xfffff0ff
 800c654:	40020000 	.word	0x40020000
 800c658:	fff0ffff 	.word	0xfff0ffff
 800c65c:	ff0fffff 	.word	0xff0fffff
 800c660:	40011400 	.word	0x40011400
 800c664:	40011800 	.word	0x40011800
 800c668:	40011c00 	.word	0x40011c00

0800c66c <DMA_MSG_RX_Setup>:
{	
 800c66c:	b570      	push	{r4, r5, r6, lr}
 800c66e:	0004      	movs	r4, r0
 800c670:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c672:	f7ff fccd 	bl	800c010 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c676:	2100      	movs	r1, #0
 800c678:	0028      	movs	r0, r5
 800c67a:	f7ff fc13 	bl	800bea4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c67e:	0020      	movs	r0, r4
 800c680:	f7fe ff50 	bl	800b524 <GetPort>
 800c684:	1e41      	subs	r1, r0, #1
 800c686:	0189      	lsls	r1, r1, #6
 800c688:	4803      	ldr	r0, [pc, #12]	; (800c698 <DMA_MSG_RX_Setup+0x2c>)
 800c68a:	1809      	adds	r1, r1, r0
 800c68c:	2240      	movs	r2, #64	; 0x40
 800c68e:	0020      	movs	r0, r4
 800c690:	f006 f87a 	bl	8012788 <HAL_UART_Receive_DMA>
}
 800c694:	bd70      	pop	{r4, r5, r6, pc}
 800c696:	46c0      	nop			; (mov r8, r8)
 800c698:	20000ab8 	.word	0x20000ab8

0800c69c <SetupMessagingRxDMAs>:
{	
 800c69c:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c69e:	4b17      	ldr	r3, [pc, #92]	; (800c6fc <SetupMessagingRxDMAs+0x60>)
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d010      	beq.n	800c6c8 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800c6a6:	4b15      	ldr	r3, [pc, #84]	; (800c6fc <SetupMessagingRxDMAs+0x60>)
 800c6a8:	789b      	ldrb	r3, [r3, #2]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d011      	beq.n	800c6d2 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <SetupMessagingRxDMAs+0x60>)
 800c6b0:	78db      	ldrb	r3, [r3, #3]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d012      	beq.n	800c6dc <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800c6b6:	4b11      	ldr	r3, [pc, #68]	; (800c6fc <SetupMessagingRxDMAs+0x60>)
 800c6b8:	791b      	ldrb	r3, [r3, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d013      	beq.n	800c6e6 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800c6be:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <SetupMessagingRxDMAs+0x60>)
 800c6c0:	795b      	ldrb	r3, [r3, #5]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d014      	beq.n	800c6f0 <SetupMessagingRxDMAs+0x54>
}
 800c6c6:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c6c8:	490d      	ldr	r1, [pc, #52]	; (800c700 <SetupMessagingRxDMAs+0x64>)
 800c6ca:	480e      	ldr	r0, [pc, #56]	; (800c704 <SetupMessagingRxDMAs+0x68>)
 800c6cc:	f7ff ffce 	bl	800c66c <DMA_MSG_RX_Setup>
 800c6d0:	e7e9      	b.n	800c6a6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c6d2:	490d      	ldr	r1, [pc, #52]	; (800c708 <SetupMessagingRxDMAs+0x6c>)
 800c6d4:	480d      	ldr	r0, [pc, #52]	; (800c70c <SetupMessagingRxDMAs+0x70>)
 800c6d6:	f7ff ffc9 	bl	800c66c <DMA_MSG_RX_Setup>
 800c6da:	e7e8      	b.n	800c6ae <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c6dc:	490c      	ldr	r1, [pc, #48]	; (800c710 <SetupMessagingRxDMAs+0x74>)
 800c6de:	480d      	ldr	r0, [pc, #52]	; (800c714 <SetupMessagingRxDMAs+0x78>)
 800c6e0:	f7ff ffc4 	bl	800c66c <DMA_MSG_RX_Setup>
 800c6e4:	e7e7      	b.n	800c6b6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c6e6:	490c      	ldr	r1, [pc, #48]	; (800c718 <SetupMessagingRxDMAs+0x7c>)
 800c6e8:	480c      	ldr	r0, [pc, #48]	; (800c71c <SetupMessagingRxDMAs+0x80>)
 800c6ea:	f7ff ffbf 	bl	800c66c <DMA_MSG_RX_Setup>
 800c6ee:	e7e6      	b.n	800c6be <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c6f0:	490b      	ldr	r1, [pc, #44]	; (800c720 <SetupMessagingRxDMAs+0x84>)
 800c6f2:	480c      	ldr	r0, [pc, #48]	; (800c724 <SetupMessagingRxDMAs+0x88>)
 800c6f4:	f7ff ffba 	bl	800c66c <DMA_MSG_RX_Setup>
}
 800c6f8:	e7e5      	b.n	800c6c6 <SetupMessagingRxDMAs+0x2a>
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	200008e0 	.word	0x200008e0
 800c700:	20000f34 	.word	0x20000f34
 800c704:	200063ec 	.word	0x200063ec
 800c708:	20000f6c 	.word	0x20000f6c
 800c70c:	20006460 	.word	0x20006460
 800c710:	20000fa4 	.word	0x20000fa4
 800c714:	2000637c 	.word	0x2000637c
 800c718:	20000fdc 	.word	0x20000fdc
 800c71c:	20006250 	.word	0x20006250
 800c720:	20001014 	.word	0x20001014
 800c724:	20006304 	.word	0x20006304

0800c728 <DMA_STREAM_Setup>:
{	
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	0005      	movs	r5, r0
 800c72c:	000f      	movs	r7, r1
 800c72e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c730:	f7fe fef8 	bl	800b524 <GetPort>
	hDMA = &streamDMA[port-1];
 800c734:	3801      	subs	r0, #1
 800c736:	00c4      	lsls	r4, r0, #3
 800c738:	1a24      	subs	r4, r4, r0
 800c73a:	00e4      	lsls	r4, r4, #3
 800c73c:	4809      	ldr	r0, [pc, #36]	; (800c764 <DMA_STREAM_Setup+0x3c>)
 800c73e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c740:	0021      	movs	r1, r4
 800c742:	0028      	movs	r0, r5
 800c744:	f7ff fc64 	bl	800c010 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c748:	2101      	movs	r1, #1
 800c74a:	0020      	movs	r0, r4
 800c74c:	f7ff fbaa 	bl	800bea4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c750:	2369      	movs	r3, #105	; 0x69
 800c752:	2201      	movs	r2, #1
 800c754:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	3128      	adds	r1, #40	; 0x28
 800c75a:	0032      	movs	r2, r6
 800c75c:	0028      	movs	r0, r5
 800c75e:	f006 f813 	bl	8012788 <HAL_UART_Receive_DMA>
}
 800c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c764:	2000112c 	.word	0x2000112c

0800c768 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c768:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c76a:	6803      	ldr	r3, [r0, #0]
 800c76c:	4abd      	ldr	r2, [pc, #756]	; (800ca64 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d02f      	beq.n	800c7d2 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c772:	4abd      	ldr	r2, [pc, #756]	; (800ca68 <RemapAndLinkDMAtoUARTTx+0x300>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d100      	bne.n	800c77a <RemapAndLinkDMAtoUARTTx+0x12>
 800c778:	e087      	b.n	800c88a <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c77a:	4abc      	ldr	r2, [pc, #752]	; (800ca6c <RemapAndLinkDMAtoUARTTx+0x304>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d100      	bne.n	800c782 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c780:	e0dc      	b.n	800c93c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c782:	4abb      	ldr	r2, [pc, #748]	; (800ca70 <RemapAndLinkDMAtoUARTTx+0x308>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d000      	beq.n	800c78a <RemapAndLinkDMAtoUARTTx+0x22>
 800c788:	e18a      	b.n	800caa0 <RemapAndLinkDMAtoUARTTx+0x338>
 800c78a:	680b      	ldr	r3, [r1, #0]
 800c78c:	4ab9      	ldr	r2, [pc, #740]	; (800ca74 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d100      	bne.n	800c794 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c792:	e12d      	b.n	800c9f0 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c794:	4ab8      	ldr	r2, [pc, #736]	; (800ca78 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d100      	bne.n	800c79c <RemapAndLinkDMAtoUARTTx+0x34>
 800c79a:	e134      	b.n	800ca06 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c79c:	4ab7      	ldr	r2, [pc, #732]	; (800ca7c <RemapAndLinkDMAtoUARTTx+0x314>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d100      	bne.n	800c7a4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800c7a2:	e13c      	b.n	800ca1e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c7a4:	4ab6      	ldr	r2, [pc, #728]	; (800ca80 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d100      	bne.n	800c7ac <RemapAndLinkDMAtoUARTTx+0x44>
 800c7aa:	e144      	b.n	800ca36 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c7ac:	4ab5      	ldr	r2, [pc, #724]	; (800ca84 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d100      	bne.n	800c7b4 <RemapAndLinkDMAtoUARTTx+0x4c>
 800c7b2:	e14b      	b.n	800ca4c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c7b4:	4ab4      	ldr	r2, [pc, #720]	; (800ca88 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d11e      	bne.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c7ba:	4ab4      	ldr	r2, [pc, #720]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c7bc:	23a8      	movs	r3, #168	; 0xa8
 800c7be:	58d4      	ldr	r4, [r2, r3]
 800c7c0:	4db3      	ldr	r5, [pc, #716]	; (800ca90 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c7c2:	402c      	ands	r4, r5
 800c7c4:	50d4      	str	r4, [r2, r3]
 800c7c6:	58d5      	ldr	r5, [r2, r3]
 800c7c8:	24b0      	movs	r4, #176	; 0xb0
 800c7ca:	0324      	lsls	r4, r4, #12
 800c7cc:	432c      	orrs	r4, r5
 800c7ce:	50d4      	str	r4, [r2, r3]
 800c7d0:	e012      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c7d2:	680b      	ldr	r3, [r1, #0]
 800c7d4:	4aa7      	ldr	r2, [pc, #668]	; (800ca74 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d011      	beq.n	800c7fe <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c7da:	4aa7      	ldr	r2, [pc, #668]	; (800ca78 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d019      	beq.n	800c814 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c7e0:	4aa6      	ldr	r2, [pc, #664]	; (800ca7c <RemapAndLinkDMAtoUARTTx+0x314>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d022      	beq.n	800c82c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c7e6:	4aa6      	ldr	r2, [pc, #664]	; (800ca80 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d02b      	beq.n	800c844 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c7ec:	4aa5      	ldr	r2, [pc, #660]	; (800ca84 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d033      	beq.n	800c85a <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c7f2:	4aa5      	ldr	r2, [pc, #660]	; (800ca88 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d03c      	beq.n	800c872 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c7f8:	6601      	str	r1, [r0, #96]	; 0x60
 800c7fa:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c7fe:	4aa5      	ldr	r2, [pc, #660]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c800:	23a8      	movs	r3, #168	; 0xa8
 800c802:	58d4      	ldr	r4, [r2, r3]
 800c804:	25f0      	movs	r5, #240	; 0xf0
 800c806:	43ac      	bics	r4, r5
 800c808:	50d4      	str	r4, [r2, r3]
 800c80a:	58d4      	ldr	r4, [r2, r3]
 800c80c:	3d70      	subs	r5, #112	; 0x70
 800c80e:	432c      	orrs	r4, r5
 800c810:	50d4      	str	r4, [r2, r3]
 800c812:	e7f1      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c814:	4a9f      	ldr	r2, [pc, #636]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c816:	23a8      	movs	r3, #168	; 0xa8
 800c818:	58d4      	ldr	r4, [r2, r3]
 800c81a:	4d9f      	ldr	r5, [pc, #636]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c81c:	402c      	ands	r4, r5
 800c81e:	50d4      	str	r4, [r2, r3]
 800c820:	58d5      	ldr	r5, [r2, r3]
 800c822:	2480      	movs	r4, #128	; 0x80
 800c824:	0224      	lsls	r4, r4, #8
 800c826:	432c      	orrs	r4, r5
 800c828:	50d4      	str	r4, [r2, r3]
 800c82a:	e7e5      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c82c:	4a99      	ldr	r2, [pc, #612]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c82e:	23a8      	movs	r3, #168	; 0xa8
 800c830:	58d4      	ldr	r4, [r2, r3]
 800c832:	4d9a      	ldr	r5, [pc, #616]	; (800ca9c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c834:	402c      	ands	r4, r5
 800c836:	50d4      	str	r4, [r2, r3]
 800c838:	58d5      	ldr	r5, [r2, r3]
 800c83a:	2480      	movs	r4, #128	; 0x80
 800c83c:	0524      	lsls	r4, r4, #20
 800c83e:	432c      	orrs	r4, r5
 800c840:	50d4      	str	r4, [r2, r3]
 800c842:	e7d9      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c844:	4a91      	ldr	r2, [pc, #580]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c846:	23a8      	movs	r3, #168	; 0xa8
 800c848:	58d4      	ldr	r4, [r2, r3]
 800c84a:	250f      	movs	r5, #15
 800c84c:	43ac      	bics	r4, r5
 800c84e:	50d4      	str	r4, [r2, r3]
 800c850:	58d4      	ldr	r4, [r2, r3]
 800c852:	3d07      	subs	r5, #7
 800c854:	432c      	orrs	r4, r5
 800c856:	50d4      	str	r4, [r2, r3]
 800c858:	e7ce      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c85a:	4a8c      	ldr	r2, [pc, #560]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c85c:	23a8      	movs	r3, #168	; 0xa8
 800c85e:	58d4      	ldr	r4, [r2, r3]
 800c860:	4d8d      	ldr	r5, [pc, #564]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c862:	402c      	ands	r4, r5
 800c864:	50d4      	str	r4, [r2, r3]
 800c866:	58d5      	ldr	r5, [r2, r3]
 800c868:	2480      	movs	r4, #128	; 0x80
 800c86a:	0224      	lsls	r4, r4, #8
 800c86c:	432c      	orrs	r4, r5
 800c86e:	50d4      	str	r4, [r2, r3]
 800c870:	e7c2      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c872:	4a86      	ldr	r2, [pc, #536]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c874:	23a8      	movs	r3, #168	; 0xa8
 800c876:	58d4      	ldr	r4, [r2, r3]
 800c878:	4d85      	ldr	r5, [pc, #532]	; (800ca90 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c87a:	402c      	ands	r4, r5
 800c87c:	50d4      	str	r4, [r2, r3]
 800c87e:	58d5      	ldr	r5, [r2, r3]
 800c880:	2480      	movs	r4, #128	; 0x80
 800c882:	0324      	lsls	r4, r4, #12
 800c884:	432c      	orrs	r4, r5
 800c886:	50d4      	str	r4, [r2, r3]
 800c888:	e7b6      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c88a:	680b      	ldr	r3, [r1, #0]
 800c88c:	4a79      	ldr	r2, [pc, #484]	; (800ca74 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d01a      	beq.n	800c8c8 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c892:	4a79      	ldr	r2, [pc, #484]	; (800ca78 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d022      	beq.n	800c8de <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c898:	4a78      	ldr	r2, [pc, #480]	; (800ca7c <RemapAndLinkDMAtoUARTTx+0x314>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d02b      	beq.n	800c8f6 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c89e:	4a78      	ldr	r2, [pc, #480]	; (800ca80 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d034      	beq.n	800c90e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c8a4:	4a77      	ldr	r2, [pc, #476]	; (800ca84 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d03c      	beq.n	800c924 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c8aa:	4a77      	ldr	r2, [pc, #476]	; (800ca88 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d1a3      	bne.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c8b0:	4a76      	ldr	r2, [pc, #472]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c8b2:	23a8      	movs	r3, #168	; 0xa8
 800c8b4:	58d4      	ldr	r4, [r2, r3]
 800c8b6:	4d76      	ldr	r5, [pc, #472]	; (800ca90 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c8b8:	402c      	ands	r4, r5
 800c8ba:	50d4      	str	r4, [r2, r3]
 800c8bc:	58d5      	ldr	r5, [r2, r3]
 800c8be:	2490      	movs	r4, #144	; 0x90
 800c8c0:	0324      	lsls	r4, r4, #12
 800c8c2:	432c      	orrs	r4, r5
 800c8c4:	50d4      	str	r4, [r2, r3]
 800c8c6:	e797      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c8c8:	4a72      	ldr	r2, [pc, #456]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c8ca:	23a8      	movs	r3, #168	; 0xa8
 800c8cc:	58d4      	ldr	r4, [r2, r3]
 800c8ce:	25f0      	movs	r5, #240	; 0xf0
 800c8d0:	43ac      	bics	r4, r5
 800c8d2:	50d4      	str	r4, [r2, r3]
 800c8d4:	58d4      	ldr	r4, [r2, r3]
 800c8d6:	3d60      	subs	r5, #96	; 0x60
 800c8d8:	432c      	orrs	r4, r5
 800c8da:	50d4      	str	r4, [r2, r3]
 800c8dc:	e78c      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c8de:	4a6d      	ldr	r2, [pc, #436]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c8e0:	23a8      	movs	r3, #168	; 0xa8
 800c8e2:	58d4      	ldr	r4, [r2, r3]
 800c8e4:	4d6c      	ldr	r5, [pc, #432]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c8e6:	402c      	ands	r4, r5
 800c8e8:	50d4      	str	r4, [r2, r3]
 800c8ea:	58d5      	ldr	r5, [r2, r3]
 800c8ec:	2490      	movs	r4, #144	; 0x90
 800c8ee:	0224      	lsls	r4, r4, #8
 800c8f0:	432c      	orrs	r4, r5
 800c8f2:	50d4      	str	r4, [r2, r3]
 800c8f4:	e780      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c8f6:	4a67      	ldr	r2, [pc, #412]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c8f8:	23a8      	movs	r3, #168	; 0xa8
 800c8fa:	58d4      	ldr	r4, [r2, r3]
 800c8fc:	4d67      	ldr	r5, [pc, #412]	; (800ca9c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c8fe:	402c      	ands	r4, r5
 800c900:	50d4      	str	r4, [r2, r3]
 800c902:	58d5      	ldr	r5, [r2, r3]
 800c904:	2490      	movs	r4, #144	; 0x90
 800c906:	0524      	lsls	r4, r4, #20
 800c908:	432c      	orrs	r4, r5
 800c90a:	50d4      	str	r4, [r2, r3]
 800c90c:	e774      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c90e:	4a5f      	ldr	r2, [pc, #380]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c910:	23a8      	movs	r3, #168	; 0xa8
 800c912:	58d4      	ldr	r4, [r2, r3]
 800c914:	250f      	movs	r5, #15
 800c916:	43ac      	bics	r4, r5
 800c918:	50d4      	str	r4, [r2, r3]
 800c91a:	58d4      	ldr	r4, [r2, r3]
 800c91c:	3d06      	subs	r5, #6
 800c91e:	432c      	orrs	r4, r5
 800c920:	50d4      	str	r4, [r2, r3]
 800c922:	e769      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c924:	4a59      	ldr	r2, [pc, #356]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c926:	23a8      	movs	r3, #168	; 0xa8
 800c928:	58d4      	ldr	r4, [r2, r3]
 800c92a:	4d5b      	ldr	r5, [pc, #364]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c92c:	402c      	ands	r4, r5
 800c92e:	50d4      	str	r4, [r2, r3]
 800c930:	58d5      	ldr	r5, [r2, r3]
 800c932:	2490      	movs	r4, #144	; 0x90
 800c934:	0224      	lsls	r4, r4, #8
 800c936:	432c      	orrs	r4, r5
 800c938:	50d4      	str	r4, [r2, r3]
 800c93a:	e75d      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c93c:	680b      	ldr	r3, [r1, #0]
 800c93e:	4a4d      	ldr	r2, [pc, #308]	; (800ca74 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d01b      	beq.n	800c97c <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c944:	4a4c      	ldr	r2, [pc, #304]	; (800ca78 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d023      	beq.n	800c992 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c94a:	4a4c      	ldr	r2, [pc, #304]	; (800ca7c <RemapAndLinkDMAtoUARTTx+0x314>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d02c      	beq.n	800c9aa <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c950:	4a4b      	ldr	r2, [pc, #300]	; (800ca80 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d035      	beq.n	800c9c2 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c956:	4a4b      	ldr	r2, [pc, #300]	; (800ca84 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d03d      	beq.n	800c9d8 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c95c:	4a4a      	ldr	r2, [pc, #296]	; (800ca88 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d000      	beq.n	800c964 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c962:	e749      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c964:	4a49      	ldr	r2, [pc, #292]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c966:	23a8      	movs	r3, #168	; 0xa8
 800c968:	58d4      	ldr	r4, [r2, r3]
 800c96a:	4d49      	ldr	r5, [pc, #292]	; (800ca90 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c96c:	402c      	ands	r4, r5
 800c96e:	50d4      	str	r4, [r2, r3]
 800c970:	58d5      	ldr	r5, [r2, r3]
 800c972:	24a0      	movs	r4, #160	; 0xa0
 800c974:	0324      	lsls	r4, r4, #12
 800c976:	432c      	orrs	r4, r5
 800c978:	50d4      	str	r4, [r2, r3]
 800c97a:	e73d      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c97c:	4a45      	ldr	r2, [pc, #276]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c97e:	23a8      	movs	r3, #168	; 0xa8
 800c980:	58d4      	ldr	r4, [r2, r3]
 800c982:	25f0      	movs	r5, #240	; 0xf0
 800c984:	43ac      	bics	r4, r5
 800c986:	50d4      	str	r4, [r2, r3]
 800c988:	58d4      	ldr	r4, [r2, r3]
 800c98a:	3d50      	subs	r5, #80	; 0x50
 800c98c:	432c      	orrs	r4, r5
 800c98e:	50d4      	str	r4, [r2, r3]
 800c990:	e732      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c992:	4a40      	ldr	r2, [pc, #256]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c994:	23a8      	movs	r3, #168	; 0xa8
 800c996:	58d4      	ldr	r4, [r2, r3]
 800c998:	4d3f      	ldr	r5, [pc, #252]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c99a:	402c      	ands	r4, r5
 800c99c:	50d4      	str	r4, [r2, r3]
 800c99e:	58d5      	ldr	r5, [r2, r3]
 800c9a0:	24a0      	movs	r4, #160	; 0xa0
 800c9a2:	0224      	lsls	r4, r4, #8
 800c9a4:	432c      	orrs	r4, r5
 800c9a6:	50d4      	str	r4, [r2, r3]
 800c9a8:	e726      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c9aa:	4a3a      	ldr	r2, [pc, #232]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c9ac:	23a8      	movs	r3, #168	; 0xa8
 800c9ae:	58d4      	ldr	r4, [r2, r3]
 800c9b0:	4d3a      	ldr	r5, [pc, #232]	; (800ca9c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c9b2:	402c      	ands	r4, r5
 800c9b4:	50d4      	str	r4, [r2, r3]
 800c9b6:	58d5      	ldr	r5, [r2, r3]
 800c9b8:	24a0      	movs	r4, #160	; 0xa0
 800c9ba:	0524      	lsls	r4, r4, #20
 800c9bc:	432c      	orrs	r4, r5
 800c9be:	50d4      	str	r4, [r2, r3]
 800c9c0:	e71a      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c9c2:	4a32      	ldr	r2, [pc, #200]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c9c4:	23a8      	movs	r3, #168	; 0xa8
 800c9c6:	58d4      	ldr	r4, [r2, r3]
 800c9c8:	250f      	movs	r5, #15
 800c9ca:	43ac      	bics	r4, r5
 800c9cc:	50d4      	str	r4, [r2, r3]
 800c9ce:	58d4      	ldr	r4, [r2, r3]
 800c9d0:	3d05      	subs	r5, #5
 800c9d2:	432c      	orrs	r4, r5
 800c9d4:	50d4      	str	r4, [r2, r3]
 800c9d6:	e70f      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c9d8:	4a2c      	ldr	r2, [pc, #176]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c9da:	23a8      	movs	r3, #168	; 0xa8
 800c9dc:	58d4      	ldr	r4, [r2, r3]
 800c9de:	4d2e      	ldr	r5, [pc, #184]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c9e0:	402c      	ands	r4, r5
 800c9e2:	50d4      	str	r4, [r2, r3]
 800c9e4:	58d5      	ldr	r5, [r2, r3]
 800c9e6:	24a0      	movs	r4, #160	; 0xa0
 800c9e8:	0224      	lsls	r4, r4, #8
 800c9ea:	432c      	orrs	r4, r5
 800c9ec:	50d4      	str	r4, [r2, r3]
 800c9ee:	e703      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c9f0:	4a28      	ldr	r2, [pc, #160]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c9f2:	23a8      	movs	r3, #168	; 0xa8
 800c9f4:	58d4      	ldr	r4, [r2, r3]
 800c9f6:	25f0      	movs	r5, #240	; 0xf0
 800c9f8:	43ac      	bics	r4, r5
 800c9fa:	50d4      	str	r4, [r2, r3]
 800c9fc:	58d4      	ldr	r4, [r2, r3]
 800c9fe:	3d40      	subs	r5, #64	; 0x40
 800ca00:	432c      	orrs	r4, r5
 800ca02:	50d4      	str	r4, [r2, r3]
 800ca04:	e6f8      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800ca06:	4a23      	ldr	r2, [pc, #140]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ca08:	23a8      	movs	r3, #168	; 0xa8
 800ca0a:	58d4      	ldr	r4, [r2, r3]
 800ca0c:	4d22      	ldr	r5, [pc, #136]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ca0e:	402c      	ands	r4, r5
 800ca10:	50d4      	str	r4, [r2, r3]
 800ca12:	58d5      	ldr	r5, [r2, r3]
 800ca14:	24b0      	movs	r4, #176	; 0xb0
 800ca16:	0224      	lsls	r4, r4, #8
 800ca18:	432c      	orrs	r4, r5
 800ca1a:	50d4      	str	r4, [r2, r3]
 800ca1c:	e6ec      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800ca1e:	4a1d      	ldr	r2, [pc, #116]	; (800ca94 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ca20:	23a8      	movs	r3, #168	; 0xa8
 800ca22:	58d4      	ldr	r4, [r2, r3]
 800ca24:	4d1d      	ldr	r5, [pc, #116]	; (800ca9c <RemapAndLinkDMAtoUARTTx+0x334>)
 800ca26:	402c      	ands	r4, r5
 800ca28:	50d4      	str	r4, [r2, r3]
 800ca2a:	58d5      	ldr	r5, [r2, r3]
 800ca2c:	24b0      	movs	r4, #176	; 0xb0
 800ca2e:	0524      	lsls	r4, r4, #20
 800ca30:	432c      	orrs	r4, r5
 800ca32:	50d4      	str	r4, [r2, r3]
 800ca34:	e6e0      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800ca36:	4a15      	ldr	r2, [pc, #84]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ca38:	23a8      	movs	r3, #168	; 0xa8
 800ca3a:	58d4      	ldr	r4, [r2, r3]
 800ca3c:	250f      	movs	r5, #15
 800ca3e:	43ac      	bics	r4, r5
 800ca40:	50d4      	str	r4, [r2, r3]
 800ca42:	58d4      	ldr	r4, [r2, r3]
 800ca44:	3d04      	subs	r5, #4
 800ca46:	432c      	orrs	r4, r5
 800ca48:	50d4      	str	r4, [r2, r3]
 800ca4a:	e6d5      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800ca4c:	4a0f      	ldr	r2, [pc, #60]	; (800ca8c <RemapAndLinkDMAtoUARTTx+0x324>)
 800ca4e:	23a8      	movs	r3, #168	; 0xa8
 800ca50:	58d4      	ldr	r4, [r2, r3]
 800ca52:	4d11      	ldr	r5, [pc, #68]	; (800ca98 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ca54:	402c      	ands	r4, r5
 800ca56:	50d4      	str	r4, [r2, r3]
 800ca58:	58d5      	ldr	r5, [r2, r3]
 800ca5a:	24b0      	movs	r4, #176	; 0xb0
 800ca5c:	0224      	lsls	r4, r4, #8
 800ca5e:	432c      	orrs	r4, r5
 800ca60:	50d4      	str	r4, [r2, r3]
 800ca62:	e6c9      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
 800ca64:	40013800 	.word	0x40013800
 800ca68:	40004400 	.word	0x40004400
 800ca6c:	40004800 	.word	0x40004800
 800ca70:	40004c00 	.word	0x40004c00
 800ca74:	4002001c 	.word	0x4002001c
 800ca78:	40020044 	.word	0x40020044
 800ca7c:	40020080 	.word	0x40020080
 800ca80:	40020408 	.word	0x40020408
 800ca84:	40020444 	.word	0x40020444
 800ca88:	40020458 	.word	0x40020458
 800ca8c:	40020400 	.word	0x40020400
 800ca90:	fff0ffff 	.word	0xfff0ffff
 800ca94:	40020000 	.word	0x40020000
 800ca98:	ffff0fff 	.word	0xffff0fff
 800ca9c:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800caa0:	4ab9      	ldr	r2, [pc, #740]	; (800cd88 <RemapAndLinkDMAtoUARTTx+0x620>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d159      	bne.n	800cb5a <RemapAndLinkDMAtoUARTTx+0x3f2>
 800caa6:	680b      	ldr	r3, [r1, #0]
 800caa8:	4ab8      	ldr	r2, [pc, #736]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x624>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d01b      	beq.n	800cae6 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800caae:	4ab8      	ldr	r2, [pc, #736]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d023      	beq.n	800cafc <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800cab4:	4ab7      	ldr	r2, [pc, #732]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d02c      	beq.n	800cb14 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800caba:	4ab7      	ldr	r2, [pc, #732]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d035      	beq.n	800cb2c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cac0:	4ab6      	ldr	r2, [pc, #728]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d03d      	beq.n	800cb42 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cac6:	4ab6      	ldr	r2, [pc, #728]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d000      	beq.n	800cace <RemapAndLinkDMAtoUARTTx+0x366>
 800cacc:	e694      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800cace:	4ab5      	ldr	r2, [pc, #724]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cad0:	23a8      	movs	r3, #168	; 0xa8
 800cad2:	58d4      	ldr	r4, [r2, r3]
 800cad4:	4db4      	ldr	r5, [pc, #720]	; (800cda8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cad6:	402c      	ands	r4, r5
 800cad8:	50d4      	str	r4, [r2, r3]
 800cada:	58d5      	ldr	r5, [r2, r3]
 800cadc:	24c0      	movs	r4, #192	; 0xc0
 800cade:	0324      	lsls	r4, r4, #12
 800cae0:	432c      	orrs	r4, r5
 800cae2:	50d4      	str	r4, [r2, r3]
 800cae4:	e688      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800cae6:	4ab1      	ldr	r2, [pc, #708]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cae8:	23a8      	movs	r3, #168	; 0xa8
 800caea:	58d4      	ldr	r4, [r2, r3]
 800caec:	25f0      	movs	r5, #240	; 0xf0
 800caee:	43ac      	bics	r4, r5
 800caf0:	50d4      	str	r4, [r2, r3]
 800caf2:	58d4      	ldr	r4, [r2, r3]
 800caf4:	3d30      	subs	r5, #48	; 0x30
 800caf6:	432c      	orrs	r4, r5
 800caf8:	50d4      	str	r4, [r2, r3]
 800cafa:	e67d      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800cafc:	4aab      	ldr	r2, [pc, #684]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cafe:	23a8      	movs	r3, #168	; 0xa8
 800cb00:	58d4      	ldr	r4, [r2, r3]
 800cb02:	4dab      	ldr	r5, [pc, #684]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cb04:	402c      	ands	r4, r5
 800cb06:	50d4      	str	r4, [r2, r3]
 800cb08:	58d5      	ldr	r5, [r2, r3]
 800cb0a:	24c0      	movs	r4, #192	; 0xc0
 800cb0c:	0224      	lsls	r4, r4, #8
 800cb0e:	432c      	orrs	r4, r5
 800cb10:	50d4      	str	r4, [r2, r3]
 800cb12:	e671      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800cb14:	4aa5      	ldr	r2, [pc, #660]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cb16:	23a8      	movs	r3, #168	; 0xa8
 800cb18:	58d4      	ldr	r4, [r2, r3]
 800cb1a:	4da6      	ldr	r5, [pc, #664]	; (800cdb4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cb1c:	402c      	ands	r4, r5
 800cb1e:	50d4      	str	r4, [r2, r3]
 800cb20:	58d5      	ldr	r5, [r2, r3]
 800cb22:	24c0      	movs	r4, #192	; 0xc0
 800cb24:	0524      	lsls	r4, r4, #20
 800cb26:	432c      	orrs	r4, r5
 800cb28:	50d4      	str	r4, [r2, r3]
 800cb2a:	e665      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800cb2c:	4a9d      	ldr	r2, [pc, #628]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb2e:	23a8      	movs	r3, #168	; 0xa8
 800cb30:	58d4      	ldr	r4, [r2, r3]
 800cb32:	250f      	movs	r5, #15
 800cb34:	43ac      	bics	r4, r5
 800cb36:	50d4      	str	r4, [r2, r3]
 800cb38:	58d4      	ldr	r4, [r2, r3]
 800cb3a:	3d03      	subs	r5, #3
 800cb3c:	432c      	orrs	r4, r5
 800cb3e:	50d4      	str	r4, [r2, r3]
 800cb40:	e65a      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800cb42:	4a98      	ldr	r2, [pc, #608]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb44:	23a8      	movs	r3, #168	; 0xa8
 800cb46:	58d4      	ldr	r4, [r2, r3]
 800cb48:	4d99      	ldr	r5, [pc, #612]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cb4a:	402c      	ands	r4, r5
 800cb4c:	50d4      	str	r4, [r2, r3]
 800cb4e:	58d5      	ldr	r5, [r2, r3]
 800cb50:	24c0      	movs	r4, #192	; 0xc0
 800cb52:	0224      	lsls	r4, r4, #8
 800cb54:	432c      	orrs	r4, r5
 800cb56:	50d4      	str	r4, [r2, r3]
 800cb58:	e64e      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cb5a:	4a97      	ldr	r2, [pc, #604]	; (800cdb8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d159      	bne.n	800cc14 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800cb60:	680b      	ldr	r3, [r1, #0]
 800cb62:	4a8a      	ldr	r2, [pc, #552]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x624>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d01b      	beq.n	800cba0 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cb68:	4a89      	ldr	r2, [pc, #548]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d023      	beq.n	800cbb6 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cb6e:	4a89      	ldr	r2, [pc, #548]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d02c      	beq.n	800cbce <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800cb74:	4a88      	ldr	r2, [pc, #544]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d035      	beq.n	800cbe6 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800cb7a:	4a88      	ldr	r2, [pc, #544]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d03d      	beq.n	800cbfc <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800cb80:	4a87      	ldr	r2, [pc, #540]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d000      	beq.n	800cb88 <RemapAndLinkDMAtoUARTTx+0x420>
 800cb86:	e637      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800cb88:	4a86      	ldr	r2, [pc, #536]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb8a:	23a8      	movs	r3, #168	; 0xa8
 800cb8c:	58d4      	ldr	r4, [r2, r3]
 800cb8e:	4d86      	ldr	r5, [pc, #536]	; (800cda8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cb90:	402c      	ands	r4, r5
 800cb92:	50d4      	str	r4, [r2, r3]
 800cb94:	58d5      	ldr	r5, [r2, r3]
 800cb96:	24d0      	movs	r4, #208	; 0xd0
 800cb98:	0324      	lsls	r4, r4, #12
 800cb9a:	432c      	orrs	r4, r5
 800cb9c:	50d4      	str	r4, [r2, r3]
 800cb9e:	e62b      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800cba0:	4a82      	ldr	r2, [pc, #520]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cba2:	23a8      	movs	r3, #168	; 0xa8
 800cba4:	58d4      	ldr	r4, [r2, r3]
 800cba6:	25f0      	movs	r5, #240	; 0xf0
 800cba8:	43ac      	bics	r4, r5
 800cbaa:	50d4      	str	r4, [r2, r3]
 800cbac:	58d4      	ldr	r4, [r2, r3]
 800cbae:	3d20      	subs	r5, #32
 800cbb0:	432c      	orrs	r4, r5
 800cbb2:	50d4      	str	r4, [r2, r3]
 800cbb4:	e620      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800cbb6:	4a7d      	ldr	r2, [pc, #500]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cbb8:	23a8      	movs	r3, #168	; 0xa8
 800cbba:	58d4      	ldr	r4, [r2, r3]
 800cbbc:	4d7c      	ldr	r5, [pc, #496]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cbbe:	402c      	ands	r4, r5
 800cbc0:	50d4      	str	r4, [r2, r3]
 800cbc2:	58d5      	ldr	r5, [r2, r3]
 800cbc4:	24d0      	movs	r4, #208	; 0xd0
 800cbc6:	0224      	lsls	r4, r4, #8
 800cbc8:	432c      	orrs	r4, r5
 800cbca:	50d4      	str	r4, [r2, r3]
 800cbcc:	e614      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800cbce:	4a77      	ldr	r2, [pc, #476]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cbd0:	23a8      	movs	r3, #168	; 0xa8
 800cbd2:	58d4      	ldr	r4, [r2, r3]
 800cbd4:	4d77      	ldr	r5, [pc, #476]	; (800cdb4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cbd6:	402c      	ands	r4, r5
 800cbd8:	50d4      	str	r4, [r2, r3]
 800cbda:	58d5      	ldr	r5, [r2, r3]
 800cbdc:	24d0      	movs	r4, #208	; 0xd0
 800cbde:	0524      	lsls	r4, r4, #20
 800cbe0:	432c      	orrs	r4, r5
 800cbe2:	50d4      	str	r4, [r2, r3]
 800cbe4:	e608      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800cbe6:	4a6f      	ldr	r2, [pc, #444]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cbe8:	23a8      	movs	r3, #168	; 0xa8
 800cbea:	58d4      	ldr	r4, [r2, r3]
 800cbec:	250f      	movs	r5, #15
 800cbee:	43ac      	bics	r4, r5
 800cbf0:	50d4      	str	r4, [r2, r3]
 800cbf2:	58d4      	ldr	r4, [r2, r3]
 800cbf4:	3d02      	subs	r5, #2
 800cbf6:	432c      	orrs	r4, r5
 800cbf8:	50d4      	str	r4, [r2, r3]
 800cbfa:	e5fd      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800cbfc:	4a69      	ldr	r2, [pc, #420]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cbfe:	23a8      	movs	r3, #168	; 0xa8
 800cc00:	58d4      	ldr	r4, [r2, r3]
 800cc02:	4d6b      	ldr	r5, [pc, #428]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cc04:	402c      	ands	r4, r5
 800cc06:	50d4      	str	r4, [r2, r3]
 800cc08:	58d5      	ldr	r5, [r2, r3]
 800cc0a:	24d0      	movs	r4, #208	; 0xd0
 800cc0c:	0224      	lsls	r4, r4, #8
 800cc0e:	432c      	orrs	r4, r5
 800cc10:	50d4      	str	r4, [r2, r3]
 800cc12:	e5f1      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800cc14:	4a69      	ldr	r2, [pc, #420]	; (800cdbc <RemapAndLinkDMAtoUARTTx+0x654>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d159      	bne.n	800ccce <RemapAndLinkDMAtoUARTTx+0x566>
 800cc1a:	680b      	ldr	r3, [r1, #0]
 800cc1c:	4a5b      	ldr	r2, [pc, #364]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x624>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d01b      	beq.n	800cc5a <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800cc22:	4a5b      	ldr	r2, [pc, #364]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d023      	beq.n	800cc70 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800cc28:	4a5a      	ldr	r2, [pc, #360]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d02c      	beq.n	800cc88 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800cc2e:	4a5a      	ldr	r2, [pc, #360]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d035      	beq.n	800cca0 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cc34:	4a59      	ldr	r2, [pc, #356]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d03d      	beq.n	800ccb6 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cc3a:	4a59      	ldr	r2, [pc, #356]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d000      	beq.n	800cc42 <RemapAndLinkDMAtoUARTTx+0x4da>
 800cc40:	e5da      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800cc42:	4a58      	ldr	r2, [pc, #352]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cc44:	23a8      	movs	r3, #168	; 0xa8
 800cc46:	58d4      	ldr	r4, [r2, r3]
 800cc48:	4d57      	ldr	r5, [pc, #348]	; (800cda8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cc4a:	402c      	ands	r4, r5
 800cc4c:	50d4      	str	r4, [r2, r3]
 800cc4e:	58d5      	ldr	r5, [r2, r3]
 800cc50:	24e0      	movs	r4, #224	; 0xe0
 800cc52:	0324      	lsls	r4, r4, #12
 800cc54:	432c      	orrs	r4, r5
 800cc56:	50d4      	str	r4, [r2, r3]
 800cc58:	e5ce      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800cc5a:	4a54      	ldr	r2, [pc, #336]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cc5c:	23a8      	movs	r3, #168	; 0xa8
 800cc5e:	58d4      	ldr	r4, [r2, r3]
 800cc60:	25f0      	movs	r5, #240	; 0xf0
 800cc62:	43ac      	bics	r4, r5
 800cc64:	50d4      	str	r4, [r2, r3]
 800cc66:	58d4      	ldr	r4, [r2, r3]
 800cc68:	3d10      	subs	r5, #16
 800cc6a:	432c      	orrs	r4, r5
 800cc6c:	50d4      	str	r4, [r2, r3]
 800cc6e:	e5c3      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800cc70:	4a4e      	ldr	r2, [pc, #312]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cc72:	23a8      	movs	r3, #168	; 0xa8
 800cc74:	58d4      	ldr	r4, [r2, r3]
 800cc76:	4d4e      	ldr	r5, [pc, #312]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cc78:	402c      	ands	r4, r5
 800cc7a:	50d4      	str	r4, [r2, r3]
 800cc7c:	58d5      	ldr	r5, [r2, r3]
 800cc7e:	24e0      	movs	r4, #224	; 0xe0
 800cc80:	0224      	lsls	r4, r4, #8
 800cc82:	432c      	orrs	r4, r5
 800cc84:	50d4      	str	r4, [r2, r3]
 800cc86:	e5b7      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800cc88:	4a48      	ldr	r2, [pc, #288]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cc8a:	23a8      	movs	r3, #168	; 0xa8
 800cc8c:	58d4      	ldr	r4, [r2, r3]
 800cc8e:	4d49      	ldr	r5, [pc, #292]	; (800cdb4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cc90:	402c      	ands	r4, r5
 800cc92:	50d4      	str	r4, [r2, r3]
 800cc94:	58d5      	ldr	r5, [r2, r3]
 800cc96:	24e0      	movs	r4, #224	; 0xe0
 800cc98:	0524      	lsls	r4, r4, #20
 800cc9a:	432c      	orrs	r4, r5
 800cc9c:	50d4      	str	r4, [r2, r3]
 800cc9e:	e5ab      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800cca0:	4a40      	ldr	r2, [pc, #256]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cca2:	23a8      	movs	r3, #168	; 0xa8
 800cca4:	58d4      	ldr	r4, [r2, r3]
 800cca6:	250f      	movs	r5, #15
 800cca8:	43ac      	bics	r4, r5
 800ccaa:	50d4      	str	r4, [r2, r3]
 800ccac:	58d4      	ldr	r4, [r2, r3]
 800ccae:	3d01      	subs	r5, #1
 800ccb0:	432c      	orrs	r4, r5
 800ccb2:	50d4      	str	r4, [r2, r3]
 800ccb4:	e5a0      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800ccb6:	4a3b      	ldr	r2, [pc, #236]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ccb8:	23a8      	movs	r3, #168	; 0xa8
 800ccba:	58d4      	ldr	r4, [r2, r3]
 800ccbc:	4d3c      	ldr	r5, [pc, #240]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800ccbe:	402c      	ands	r4, r5
 800ccc0:	50d4      	str	r4, [r2, r3]
 800ccc2:	58d5      	ldr	r5, [r2, r3]
 800ccc4:	24e0      	movs	r4, #224	; 0xe0
 800ccc6:	0224      	lsls	r4, r4, #8
 800ccc8:	432c      	orrs	r4, r5
 800ccca:	50d4      	str	r4, [r2, r3]
 800cccc:	e594      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800ccce:	4a3c      	ldr	r2, [pc, #240]	; (800cdc0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d000      	beq.n	800ccd6 <RemapAndLinkDMAtoUARTTx+0x56e>
 800ccd4:	e590      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
 800ccd6:	680b      	ldr	r3, [r1, #0]
 800ccd8:	4a2c      	ldr	r2, [pc, #176]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x624>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d01b      	beq.n	800cd16 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800ccde:	4a2c      	ldr	r2, [pc, #176]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d022      	beq.n	800cd2a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800cce4:	4a2b      	ldr	r2, [pc, #172]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d02b      	beq.n	800cd42 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800ccea:	4a2b      	ldr	r2, [pc, #172]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x630>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d034      	beq.n	800cd5a <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800ccf0:	4a2a      	ldr	r2, [pc, #168]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x634>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d03b      	beq.n	800cd6e <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800ccf6:	4a2a      	ldr	r2, [pc, #168]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d000      	beq.n	800ccfe <RemapAndLinkDMAtoUARTTx+0x596>
 800ccfc:	e57c      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800ccfe:	4a29      	ldr	r2, [pc, #164]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cd00:	23a8      	movs	r3, #168	; 0xa8
 800cd02:	58d4      	ldr	r4, [r2, r3]
 800cd04:	4d28      	ldr	r5, [pc, #160]	; (800cda8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cd06:	402c      	ands	r4, r5
 800cd08:	50d4      	str	r4, [r2, r3]
 800cd0a:	58d5      	ldr	r5, [r2, r3]
 800cd0c:	24f0      	movs	r4, #240	; 0xf0
 800cd0e:	0324      	lsls	r4, r4, #12
 800cd10:	432c      	orrs	r4, r5
 800cd12:	50d4      	str	r4, [r2, r3]
 800cd14:	e570      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800cd16:	4a25      	ldr	r2, [pc, #148]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cd18:	23a8      	movs	r3, #168	; 0xa8
 800cd1a:	58d5      	ldr	r5, [r2, r3]
 800cd1c:	26f0      	movs	r6, #240	; 0xf0
 800cd1e:	43b5      	bics	r5, r6
 800cd20:	50d5      	str	r5, [r2, r3]
 800cd22:	58d4      	ldr	r4, [r2, r3]
 800cd24:	4334      	orrs	r4, r6
 800cd26:	50d4      	str	r4, [r2, r3]
 800cd28:	e566      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800cd2a:	4a20      	ldr	r2, [pc, #128]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cd2c:	23a8      	movs	r3, #168	; 0xa8
 800cd2e:	58d4      	ldr	r4, [r2, r3]
 800cd30:	4d1f      	ldr	r5, [pc, #124]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cd32:	402c      	ands	r4, r5
 800cd34:	50d4      	str	r4, [r2, r3]
 800cd36:	58d5      	ldr	r5, [r2, r3]
 800cd38:	24f0      	movs	r4, #240	; 0xf0
 800cd3a:	0224      	lsls	r4, r4, #8
 800cd3c:	432c      	orrs	r4, r5
 800cd3e:	50d4      	str	r4, [r2, r3]
 800cd40:	e55a      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800cd42:	4a1a      	ldr	r2, [pc, #104]	; (800cdac <RemapAndLinkDMAtoUARTTx+0x644>)
 800cd44:	23a8      	movs	r3, #168	; 0xa8
 800cd46:	58d4      	ldr	r4, [r2, r3]
 800cd48:	4d1a      	ldr	r5, [pc, #104]	; (800cdb4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cd4a:	402c      	ands	r4, r5
 800cd4c:	50d4      	str	r4, [r2, r3]
 800cd4e:	58d5      	ldr	r5, [r2, r3]
 800cd50:	24f0      	movs	r4, #240	; 0xf0
 800cd52:	0524      	lsls	r4, r4, #20
 800cd54:	432c      	orrs	r4, r5
 800cd56:	50d4      	str	r4, [r2, r3]
 800cd58:	e54e      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800cd5a:	4a12      	ldr	r2, [pc, #72]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cd5c:	23a8      	movs	r3, #168	; 0xa8
 800cd5e:	58d5      	ldr	r5, [r2, r3]
 800cd60:	260f      	movs	r6, #15
 800cd62:	43b5      	bics	r5, r6
 800cd64:	50d5      	str	r5, [r2, r3]
 800cd66:	58d4      	ldr	r4, [r2, r3]
 800cd68:	4334      	orrs	r4, r6
 800cd6a:	50d4      	str	r4, [r2, r3]
 800cd6c:	e544      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800cd6e:	4a0d      	ldr	r2, [pc, #52]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cd70:	23a8      	movs	r3, #168	; 0xa8
 800cd72:	58d4      	ldr	r4, [r2, r3]
 800cd74:	4d0e      	ldr	r5, [pc, #56]	; (800cdb0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cd76:	402c      	ands	r4, r5
 800cd78:	50d4      	str	r4, [r2, r3]
 800cd7a:	58d5      	ldr	r5, [r2, r3]
 800cd7c:	24f0      	movs	r4, #240	; 0xf0
 800cd7e:	0224      	lsls	r4, r4, #8
 800cd80:	432c      	orrs	r4, r5
 800cd82:	50d4      	str	r4, [r2, r3]
 800cd84:	e538      	b.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x90>
 800cd86:	46c0      	nop			; (mov r8, r8)
 800cd88:	40005000 	.word	0x40005000
 800cd8c:	4002001c 	.word	0x4002001c
 800cd90:	40020044 	.word	0x40020044
 800cd94:	40020080 	.word	0x40020080
 800cd98:	40020408 	.word	0x40020408
 800cd9c:	40020444 	.word	0x40020444
 800cda0:	40020458 	.word	0x40020458
 800cda4:	40020400 	.word	0x40020400
 800cda8:	fff0ffff 	.word	0xfff0ffff
 800cdac:	40020000 	.word	0x40020000
 800cdb0:	ffff0fff 	.word	0xffff0fff
 800cdb4:	f0ffffff 	.word	0xf0ffffff
 800cdb8:	40011400 	.word	0x40011400
 800cdbc:	40011800 	.word	0x40011800
 800cdc0:	40011c00 	.word	0x40011c00

0800cdc4 <DMA_MSG_TX_Setup>:
{	
 800cdc4:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800cdc6:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <DMA_MSG_TX_Setup+0x38>)
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d012      	beq.n	800cdf4 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800cdce:	4b0b      	ldr	r3, [pc, #44]	; (800cdfc <DMA_MSG_TX_Setup+0x38>)
 800cdd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d010      	beq.n	800cdf8 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800cdd6:	4a09      	ldr	r2, [pc, #36]	; (800cdfc <DMA_MSG_TX_Setup+0x38>)
 800cdd8:	2394      	movs	r3, #148	; 0x94
 800cdda:	58d3      	ldr	r3, [r2, r3]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d007      	beq.n	800cdf0 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800cde0:	0021      	movs	r1, r4
 800cde2:	f7ff fcc1 	bl	800c768 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cde6:	2100      	movs	r1, #0
 800cde8:	0020      	movs	r0, r4
 800cdea:	f7ff f85b 	bl	800bea4 <SetupDMAInterrupts>
}
 800cdee:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800cdf0:	4c03      	ldr	r4, [pc, #12]	; (800ce00 <DMA_MSG_TX_Setup+0x3c>)
 800cdf2:	e7f5      	b.n	800cde0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800cdf4:	4c01      	ldr	r4, [pc, #4]	; (800cdfc <DMA_MSG_TX_Setup+0x38>)
 800cdf6:	e7f3      	b.n	800cde0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800cdf8:	4c02      	ldr	r4, [pc, #8]	; (800ce04 <DMA_MSG_TX_Setup+0x40>)
 800cdfa:	e7f1      	b.n	800cde0 <DMA_MSG_TX_Setup+0x1c>
 800cdfc:	20001084 	.word	0x20001084
 800ce00:	200010f4 	.word	0x200010f4
 800ce04:	200010bc 	.word	0x200010bc

0800ce08 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800ce08:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800ce0a:	4807      	ldr	r0, [pc, #28]	; (800ce28 <CRC_Init+0x20>)
 800ce0c:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <CRC_Init+0x24>)
 800ce0e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800ce10:	2310      	movs	r3, #16
 800ce12:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800ce14:	2300      	movs	r3, #0
 800ce16:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ce18:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800ce1a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800ce1c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800ce1e:	3303      	adds	r3, #3
 800ce20:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800ce22:	f003 fb47 	bl	80104b4 <HAL_CRC_Init>
}
 800ce26:	bd10      	pop	{r4, pc}
 800ce28:	2000651c 	.word	0x2000651c
 800ce2c:	40023000 	.word	0x40023000

0800ce30 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ce30:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800ce32:	4a05      	ldr	r2, [pc, #20]	; (800ce48 <HAL_CRC_MspInit+0x18>)
 800ce34:	6951      	ldr	r1, [r2, #20]
 800ce36:	2340      	movs	r3, #64	; 0x40
 800ce38:	4319      	orrs	r1, r3
 800ce3a:	6151      	str	r1, [r2, #20]
 800ce3c:	6952      	ldr	r2, [r2, #20]
 800ce3e:	4013      	ands	r3, r2
 800ce40:	9301      	str	r3, [sp, #4]
 800ce42:	9b01      	ldr	r3, [sp, #4]
}
 800ce44:	b002      	add	sp, #8
 800ce46:	4770      	bx	lr
 800ce48:	40021000 	.word	0x40021000

0800ce4c <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	0004      	movs	r4, r0
 800ce50:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d015      	beq.n	800ce82 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800ce56:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800ce58:	2900      	cmp	r1, #0
 800ce5a:	d100      	bne.n	800ce5e <CalculateCRC8+0x12>
}
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ce5e:	088e      	lsrs	r6, r1, #2
 800ce60:	0032      	movs	r2, r6
 800ce62:	0021      	movs	r1, r4
 800ce64:	4808      	ldr	r0, [pc, #32]	; (800ce88 <CalculateCRC8+0x3c>)
 800ce66:	f003 fb82 	bl	801056e <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800ce6a:	07ab      	lsls	r3, r5, #30
 800ce6c:	d101      	bne.n	800ce72 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ce6e:	b2c0      	uxtb	r0, r0
 800ce70:	e7f4      	b.n	800ce5c <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800ce72:	0131      	lsls	r1, r6, #4
 800ce74:	1861      	adds	r1, r4, r1
 800ce76:	2201      	movs	r2, #1
 800ce78:	4803      	ldr	r0, [pc, #12]	; (800ce88 <CalculateCRC8+0x3c>)
 800ce7a:	f003 fb4c 	bl	8010516 <HAL_CRC_Accumulate>
 800ce7e:	b2c0      	uxtb	r0, r0
 800ce80:	e7ec      	b.n	800ce5c <CalculateCRC8+0x10>
	return 0;
 800ce82:	2000      	movs	r0, #0
 800ce84:	e7ea      	b.n	800ce5c <CalculateCRC8+0x10>
 800ce86:	46c0      	nop			; (mov r8, r8)
 800ce88:	2000651c 	.word	0x2000651c

0800ce8c <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800ce8c:	b500      	push	{lr}
 800ce8e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ce90:	2380      	movs	r3, #128	; 0x80
 800ce92:	011b      	lsls	r3, r3, #4
 800ce94:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce96:	2301      	movs	r3, #1
 800ce98:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ce9e:	3303      	adds	r3, #3
 800cea0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800cea2:	2090      	movs	r0, #144	; 0x90
 800cea4:	a901      	add	r1, sp, #4
 800cea6:	05c0      	lsls	r0, r0, #23
 800cea8:	f004 fa04 	bl	80112b4 <HAL_GPIO_Init>
}
 800ceac:	b007      	add	sp, #28
 800ceae:	bd00      	pop	{pc}

0800ceb0 <GPIO_Init>:
{
 800ceb0:	b500      	push	{lr}
 800ceb2:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ceb4:	4b18      	ldr	r3, [pc, #96]	; (800cf18 <GPIO_Init+0x68>)
 800ceb6:	6959      	ldr	r1, [r3, #20]
 800ceb8:	2080      	movs	r0, #128	; 0x80
 800ceba:	0300      	lsls	r0, r0, #12
 800cebc:	4301      	orrs	r1, r0
 800cebe:	6159      	str	r1, [r3, #20]
 800cec0:	695a      	ldr	r2, [r3, #20]
 800cec2:	4002      	ands	r2, r0
 800cec4:	9201      	str	r2, [sp, #4]
 800cec6:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800cec8:	6959      	ldr	r1, [r3, #20]
 800ceca:	2080      	movs	r0, #128	; 0x80
 800cecc:	0280      	lsls	r0, r0, #10
 800cece:	4301      	orrs	r1, r0
 800ced0:	6159      	str	r1, [r3, #20]
 800ced2:	695a      	ldr	r2, [r3, #20]
 800ced4:	4002      	ands	r2, r0
 800ced6:	9202      	str	r2, [sp, #8]
 800ced8:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ceda:	6959      	ldr	r1, [r3, #20]
 800cedc:	2080      	movs	r0, #128	; 0x80
 800cede:	0340      	lsls	r0, r0, #13
 800cee0:	4301      	orrs	r1, r0
 800cee2:	6159      	str	r1, [r3, #20]
 800cee4:	695a      	ldr	r2, [r3, #20]
 800cee6:	4002      	ands	r2, r0
 800cee8:	9203      	str	r2, [sp, #12]
 800ceea:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ceec:	6959      	ldr	r1, [r3, #20]
 800ceee:	2080      	movs	r0, #128	; 0x80
 800cef0:	02c0      	lsls	r0, r0, #11
 800cef2:	4301      	orrs	r1, r0
 800cef4:	6159      	str	r1, [r3, #20]
 800cef6:	695a      	ldr	r2, [r3, #20]
 800cef8:	4002      	ands	r2, r0
 800cefa:	9204      	str	r2, [sp, #16]
 800cefc:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cefe:	695a      	ldr	r2, [r3, #20]
 800cf00:	2180      	movs	r1, #128	; 0x80
 800cf02:	03c9      	lsls	r1, r1, #15
 800cf04:	430a      	orrs	r2, r1
 800cf06:	615a      	str	r2, [r3, #20]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	400b      	ands	r3, r1
 800cf0c:	9305      	str	r3, [sp, #20]
 800cf0e:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800cf10:	f7ff ffbc 	bl	800ce8c <IND_LED_Init>
}
 800cf14:	b007      	add	sp, #28
 800cf16:	bd00      	pop	{pc}
 800cf18:	40021000 	.word	0x40021000

0800cf1c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	000e      	movs	r6, r1
 800cf20:	0015      	movs	r5, r2
 800cf22:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800cf24:	f000 fd30 	bl	800d988 <GetUart>
	
	if (huart == &huart1) 
 800cf28:	4b25      	ldr	r3, [pc, #148]	; (800cfc0 <GetPortGPIOs+0xa4>)
 800cf2a:	4298      	cmp	r0, r3
 800cf2c:	d017      	beq.n	800cf5e <GetPortGPIOs+0x42>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800cf2e:	4b25      	ldr	r3, [pc, #148]	; (800cfc4 <GetPortGPIOs+0xa8>)
 800cf30:	4298      	cmp	r0, r3
 800cf32:	d022      	beq.n	800cf7a <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800cf34:	4b24      	ldr	r3, [pc, #144]	; (800cfc8 <GetPortGPIOs+0xac>)
 800cf36:	4298      	cmp	r0, r3
 800cf38:	d02a      	beq.n	800cf90 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800cf3a:	4b24      	ldr	r3, [pc, #144]	; (800cfcc <GetPortGPIOs+0xb0>)
 800cf3c:	4298      	cmp	r0, r3
 800cf3e:	d033      	beq.n	800cfa8 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800cf40:	4a23      	ldr	r2, [pc, #140]	; (800cfd0 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800cf42:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800cf44:	4290      	cmp	r0, r2
 800cf46:	d116      	bne.n	800cf76 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cf48:	2390      	movs	r3, #144	; 0x90
 800cf4a:	05db      	lsls	r3, r3, #23
 800cf4c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800cf4e:	2210      	movs	r2, #16
 800cf50:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800cf52:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800cf54:	2320      	movs	r3, #32
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e00b      	b.n	800cf76 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cf5e:	2390      	movs	r3, #144	; 0x90
 800cf60:	05db      	lsls	r3, r3, #23
 800cf62:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800cf64:	2280      	movs	r2, #128	; 0x80
 800cf66:	0092      	lsls	r2, r2, #2
 800cf68:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800cf6a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800cf6c:	2380      	movs	r3, #128	; 0x80
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	9a04      	ldr	r2, [sp, #16]
 800cf72:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cf74:	2300      	movs	r3, #0
	
	return result;	
}
 800cf76:	0018      	movs	r0, r3
 800cf78:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cf7a:	2390      	movs	r3, #144	; 0x90
 800cf7c:	05db      	lsls	r3, r3, #23
 800cf7e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800cf80:	2204      	movs	r2, #4
 800cf82:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800cf84:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800cf86:	2308      	movs	r3, #8
 800cf88:	9a04      	ldr	r2, [sp, #16]
 800cf8a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e7f2      	b.n	800cf76 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cf90:	4b10      	ldr	r3, [pc, #64]	; (800cfd4 <GetPortGPIOs+0xb8>)
 800cf92:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800cf94:	2280      	movs	r2, #128	; 0x80
 800cf96:	00d2      	lsls	r2, r2, #3
 800cf98:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800cf9a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800cf9c:	2380      	movs	r3, #128	; 0x80
 800cf9e:	011b      	lsls	r3, r3, #4
 800cfa0:	9a04      	ldr	r2, [sp, #16]
 800cfa2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e7e6      	b.n	800cf76 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800cfa8:	2390      	movs	r3, #144	; 0x90
 800cfaa:	05db      	lsls	r3, r3, #23
 800cfac:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800cfae:	2201      	movs	r2, #1
 800cfb0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800cfb2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800cfb4:	2302      	movs	r3, #2
 800cfb6:	9a04      	ldr	r2, [sp, #16]
 800cfb8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e7db      	b.n	800cf76 <GetPortGPIOs+0x5a>
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	20006304 	.word	0x20006304
 800cfc4:	20006460 	.word	0x20006460
 800cfc8:	20006250 	.word	0x20006250
 800cfcc:	200063ec 	.word	0x200063ec
 800cfd0:	2000637c 	.word	0x2000637c
 800cfd4:	48000400 	.word	0x48000400

0800cfd8 <IsFactoryReset>:
{
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800cfdc:	4b39      	ldr	r3, [pc, #228]	; (800d0c4 <IsFactoryReset+0xec>)
 800cfde:	6959      	ldr	r1, [r3, #20]
 800cfe0:	2080      	movs	r0, #128	; 0x80
 800cfe2:	0280      	lsls	r0, r0, #10
 800cfe4:	4301      	orrs	r1, r0
 800cfe6:	6159      	str	r1, [r3, #20]
 800cfe8:	695a      	ldr	r2, [r3, #20]
 800cfea:	4002      	ands	r2, r0
 800cfec:	9203      	str	r2, [sp, #12]
 800cfee:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800cff0:	6959      	ldr	r1, [r3, #20]
 800cff2:	2080      	movs	r0, #128	; 0x80
 800cff4:	02c0      	lsls	r0, r0, #11
 800cff6:	4301      	orrs	r1, r0
 800cff8:	6159      	str	r1, [r3, #20]
 800cffa:	695a      	ldr	r2, [r3, #20]
 800cffc:	4002      	ands	r2, r0
 800cffe:	9204      	str	r2, [sp, #16]
 800d000:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d002:	6959      	ldr	r1, [r3, #20]
 800d004:	2080      	movs	r0, #128	; 0x80
 800d006:	0300      	lsls	r0, r0, #12
 800d008:	4301      	orrs	r1, r0
 800d00a:	6159      	str	r1, [r3, #20]
 800d00c:	695a      	ldr	r2, [r3, #20]
 800d00e:	4002      	ands	r2, r0
 800d010:	9205      	str	r2, [sp, #20]
 800d012:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800d014:	695a      	ldr	r2, [r3, #20]
 800d016:	2180      	movs	r1, #128	; 0x80
 800d018:	0349      	lsls	r1, r1, #13
 800d01a:	430a      	orrs	r2, r1
 800d01c:	615a      	str	r2, [r3, #20]
 800d01e:	695b      	ldr	r3, [r3, #20]
 800d020:	400b      	ands	r3, r1
 800d022:	9306      	str	r3, [sp, #24]
 800d024:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d026:	2522      	movs	r5, #34	; 0x22
 800d028:	446d      	add	r5, sp
 800d02a:	ab08      	add	r3, sp, #32
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	ab0b      	add	r3, sp, #44	; 0x2c
 800d030:	002a      	movs	r2, r5
 800d032:	a90c      	add	r1, sp, #48	; 0x30
 800d034:	2001      	movs	r0, #1
 800d036:	f7ff ff71 	bl	800cf1c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d03a:	ac07      	add	r4, sp, #28
 800d03c:	9400      	str	r4, [sp, #0]
 800d03e:	ab09      	add	r3, sp, #36	; 0x24
 800d040:	221e      	movs	r2, #30
 800d042:	446a      	add	r2, sp
 800d044:	a90a      	add	r1, sp, #40	; 0x28
 800d046:	2005      	movs	r0, #5
 800d048:	f7ff ff68 	bl	800cf1c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d04c:	2301      	movs	r3, #1
 800d04e:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d050:	2600      	movs	r6, #0
 800d052:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d054:	882b      	ldrh	r3, [r5, #0]
 800d056:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d058:	a90d      	add	r1, sp, #52	; 0x34
 800d05a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d05c:	f004 f92a 	bl	80112b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d060:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d062:	2302      	movs	r3, #2
 800d064:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d066:	8823      	ldrh	r3, [r4, #0]
 800d068:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d06a:	a90d      	add	r1, sp, #52	; 0x34
 800d06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d06e:	f004 f921 	bl	80112b4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d072:	8829      	ldrh	r1, [r5, #0]
 800d074:	2200      	movs	r2, #0
 800d076:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d078:	f004 fa90 	bl	801159c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d07c:	2005      	movs	r0, #5
 800d07e:	f000 faf1 	bl	800d664 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d082:	8821      	ldrh	r1, [r4, #0]
 800d084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d086:	f004 fa83 	bl	8011590 <HAL_GPIO_ReadPin>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d006      	beq.n	800d09c <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d08e:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <IsFactoryReset+0xf0>)
 800d090:	2201      	movs	r2, #1
 800d092:	4252      	negs	r2, r2
 800d094:	601a      	str	r2, [r3, #0]
	return 0;
 800d096:	2000      	movs	r0, #0
}
 800d098:	b012      	add	sp, #72	; 0x48
 800d09a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d09c:	2322      	movs	r3, #34	; 0x22
 800d09e:	446b      	add	r3, sp
 800d0a0:	8819      	ldrh	r1, [r3, #0]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d0a6:	f004 fa79 	bl	801159c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d0aa:	2005      	movs	r0, #5
 800d0ac:	f000 fada 	bl	800d664 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d0b0:	ab07      	add	r3, sp, #28
 800d0b2:	8819      	ldrh	r1, [r3, #0]
 800d0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b6:	f004 fa6b 	bl	8011590 <HAL_GPIO_ReadPin>
 800d0ba:	2801      	cmp	r0, #1
 800d0bc:	d1e7      	bne.n	800d08e <IsFactoryReset+0xb6>
			return 1;
 800d0be:	2001      	movs	r0, #1
 800d0c0:	e7ea      	b.n	800d098 <IsFactoryReset+0xc0>
 800d0c2:	46c0      	nop			; (mov r8, r8)
 800d0c4:	40021000 	.word	0x40021000
 800d0c8:	20007ff0 	.word	0x20007ff0

0800d0cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d0cc:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d0ce:	f002 fdc3 	bl	800fc58 <HAL_IncTick>
  osSystickHandler();  
 800d0d2:	f000 fe17 	bl	800dd04 <osSystickHandler>

}
 800d0d6:	bd10      	pop	{r4, pc}

0800d0d8 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d0d8:	e7fe      	b.n	800d0d8 <HardFault_Handler>
	...

0800d0dc <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d0dc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d0de:	4802      	ldr	r0, [pc, #8]	; (800d0e8 <USART1_IRQHandler+0xc>)
 800d0e0:	f005 ff69 	bl	8012fb6 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d0e4:	bd10      	pop	{r4, pc}
 800d0e6:	46c0      	nop			; (mov r8, r8)
 800d0e8:	20006304 	.word	0x20006304

0800d0ec <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d0ec:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d0ee:	4802      	ldr	r0, [pc, #8]	; (800d0f8 <USART2_IRQHandler+0xc>)
 800d0f0:	f005 ff61 	bl	8012fb6 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	46c0      	nop			; (mov r8, r8)
 800d0f8:	20006460 	.word	0x20006460

0800d0fc <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d0fc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d0fe:	4805      	ldr	r0, [pc, #20]	; (800d114 <USART3_8_IRQHandler+0x18>)
 800d100:	f005 ff59 	bl	8012fb6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d104:	4804      	ldr	r0, [pc, #16]	; (800d118 <USART3_8_IRQHandler+0x1c>)
 800d106:	f005 ff56 	bl	8012fb6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d10a:	4804      	ldr	r0, [pc, #16]	; (800d11c <USART3_8_IRQHandler+0x20>)
 800d10c:	f005 ff53 	bl	8012fb6 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d110:	bd10      	pop	{r4, pc}
 800d112:	46c0      	nop			; (mov r8, r8)
 800d114:	20006250 	.word	0x20006250
 800d118:	200063ec 	.word	0x200063ec
 800d11c:	2000637c 	.word	0x2000637c

0800d120 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d120:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d122:	2001      	movs	r0, #1
 800d124:	f7fa f962 	bl	80073ec <DMA_IRQHandler>
	
}
 800d128:	bd10      	pop	{r4, pc}
	...

0800d12c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d12c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d12e:	4b0c      	ldr	r3, [pc, #48]	; (800d160 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	06db      	lsls	r3, r3, #27
 800d134:	d408      	bmi.n	800d148 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d136:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	05db      	lsls	r3, r3, #23
 800d13c:	d408      	bmi.n	800d150 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d13e:	4b09      	ldr	r3, [pc, #36]	; (800d164 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	06db      	lsls	r3, r3, #27
 800d144:	d408      	bmi.n	800d158 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d146:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800d148:	2005      	movs	r0, #5
 800d14a:	f7fa f94f 	bl	80073ec <DMA_IRQHandler>
 800d14e:	e7fa      	b.n	800d146 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800d150:	2002      	movs	r0, #2
 800d152:	f7fa f94b 	bl	80073ec <DMA_IRQHandler>
 800d156:	e7f6      	b.n	800d146 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d158:	4803      	ldr	r0, [pc, #12]	; (800d168 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d15a:	f003 fb07 	bl	801076c <HAL_DMA_IRQHandler>
}
 800d15e:	e7f2      	b.n	800d146 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d160:	40020400 	.word	0x40020400
 800d164:	40020000 	.word	0x40020000
 800d168:	20001084 	.word	0x20001084

0800d16c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d16c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d16e:	4b18      	ldr	r3, [pc, #96]	; (800d1d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	03db      	lsls	r3, r3, #15
 800d174:	d417      	bmi.n	800d1a6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d176:	4b16      	ldr	r3, [pc, #88]	; (800d1d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	02db      	lsls	r3, r3, #11
 800d17c:	d417      	bmi.n	800d1ae <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d17e:	4b15      	ldr	r3, [pc, #84]	; (800d1d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x68>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	05db      	lsls	r3, r3, #23
 800d184:	d417      	bmi.n	800d1b6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d186:	4b12      	ldr	r3, [pc, #72]	; (800d1d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	04db      	lsls	r3, r3, #19
 800d18c:	d417      	bmi.n	800d1be <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x52>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d18e:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	01db      	lsls	r3, r3, #7
 800d194:	d417      	bmi.n	800d1c6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5a>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
	}

	 else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF5) == SET) {
 800d196:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x68>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	03db      	lsls	r3, r3, #15
 800d19c:	d506      	bpl.n	800d1ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
     	HAL_DMA_IRQHandler(&hdma_adc);
 800d19e:	480e      	ldr	r0, [pc, #56]	; (800d1d8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x6c>)
 800d1a0:	f003 fae4 	bl	801076c <HAL_DMA_IRQHandler>
	}
}
 800d1a4:	e002      	b.n	800d1ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		DMA_IRQHandler(P3);
 800d1a6:	2003      	movs	r0, #3
 800d1a8:	f7fa f920 	bl	80073ec <DMA_IRQHandler>
}
 800d1ac:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d1ae:	2004      	movs	r0, #4
 800d1b0:	f7fa f91c 	bl	80073ec <DMA_IRQHandler>
 800d1b4:	e7fa      	b.n	800d1ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		DMA_IRQHandler(P6);
 800d1b6:	2006      	movs	r0, #6
 800d1b8:	f7fa f918 	bl	80073ec <DMA_IRQHandler>
 800d1bc:	e7f6      	b.n	800d1ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d1be:	4807      	ldr	r0, [pc, #28]	; (800d1dc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x70>)
 800d1c0:	f003 fad4 	bl	801076c <HAL_DMA_IRQHandler>
 800d1c4:	e7f2      	b.n	800d1ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d1c6:	4806      	ldr	r0, [pc, #24]	; (800d1e0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x74>)
 800d1c8:	f003 fad0 	bl	801076c <HAL_DMA_IRQHandler>
 800d1cc:	e7ee      	b.n	800d1ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
 800d1ce:	46c0      	nop			; (mov r8, r8)
 800d1d0:	40020000 	.word	0x40020000
 800d1d4:	40020400 	.word	0x40020400
 800d1d8:	200064e4 	.word	0x200064e4
 800d1dc:	200010bc 	.word	0x200010bc
 800d1e0:	200010f4 	.word	0x200010f4

0800d1e4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1e4:	b510      	push	{r4, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d1ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d1f4:	f7fe ff02 	bl	800bffc <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d1f8:	0020      	movs	r0, r4
 800d1fa:	f7fe f993 	bl	800b524 <GetPort>
 800d1fe:	0080      	lsls	r0, r0, #2
 800d200:	4b03      	ldr	r3, [pc, #12]	; (800d210 <HAL_UART_TxCpltCallback+0x2c>)
 800d202:	58c0      	ldr	r0, [r0, r3]
 800d204:	a901      	add	r1, sp, #4
 800d206:	f001 f901 	bl	800e40c <xQueueGiveFromISR>
}
 800d20a:	b002      	add	sp, #8
 800d20c:	bd10      	pop	{r4, pc}
 800d20e:	46c0      	nop			; (mov r8, r8)
 800d210:	200061b0 	.word	0x200061b0

0800d214 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d214:	b510      	push	{r4, lr}
 800d216:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d218:	2369      	movs	r3, #105	; 0x69
 800d21a:	2201      	movs	r2, #1
 800d21c:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d21e:	f7fe f981 	bl	800b524 <GetPort>
	if (portStatus[port] == STREAM) {
 800d222:	4b0c      	ldr	r3, [pc, #48]	; (800d254 <HAL_UART_ErrorCallback+0x40>)
 800d224:	5c1b      	ldrb	r3, [r3, r0]
 800d226:	2b02      	cmp	r3, #2
 800d228:	d005      	beq.n	800d236 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d22a:	4b0b      	ldr	r3, [pc, #44]	; (800d258 <HAL_UART_ErrorCallback+0x44>)
 800d22c:	1818      	adds	r0, r3, r0
 800d22e:	3801      	subs	r0, #1
 800d230:	2301      	movs	r3, #1
 800d232:	7003      	strb	r3, [r0, #0]
	}	
}
 800d234:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	b292      	uxth	r2, r2
 800d23e:	3801      	subs	r0, #1
 800d240:	0080      	lsls	r0, r0, #2
 800d242:	4b06      	ldr	r3, [pc, #24]	; (800d25c <HAL_UART_ErrorCallback+0x48>)
 800d244:	58c3      	ldr	r3, [r0, r3]
 800d246:	6819      	ldr	r1, [r3, #0]
 800d248:	3128      	adds	r1, #40	; 0x28
 800d24a:	0020      	movs	r0, r4
 800d24c:	f005 fa9c 	bl	8012788 <HAL_UART_Receive_DMA>
 800d250:	e7f0      	b.n	800d234 <HAL_UART_ErrorCallback+0x20>
 800d252:	46c0      	nop			; (mov r8, r8)
 800d254:	200008e0 	.word	0x200008e0
 800d258:	20000ab0 	.word	0x20000ab0
 800d25c:	20000c4c 	.word	0x20000c4c

0800d260 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d260:	b510      	push	{r4, lr}
 800d262:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d264:	f7fe f95e 	bl	800b524 <GetPort>
 800d268:	4b13      	ldr	r3, [pc, #76]	; (800d2b8 <HAL_UART_RxCpltCallback+0x58>)
 800d26a:	5c1b      	ldrb	r3, [r3, r0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d006      	beq.n	800d27e <HAL_UART_RxCpltCallback+0x1e>
 800d270:	0020      	movs	r0, r4
 800d272:	f7fe f957 	bl	800b524 <GetPort>
 800d276:	4b10      	ldr	r3, [pc, #64]	; (800d2b8 <HAL_UART_RxCpltCallback+0x58>)
 800d278:	5c1b      	ldrb	r3, [r3, r0]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d11a      	bne.n	800d2b4 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d27e:	0020      	movs	r0, r4
 800d280:	f7fe f950 	bl	800b524 <GetPort>
 800d284:	4b0d      	ldr	r3, [pc, #52]	; (800d2bc <HAL_UART_RxCpltCallback+0x5c>)
 800d286:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d288:	0020      	movs	r0, r4
 800d28a:	f7fe f94b 	bl	800b524 <GetPort>
 800d28e:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <HAL_UART_RxCpltCallback+0x58>)
 800d290:	2205      	movs	r2, #5
 800d292:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d294:	0020      	movs	r0, r4
 800d296:	f7fe f945 	bl	800b524 <GetPort>
 800d29a:	4b09      	ldr	r3, [pc, #36]	; (800d2c0 <HAL_UART_RxCpltCallback+0x60>)
 800d29c:	1818      	adds	r0, r3, r0
 800d29e:	3801      	subs	r0, #1
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d2a4:	0020      	movs	r0, r4
 800d2a6:	f7fe f93d 	bl	800b524 <GetPort>
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <HAL_UART_RxCpltCallback+0x64>)
 800d2ac:	1818      	adds	r0, r3, r0
 800d2ae:	3801      	subs	r0, #1
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	7003      	strb	r3, [r0, #0]
	}
}
 800d2b4:	bd10      	pop	{r4, pc}
 800d2b6:	46c0      	nop			; (mov r8, r8)
 800d2b8:	200008e0 	.word	0x200008e0
 800d2bc:	20006130 	.word	0x20006130
 800d2c0:	20000bf8 	.word	0x20000bf8
 800d2c4:	20000ab0 	.word	0x20000ab0

0800d2c8 <ADC1_COMP_IRQHandler>:
/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */

void ADC1_COMP_IRQHandler(void)
{
 800d2c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800d2ca:	4802      	ldr	r0, [pc, #8]	; (800d2d4 <ADC1_COMP_IRQHandler+0xc>)
 800d2cc:	f002 fec8 	bl	8010060 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800d2d0:	bd10      	pop	{r4, pc}
 800d2d2:	46c0      	nop			; (mov r8, r8)
 800d2d4:	200061e8 	.word	0x200061e8

0800d2d8 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d2d8:	b672      	cpsid	i
 800d2da:	e7fe      	b.n	800d2da <vApplicationStackOverflowHook+0x2>

0800d2dc <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d2dc:	b672      	cpsid	i
 800d2de:	e7fe      	b.n	800d2de <vApplicationMallocFailedHook+0x2>

0800d2e0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2e2:	46ce      	mov	lr, r9
 800d2e4:	b500      	push	{lr}
 800d2e6:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d2e8:	ac05      	add	r4, sp, #20
 800d2ea:	4b34      	ldr	r3, [pc, #208]	; (800d3bc <RTC_CalendarConfig+0xdc>)
 800d2ec:	0022      	movs	r2, r4
 800d2ee:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d2f0:	c243      	stmia	r2!, {r0, r1, r6}
 800d2f2:	aa02      	add	r2, sp, #8
 800d2f4:	4b32      	ldr	r3, [pc, #200]	; (800d3c0 <RTC_CalendarConfig+0xe0>)
 800d2f6:	cb03      	ldmia	r3!, {r0, r1}
 800d2f8:	c203      	stmia	r2!, {r0, r1}
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d2fe:	2015      	movs	r0, #21
 800d300:	ab02      	add	r3, sp, #8
 800d302:	469c      	mov	ip, r3
 800d304:	4460      	add	r0, ip
 800d306:	f005 fee6 	bl	80130d6 <atoi>
 800d30a:	b2c3      	uxtb	r3, r0
 800d30c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d30e:	2600      	movs	r6, #0
 800d310:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800d312:	a806      	add	r0, sp, #24
 800d314:	f005 fedf 	bl	80130d6 <atoi>
 800d318:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800d31a:	70e6      	strb	r6, [r4, #3]
 800d31c:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d31e:	4e29      	ldr	r6, [pc, #164]	; (800d3c4 <RTC_CalendarConfig+0xe4>)
 800d320:	e002      	b.n	800d328 <RTC_CalendarConfig+0x48>
 800d322:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800d324:	2c0d      	cmp	r4, #13
 800d326:	d009      	beq.n	800d33c <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d328:	00a3      	lsls	r3, r4, #2
 800d32a:	3b04      	subs	r3, #4
 800d32c:	58f1      	ldr	r1, [r6, r3]
 800d32e:	a805      	add	r0, sp, #20
 800d330:	f7f2 fee8 	bl	8000104 <strcmp>
 800d334:	2800      	cmp	r0, #0
 800d336:	d1f4      	bne.n	800d322 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800d338:	b2e5      	uxtb	r5, r4
 800d33a:	e7f2      	b.n	800d322 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d33c:	ab02      	add	r3, sp, #8
 800d33e:	1d98      	adds	r0, r3, #6
 800d340:	f005 fec9 	bl	80130d6 <atoi>
 800d344:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800d346:	ac05      	add	r4, sp, #20
 800d348:	2600      	movs	r6, #0
 800d34a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800d34c:	ab02      	add	r3, sp, #8
 800d34e:	1cd8      	adds	r0, r3, #3
 800d350:	f005 fec1 	bl	80130d6 <atoi>
 800d354:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800d356:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800d358:	a802      	add	r0, sp, #8
 800d35a:	f005 febc 	bl	80130d6 <atoi>
 800d35e:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d360:	a90d      	add	r1, sp, #52	; 0x34
 800d362:	464b      	mov	r3, r9
 800d364:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d366:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d368:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d36a:	2301      	movs	r3, #1
 800d36c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d36e:	2200      	movs	r2, #0
 800d370:	4815      	ldr	r0, [pc, #84]	; (800d3c8 <RTC_CalendarConfig+0xe8>)
 800d372:	f004 ff55 	bl	8012220 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800d376:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d378:	2800      	cmp	r0, #0
 800d37a:	d119      	bne.n	800d3b0 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800d37c:	a908      	add	r1, sp, #32
 800d37e:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d384:	9b00      	ldr	r3, [sp, #0]
 800d386:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d388:	2300      	movs	r3, #0
 800d38a:	720b      	strb	r3, [r1, #8]
 800d38c:	4a0f      	ldr	r2, [pc, #60]	; (800d3cc <RTC_CalendarConfig+0xec>)
 800d38e:	3018      	adds	r0, #24
 800d390:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d392:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d394:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d396:	2200      	movs	r2, #0
 800d398:	480b      	ldr	r0, [pc, #44]	; (800d3c8 <RTC_CalendarConfig+0xe8>)
 800d39a:	f004 febb 	bl	8012114 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d39e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d105      	bne.n	800d3b0 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d3a4:	4a0a      	ldr	r2, [pc, #40]	; (800d3d0 <RTC_CalendarConfig+0xf0>)
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4807      	ldr	r0, [pc, #28]	; (800d3c8 <RTC_CalendarConfig+0xe8>)
 800d3aa:	f004 fffd 	bl	80123a8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	0018      	movs	r0, r3
 800d3b2:	b00e      	add	sp, #56	; 0x38
 800d3b4:	bc04      	pop	{r2}
 800d3b6:	4691      	mov	r9, r2
 800d3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3ba:	46c0      	nop			; (mov r8, r8)
 800d3bc:	080159a0 	.word	0x080159a0
 800d3c0:	080187f0 	.word	0x080187f0
 800d3c4:	20000020 	.word	0x20000020
 800d3c8:	20006540 	.word	0x20006540
 800d3cc:	20006130 	.word	0x20006130
 800d3d0:	000032f2 	.word	0x000032f2

0800d3d4 <RTC_Init>:
{
 800d3d4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d3d6:	4a1c      	ldr	r2, [pc, #112]	; (800d448 <RTC_Init+0x74>)
 800d3d8:	6a11      	ldr	r1, [r2, #32]
 800d3da:	2380      	movs	r3, #128	; 0x80
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d3e2:	481a      	ldr	r0, [pc, #104]	; (800d44c <RTC_Init+0x78>)
 800d3e4:	4b1a      	ldr	r3, [pc, #104]	; (800d450 <RTC_Init+0x7c>)
 800d3e6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d3ec:	227c      	movs	r2, #124	; 0x7c
 800d3ee:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d3f0:	4a18      	ldr	r2, [pc, #96]	; (800d454 <RTC_Init+0x80>)
 800d3f2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d3f4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d3f6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d3f8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d3fa:	f004 fe2d 	bl	8012058 <HAL_RTC_Init>
 800d3fe:	23ff      	movs	r3, #255	; 0xff
 800d400:	2800      	cmp	r0, #0
 800d402:	d11e      	bne.n	800d442 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d404:	2101      	movs	r1, #1
 800d406:	4811      	ldr	r0, [pc, #68]	; (800d44c <RTC_Init+0x78>)
 800d408:	f004 ffd4 	bl	80123b4 <HAL_RTCEx_BKUPRead>
 800d40c:	4b12      	ldr	r3, [pc, #72]	; (800d458 <RTC_Init+0x84>)
 800d40e:	4298      	cmp	r0, r3
 800d410:	d10e      	bne.n	800d430 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d412:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <RTC_Init+0x74>)
 800d414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	d502      	bpl.n	800d420 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <RTC_Init+0x88>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d420:	4b09      	ldr	r3, [pc, #36]	; (800d448 <RTC_Init+0x74>)
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	015b      	lsls	r3, r3, #5
 800d426:	d505      	bpl.n	800d434 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800d428:	4b0c      	ldr	r3, [pc, #48]	; (800d45c <RTC_Init+0x88>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	e001      	b.n	800d434 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800d430:	f7ff ff56 	bl	800d2e0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d434:	4a04      	ldr	r2, [pc, #16]	; (800d448 <RTC_Init+0x74>)
 800d436:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d438:	2380      	movs	r3, #128	; 0x80
 800d43a:	045b      	lsls	r3, r3, #17
 800d43c:	430b      	orrs	r3, r1
 800d43e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	0018      	movs	r0, r3
 800d444:	bd10      	pop	{r4, pc}
 800d446:	46c0      	nop			; (mov r8, r8)
 800d448:	40021000 	.word	0x40021000
 800d44c:	20006540 	.word	0x20006540
 800d450:	40002800 	.word	0x40002800
 800d454:	000007cf 	.word	0x000007cf
 800d458:	000032f2 	.word	0x000032f2
 800d45c:	2000127c 	.word	0x2000127c

0800d460 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d462:	46c6      	mov	lr, r8
 800d464:	b500      	push	{lr}
 800d466:	b086      	sub	sp, #24
 800d468:	ac0c      	add	r4, sp, #48	; 0x30
 800d46a:	7827      	ldrb	r7, [r4, #0]
 800d46c:	ac0d      	add	r4, sp, #52	; 0x34
 800d46e:	7824      	ldrb	r4, [r4, #0]
 800d470:	46a0      	mov	r8, r4
 800d472:	ac0e      	add	r4, sp, #56	; 0x38
 800d474:	7825      	ldrb	r5, [r4, #0]
 800d476:	ac0f      	add	r4, sp, #60	; 0x3c
 800d478:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d47a:	ac05      	add	r4, sp, #20
 800d47c:	3230      	adds	r2, #48	; 0x30
 800d47e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d480:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d482:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d484:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d486:	2200      	movs	r2, #0
 800d488:	0021      	movs	r1, r4
 800d48a:	481f      	ldr	r0, [pc, #124]	; (800d508 <BOS_CalendarConfig+0xa8>)
 800d48c:	f004 fec8 	bl	8012220 <HAL_RTC_SetDate>
 800d490:	2800      	cmp	r0, #0
 800d492:	d136      	bne.n	800d502 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d494:	466b      	mov	r3, sp
 800d496:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d498:	4642      	mov	r2, r8
 800d49a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d49c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d4a2:	2e01      	cmp	r6, #1
 800d4a4:	d020      	beq.n	800d4e8 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d4a6:	2e02      	cmp	r6, #2
 800d4a8:	d024      	beq.n	800d4f4 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d4aa:	4b18      	ldr	r3, [pc, #96]	; (800d50c <BOS_CalendarConfig+0xac>)
 800d4ac:	2218      	movs	r2, #24
 800d4ae:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4669      	mov	r1, sp
 800d4b4:	4814      	ldr	r0, [pc, #80]	; (800d508 <BOS_CalendarConfig+0xa8>)
 800d4b6:	f004 fe2d 	bl	8012114 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d4ba:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d10e      	bne.n	800d4de <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d4c0:	4a12      	ldr	r2, [pc, #72]	; (800d50c <BOS_CalendarConfig+0xac>)
 800d4c2:	7b53      	ldrb	r3, [r2, #13]
 800d4c4:	021b      	lsls	r3, r3, #8
 800d4c6:	7911      	ldrb	r1, [r2, #4]
 800d4c8:	4319      	orrs	r1, r3
 800d4ca:	308d      	adds	r0, #141	; 0x8d
 800d4cc:	0040      	lsls	r0, r0, #1
 800d4ce:	f7fa f871 	bl	80075b4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d4d2:	4a0f      	ldr	r2, [pc, #60]	; (800d510 <BOS_CalendarConfig+0xb0>)
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	480c      	ldr	r0, [pc, #48]	; (800d508 <BOS_CalendarConfig+0xa8>)
 800d4d8:	f004 ff66 	bl	80123a8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	0018      	movs	r0, r3
 800d4e0:	b006      	add	sp, #24
 800d4e2:	bc04      	pop	{r2}
 800d4e4:	4690      	mov	r8, r2
 800d4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d4e8:	466a      	mov	r2, sp
 800d4ea:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d4ec:	4b07      	ldr	r3, [pc, #28]	; (800d50c <BOS_CalendarConfig+0xac>)
 800d4ee:	220c      	movs	r2, #12
 800d4f0:	735a      	strb	r2, [r3, #13]
 800d4f2:	e7dd      	b.n	800d4b0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d4f4:	2340      	movs	r3, #64	; 0x40
 800d4f6:	466a      	mov	r2, sp
 800d4f8:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d4fa:	4b04      	ldr	r3, [pc, #16]	; (800d50c <BOS_CalendarConfig+0xac>)
 800d4fc:	220c      	movs	r2, #12
 800d4fe:	735a      	strb	r2, [r3, #13]
 800d500:	e7d6      	b.n	800d4b0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d502:	23ff      	movs	r3, #255	; 0xff
 800d504:	e7eb      	b.n	800d4de <BOS_CalendarConfig+0x7e>
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	20006540 	.word	0x20006540
 800d50c:	20006130 	.word	0x20006130
 800d510:	000032f2 	.word	0x000032f2

0800d514 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d514:	b530      	push	{r4, r5, lr}
 800d516:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d518:	4d16      	ldr	r5, [pc, #88]	; (800d574 <GetTimeDate+0x60>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	a902      	add	r1, sp, #8
 800d51e:	0028      	movs	r0, r5
 800d520:	f004 fefa 	bl	8012318 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d524:	ac07      	add	r4, sp, #28
 800d526:	2200      	movs	r2, #0
 800d528:	0021      	movs	r1, r4
 800d52a:	0028      	movs	r0, r5
 800d52c:	f004 ff1a 	bl	8012364 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d530:	4b11      	ldr	r3, [pc, #68]	; (800d578 <GetTimeDate+0x64>)
 800d532:	aa02      	add	r2, sp, #8
 800d534:	7a12      	ldrb	r2, [r2, #8]
 800d536:	09d2      	lsrs	r2, r2, #7
 800d538:	3201      	adds	r2, #1
 800d53a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d53c:	9a03      	ldr	r2, [sp, #12]
 800d53e:	9201      	str	r2, [sp, #4]
 800d540:	0852      	lsrs	r2, r2, #1
 800d542:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d544:	aa02      	add	r2, sp, #8
 800d546:	7892      	ldrb	r2, [r2, #2]
 800d548:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d54a:	aa02      	add	r2, sp, #8
 800d54c:	7852      	ldrb	r2, [r2, #1]
 800d54e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d550:	aa02      	add	r2, sp, #8
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d556:	78a2      	ldrb	r2, [r4, #2]
 800d558:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d55a:	7862      	ldrb	r2, [r4, #1]
 800d55c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d55e:	7822      	ldrb	r2, [r4, #0]
 800d560:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d562:	78e2      	ldrb	r2, [r4, #3]
 800d564:	21fa      	movs	r1, #250	; 0xfa
 800d566:	00c9      	lsls	r1, r1, #3
 800d568:	468c      	mov	ip, r1
 800d56a:	4462      	add	r2, ip
 800d56c:	831a      	strh	r2, [r3, #24]
}
 800d56e:	b009      	add	sp, #36	; 0x24
 800d570:	bd30      	pop	{r4, r5, pc}
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	20006540 	.word	0x20006540
 800d578:	20006130 	.word	0x20006130

0800d57c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d57c:	b530      	push	{r4, r5, lr}
 800d57e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d580:	4a12      	ldr	r2, [pc, #72]	; (800d5cc <TIM_USEC_Init+0x50>)
 800d582:	69d1      	ldr	r1, [r2, #28]
 800d584:	2080      	movs	r0, #128	; 0x80
 800d586:	0040      	lsls	r0, r0, #1
 800d588:	4301      	orrs	r1, r0
 800d58a:	61d1      	str	r1, [r2, #28]
 800d58c:	69d3      	ldr	r3, [r2, #28]
 800d58e:	4003      	ands	r3, r0
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d594:	4c0e      	ldr	r4, [pc, #56]	; (800d5d0 <TIM_USEC_Init+0x54>)
 800d596:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <TIM_USEC_Init+0x58>)
 800d598:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d59a:	f004 fc75 	bl	8011e88 <HAL_RCC_GetPCLK1Freq>
 800d59e:	490e      	ldr	r1, [pc, #56]	; (800d5d8 <TIM_USEC_Init+0x5c>)
 800d5a0:	f7f2 fdcc 	bl	800013c <__udivsi3>
 800d5a4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5a6:	2500      	movs	r5, #0
 800d5a8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d5aa:	4b0c      	ldr	r3, [pc, #48]	; (800d5dc <TIM_USEC_Init+0x60>)
 800d5ac:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d5ae:	0020      	movs	r0, r4
 800d5b0:	f004 ff90 	bl	80124d4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5b4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5b6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d5b8:	a902      	add	r1, sp, #8
 800d5ba:	0020      	movs	r0, r4
 800d5bc:	f004 ffa4 	bl	8012508 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d5c0:	0020      	movs	r0, r4
 800d5c2:	f004 fefe 	bl	80123c2 <HAL_TIM_Base_Start>
}
 800d5c6:	b005      	add	sp, #20
 800d5c8:	bd30      	pop	{r4, r5, pc}
 800d5ca:	46c0      	nop			; (mov r8, r8)
 800d5cc:	40021000 	.word	0x40021000
 800d5d0:	2000659c 	.word	0x2000659c
 800d5d4:	40002000 	.word	0x40002000
 800d5d8:	000f4240 	.word	0x000f4240
 800d5dc:	0000ffff 	.word	0x0000ffff

0800d5e0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d5e0:	b530      	push	{r4, r5, lr}
 800d5e2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d5e4:	4a12      	ldr	r2, [pc, #72]	; (800d630 <TIM_MSEC_Init+0x50>)
 800d5e6:	6991      	ldr	r1, [r2, #24]
 800d5e8:	2080      	movs	r0, #128	; 0x80
 800d5ea:	0240      	lsls	r0, r0, #9
 800d5ec:	4301      	orrs	r1, r0
 800d5ee:	6191      	str	r1, [r2, #24]
 800d5f0:	6993      	ldr	r3, [r2, #24]
 800d5f2:	4003      	ands	r3, r0
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d5f8:	4c0e      	ldr	r4, [pc, #56]	; (800d634 <TIM_MSEC_Init+0x54>)
 800d5fa:	4b0f      	ldr	r3, [pc, #60]	; (800d638 <TIM_MSEC_Init+0x58>)
 800d5fc:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d5fe:	f004 fc43 	bl	8011e88 <HAL_RCC_GetPCLK1Freq>
 800d602:	21fa      	movs	r1, #250	; 0xfa
 800d604:	0089      	lsls	r1, r1, #2
 800d606:	f7f2 fd99 	bl	800013c <__udivsi3>
 800d60a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d60c:	2500      	movs	r5, #0
 800d60e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <TIM_MSEC_Init+0x5c>)
 800d612:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d614:	0020      	movs	r0, r4
 800d616:	f004 ff5d 	bl	80124d4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d61a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d61c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d61e:	a902      	add	r1, sp, #8
 800d620:	0020      	movs	r0, r4
 800d622:	f004 ff71 	bl	8012508 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d626:	0020      	movs	r0, r4
 800d628:	f004 fecb 	bl	80123c2 <HAL_TIM_Base_Start>
}
 800d62c:	b005      	add	sp, #20
 800d62e:	bd30      	pop	{r4, r5, pc}
 800d630:	40021000 	.word	0x40021000
 800d634:	20006560 	.word	0x20006560
 800d638:	40014000 	.word	0x40014000
 800d63c:	0000ffff 	.word	0x0000ffff

0800d640 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d640:	b510      	push	{r4, lr}
 800d642:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d644:	f002 f9a4 	bl	800f990 <vPortEnterCritical>
	
	if (Delay)
 800d648:	2c00      	cmp	r4, #0
 800d64a:	d006      	beq.n	800d65a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d64c:	4b04      	ldr	r3, [pc, #16]	; (800d660 <StartMicroDelay+0x20>)
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d652:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d654:	1a5b      	subs	r3, r3, r1
 800d656:	42a3      	cmp	r3, r4
 800d658:	d9fb      	bls.n	800d652 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d65a:	f002 f9a5 	bl	800f9a8 <vPortExitCritical>
}
 800d65e:	bd10      	pop	{r4, pc}
 800d660:	2000659c 	.word	0x2000659c

0800d664 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d664:	b510      	push	{r4, lr}
 800d666:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d668:	f002 f992 	bl	800f990 <vPortEnterCritical>
	
	if (Delay)
 800d66c:	2c00      	cmp	r4, #0
 800d66e:	d006      	beq.n	800d67e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d670:	4b04      	ldr	r3, [pc, #16]	; (800d684 <StartMilliDelay+0x20>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d676:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d678:	1a5b      	subs	r3, r3, r1
 800d67a:	42a3      	cmp	r3, r4
 800d67c:	d9fb      	bls.n	800d676 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d67e:	f002 f993 	bl	800f9a8 <vPortExitCritical>
}
 800d682:	bd10      	pop	{r4, pc}
 800d684:	20006560 	.word	0x20006560

0800d688 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d688:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d68a:	4809      	ldr	r0, [pc, #36]	; (800d6b0 <MX_USART1_UART_Init+0x28>)
 800d68c:	4b09      	ldr	r3, [pc, #36]	; (800d6b4 <MX_USART1_UART_Init+0x2c>)
 800d68e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d690:	23e1      	movs	r3, #225	; 0xe1
 800d692:	031b      	lsls	r3, r3, #12
 800d694:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d696:	2300      	movs	r3, #0
 800d698:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d69a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d69c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d69e:	220c      	movs	r2, #12
 800d6a0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6a2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6a4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d6a6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d6a8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d6aa:	f005 fbad 	bl	8012e08 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d6ae:	bd10      	pop	{r4, pc}
 800d6b0:	20006304 	.word	0x20006304
 800d6b4:	40013800 	.word	0x40013800

0800d6b8 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d6b8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d6ba:	4809      	ldr	r0, [pc, #36]	; (800d6e0 <MX_USART2_UART_Init+0x28>)
 800d6bc:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <MX_USART2_UART_Init+0x2c>)
 800d6be:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d6c0:	23e1      	movs	r3, #225	; 0xe1
 800d6c2:	031b      	lsls	r3, r3, #12
 800d6c4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d6ca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d6cc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d6ce:	220c      	movs	r2, #12
 800d6d0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6d2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6d4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d6d6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d6d8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d6da:	f005 fb95 	bl	8012e08 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d6de:	bd10      	pop	{r4, pc}
 800d6e0:	20006460 	.word	0x20006460
 800d6e4:	40004400 	.word	0x40004400

0800d6e8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d6e8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d6ea:	4809      	ldr	r0, [pc, #36]	; (800d710 <MX_USART3_UART_Init+0x28>)
 800d6ec:	4b09      	ldr	r3, [pc, #36]	; (800d714 <MX_USART3_UART_Init+0x2c>)
 800d6ee:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d6f0:	23e1      	movs	r3, #225	; 0xe1
 800d6f2:	031b      	lsls	r3, r3, #12
 800d6f4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d6fa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d6fc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d6fe:	220c      	movs	r2, #12
 800d700:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d702:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d704:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d706:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d708:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d70a:	f005 fb7d 	bl	8012e08 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d70e:	bd10      	pop	{r4, pc}
 800d710:	20006250 	.word	0x20006250
 800d714:	40004800 	.word	0x40004800

0800d718 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800d718:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d71a:	4809      	ldr	r0, [pc, #36]	; (800d740 <MX_USART4_UART_Init+0x28>)
 800d71c:	4b09      	ldr	r3, [pc, #36]	; (800d744 <MX_USART4_UART_Init+0x2c>)
 800d71e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d720:	23e1      	movs	r3, #225	; 0xe1
 800d722:	031b      	lsls	r3, r3, #12
 800d724:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d726:	2300      	movs	r3, #0
 800d728:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d72a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d72c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d72e:	220c      	movs	r2, #12
 800d730:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d732:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d734:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d736:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d738:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d73a:	f005 fb65 	bl	8012e08 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d73e:	bd10      	pop	{r4, pc}
 800d740:	200063ec 	.word	0x200063ec
 800d744:	40004c00 	.word	0x40004c00

0800d748 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d748:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d74a:	4809      	ldr	r0, [pc, #36]	; (800d770 <MX_USART6_UART_Init+0x28>)
 800d74c:	4b09      	ldr	r3, [pc, #36]	; (800d774 <MX_USART6_UART_Init+0x2c>)
 800d74e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d750:	23e1      	movs	r3, #225	; 0xe1
 800d752:	031b      	lsls	r3, r3, #12
 800d754:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d756:	2300      	movs	r3, #0
 800d758:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d75a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d75c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d75e:	220c      	movs	r2, #12
 800d760:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d762:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d764:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d766:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d768:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d76a:	f005 fb4d 	bl	8012e08 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d76e:	bd10      	pop	{r4, pc}
 800d770:	2000637c 	.word	0x2000637c
 800d774:	40011400 	.word	0x40011400

0800d778 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d77a:	46ce      	mov	lr, r9
 800d77c:	b500      	push	{lr}
 800d77e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d780:	6803      	ldr	r3, [r0, #0]
 800d782:	4a7a      	ldr	r2, [pc, #488]	; (800d96c <HAL_UART_MspInit+0x1f4>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d011      	beq.n	800d7ac <HAL_UART_MspInit+0x34>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d788:	4a79      	ldr	r2, [pc, #484]	; (800d970 <HAL_UART_MspInit+0x1f8>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d03c      	beq.n	800d808 <HAL_UART_MspInit+0x90>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d78e:	4a79      	ldr	r2, [pc, #484]	; (800d974 <HAL_UART_MspInit+0x1fc>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d065      	beq.n	800d860 <HAL_UART_MspInit+0xe8>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d794:	4a78      	ldr	r2, [pc, #480]	; (800d978 <HAL_UART_MspInit+0x200>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d100      	bne.n	800d79c <HAL_UART_MspInit+0x24>
 800d79a:	e08e      	b.n	800d8ba <HAL_UART_MspInit+0x142>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d79c:	4a77      	ldr	r2, [pc, #476]	; (800d97c <HAL_UART_MspInit+0x204>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d100      	bne.n	800d7a4 <HAL_UART_MspInit+0x2c>
 800d7a2:	e0b5      	b.n	800d910 <HAL_UART_MspInit+0x198>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d7a4:	b00a      	add	sp, #40	; 0x28
 800d7a6:	bc04      	pop	{r2}
 800d7a8:	4691      	mov	r9, r2
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d7ac:	4a74      	ldr	r2, [pc, #464]	; (800d980 <HAL_UART_MspInit+0x208>)
 800d7ae:	6991      	ldr	r1, [r2, #24]
 800d7b0:	2080      	movs	r0, #128	; 0x80
 800d7b2:	01c0      	lsls	r0, r0, #7
 800d7b4:	4301      	orrs	r1, r0
 800d7b6:	6191      	str	r1, [r2, #24]
 800d7b8:	6993      	ldr	r3, [r2, #24]
 800d7ba:	4003      	ands	r3, r0
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d7c0:	2380      	movs	r3, #128	; 0x80
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7c6:	2702      	movs	r7, #2
 800d7c8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d7ca:	2401      	movs	r4, #1
 800d7cc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d7ce:	2603      	movs	r6, #3
 800d7d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d7d2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d7d4:	2590      	movs	r5, #144	; 0x90
 800d7d6:	05ed      	lsls	r5, r5, #23
 800d7d8:	a905      	add	r1, sp, #20
 800d7da:	0028      	movs	r0, r5
 800d7dc:	f003 fd6a 	bl	80112b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d7e0:	2380      	movs	r3, #128	; 0x80
 800d7e2:	00db      	lsls	r3, r3, #3
 800d7e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7e6:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d7e8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d7ea:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d7ec:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d7ee:	a905      	add	r1, sp, #20
 800d7f0:	0028      	movs	r0, r5
 800d7f2:	f003 fd5f 	bl	80112b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	201b      	movs	r0, #27
 800d7fc:	f002 fd90 	bl	8010320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d800:	201b      	movs	r0, #27
 800d802:	f002 fdc1 	bl	8010388 <HAL_NVIC_EnableIRQ>
 800d806:	e7cd      	b.n	800d7a4 <HAL_UART_MspInit+0x2c>
    __USART2_CLK_ENABLE();
 800d808:	4a5d      	ldr	r2, [pc, #372]	; (800d980 <HAL_UART_MspInit+0x208>)
 800d80a:	69d1      	ldr	r1, [r2, #28]
 800d80c:	2080      	movs	r0, #128	; 0x80
 800d80e:	0280      	lsls	r0, r0, #10
 800d810:	4301      	orrs	r1, r0
 800d812:	61d1      	str	r1, [r2, #28]
 800d814:	69d3      	ldr	r3, [r2, #28]
 800d816:	4003      	ands	r3, r0
 800d818:	9301      	str	r3, [sp, #4]
 800d81a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d81c:	2304      	movs	r3, #4
 800d81e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d820:	2702      	movs	r7, #2
 800d822:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d824:	2401      	movs	r4, #1
 800d826:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d828:	2603      	movs	r6, #3
 800d82a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d82c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d82e:	2590      	movs	r5, #144	; 0x90
 800d830:	05ed      	lsls	r5, r5, #23
 800d832:	a905      	add	r1, sp, #20
 800d834:	0028      	movs	r0, r5
 800d836:	f003 fd3d 	bl	80112b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d83a:	2308      	movs	r3, #8
 800d83c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d83e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d840:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d842:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d844:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d846:	a905      	add	r1, sp, #20
 800d848:	0028      	movs	r0, r5
 800d84a:	f003 fd33 	bl	80112b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d84e:	2200      	movs	r2, #0
 800d850:	2101      	movs	r1, #1
 800d852:	201c      	movs	r0, #28
 800d854:	f002 fd64 	bl	8010320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d858:	201c      	movs	r0, #28
 800d85a:	f002 fd95 	bl	8010388 <HAL_NVIC_EnableIRQ>
 800d85e:	e7a1      	b.n	800d7a4 <HAL_UART_MspInit+0x2c>
    __USART3_CLK_ENABLE();
 800d860:	4a47      	ldr	r2, [pc, #284]	; (800d980 <HAL_UART_MspInit+0x208>)
 800d862:	69d1      	ldr	r1, [r2, #28]
 800d864:	2080      	movs	r0, #128	; 0x80
 800d866:	02c0      	lsls	r0, r0, #11
 800d868:	4301      	orrs	r1, r0
 800d86a:	61d1      	str	r1, [r2, #28]
 800d86c:	69d3      	ldr	r3, [r2, #28]
 800d86e:	4003      	ands	r3, r0
 800d870:	9302      	str	r3, [sp, #8]
 800d872:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d874:	2380      	movs	r3, #128	; 0x80
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d87a:	2402      	movs	r4, #2
 800d87c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d87e:	2701      	movs	r7, #1
 800d880:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d882:	2603      	movs	r6, #3
 800d884:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d886:	2504      	movs	r5, #4
 800d888:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d88a:	a905      	add	r1, sp, #20
 800d88c:	483d      	ldr	r0, [pc, #244]	; (800d984 <HAL_UART_MspInit+0x20c>)
 800d88e:	f003 fd11 	bl	80112b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d892:	2380      	movs	r3, #128	; 0x80
 800d894:	011b      	lsls	r3, r3, #4
 800d896:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d898:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d89a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d89c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800d89e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d8a0:	a905      	add	r1, sp, #20
 800d8a2:	4838      	ldr	r0, [pc, #224]	; (800d984 <HAL_UART_MspInit+0x20c>)
 800d8a4:	f003 fd06 	bl	80112b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	201d      	movs	r0, #29
 800d8ae:	f002 fd37 	bl	8010320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d8b2:	201d      	movs	r0, #29
 800d8b4:	f002 fd68 	bl	8010388 <HAL_NVIC_EnableIRQ>
 800d8b8:	e774      	b.n	800d7a4 <HAL_UART_MspInit+0x2c>
    __USART4_CLK_ENABLE();
 800d8ba:	4a31      	ldr	r2, [pc, #196]	; (800d980 <HAL_UART_MspInit+0x208>)
 800d8bc:	69d1      	ldr	r1, [r2, #28]
 800d8be:	2080      	movs	r0, #128	; 0x80
 800d8c0:	0300      	lsls	r0, r0, #12
 800d8c2:	4301      	orrs	r1, r0
 800d8c4:	61d1      	str	r1, [r2, #28]
 800d8c6:	69d3      	ldr	r3, [r2, #28]
 800d8c8:	4003      	ands	r3, r0
 800d8ca:	9303      	str	r3, [sp, #12]
 800d8cc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d8ce:	2401      	movs	r4, #1
 800d8d0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8d2:	2502      	movs	r5, #2
 800d8d4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8d6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d8d8:	2603      	movs	r6, #3
 800d8da:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d8dc:	2704      	movs	r7, #4
 800d8de:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d8e0:	a905      	add	r1, sp, #20
 800d8e2:	2090      	movs	r0, #144	; 0x90
 800d8e4:	05c0      	lsls	r0, r0, #23
 800d8e6:	f003 fce5 	bl	80112b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800d8ea:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8ec:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8ee:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d8f0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800d8f2:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800d8f4:	a905      	add	r1, sp, #20
 800d8f6:	2090      	movs	r0, #144	; 0x90
 800d8f8:	05c0      	lsls	r0, r0, #23
 800d8fa:	f003 fcdb 	bl	80112b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d8fe:	2200      	movs	r2, #0
 800d900:	2101      	movs	r1, #1
 800d902:	201d      	movs	r0, #29
 800d904:	f002 fd0c 	bl	8010320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d908:	201d      	movs	r0, #29
 800d90a:	f002 fd3d 	bl	8010388 <HAL_NVIC_EnableIRQ>
 800d90e:	e749      	b.n	800d7a4 <HAL_UART_MspInit+0x2c>
    __USART6_CLK_ENABLE();
 800d910:	4b1b      	ldr	r3, [pc, #108]	; (800d980 <HAL_UART_MspInit+0x208>)
 800d912:	699a      	ldr	r2, [r3, #24]
 800d914:	2420      	movs	r4, #32
 800d916:	4322      	orrs	r2, r4
 800d918:	619a      	str	r2, [r3, #24]
 800d91a:	699b      	ldr	r3, [r3, #24]
 800d91c:	4023      	ands	r3, r4
 800d91e:	9304      	str	r3, [sp, #16]
 800d920:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d922:	2310      	movs	r3, #16
 800d924:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d926:	3b0e      	subs	r3, #14
 800d928:	4699      	mov	r9, r3
 800d92a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d92c:	2501      	movs	r5, #1
 800d92e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d930:	2703      	movs	r7, #3
 800d932:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d934:	2605      	movs	r6, #5
 800d936:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d938:	a905      	add	r1, sp, #20
 800d93a:	2090      	movs	r0, #144	; 0x90
 800d93c:	05c0      	lsls	r0, r0, #23
 800d93e:	f003 fcb9 	bl	80112b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d942:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d944:	464b      	mov	r3, r9
 800d946:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d948:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d94a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d94c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d94e:	a905      	add	r1, sp, #20
 800d950:	2090      	movs	r0, #144	; 0x90
 800d952:	05c0      	lsls	r0, r0, #23
 800d954:	f003 fcae 	bl	80112b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d958:	2200      	movs	r2, #0
 800d95a:	2101      	movs	r1, #1
 800d95c:	201d      	movs	r0, #29
 800d95e:	f002 fcdf 	bl	8010320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d962:	201d      	movs	r0, #29
 800d964:	f002 fd10 	bl	8010388 <HAL_NVIC_EnableIRQ>
}
 800d968:	e71c      	b.n	800d7a4 <HAL_UART_MspInit+0x2c>
 800d96a:	46c0      	nop			; (mov r8, r8)
 800d96c:	40013800 	.word	0x40013800
 800d970:	40004400 	.word	0x40004400
 800d974:	40004800 	.word	0x40004800
 800d978:	40004c00 	.word	0x40004c00
 800d97c:	40011400 	.word	0x40011400
 800d980:	40021000 	.word	0x40021000
 800d984:	48000400 	.word	0x48000400

0800d988 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d988:	2805      	cmp	r0, #5
 800d98a:	d80b      	bhi.n	800d9a4 <GetUart+0x1c>
 800d98c:	0080      	lsls	r0, r0, #2
 800d98e:	4b07      	ldr	r3, [pc, #28]	; (800d9ac <GetUart+0x24>)
 800d990:	581b      	ldr	r3, [r3, r0]
 800d992:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800d994:	4806      	ldr	r0, [pc, #24]	; (800d9b0 <GetUart+0x28>)
 800d996:	e008      	b.n	800d9aa <GetUart+0x22>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800d998:	4806      	ldr	r0, [pc, #24]	; (800d9b4 <GetUart+0x2c>)
 800d99a:	e006      	b.n	800d9aa <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800d99c:	4806      	ldr	r0, [pc, #24]	; (800d9b8 <GetUart+0x30>)
 800d99e:	e004      	b.n	800d9aa <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d9a0:	4806      	ldr	r0, [pc, #24]	; (800d9bc <GetUart+0x34>)
 800d9a2:	e002      	b.n	800d9aa <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e000      	b.n	800d9aa <GetUart+0x22>
			return P1uart;	
 800d9a8:	4805      	ldr	r0, [pc, #20]	; (800d9c0 <GetUart+0x38>)
	}		
}
 800d9aa:	4770      	bx	lr
 800d9ac:	080187fc 	.word	0x080187fc
 800d9b0:	20006460 	.word	0x20006460
 800d9b4:	2000637c 	.word	0x2000637c
 800d9b8:	20006250 	.word	0x20006250
 800d9bc:	20006304 	.word	0x20006304
 800d9c0:	200063ec 	.word	0x200063ec

0800d9c4 <writePxMutex>:
{
 800d9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	0005      	movs	r5, r0
 800d9ca:	9100      	str	r1, [sp, #0]
 800d9cc:	0017      	movs	r7, r2
 800d9ce:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d9d0:	f7ff ffda 	bl	800d988 <GetUart>
 800d9d4:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d9d6:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d016      	beq.n	800da0a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d9dc:	00ab      	lsls	r3, r5, #2
 800d9de:	4a0c      	ldr	r2, [pc, #48]	; (800da10 <writePxMutex+0x4c>)
 800d9e0:	5898      	ldr	r0, [r3, r2]
 800d9e2:	9901      	ldr	r1, [sp, #4]
 800d9e4:	f000 f93a 	bl	800dc5c <osSemaphoreWait>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d10e      	bne.n	800da0a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d9ec:	9b08      	ldr	r3, [sp, #32]
 800d9ee:	003a      	movs	r2, r7
 800d9f0:	9900      	ldr	r1, [sp, #0]
 800d9f2:	0020      	movs	r0, r4
 800d9f4:	f005 f962 	bl	8012cbc <HAL_UART_Transmit>
 800d9f8:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d9fa:	d001      	beq.n	800da00 <writePxMutex+0x3c>
 800d9fc:	2803      	cmp	r0, #3
 800d9fe:	d1f5      	bne.n	800d9ec <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800da00:	00ad      	lsls	r5, r5, #2
 800da02:	4b03      	ldr	r3, [pc, #12]	; (800da10 <writePxMutex+0x4c>)
 800da04:	58e8      	ldr	r0, [r5, r3]
 800da06:	f000 f955 	bl	800dcb4 <osSemaphoreRelease>
}
 800da0a:	0030      	movs	r0, r6
 800da0c:	b003      	add	sp, #12
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da10:	200061b0 	.word	0x200061b0

0800da14 <writePxITMutex>:
{
 800da14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da16:	b083      	sub	sp, #12
 800da18:	0004      	movs	r4, r0
 800da1a:	9101      	str	r1, [sp, #4]
 800da1c:	0017      	movs	r7, r2
 800da1e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800da20:	f7ff ffb2 	bl	800d988 <GetUart>
 800da24:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800da26:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800da28:	2800      	cmp	r0, #0
 800da2a:	d008      	beq.n	800da3e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800da2c:	00a4      	lsls	r4, r4, #2
 800da2e:	4b09      	ldr	r3, [pc, #36]	; (800da54 <writePxITMutex+0x40>)
 800da30:	58e0      	ldr	r0, [r4, r3]
 800da32:	0029      	movs	r1, r5
 800da34:	f000 f912 	bl	800dc5c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800da38:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d002      	beq.n	800da44 <writePxITMutex+0x30>
}
 800da3e:	0018      	movs	r0, r3
 800da40:	b003      	add	sp, #12
 800da42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800da44:	003a      	movs	r2, r7
 800da46:	9901      	ldr	r1, [sp, #4]
 800da48:	0030      	movs	r0, r6
 800da4a:	f004 fda1 	bl	8012590 <HAL_UART_Transmit_IT>
 800da4e:	0003      	movs	r3, r0
 800da50:	e7f5      	b.n	800da3e <writePxITMutex+0x2a>
 800da52:	46c0      	nop			; (mov r8, r8)
 800da54:	200061b0 	.word	0x200061b0

0800da58 <writePxDMAMutex>:
{
 800da58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5a:	b083      	sub	sp, #12
 800da5c:	0004      	movs	r4, r0
 800da5e:	000f      	movs	r7, r1
 800da60:	9201      	str	r2, [sp, #4]
 800da62:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800da64:	f7ff ff90 	bl	800d988 <GetUart>
 800da68:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800da6a:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d008      	beq.n	800da82 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800da70:	00a4      	lsls	r4, r4, #2
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <writePxDMAMutex+0x44>)
 800da74:	58e0      	ldr	r0, [r4, r3]
 800da76:	0031      	movs	r1, r6
 800da78:	f000 f8f0 	bl	800dc5c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800da7c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800da7e:	2800      	cmp	r0, #0
 800da80:	d002      	beq.n	800da88 <writePxDMAMutex+0x30>
}
 800da82:	0018      	movs	r0, r3
 800da84:	b003      	add	sp, #12
 800da86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800da88:	0028      	movs	r0, r5
 800da8a:	f7ff f99b 	bl	800cdc4 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800da8e:	9a01      	ldr	r2, [sp, #4]
 800da90:	0039      	movs	r1, r7
 800da92:	0028      	movs	r0, r5
 800da94:	f004 fe28 	bl	80126e8 <HAL_UART_Transmit_DMA>
 800da98:	0003      	movs	r3, r0
 800da9a:	e7f2      	b.n	800da82 <writePxDMAMutex+0x2a>
 800da9c:	200061b0 	.word	0x200061b0

0800daa0 <UpdateBaudrate>:
{
 800daa0:	b510      	push	{r4, lr}
 800daa2:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800daa4:	f7ff ff70 	bl	800d988 <GetUart>
	huart->Init.BaudRate = baudrate;
 800daa8:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800daaa:	f005 f9ad 	bl	8012e08 <HAL_UART_Init>
}
 800daae:	2000      	movs	r0, #0
 800dab0:	bd10      	pop	{r4, pc}
	...

0800dab4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800dab8:	d003      	beq.n	800dac2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800daba:	2901      	cmp	r1, #1
 800dabc:	d002      	beq.n	800dac4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800dabe:	2900      	cmp	r1, #0
 800dac0:	d016      	beq.n	800daf0 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800dac2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dac4:	f7fd fd2e 	bl	800b524 <GetPort>
 800dac8:	4b14      	ldr	r3, [pc, #80]	; (800db1c <SwapUartPins+0x68>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	3b01      	subs	r3, #1
 800dace:	4d14      	ldr	r5, [pc, #80]	; (800db20 <SwapUartPins+0x6c>)
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	3801      	subs	r0, #1
 800dad4:	2180      	movs	r1, #128	; 0x80
 800dad6:	0209      	lsls	r1, r1, #8
 800dad8:	000a      	movs	r2, r1
 800dada:	4102      	asrs	r2, r0
 800dadc:	5b58      	ldrh	r0, [r3, r5]
 800dade:	4302      	orrs	r2, r0
 800dae0:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dae2:	2308      	movs	r3, #8
 800dae4:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dae6:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800dae8:	0020      	movs	r0, r4
 800daea:	f005 f98d 	bl	8012e08 <HAL_UART_Init>
 800daee:	e7e8      	b.n	800dac2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800daf0:	f7fd fd18 	bl	800b524 <GetPort>
 800daf4:	4b09      	ldr	r3, [pc, #36]	; (800db1c <SwapUartPins+0x68>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	4d09      	ldr	r5, [pc, #36]	; (800db20 <SwapUartPins+0x6c>)
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	3801      	subs	r0, #1
 800db00:	2180      	movs	r1, #128	; 0x80
 800db02:	0209      	lsls	r1, r1, #8
 800db04:	4101      	asrs	r1, r0
 800db06:	5b5a      	ldrh	r2, [r3, r5]
 800db08:	438a      	bics	r2, r1
 800db0a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800db0c:	2308      	movs	r3, #8
 800db0e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800db10:	2300      	movs	r3, #0
 800db12:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800db14:	0020      	movs	r0, r4
 800db16:	f005 f977 	bl	8012e08 <HAL_UART_Init>
}
 800db1a:	e7d2      	b.n	800dac2 <SwapUartPins+0xe>
 800db1c:	20000866 	.word	0x20000866
 800db20:	200065d8 	.word	0x200065d8

0800db24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800db24:	4816      	ldr	r0, [pc, #88]	; (800db80 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800db26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800db28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800db2a:	e003      	b.n	800db34 <LoopCopyDataInit>

0800db2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800db2c:	4b15      	ldr	r3, [pc, #84]	; (800db84 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800db2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800db30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800db32:	3104      	adds	r1, #4

0800db34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800db34:	4814      	ldr	r0, [pc, #80]	; (800db88 <LoopForever+0xc>)
  ldr r3, =_edata
 800db36:	4b15      	ldr	r3, [pc, #84]	; (800db8c <LoopForever+0x10>)
  adds r2, r0, r1
 800db38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800db3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800db3c:	d3f6      	bcc.n	800db2c <CopyDataInit>
  ldr r2, =_sbss
 800db3e:	4a14      	ldr	r2, [pc, #80]	; (800db90 <LoopForever+0x14>)
  b LoopFillZerobss
 800db40:	e002      	b.n	800db48 <LoopFillZerobss>

0800db42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800db42:	2300      	movs	r3, #0
  str  r3, [r2]
 800db44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800db46:	3204      	adds	r2, #4

0800db48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800db48:	4b12      	ldr	r3, [pc, #72]	; (800db94 <LoopForever+0x18>)
  cmp r2, r3
 800db4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800db4c:	d3f9      	bcc.n	800db42 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800db4e:	4812      	ldr	r0, [pc, #72]	; (800db98 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800db50:	4912      	ldr	r1, [pc, #72]	; (800db9c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800db52:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800db54:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800db56:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800db58:	d005      	beq.n	800db66 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800db5a:	f000 f82b 	bl	800dbb4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800db5e:	f005 fac7 	bl	80130f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800db62:	f005 faa6 	bl	80130b2 <main>

0800db66 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800db66:	480e      	ldr	r0, [pc, #56]	; (800dba0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800db68:	490e      	ldr	r1, [pc, #56]	; (800dba4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800db6a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800db6c:	480e      	ldr	r0, [pc, #56]	; (800dba8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800db6e:	490d      	ldr	r1, [pc, #52]	; (800dba4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800db70:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800db72:	480e      	ldr	r0, [pc, #56]	; (800dbac <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800db74:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800db76:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800db78:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800db7a:	4700      	bx	r0

0800db7c <LoopForever>:


LoopForever:
    b LoopForever
 800db7c:	e7fe      	b.n	800db7c <LoopForever>
 800db7e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800db80:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800db84:	08018c88 	.word	0x08018c88
  ldr r0, =_sdata
 800db88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800db8c:	2000027c 	.word	0x2000027c
  ldr r2, =_sbss
 800db90:	20000280 	.word	0x20000280
  ldr r3, = _ebss
 800db94:	20006674 	.word	0x20006674
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800db98:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800db9c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800dba0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800dba4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800dba8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800dbac:	1fffd800 	.word	0x1fffd800

0800dbb0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dbb0:	e7fe      	b.n	800dbb0 <CEC_CAN_IRQHandler>
	...

0800dbb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800dbb4:	4b11      	ldr	r3, [pc, #68]	; (800dbfc <SystemInit+0x48>)
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	2101      	movs	r1, #1
 800dbba:	430a      	orrs	r2, r1
 800dbbc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	480f      	ldr	r0, [pc, #60]	; (800dc00 <SystemInit+0x4c>)
 800dbc2:	4002      	ands	r2, r0
 800dbc4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	480e      	ldr	r0, [pc, #56]	; (800dc04 <SystemInit+0x50>)
 800dbca:	4002      	ands	r2, r0
 800dbcc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	480d      	ldr	r0, [pc, #52]	; (800dc08 <SystemInit+0x54>)
 800dbd2:	4002      	ands	r2, r0
 800dbd4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	480c      	ldr	r0, [pc, #48]	; (800dc0c <SystemInit+0x58>)
 800dbda:	4002      	ands	r2, r0
 800dbdc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800dbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe0:	200f      	movs	r0, #15
 800dbe2:	4382      	bics	r2, r0
 800dbe4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800dbe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbe8:	4809      	ldr	r0, [pc, #36]	; (800dc10 <SystemInit+0x5c>)
 800dbea:	4002      	ands	r2, r0
 800dbec:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800dbee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbf0:	438a      	bics	r2, r1
 800dbf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	609a      	str	r2, [r3, #8]

}
 800dbf8:	4770      	bx	lr
 800dbfa:	46c0      	nop			; (mov r8, r8)
 800dbfc:	40021000 	.word	0x40021000
 800dc00:	08ffb80c 	.word	0x08ffb80c
 800dc04:	fef6ffff 	.word	0xfef6ffff
 800dc08:	fffbffff 	.word	0xfffbffff
 800dc0c:	ffc0ffff 	.word	0xffc0ffff
 800dc10:	fff0feac 	.word	0xfff0feac

0800dc14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dc14:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800dc16:	f000 ff55 	bl	800eac4 <vTaskStartScheduler>
  
  return osOK;
}
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	bd10      	pop	{r4, pc}

0800dc1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dc1e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d100      	bne.n	800dc26 <osDelay+0x8>
 800dc24:	3001      	adds	r0, #1
 800dc26:	f001 f889 	bl	800ed3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	bd10      	pop	{r4, pc}

0800dc2e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800dc2e:	b510      	push	{r4, lr}
 800dc30:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800dc32:	2901      	cmp	r1, #1
 800dc34:	d005      	beq.n	800dc42 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800dc36:	2100      	movs	r1, #0
 800dc38:	f000 faf6 	bl	800e228 <xQueueCreateCountingSemaphore>
 800dc3c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800dc3e:	0020      	movs	r0, r4
 800dc40:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800dc42:	2203      	movs	r2, #3
 800dc44:	2100      	movs	r1, #0
 800dc46:	f000 fac8 	bl	800e1da <xQueueGenericCreate>
 800dc4a:	1e04      	subs	r4, r0, #0
 800dc4c:	d0f7      	beq.n	800dc3e <osSemaphoreCreate+0x10>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2200      	movs	r2, #0
 800dc52:	2100      	movs	r1, #0
 800dc54:	f000 fafc 	bl	800e250 <xQueueGenericSend>
 800dc58:	e7f1      	b.n	800dc3e <osSemaphoreCreate+0x10>
	...

0800dc5c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dc5c:	b500      	push	{lr}
 800dc5e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dc60:	2300      	movs	r3, #0
 800dc62:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d021      	beq.n	800dcac <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc68:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d010      	beq.n	800dc92 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dc70:	aa01      	add	r2, sp, #4
 800dc72:	2100      	movs	r1, #0
 800dc74:	f000 fcae 	bl	800e5d4 <xQueueReceiveFromISR>
 800dc78:	0003      	movs	r3, r0
      return osErrorOS;
 800dc7a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d113      	bne.n	800dca8 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800dc80:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800dc82:	9b01      	ldr	r3, [sp, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00f      	beq.n	800dca8 <osSemaphoreWait+0x4c>
 800dc88:	4b09      	ldr	r3, [pc, #36]	; (800dcb0 <osSemaphoreWait+0x54>)
 800dc8a:	2280      	movs	r2, #128	; 0x80
 800dc8c:	0552      	lsls	r2, r2, #21
 800dc8e:	601a      	str	r2, [r3, #0]
 800dc90:	e00a      	b.n	800dca8 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dc92:	2300      	movs	r3, #0
 800dc94:	000a      	movs	r2, r1
 800dc96:	2100      	movs	r1, #0
 800dc98:	f000 fbf3 	bl	800e482 <xQueueGenericReceive>
  return osOK;
 800dc9c:	3801      	subs	r0, #1
 800dc9e:	1e43      	subs	r3, r0, #1
 800dca0:	4198      	sbcs	r0, r3
 800dca2:	4240      	negs	r0, r0
 800dca4:	23ff      	movs	r3, #255	; 0xff
 800dca6:	4018      	ands	r0, r3
}
 800dca8:	b003      	add	sp, #12
 800dcaa:	bd00      	pop	{pc}
    return osErrorParameter;
 800dcac:	2080      	movs	r0, #128	; 0x80
 800dcae:	e7fb      	b.n	800dca8 <osSemaphoreWait+0x4c>
 800dcb0:	e000ed04 	.word	0xe000ed04

0800dcb4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dcb4:	b500      	push	{lr}
 800dcb6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	9301      	str	r3, [sp, #4]
 800dcbc:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00f      	beq.n	800dce4 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dcc4:	a901      	add	r1, sp, #4
 800dcc6:	f000 fba1 	bl	800e40c <xQueueGiveFromISR>
 800dcca:	0003      	movs	r3, r0
      return osErrorOS;
 800dccc:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d114      	bne.n	800dcfc <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800dcd2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dcd4:	9b01      	ldr	r3, [sp, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d010      	beq.n	800dcfc <osSemaphoreRelease+0x48>
 800dcda:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <osSemaphoreRelease+0x4c>)
 800dcdc:	2280      	movs	r2, #128	; 0x80
 800dcde:	0552      	lsls	r2, r2, #21
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	e00b      	b.n	800dcfc <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dce4:	2300      	movs	r3, #0
 800dce6:	2200      	movs	r2, #0
 800dce8:	2100      	movs	r1, #0
 800dcea:	f000 fab1 	bl	800e250 <xQueueGenericSend>
      result = osErrorOS;
 800dcee:	3801      	subs	r0, #1
 800dcf0:	4243      	negs	r3, r0
 800dcf2:	4158      	adcs	r0, r3
 800dcf4:	4240      	negs	r0, r0
 800dcf6:	23fe      	movs	r3, #254	; 0xfe
 800dcf8:	4398      	bics	r0, r3
 800dcfa:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800dcfc:	b003      	add	sp, #12
 800dcfe:	bd00      	pop	{pc}
 800dd00:	e000ed04 	.word	0xe000ed04

0800dd04 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800dd04:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800dd06:	f001 fa0f 	bl	800f128 <xTaskGetSchedulerState>
 800dd0a:	2801      	cmp	r0, #1
 800dd0c:	d001      	beq.n	800dd12 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800dd0e:	f001 fe85 	bl	800fa1c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800dd12:	bd10      	pop	{r4, pc}

0800dd14 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800dd18:	d101      	bne.n	800dd1e <FreeRTOS_CLIRegisterCommand+0xa>
 800dd1a:	b672      	cpsid	i
 800dd1c:	e7fe      	b.n	800dd1c <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dd1e:	2008      	movs	r0, #8
 800dd20:	f001 feb8 	bl	800fa94 <pvPortMalloc>
 800dd24:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800dd26:	d101      	bne.n	800dd2c <FreeRTOS_CLIRegisterCommand+0x18>
 800dd28:	b672      	cpsid	i
 800dd2a:	e7fe      	b.n	800dd2a <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800dd2c:	f001 fe30 	bl	800f990 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800dd30:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800dd36:	4b04      	ldr	r3, [pc, #16]	; (800dd48 <FreeRTOS_CLIRegisterCommand+0x34>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800dd3c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800dd3e:	f001 fe33 	bl	800f9a8 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800dd42:	2001      	movs	r0, #1
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	46c0      	nop			; (mov r8, r8)
 800dd48:	20000098 	.word	0x20000098

0800dd4c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800dd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd4e:	46d6      	mov	lr, sl
 800dd50:	b500      	push	{lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	9001      	str	r0, [sp, #4]
 800dd56:	9102      	str	r1, [sp, #8]
 800dd58:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800dd5a:	4b37      	ldr	r3, [pc, #220]	; (800de38 <FreeRTOS_CLIProcessCommand+0xec>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00e      	beq.n	800dd80 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	9a01      	ldr	r2, [sp, #4]
 800dd68:	9903      	ldr	r1, [sp, #12]
 800dd6a:	9802      	ldr	r0, [sp, #8]
 800dd6c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d102      	bne.n	800dd78 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800dd72:	4b31      	ldr	r3, [pc, #196]	; (800de38 <FreeRTOS_CLIProcessCommand+0xec>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800dd78:	b004      	add	sp, #16
 800dd7a:	bc04      	pop	{r2}
 800dd7c:	4692      	mov	sl, r2
 800dd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dd80:	4d2e      	ldr	r5, [pc, #184]	; (800de3c <FreeRTOS_CLIProcessCommand+0xf0>)
 800dd82:	4a2d      	ldr	r2, [pc, #180]	; (800de38 <FreeRTOS_CLIProcessCommand+0xec>)
 800dd84:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dd86:	3320      	adds	r3, #32
 800dd88:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dd8a:	0017      	movs	r7, r2
 800dd8c:	e00a      	b.n	800dda4 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800dd8e:	0002      	movs	r2, r0
 800dd90:	0021      	movs	r1, r4
 800dd92:	9801      	ldr	r0, [sp, #4]
 800dd94:	f005 fb62 	bl	801345c <strncmp>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d00e      	beq.n	800ddba <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dd9c:	686d      	ldr	r5, [r5, #4]
 800dd9e:	603d      	str	r5, [r7, #0]
 800dda0:	2d00      	cmp	r5, #0
 800dda2:	d012      	beq.n	800ddca <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800dda4:	682e      	ldr	r6, [r5, #0]
 800dda6:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800dda8:	0020      	movs	r0, r4
 800ddaa:	f7f2 f9b5 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ddae:	9b01      	ldr	r3, [sp, #4]
 800ddb0:	5c1b      	ldrb	r3, [r3, r0]
 800ddb2:	4652      	mov	r2, sl
 800ddb4:	4393      	bics	r3, r2
 800ddb6:	d1f1      	bne.n	800dd9c <FreeRTOS_CLIProcessCommand+0x50>
 800ddb8:	e7e9      	b.n	800dd8e <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ddba:	200c      	movs	r0, #12
 800ddbc:	5630      	ldrsb	r0, [r6, r0]
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	da0a      	bge.n	800ddd8 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ddc2:	4b1d      	ldr	r3, [pc, #116]	; (800de38 <FreeRTOS_CLIProcessCommand+0xec>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1cb      	bne.n	800dd62 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ddca:	9a03      	ldr	r2, [sp, #12]
 800ddcc:	491c      	ldr	r1, [pc, #112]	; (800de40 <FreeRTOS_CLIProcessCommand+0xf4>)
 800ddce:	9802      	ldr	r0, [sp, #8]
 800ddd0:	f005 fb55 	bl	801347e <strncpy>
		xReturn = pdFALSE;
 800ddd4:	2000      	movs	r0, #0
	return xReturn;
 800ddd6:	e7cf      	b.n	800dd78 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ddd8:	9a01      	ldr	r2, [sp, #4]
 800ddda:	2300      	movs	r3, #0
 800dddc:	56d3      	ldrsb	r3, [r2, r3]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d027      	beq.n	800de32 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800dde2:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800dde4:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800dde6:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800dde8:	2501      	movs	r5, #1
 800ddea:	e009      	b.n	800de00 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800ddec:	2901      	cmp	r1, #1
 800ddee:	d002      	beq.n	800ddf6 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800ddf0:	3401      	adds	r4, #1
 800ddf2:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800ddf4:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800ddf6:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	56d3      	ldrsb	r3, [r2, r3]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800de00:	2b20      	cmp	r3, #32
 800de02:	d0f3      	beq.n	800ddec <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800de04:	0031      	movs	r1, r6
 800de06:	e7f6      	b.n	800ddf6 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800de08:	2901      	cmp	r1, #1
 800de0a:	d00f      	beq.n	800de2c <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800de0c:	4b0a      	ldr	r3, [pc, #40]	; (800de38 <FreeRTOS_CLIProcessCommand+0xec>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d0da      	beq.n	800ddca <FreeRTOS_CLIProcessCommand+0x7e>
 800de14:	42a0      	cmp	r0, r4
 800de16:	d0a4      	beq.n	800dd62 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800de18:	9a03      	ldr	r2, [sp, #12]
 800de1a:	490a      	ldr	r1, [pc, #40]	; (800de44 <FreeRTOS_CLIProcessCommand+0xf8>)
 800de1c:	9802      	ldr	r0, [sp, #8]
 800de1e:	f005 fb2e 	bl	801347e <strncpy>
		pxCommand = NULL;
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <FreeRTOS_CLIProcessCommand+0xec>)
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	2000      	movs	r0, #0
 800de2a:	e7a5      	b.n	800dd78 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800de2c:	3c01      	subs	r4, #1
 800de2e:	b264      	sxtb	r4, r4
 800de30:	e7ec      	b.n	800de0c <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800de32:	2400      	movs	r4, #0
 800de34:	e7ea      	b.n	800de0c <FreeRTOS_CLIProcessCommand+0xc0>
 800de36:	46c0      	nop			; (mov r8, r8)
 800de38:	200014e8 	.word	0x200014e8
 800de3c:	2000009c 	.word	0x2000009c
 800de40:	0801886c 	.word	0x0801886c
 800de44:	08018814 	.word	0x08018814

0800de48 <FreeRTOS_CLIGetOutputBuffer>:
}
 800de48:	4800      	ldr	r0, [pc, #0]	; (800de4c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800de4a:	4770      	bx	lr
 800de4c:	20001280 	.word	0x20001280

0800de50 <FreeRTOS_CLIGetParameter>:
{
 800de50:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800de56:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800de58:	2900      	cmp	r1, #0
 800de5a:	d10b      	bne.n	800de74 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800de5c:	2000      	movs	r0, #0
 800de5e:	e02a      	b.n	800deb6 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800de60:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800de62:	2300      	movs	r3, #0
 800de64:	56c3      	ldrsb	r3, [r0, r3]
 800de66:	2b20      	cmp	r3, #32
 800de68:	d0fa      	beq.n	800de60 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d022      	beq.n	800deb4 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800de6e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800de70:	42a1      	cmp	r1, r4
 800de72:	d00d      	beq.n	800de90 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800de74:	2300      	movs	r3, #0
 800de76:	56c3      	ldrsb	r3, [r0, r3]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d01f      	beq.n	800debc <FreeRTOS_CLIGetParameter+0x6c>
 800de7c:	2b20      	cmp	r3, #32
 800de7e:	d0ef      	beq.n	800de60 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800de80:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800de82:	2300      	movs	r3, #0
 800de84:	56c3      	ldrsb	r3, [r0, r3]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d018      	beq.n	800debc <FreeRTOS_CLIGetParameter+0x6c>
 800de8a:	2b20      	cmp	r3, #32
 800de8c:	d1f8      	bne.n	800de80 <FreeRTOS_CLIGetParameter+0x30>
 800de8e:	e7e7      	b.n	800de60 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800de90:	7803      	ldrb	r3, [r0, #0]
 800de92:	2120      	movs	r1, #32
 800de94:	438b      	bics	r3, r1
 800de96:	d00f      	beq.n	800deb8 <FreeRTOS_CLIGetParameter+0x68>
 800de98:	0004      	movs	r4, r0
 800de9a:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800de9c:	6813      	ldr	r3, [r2, #0]
 800de9e:	3301      	adds	r3, #1
 800dea0:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800dea2:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dea4:	7821      	ldrb	r1, [r4, #0]
 800dea6:	43a9      	bics	r1, r5
 800dea8:	d1f8      	bne.n	800de9c <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800deaa:	1e5a      	subs	r2, r3, #1
 800deac:	4193      	sbcs	r3, r2
 800deae:	425b      	negs	r3, r3
 800deb0:	4018      	ands	r0, r3
 800deb2:	e000      	b.n	800deb6 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800deb4:	2000      	movs	r0, #0
}
 800deb6:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800deb8:	2000      	movs	r0, #0
 800deba:	e7fc      	b.n	800deb6 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800debc:	2300      	movs	r3, #0
 800debe:	56c3      	ldrsb	r3, [r0, r3]
 800dec0:	e7d3      	b.n	800de6a <FreeRTOS_CLIGetParameter+0x1a>
	...

0800dec4 <prvHelpCommand>:
{
 800dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dec6:	b083      	sub	sp, #12
 800dec8:	0004      	movs	r4, r0
 800deca:	000d      	movs	r5, r1
 800decc:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ded2:	aa01      	add	r2, sp, #4
 800ded4:	2101      	movs	r1, #1
 800ded6:	f7ff ffbb 	bl	800de50 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800deda:	2800      	cmp	r0, #0
 800dedc:	d027      	beq.n	800df2e <prvHelpCommand+0x6a>
 800dede:	2206      	movs	r2, #6
 800dee0:	4930      	ldr	r1, [pc, #192]	; (800dfa4 <prvHelpCommand+0xe0>)
 800dee2:	f005 fabb 	bl	801345c <strncmp>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d149      	bne.n	800df7e <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800deea:	4b2f      	ldr	r3, [pc, #188]	; (800dfa8 <prvHelpCommand+0xe4>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b07      	cmp	r3, #7
 800def0:	d012      	beq.n	800df18 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800def2:	1c5f      	adds	r7, r3, #1
 800def4:	b2ff      	uxtb	r7, r7
 800def6:	4a2c      	ldr	r2, [pc, #176]	; (800dfa8 <prvHelpCommand+0xe4>)
 800def8:	7017      	strb	r7, [r2, #0]
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4a2b      	ldr	r2, [pc, #172]	; (800dfac <prvHelpCommand+0xe8>)
 800defe:	5899      	ldr	r1, [r3, r2]
 800df00:	002a      	movs	r2, r5
 800df02:	0020      	movs	r0, r4
 800df04:	f005 fabb 	bl	801347e <strncpy>
			xReturn = pdTRUE;
 800df08:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800df0a:	2f07      	cmp	r7, #7
 800df0c:	d137      	bne.n	800df7e <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800df0e:	4b26      	ldr	r3, [pc, #152]	; (800dfa8 <prvHelpCommand+0xe4>)
 800df10:	2200      	movs	r2, #0
 800df12:	701a      	strb	r2, [r3, #0]
 800df14:	2600      	movs	r6, #0
 800df16:	e032      	b.n	800df7e <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800df18:	4b23      	ldr	r3, [pc, #140]	; (800dfa8 <prvHelpCommand+0xe4>)
 800df1a:	2201      	movs	r2, #1
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	4b23      	ldr	r3, [pc, #140]	; (800dfac <prvHelpCommand+0xe8>)
 800df20:	6819      	ldr	r1, [r3, #0]
 800df22:	002a      	movs	r2, r5
 800df24:	0020      	movs	r0, r4
 800df26:	f005 faaa 	bl	801347e <strncpy>
			xReturn = pdTRUE;
 800df2a:	2601      	movs	r6, #1
 800df2c:	e027      	b.n	800df7e <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800df2e:	4b20      	ldr	r3, [pc, #128]	; (800dfb0 <prvHelpCommand+0xec>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d026      	beq.n	800df84 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800df36:	4b1f      	ldr	r3, [pc, #124]	; (800dfb4 <prvHelpCommand+0xf0>)
 800df38:	781a      	ldrb	r2, [r3, #0]
 800df3a:	4b1f      	ldr	r3, [pc, #124]	; (800dfb8 <prvHelpCommand+0xf4>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d927      	bls.n	800df92 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800df42:	002a      	movs	r2, r5
 800df44:	3a08      	subs	r2, #8
 800df46:	4b1a      	ldr	r3, [pc, #104]	; (800dfb0 <prvHelpCommand+0xec>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6859      	ldr	r1, [r3, #4]
 800df4e:	0020      	movs	r0, r4
 800df50:	3008      	adds	r0, #8
 800df52:	f005 fa94 	bl	801347e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800df56:	1c60      	adds	r0, r4, #1
 800df58:	4918      	ldr	r1, [pc, #96]	; (800dfbc <prvHelpCommand+0xf8>)
 800df5a:	f005 fa77 	bl	801344c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800df5e:	2328      	movs	r3, #40	; 0x28
 800df60:	7023      	strb	r3, [r4, #0]
 800df62:	3301      	adds	r3, #1
 800df64:	71a3      	strb	r3, [r4, #6]
 800df66:	3b09      	subs	r3, #9
 800df68:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800df6a:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <prvHelpCommand+0xec>)
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	6856      	ldr	r6, [r2, #4]
 800df70:	601e      	str	r6, [r3, #0]
		counter++;
 800df72:	4a10      	ldr	r2, [pc, #64]	; (800dfb4 <prvHelpCommand+0xf0>)
 800df74:	7813      	ldrb	r3, [r2, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800df7a:	1e73      	subs	r3, r6, #1
 800df7c:	419e      	sbcs	r6, r3
}
 800df7e:	0030      	movs	r0, r6
 800df80:	b003      	add	sp, #12
 800df82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800df84:	4b0a      	ldr	r3, [pc, #40]	; (800dfb0 <prvHelpCommand+0xec>)
 800df86:	4a0e      	ldr	r2, [pc, #56]	; (800dfc0 <prvHelpCommand+0xfc>)
 800df88:	601a      	str	r2, [r3, #0]
			counter = 1;
 800df8a:	4b0a      	ldr	r3, [pc, #40]	; (800dfb4 <prvHelpCommand+0xf0>)
 800df8c:	2201      	movs	r2, #1
 800df8e:	701a      	strb	r2, [r3, #0]
 800df90:	e7d1      	b.n	800df36 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800df92:	4b07      	ldr	r3, [pc, #28]	; (800dfb0 <prvHelpCommand+0xec>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6859      	ldr	r1, [r3, #4]
 800df9a:	002a      	movs	r2, r5
 800df9c:	0020      	movs	r0, r4
 800df9e:	f005 fa6e 	bl	801347e <strncpy>
 800dfa2:	e7e2      	b.n	800df6a <prvHelpCommand+0xa6>
 800dfa4:	08016620 	.word	0x08016620
 800dfa8:	200014f0 	.word	0x200014f0
 800dfac:	20000054 	.word	0x20000054
 800dfb0:	200014ec 	.word	0x200014ec
 800dfb4:	200014e4 	.word	0x200014e4
 800dfb8:	200060b4 	.word	0x200060b4
 800dfbc:	08015bec 	.word	0x08015bec
 800dfc0:	2000009c 	.word	0x2000009c

0800dfc4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfc4:	0003      	movs	r3, r0
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dfca:	2201      	movs	r2, #1
 800dfcc:	4252      	negs	r2, r2
 800dfce:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfd0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfd2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dfd8:	4770      	bx	lr

0800dfda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dfde:	4770      	bx	lr

0800dfe0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800dfe0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dfe2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dfe4:	689a      	ldr	r2, [r3, #8]
 800dfe6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfe8:	689a      	ldr	r2, [r3, #8]
 800dfea:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfec:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dfee:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800dff0:	6803      	ldr	r3, [r0, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	6003      	str	r3, [r0, #0]
}
 800dff6:	4770      	bx	lr

0800dff8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dff8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dffa:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dffc:	0002      	movs	r2, r0
 800dffe:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e000:	1c63      	adds	r3, r4, #1
 800e002:	d102      	bne.n	800e00a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e004:	6902      	ldr	r2, [r0, #16]
 800e006:	e004      	b.n	800e012 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e008:	001a      	movs	r2, r3
 800e00a:	6853      	ldr	r3, [r2, #4]
 800e00c:	681d      	ldr	r5, [r3, #0]
 800e00e:	42a5      	cmp	r5, r4
 800e010:	d9fa      	bls.n	800e008 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e012:	6853      	ldr	r3, [r2, #4]
 800e014:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e016:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e018:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e01a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e01c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e01e:	6803      	ldr	r3, [r0, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	6003      	str	r3, [r0, #0]
}
 800e024:	bd30      	pop	{r4, r5, pc}

0800e026 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e026:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e028:	6842      	ldr	r2, [r0, #4]
 800e02a:	6881      	ldr	r1, [r0, #8]
 800e02c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e02e:	6882      	ldr	r2, [r0, #8]
 800e030:	6841      	ldr	r1, [r0, #4]
 800e032:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	4282      	cmp	r2, r0
 800e038:	d005      	beq.n	800e046 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e03a:	2200      	movs	r2, #0
 800e03c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	1e50      	subs	r0, r2, #1
 800e042:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e044:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e046:	6882      	ldr	r2, [r0, #8]
 800e048:	605a      	str	r2, [r3, #4]
 800e04a:	e7f6      	b.n	800e03a <uxListRemove+0x14>

0800e04c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	0004      	movs	r4, r0
 800e050:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e052:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e054:	2a00      	cmp	r2, #0
 800e056:	d10d      	bne.n	800e074 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800e058:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d003      	beq.n	800e068 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e062:	3301      	adds	r3, #1
 800e064:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e066:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e068:	6860      	ldr	r0, [r4, #4]
 800e06a:	f001 f8ab 	bl	800f1c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	6063      	str	r3, [r4, #4]
 800e072:	e7f5      	b.n	800e060 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e074:	2d00      	cmp	r5, #0
 800e076:	d10e      	bne.n	800e096 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e078:	6880      	ldr	r0, [r0, #8]
 800e07a:	f005 f8a4 	bl	80131c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e07e:	68a3      	ldr	r3, [r4, #8]
 800e080:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e082:	4694      	mov	ip, r2
 800e084:	4463      	add	r3, ip
 800e086:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e088:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e08a:	6862      	ldr	r2, [r4, #4]
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d3e7      	bcc.n	800e060 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	60a3      	str	r3, [r4, #8]
 800e094:	e7e4      	b.n	800e060 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e096:	68c0      	ldr	r0, [r0, #12]
 800e098:	f005 f895 	bl	80131c6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e09c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e09e:	425a      	negs	r2, r3
 800e0a0:	68e3      	ldr	r3, [r4, #12]
 800e0a2:	189b      	adds	r3, r3, r2
 800e0a4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0a6:	6821      	ldr	r1, [r4, #0]
 800e0a8:	428b      	cmp	r3, r1
 800e0aa:	d203      	bcs.n	800e0b4 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e0ac:	6863      	ldr	r3, [r4, #4]
 800e0ae:	469c      	mov	ip, r3
 800e0b0:	4462      	add	r2, ip
 800e0b2:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800e0b4:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800e0b6:	2d02      	cmp	r5, #2
 800e0b8:	d1d2      	bne.n	800e060 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d0cf      	beq.n	800e060 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800e0c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0c6:	e7cb      	b.n	800e060 <prvCopyDataToQueue+0x14>

0800e0c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e0cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e0ce:	2a00      	cmp	r2, #0
 800e0d0:	d00b      	beq.n	800e0ea <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e0d2:	68c3      	ldr	r3, [r0, #12]
 800e0d4:	189b      	adds	r3, r3, r2
 800e0d6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0d8:	6841      	ldr	r1, [r0, #4]
 800e0da:	428b      	cmp	r3, r1
 800e0dc:	d301      	bcc.n	800e0e2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e0de:	6803      	ldr	r3, [r0, #0]
 800e0e0:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e0e2:	68c1      	ldr	r1, [r0, #12]
 800e0e4:	0020      	movs	r0, r4
 800e0e6:	f005 f86e 	bl	80131c6 <memcpy>
	}
}
 800e0ea:	bd10      	pop	{r4, pc}

0800e0ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0f0:	f001 fc4e 	bl	800f990 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e0f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	dd04      	ble.n	800e104 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0fa:	0025      	movs	r5, r4
 800e0fc:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e100:	2b00      	cmp	r3, #0
 800e102:	d11f      	bne.n	800e144 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e104:	2301      	movs	r3, #1
 800e106:	425b      	negs	r3, r3
 800e108:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e10a:	f001 fc4d 	bl	800f9a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e10e:	f001 fc3f 	bl	800f990 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e114:	2b00      	cmp	r3, #0
 800e116:	dd04      	ble.n	800e122 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e118:	0025      	movs	r5, r4
 800e11a:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d121      	bne.n	800e166 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e122:	2301      	movs	r3, #1
 800e124:	425b      	negs	r3, r3
 800e126:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e128:	f001 fc3e 	bl	800f9a8 <vPortExitCritical>
}
 800e12c:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800e12e:	f000 fff5 	bl	800f11c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e132:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e134:	3b01      	subs	r3, #1
 800e136:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e138:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	dde2      	ble.n	800e104 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0df      	beq.n	800e104 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e144:	0028      	movs	r0, r5
 800e146:	f000 ff67 	bl	800f018 <xTaskRemoveFromEventList>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d0f1      	beq.n	800e132 <prvUnlockQueue+0x46>
 800e14e:	e7ee      	b.n	800e12e <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800e150:	f000 ffe4 	bl	800f11c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e154:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e156:	3b01      	subs	r3, #1
 800e158:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e15a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	dde0      	ble.n	800e122 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e160:	6923      	ldr	r3, [r4, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d0dd      	beq.n	800e122 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e166:	0028      	movs	r0, r5
 800e168:	f000 ff56 	bl	800f018 <xTaskRemoveFromEventList>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d0f1      	beq.n	800e154 <prvUnlockQueue+0x68>
 800e170:	e7ee      	b.n	800e150 <prvUnlockQueue+0x64>

0800e172 <xQueueGenericReset>:
{
 800e172:	b570      	push	{r4, r5, r6, lr}
 800e174:	0004      	movs	r4, r0
 800e176:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e178:	2800      	cmp	r0, #0
 800e17a:	d101      	bne.n	800e180 <xQueueGenericReset+0xe>
 800e17c:	b672      	cpsid	i
 800e17e:	e7fe      	b.n	800e17e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800e180:	f001 fc06 	bl	800f990 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e184:	6822      	ldr	r2, [r4, #0]
 800e186:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e18a:	434b      	muls	r3, r1
 800e18c:	18d0      	adds	r0, r2, r3
 800e18e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e190:	2000      	movs	r0, #0
 800e192:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e194:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e196:	1a5b      	subs	r3, r3, r1
 800e198:	18d3      	adds	r3, r2, r3
 800e19a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e19c:	2301      	movs	r3, #1
 800e19e:	425b      	negs	r3, r3
 800e1a0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e1a2:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e1a4:	2d00      	cmp	r5, #0
 800e1a6:	d10f      	bne.n	800e1c8 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d103      	bne.n	800e1b6 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800e1ae:	f001 fbfb 	bl	800f9a8 <vPortExitCritical>
}
 800e1b2:	2001      	movs	r0, #1
 800e1b4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e1b6:	0020      	movs	r0, r4
 800e1b8:	3010      	adds	r0, #16
 800e1ba:	f000 ff2d 	bl	800f018 <xTaskRemoveFromEventList>
 800e1be:	2801      	cmp	r0, #1
 800e1c0:	d1f5      	bne.n	800e1ae <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800e1c2:	f001 fbd9 	bl	800f978 <vPortYield>
 800e1c6:	e7f2      	b.n	800e1ae <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e1c8:	0020      	movs	r0, r4
 800e1ca:	3010      	adds	r0, #16
 800e1cc:	f7ff fefa 	bl	800dfc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e1d0:	0020      	movs	r0, r4
 800e1d2:	3024      	adds	r0, #36	; 0x24
 800e1d4:	f7ff fef6 	bl	800dfc4 <vListInitialise>
 800e1d8:	e7e9      	b.n	800e1ae <xQueueGenericReset+0x3c>

0800e1da <xQueueGenericCreate>:
{
 800e1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1dc:	0005      	movs	r5, r0
 800e1de:	000e      	movs	r6, r1
 800e1e0:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d101      	bne.n	800e1ea <xQueueGenericCreate+0x10>
 800e1e6:	b672      	cpsid	i
 800e1e8:	e7fe      	b.n	800e1e8 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1ea:	2900      	cmp	r1, #0
 800e1ec:	d00c      	beq.n	800e208 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ee:	0008      	movs	r0, r1
 800e1f0:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e1f2:	3055      	adds	r0, #85	; 0x55
 800e1f4:	f001 fc4e 	bl	800fa94 <pvPortMalloc>
 800e1f8:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e1fa:	d101      	bne.n	800e200 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800e1fc:	b672      	cpsid	i
 800e1fe:	e7fe      	b.n	800e1fe <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e200:	0003      	movs	r3, r0
 800e202:	3354      	adds	r3, #84	; 0x54
 800e204:	6003      	str	r3, [r0, #0]
 800e206:	e005      	b.n	800e214 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e208:	2054      	movs	r0, #84	; 0x54
 800e20a:	f001 fc43 	bl	800fa94 <pvPortMalloc>
 800e20e:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e210:	d0f4      	beq.n	800e1fc <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e212:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e214:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e216:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e218:	2101      	movs	r1, #1
 800e21a:	0020      	movs	r0, r4
 800e21c:	f7ff ffa9 	bl	800e172 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e220:	2350      	movs	r3, #80	; 0x50
 800e222:	54e7      	strb	r7, [r4, r3]
}
 800e224:	0020      	movs	r0, r4
 800e226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e228 <xQueueCreateCountingSemaphore>:
	{
 800e228:	b510      	push	{r4, lr}
 800e22a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d101      	bne.n	800e234 <xQueueCreateCountingSemaphore+0xc>
 800e230:	b672      	cpsid	i
 800e232:	e7fe      	b.n	800e232 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e234:	4288      	cmp	r0, r1
 800e236:	d201      	bcs.n	800e23c <xQueueCreateCountingSemaphore+0x14>
 800e238:	b672      	cpsid	i
 800e23a:	e7fe      	b.n	800e23a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e23c:	2202      	movs	r2, #2
 800e23e:	2100      	movs	r1, #0
 800e240:	f7ff ffcb 	bl	800e1da <xQueueGenericCreate>
		if( xHandle != NULL )
 800e244:	2800      	cmp	r0, #0
 800e246:	d001      	beq.n	800e24c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e248:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e24a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800e24c:	b672      	cpsid	i
 800e24e:	e7fe      	b.n	800e24e <xQueueCreateCountingSemaphore+0x26>

0800e250 <xQueueGenericSend>:
{
 800e250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e252:	46ce      	mov	lr, r9
 800e254:	b500      	push	{lr}
 800e256:	b084      	sub	sp, #16
 800e258:	0004      	movs	r4, r0
 800e25a:	9100      	str	r1, [sp, #0]
 800e25c:	9201      	str	r2, [sp, #4]
 800e25e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e260:	2800      	cmp	r0, #0
 800e262:	d007      	beq.n	800e274 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e264:	9b00      	ldr	r3, [sp, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <xQueueGenericSend+0x28>
 800e26a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <xQueueGenericSend+0x28>
 800e270:	b672      	cpsid	i
 800e272:	e7fe      	b.n	800e272 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800e274:	b672      	cpsid	i
 800e276:	e7fe      	b.n	800e276 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e278:	2d02      	cmp	r5, #2
 800e27a:	d104      	bne.n	800e286 <xQueueGenericSend+0x36>
 800e27c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d001      	beq.n	800e286 <xQueueGenericSend+0x36>
 800e282:	b672      	cpsid	i
 800e284:	e7fe      	b.n	800e284 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e286:	f000 ff4f 	bl	800f128 <xTaskGetSchedulerState>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d104      	bne.n	800e298 <xQueueGenericSend+0x48>
 800e28e:	9b01      	ldr	r3, [sp, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d004      	beq.n	800e29e <xQueueGenericSend+0x4e>
 800e294:	b672      	cpsid	i
 800e296:	e7fe      	b.n	800e296 <xQueueGenericSend+0x46>
 800e298:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e29a:	2700      	movs	r7, #0
 800e29c:	e02f      	b.n	800e2fe <xQueueGenericSend+0xae>
 800e29e:	2600      	movs	r6, #0
 800e2a0:	e7fb      	b.n	800e29a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2a2:	002a      	movs	r2, r5
 800e2a4:	9900      	ldr	r1, [sp, #0]
 800e2a6:	0020      	movs	r0, r4
 800e2a8:	f7ff fed0 	bl	800e04c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d104      	bne.n	800e2bc <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d00a      	beq.n	800e2cc <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800e2b6:	f001 fb5f 	bl	800f978 <vPortYield>
 800e2ba:	e007      	b.n	800e2cc <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e2bc:	0020      	movs	r0, r4
 800e2be:	3024      	adds	r0, #36	; 0x24
 800e2c0:	f000 feaa 	bl	800f018 <xTaskRemoveFromEventList>
 800e2c4:	2801      	cmp	r0, #1
 800e2c6:	d101      	bne.n	800e2cc <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800e2c8:	f001 fb56 	bl	800f978 <vPortYield>
				taskEXIT_CRITICAL();
 800e2cc:	f001 fb6c 	bl	800f9a8 <vPortExitCritical>
				return pdPASS;
 800e2d0:	2001      	movs	r0, #1
}
 800e2d2:	b004      	add	sp, #16
 800e2d4:	bc04      	pop	{r2}
 800e2d6:	4691      	mov	r9, r2
 800e2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800e2da:	f001 fb65 	bl	800f9a8 <vPortExitCritical>
					return errQUEUE_FULL;
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e7f7      	b.n	800e2d2 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800e2e2:	a802      	add	r0, sp, #8
 800e2e4:	f000 fed8 	bl	800f098 <vTaskSetTimeOutState>
 800e2e8:	e016      	b.n	800e318 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800e2ea:	6467      	str	r7, [r4, #68]	; 0x44
 800e2ec:	e01d      	b.n	800e32a <xQueueGenericSend+0xda>
 800e2ee:	64a7      	str	r7, [r4, #72]	; 0x48
 800e2f0:	e01e      	b.n	800e330 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800e2f2:	0020      	movs	r0, r4
 800e2f4:	f7ff fefa 	bl	800e0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e2f8:	f000 fcb0 	bl	800ec5c <xTaskResumeAll>
 800e2fc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e2fe:	f001 fb47 	bl	800f990 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e304:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e306:	4293      	cmp	r3, r2
 800e308:	d3cb      	bcc.n	800e2a2 <xQueueGenericSend+0x52>
 800e30a:	2d02      	cmp	r5, #2
 800e30c:	d0c9      	beq.n	800e2a2 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e30e:	9b01      	ldr	r3, [sp, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d0e2      	beq.n	800e2da <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800e314:	2e00      	cmp	r6, #0
 800e316:	d0e4      	beq.n	800e2e2 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800e318:	f001 fb46 	bl	800f9a8 <vPortExitCritical>
		vTaskSuspendAll();
 800e31c:	f000 fbfe 	bl	800eb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e320:	f001 fb36 	bl	800f990 <vPortEnterCritical>
 800e324:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e326:	3301      	adds	r3, #1
 800e328:	d0df      	beq.n	800e2ea <xQueueGenericSend+0x9a>
 800e32a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e32c:	3301      	adds	r3, #1
 800e32e:	d0de      	beq.n	800e2ee <xQueueGenericSend+0x9e>
 800e330:	f001 fb3a 	bl	800f9a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e334:	a901      	add	r1, sp, #4
 800e336:	a802      	add	r0, sp, #8
 800e338:	f000 febe 	bl	800f0b8 <xTaskCheckForTimeOut>
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d117      	bne.n	800e370 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e340:	f001 fb26 	bl	800f990 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e346:	4699      	mov	r9, r3
 800e348:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f001 fb2d 	bl	800f9a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e34e:	45b1      	cmp	r9, r6
 800e350:	d1cf      	bne.n	800e2f2 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e352:	0020      	movs	r0, r4
 800e354:	3010      	adds	r0, #16
 800e356:	9901      	ldr	r1, [sp, #4]
 800e358:	f000 fe20 	bl	800ef9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e35c:	0020      	movs	r0, r4
 800e35e:	f7ff fec5 	bl	800e0ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e362:	f000 fc7b 	bl	800ec5c <xTaskResumeAll>
 800e366:	2800      	cmp	r0, #0
 800e368:	d1c8      	bne.n	800e2fc <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800e36a:	f001 fb05 	bl	800f978 <vPortYield>
 800e36e:	e7c5      	b.n	800e2fc <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800e370:	0020      	movs	r0, r4
 800e372:	f7ff febb 	bl	800e0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e376:	f000 fc71 	bl	800ec5c <xTaskResumeAll>
			return errQUEUE_FULL;
 800e37a:	2000      	movs	r0, #0
 800e37c:	e7a9      	b.n	800e2d2 <xQueueGenericSend+0x82>

0800e37e <xQueueGenericSendFromISR>:
{
 800e37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e380:	b083      	sub	sp, #12
 800e382:	0004      	movs	r4, r0
 800e384:	000d      	movs	r5, r1
 800e386:	0016      	movs	r6, r2
 800e388:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800e38a:	2800      	cmp	r0, #0
 800e38c:	d006      	beq.n	800e39c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e38e:	2900      	cmp	r1, #0
 800e390:	d106      	bne.n	800e3a0 <xQueueGenericSendFromISR+0x22>
 800e392:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e394:	2b00      	cmp	r3, #0
 800e396:	d003      	beq.n	800e3a0 <xQueueGenericSendFromISR+0x22>
 800e398:	b672      	cpsid	i
 800e39a:	e7fe      	b.n	800e39a <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800e39c:	b672      	cpsid	i
 800e39e:	e7fe      	b.n	800e39e <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3a0:	2f02      	cmp	r7, #2
 800e3a2:	d12a      	bne.n	800e3fa <xQueueGenericSendFromISR+0x7c>
 800e3a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d011      	beq.n	800e3ce <xQueueGenericSendFromISR+0x50>
 800e3aa:	b672      	cpsid	i
 800e3ac:	e7fe      	b.n	800e3ac <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800e3ae:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d01b      	beq.n	800e3ee <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3b6:	0020      	movs	r0, r4
 800e3b8:	3024      	adds	r0, #36	; 0x24
 800e3ba:	f000 fe2d 	bl	800f018 <xTaskRemoveFromEventList>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d015      	beq.n	800e3ee <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	d001      	beq.n	800e3ca <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e3c6:	6035      	str	r5, [r6, #0]
 800e3c8:	e011      	b.n	800e3ee <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800e3ca:	2501      	movs	r5, #1
 800e3cc:	e00f      	b.n	800e3ee <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3ce:	f001 fafb 	bl	800f9c8 <ulSetInterruptMaskFromISR>
 800e3d2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3d6:	003a      	movs	r2, r7
 800e3d8:	0029      	movs	r1, r5
 800e3da:	0020      	movs	r0, r4
 800e3dc:	f7ff fe36 	bl	800e04c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e3e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	d0e3      	beq.n	800e3ae <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800e3e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e3ec:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e3ee:	9801      	ldr	r0, [sp, #4]
 800e3f0:	f001 faef 	bl	800f9d2 <vClearInterruptMaskFromISR>
}
 800e3f4:	0028      	movs	r0, r5
 800e3f6:	b003      	add	sp, #12
 800e3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3fa:	f001 fae5 	bl	800f9c8 <ulSetInterruptMaskFromISR>
 800e3fe:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e402:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e404:	4293      	cmp	r3, r2
 800e406:	d3e6      	bcc.n	800e3d6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800e408:	2500      	movs	r5, #0
 800e40a:	e7f0      	b.n	800e3ee <xQueueGenericSendFromISR+0x70>

0800e40c <xQueueGiveFromISR>:
{
 800e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40e:	0004      	movs	r4, r0
 800e410:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800e412:	2800      	cmp	r0, #0
 800e414:	d004      	beq.n	800e420 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e416:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <xQueueGiveFromISR+0x18>
 800e41c:	b672      	cpsid	i
 800e41e:	e7fe      	b.n	800e41e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800e420:	b672      	cpsid	i
 800e422:	e7fe      	b.n	800e422 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e424:	6803      	ldr	r3, [r0, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d01f      	beq.n	800e46a <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e42a:	f001 facd 	bl	800f9c8 <ulSetInterruptMaskFromISR>
 800e42e:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800e432:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e434:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e436:	4293      	cmp	r3, r2
 800e438:	d212      	bcs.n	800e460 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800e43a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e43c:	3301      	adds	r3, #1
 800e43e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e440:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e442:	3301      	adds	r3, #1
 800e444:	d116      	bne.n	800e474 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800e446:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d008      	beq.n	800e460 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e44e:	0020      	movs	r0, r4
 800e450:	3024      	adds	r0, #36	; 0x24
 800e452:	f000 fde1 	bl	800f018 <xTaskRemoveFromEventList>
 800e456:	2800      	cmp	r0, #0
 800e458:	d002      	beq.n	800e460 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800e45a:	2f00      	cmp	r7, #0
 800e45c:	d00f      	beq.n	800e47e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e45e:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e460:	0030      	movs	r0, r6
 800e462:	f001 fab6 	bl	800f9d2 <vClearInterruptMaskFromISR>
}
 800e466:	0028      	movs	r0, r5
 800e468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e46a:	6843      	ldr	r3, [r0, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d0dc      	beq.n	800e42a <xQueueGiveFromISR+0x1e>
 800e470:	b672      	cpsid	i
 800e472:	e7fe      	b.n	800e472 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800e474:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e476:	3301      	adds	r3, #1
 800e478:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e47a:	2501      	movs	r5, #1
 800e47c:	e7f0      	b.n	800e460 <xQueueGiveFromISR+0x54>
 800e47e:	2501      	movs	r5, #1
 800e480:	e7ee      	b.n	800e460 <xQueueGiveFromISR+0x54>

0800e482 <xQueueGenericReceive>:
{
 800e482:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e484:	46c6      	mov	lr, r8
 800e486:	b500      	push	{lr}
 800e488:	b084      	sub	sp, #16
 800e48a:	0004      	movs	r4, r0
 800e48c:	000e      	movs	r6, r1
 800e48e:	9201      	str	r2, [sp, #4]
 800e490:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800e492:	2800      	cmp	r0, #0
 800e494:	d006      	beq.n	800e4a4 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e496:	2900      	cmp	r1, #0
 800e498:	d106      	bne.n	800e4a8 <xQueueGenericReceive+0x26>
 800e49a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <xQueueGenericReceive+0x26>
 800e4a0:	b672      	cpsid	i
 800e4a2:	e7fe      	b.n	800e4a2 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800e4a4:	b672      	cpsid	i
 800e4a6:	e7fe      	b.n	800e4a6 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4a8:	f000 fe3e 	bl	800f128 <xTaskGetSchedulerState>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d104      	bne.n	800e4ba <xQueueGenericReceive+0x38>
 800e4b0:	9b01      	ldr	r3, [sp, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d004      	beq.n	800e4c0 <xQueueGenericReceive+0x3e>
 800e4b6:	b672      	cpsid	i
 800e4b8:	e7fe      	b.n	800e4b8 <xQueueGenericReceive+0x36>
 800e4ba:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e4bc:	2700      	movs	r7, #0
 800e4be:	e04b      	b.n	800e558 <xQueueGenericReceive+0xd6>
 800e4c0:	2500      	movs	r5, #0
 800e4c2:	e7fb      	b.n	800e4bc <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e4c4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e4c6:	0031      	movs	r1, r6
 800e4c8:	0020      	movs	r0, r4
 800e4ca:	f7ff fdfd 	bl	800e0c8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e4ce:	4643      	mov	r3, r8
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d11a      	bne.n	800e50a <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800e4d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d102      	bne.n	800e4e6 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e4e0:	f000 ff62 	bl	800f3a8 <pvTaskIncrementMutexHeldCount>
 800e4e4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4e6:	6923      	ldr	r3, [r4, #16]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d007      	beq.n	800e4fc <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e4ec:	0020      	movs	r0, r4
 800e4ee:	3010      	adds	r0, #16
 800e4f0:	f000 fd92 	bl	800f018 <xTaskRemoveFromEventList>
 800e4f4:	2801      	cmp	r0, #1
 800e4f6:	d101      	bne.n	800e4fc <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800e4f8:	f001 fa3e 	bl	800f978 <vPortYield>
				taskEXIT_CRITICAL();
 800e4fc:	f001 fa54 	bl	800f9a8 <vPortExitCritical>
				return pdPASS;
 800e500:	2001      	movs	r0, #1
}
 800e502:	b004      	add	sp, #16
 800e504:	bc04      	pop	{r2}
 800e506:	4690      	mov	r8, r2
 800e508:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e50a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d0f4      	beq.n	800e4fc <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e512:	0020      	movs	r0, r4
 800e514:	3024      	adds	r0, #36	; 0x24
 800e516:	f000 fd7f 	bl	800f018 <xTaskRemoveFromEventList>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d0ee      	beq.n	800e4fc <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800e51e:	f001 fa2b 	bl	800f978 <vPortYield>
 800e522:	e7eb      	b.n	800e4fc <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800e524:	f001 fa40 	bl	800f9a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e528:	2000      	movs	r0, #0
 800e52a:	e7ea      	b.n	800e502 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800e52c:	a802      	add	r0, sp, #8
 800e52e:	f000 fdb3 	bl	800f098 <vTaskSetTimeOutState>
 800e532:	e01b      	b.n	800e56c <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800e534:	6467      	str	r7, [r4, #68]	; 0x44
 800e536:	e022      	b.n	800e57e <xQueueGenericReceive+0xfc>
 800e538:	64a7      	str	r7, [r4, #72]	; 0x48
 800e53a:	e023      	b.n	800e584 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800e53c:	f001 fa28 	bl	800f990 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e540:	6860      	ldr	r0, [r4, #4]
 800e542:	f000 fe01 	bl	800f148 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e546:	f001 fa2f 	bl	800f9a8 <vPortExitCritical>
 800e54a:	e02d      	b.n	800e5a8 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800e54c:	0020      	movs	r0, r4
 800e54e:	f7ff fdcd 	bl	800e0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e552:	f000 fb83 	bl	800ec5c <xTaskResumeAll>
 800e556:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e558:	f001 fa1a 	bl	800f990 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1b0      	bne.n	800e4c4 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d0dd      	beq.n	800e524 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800e568:	2d00      	cmp	r5, #0
 800e56a:	d0df      	beq.n	800e52c <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800e56c:	f001 fa1c 	bl	800f9a8 <vPortExitCritical>
		vTaskSuspendAll();
 800e570:	f000 fad4 	bl	800eb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e574:	f001 fa0c 	bl	800f990 <vPortEnterCritical>
 800e578:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e57a:	3301      	adds	r3, #1
 800e57c:	d0da      	beq.n	800e534 <xQueueGenericReceive+0xb2>
 800e57e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e580:	3301      	adds	r3, #1
 800e582:	d0d9      	beq.n	800e538 <xQueueGenericReceive+0xb6>
 800e584:	f001 fa10 	bl	800f9a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e588:	a901      	add	r1, sp, #4
 800e58a:	a802      	add	r0, sp, #8
 800e58c:	f000 fd94 	bl	800f0b8 <xTaskCheckForTimeOut>
 800e590:	2800      	cmp	r0, #0
 800e592:	d118      	bne.n	800e5c6 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800e594:	f001 f9fc 	bl	800f990 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e598:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800e59a:	f001 fa05 	bl	800f9a8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e59e:	2d00      	cmp	r5, #0
 800e5a0:	d1d4      	bne.n	800e54c <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0c9      	beq.n	800e53c <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5a8:	0020      	movs	r0, r4
 800e5aa:	3024      	adds	r0, #36	; 0x24
 800e5ac:	9901      	ldr	r1, [sp, #4]
 800e5ae:	f000 fcf5 	bl	800ef9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5b2:	0020      	movs	r0, r4
 800e5b4:	f7ff fd9a 	bl	800e0ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5b8:	f000 fb50 	bl	800ec5c <xTaskResumeAll>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d1ca      	bne.n	800e556 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800e5c0:	f001 f9da 	bl	800f978 <vPortYield>
 800e5c4:	e7c7      	b.n	800e556 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800e5c6:	0020      	movs	r0, r4
 800e5c8:	f7ff fd90 	bl	800e0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5cc:	f000 fb46 	bl	800ec5c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	e796      	b.n	800e502 <xQueueGenericReceive+0x80>

0800e5d4 <xQueueReceiveFromISR>:
{
 800e5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	0004      	movs	r4, r0
 800e5da:	000f      	movs	r7, r1
 800e5dc:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d006      	beq.n	800e5f0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5e2:	2900      	cmp	r1, #0
 800e5e4:	d106      	bne.n	800e5f4 <xQueueReceiveFromISR+0x20>
 800e5e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <xQueueReceiveFromISR+0x20>
 800e5ec:	b672      	cpsid	i
 800e5ee:	e7fe      	b.n	800e5ee <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800e5f0:	b672      	cpsid	i
 800e5f2:	e7fe      	b.n	800e5f2 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5f4:	f001 f9e8 	bl	800f9c8 <ulSetInterruptMaskFromISR>
 800e5f8:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800e5fc:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d01b      	beq.n	800e63a <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e602:	0039      	movs	r1, r7
 800e604:	0020      	movs	r0, r4
 800e606:	f7ff fd5f 	bl	800e0c8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e60a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e60c:	3b01      	subs	r3, #1
 800e60e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e610:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e612:	3301      	adds	r3, #1
 800e614:	d004      	beq.n	800e620 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800e616:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e618:	3301      	adds	r3, #1
 800e61a:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e61c:	2501      	movs	r5, #1
 800e61e:	e00c      	b.n	800e63a <xQueueReceiveFromISR+0x66>
 800e620:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e622:	6923      	ldr	r3, [r4, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d008      	beq.n	800e63a <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e628:	0020      	movs	r0, r4
 800e62a:	3010      	adds	r0, #16
 800e62c:	f000 fcf4 	bl	800f018 <xTaskRemoveFromEventList>
 800e630:	2800      	cmp	r0, #0
 800e632:	d002      	beq.n	800e63a <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800e634:	2e00      	cmp	r6, #0
 800e636:	d006      	beq.n	800e646 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e638:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e63a:	9801      	ldr	r0, [sp, #4]
 800e63c:	f001 f9c9 	bl	800f9d2 <vClearInterruptMaskFromISR>
}
 800e640:	0028      	movs	r0, r5
 800e642:	b003      	add	sp, #12
 800e644:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800e646:	2501      	movs	r5, #1
 800e648:	e7f7      	b.n	800e63a <xQueueReceiveFromISR+0x66>
	...

0800e64c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e64c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e64e:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <vQueueAddToRegistry+0x2c>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d009      	beq.n	800e66a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e656:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e658:	4c07      	ldr	r4, [pc, #28]	; (800e678 <vQueueAddToRegistry+0x2c>)
 800e65a:	00da      	lsls	r2, r3, #3
 800e65c:	58a2      	ldr	r2, [r4, r2]
 800e65e:	2a00      	cmp	r2, #0
 800e660:	d004      	beq.n	800e66c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e662:	3301      	adds	r3, #1
 800e664:	2b08      	cmp	r3, #8
 800e666:	d1f8      	bne.n	800e65a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e668:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e66a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e66c:	4a02      	ldr	r2, [pc, #8]	; (800e678 <vQueueAddToRegistry+0x2c>)
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e672:	18d3      	adds	r3, r2, r3
 800e674:	6058      	str	r0, [r3, #4]
				break;
 800e676:	e7f7      	b.n	800e668 <vQueueAddToRegistry+0x1c>
 800e678:	2000660c 	.word	0x2000660c

0800e67c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	0004      	movs	r4, r0
 800e680:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e682:	f001 f985 	bl	800f990 <vPortEnterCritical>
 800e686:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e688:	3301      	adds	r3, #1
 800e68a:	d00b      	beq.n	800e6a4 <vQueueWaitForMessageRestricted+0x28>
 800e68c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e68e:	3301      	adds	r3, #1
 800e690:	d00b      	beq.n	800e6aa <vQueueWaitForMessageRestricted+0x2e>
 800e692:	f001 f989 	bl	800f9a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d009      	beq.n	800e6b0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e69c:	0020      	movs	r0, r4
 800e69e:	f7ff fd25 	bl	800e0ec <prvUnlockQueue>
	}
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	6463      	str	r3, [r4, #68]	; 0x44
 800e6a8:	e7f0      	b.n	800e68c <vQueueWaitForMessageRestricted+0x10>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	64a3      	str	r3, [r4, #72]	; 0x48
 800e6ae:	e7f0      	b.n	800e692 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6b0:	0020      	movs	r0, r4
 800e6b2:	3024      	adds	r0, #36	; 0x24
 800e6b4:	0029      	movs	r1, r5
 800e6b6:	f000 fc95 	bl	800efe4 <vTaskPlaceOnEventListRestricted>
 800e6ba:	e7ef      	b.n	800e69c <vQueueWaitForMessageRestricted+0x20>

0800e6bc <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6be:	46d6      	mov	lr, sl
 800e6c0:	464f      	mov	r7, r9
 800e6c2:	4646      	mov	r6, r8
 800e6c4:	b5c0      	push	{r6, r7, lr}
 800e6c6:	0006      	movs	r6, r0
 800e6c8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e6ca:	6808      	ldr	r0, [r1, #0]
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	d044      	beq.n	800e75a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e6d0:	684b      	ldr	r3, [r1, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	604b      	str	r3, [r1, #4]
 800e6d6:	2208      	movs	r2, #8
 800e6d8:	4690      	mov	r8, r2
 800e6da:	4488      	add	r8, r1
 800e6dc:	4543      	cmp	r3, r8
 800e6de:	d006      	beq.n	800e6ee <prvListTaskWithinSingleList+0x32>
 800e6e0:	684b      	ldr	r3, [r1, #4]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800e6e6:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	469a      	mov	sl, r3
 800e6ec:	e018      	b.n	800e720 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e6ee:	68cb      	ldr	r3, [r1, #12]
 800e6f0:	604b      	str	r3, [r1, #4]
 800e6f2:	e7f5      	b.n	800e6e0 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e6f4:	68cb      	ldr	r3, [r1, #12]
 800e6f6:	604b      	str	r3, [r1, #4]
 800e6f8:	e017      	b.n	800e72a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e6fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e6fc:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e6fe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e700:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e702:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e704:	783b      	ldrb	r3, [r7, #0]
 800e706:	2ba5      	cmp	r3, #165	; 0xa5
 800e708:	d125      	bne.n	800e756 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e70a:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e70c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e70e:	5cfc      	ldrb	r4, [r7, r3]
 800e710:	2ca5      	cmp	r4, #165	; 0xa5
 800e712:	d0fb      	beq.n	800e70c <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e714:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e716:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e718:	3001      	adds	r0, #1
 800e71a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e71c:	45a9      	cmp	r9, r5
 800e71e:	d01c      	beq.n	800e75a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e720:	684b      	ldr	r3, [r1, #4]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	604b      	str	r3, [r1, #4]
 800e726:	4598      	cmp	r8, r3
 800e728:	d0e4      	beq.n	800e6f4 <prvListTaskWithinSingleList+0x38>
 800e72a:	684b      	ldr	r3, [r1, #4]
 800e72c:	68dd      	ldr	r5, [r3, #12]
 800e72e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e730:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e732:	002b      	movs	r3, r5
 800e734:	3334      	adds	r3, #52	; 0x34
 800e736:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e738:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e73a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e73c:	4663      	mov	r3, ip
 800e73e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e742:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e744:	4663      	mov	r3, ip
 800e746:	2b03      	cmp	r3, #3
 800e748:	d1d7      	bne.n	800e6fa <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e74a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d0d4      	beq.n	800e6fa <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e750:	4653      	mov	r3, sl
 800e752:	7333      	strb	r3, [r6, #12]
 800e754:	e7d1      	b.n	800e6fa <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e756:	2300      	movs	r3, #0
 800e758:	e7dc      	b.n	800e714 <prvListTaskWithinSingleList+0x58>
	}
 800e75a:	bc1c      	pop	{r2, r3, r4}
 800e75c:	4690      	mov	r8, r2
 800e75e:	4699      	mov	r9, r3
 800e760:	46a2      	mov	sl, r4
 800e762:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e764 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e764:	4b08      	ldr	r3, [pc, #32]	; (800e788 <prvResetNextTaskUnblockTime+0x24>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d007      	beq.n	800e77e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e76e:	4b06      	ldr	r3, [pc, #24]	; (800e788 <prvResetNextTaskUnblockTime+0x24>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	685a      	ldr	r2, [r3, #4]
 800e778:	4b04      	ldr	r3, [pc, #16]	; (800e78c <prvResetNextTaskUnblockTime+0x28>)
 800e77a:	601a      	str	r2, [r3, #0]
	}
}
 800e77c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e77e:	4b03      	ldr	r3, [pc, #12]	; (800e78c <prvResetNextTaskUnblockTime+0x28>)
 800e780:	2201      	movs	r2, #1
 800e782:	4252      	negs	r2, r2
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	e7f9      	b.n	800e77c <prvResetNextTaskUnblockTime+0x18>
 800e788:	200014f8 	.word	0x200014f8
 800e78c:	200000a4 	.word	0x200000a4

0800e790 <prvAddCurrentTaskToDelayedList>:
{
 800e790:	b510      	push	{r4, lr}
 800e792:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e794:	4b0e      	ldr	r3, [pc, #56]	; (800e7d0 <prvAddCurrentTaskToDelayedList+0x40>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e79a:	4b0e      	ldr	r3, [pc, #56]	; (800e7d4 <prvAddCurrentTaskToDelayedList+0x44>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4283      	cmp	r3, r0
 800e7a0:	d80d      	bhi.n	800e7be <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e7a2:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <prvAddCurrentTaskToDelayedList+0x48>)
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <prvAddCurrentTaskToDelayedList+0x40>)
 800e7a8:	6819      	ldr	r1, [r3, #0]
 800e7aa:	3104      	adds	r1, #4
 800e7ac:	f7ff fc24 	bl	800dff8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <prvAddCurrentTaskToDelayedList+0x4c>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d909      	bls.n	800e7cc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e7b8:	4b08      	ldr	r3, [pc, #32]	; (800e7dc <prvAddCurrentTaskToDelayedList+0x4c>)
 800e7ba:	601c      	str	r4, [r3, #0]
}
 800e7bc:	e006      	b.n	800e7cc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e7be:	4b08      	ldr	r3, [pc, #32]	; (800e7e0 <prvAddCurrentTaskToDelayedList+0x50>)
 800e7c0:	6818      	ldr	r0, [r3, #0]
 800e7c2:	4b03      	ldr	r3, [pc, #12]	; (800e7d0 <prvAddCurrentTaskToDelayedList+0x40>)
 800e7c4:	6819      	ldr	r1, [r3, #0]
 800e7c6:	3104      	adds	r1, #4
 800e7c8:	f7ff fc16 	bl	800dff8 <vListInsert>
}
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	46c0      	nop			; (mov r8, r8)
 800e7d0:	200014f4 	.word	0x200014f4
 800e7d4:	20001614 	.word	0x20001614
 800e7d8:	200014f8 	.word	0x200014f8
 800e7dc:	200000a4 	.word	0x200000a4
 800e7e0:	200014fc 	.word	0x200014fc

0800e7e4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e7e8:	f004 fe30 	bl	801344c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e7ec:	0020      	movs	r0, r4
 800e7ee:	f7f1 fc93 	bl	8000118 <strlen>
 800e7f2:	0003      	movs	r3, r0
 800e7f4:	280b      	cmp	r0, #11
 800e7f6:	dc08      	bgt.n	800e80a <prvWriteNameToBuffer+0x26>
 800e7f8:	1820      	adds	r0, r4, r0
 800e7fa:	0022      	movs	r2, r4
 800e7fc:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e7fe:	2320      	movs	r3, #32
 800e800:	7003      	strb	r3, [r0, #0]
 800e802:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e804:	4290      	cmp	r0, r2
 800e806:	d1fb      	bne.n	800e800 <prvWriteNameToBuffer+0x1c>
 800e808:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e80a:	18e0      	adds	r0, r4, r3
 800e80c:	2300      	movs	r3, #0
 800e80e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e810:	bd10      	pop	{r4, pc}
	...

0800e814 <xTaskGenericCreate>:
{
 800e814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e816:	46d6      	mov	lr, sl
 800e818:	4647      	mov	r7, r8
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b085      	sub	sp, #20
 800e81e:	9002      	str	r0, [sp, #8]
 800e820:	000d      	movs	r5, r1
 800e822:	0016      	movs	r6, r2
 800e824:	9303      	str	r3, [sp, #12]
 800e826:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800e828:	2800      	cmp	r0, #0
 800e82a:	d101      	bne.n	800e830 <xTaskGenericCreate+0x1c>
 800e82c:	b672      	cpsid	i
 800e82e:	e7fe      	b.n	800e82e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e830:	2f06      	cmp	r7, #6
 800e832:	d901      	bls.n	800e838 <xTaskGenericCreate+0x24>
 800e834:	b672      	cpsid	i
 800e836:	e7fe      	b.n	800e836 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d106      	bne.n	800e84c <xTaskGenericCreate+0x38>
 800e83e:	0090      	lsls	r0, r2, #2
 800e840:	f001 f928 	bl	800fa94 <pvPortMalloc>
 800e844:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800e846:	2800      	cmp	r0, #0
 800e848:	d100      	bne.n	800e84c <xTaskGenericCreate+0x38>
 800e84a:	e0b7      	b.n	800e9bc <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e84c:	2060      	movs	r0, #96	; 0x60
 800e84e:	f001 f921 	bl	800fa94 <pvPortMalloc>
 800e852:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e854:	d100      	bne.n	800e858 <xTaskGenericCreate+0x44>
 800e856:	e08b      	b.n	800e970 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800e858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e85a:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e85c:	00b2      	lsls	r2, r6, #2
 800e85e:	21a5      	movs	r1, #165	; 0xa5
 800e860:	0018      	movs	r0, r3
 800e862:	f004 fcb9 	bl	80131d8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e866:	4b57      	ldr	r3, [pc, #348]	; (800e9c4 <xTaskGenericCreate+0x1b0>)
 800e868:	18f3      	adds	r3, r6, r3
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e86e:	4694      	mov	ip, r2
 800e870:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e872:	2207      	movs	r2, #7
 800e874:	4393      	bics	r3, r2
 800e876:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e878:	782a      	ldrb	r2, [r5, #0]
 800e87a:	2334      	movs	r3, #52	; 0x34
 800e87c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800e87e:	782b      	ldrb	r3, [r5, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d000      	beq.n	800e886 <xTaskGenericCreate+0x72>
 800e884:	e07e      	b.n	800e984 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e886:	2500      	movs	r5, #0
 800e888:	2340      	movs	r3, #64	; 0x40
 800e88a:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800e88c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e88e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e890:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e892:	1d23      	adds	r3, r4, #4
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	0018      	movs	r0, r3
 800e898:	f7ff fb9f 	bl	800dfda <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e89c:	0020      	movs	r0, r4
 800e89e:	3018      	adds	r0, #24
 800e8a0:	f7ff fb9b 	bl	800dfda <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e8a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8a6:	2307      	movs	r3, #7
 800e8a8:	1bdb      	subs	r3, r3, r7
 800e8aa:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e8ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e8ae:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e8b0:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e8b2:	235c      	movs	r3, #92	; 0x5c
 800e8b4:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e8b6:	9a03      	ldr	r2, [sp, #12]
 800e8b8:	9902      	ldr	r1, [sp, #8]
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	f001 f820 	bl	800f900 <pxPortInitialiseStack>
 800e8c0:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8c4:	42ab      	cmp	r3, r5
 800e8c6:	d000      	beq.n	800e8ca <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e8c8:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e8ca:	f001 f861 	bl	800f990 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e8ce:	4a3e      	ldr	r2, [pc, #248]	; (800e9c8 <xTaskGenericCreate+0x1b4>)
 800e8d0:	6813      	ldr	r3, [r2, #0]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e8d6:	4b3d      	ldr	r3, [pc, #244]	; (800e9cc <xTaskGenericCreate+0x1b8>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d162      	bne.n	800e9a4 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800e8de:	4b3b      	ldr	r3, [pc, #236]	; (800e9cc <xTaskGenericCreate+0x1b8>)
 800e8e0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e8e2:	6813      	ldr	r3, [r2, #0]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d120      	bne.n	800e92a <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8e8:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8ea:	3313      	adds	r3, #19
 800e8ec:	4698      	mov	r8, r3
 800e8ee:	4e38      	ldr	r6, [pc, #224]	; (800e9d0 <xTaskGenericCreate+0x1bc>)
 800e8f0:	4640      	mov	r0, r8
 800e8f2:	4368      	muls	r0, r5
 800e8f4:	1980      	adds	r0, r0, r6
 800e8f6:	f7ff fb65 	bl	800dfc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8fa:	3501      	adds	r5, #1
 800e8fc:	2d07      	cmp	r5, #7
 800e8fe:	d1f7      	bne.n	800e8f0 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800e900:	4e34      	ldr	r6, [pc, #208]	; (800e9d4 <xTaskGenericCreate+0x1c0>)
 800e902:	0030      	movs	r0, r6
 800e904:	f7ff fb5e 	bl	800dfc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e908:	4d33      	ldr	r5, [pc, #204]	; (800e9d8 <xTaskGenericCreate+0x1c4>)
 800e90a:	0028      	movs	r0, r5
 800e90c:	f7ff fb5a 	bl	800dfc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e910:	4832      	ldr	r0, [pc, #200]	; (800e9dc <xTaskGenericCreate+0x1c8>)
 800e912:	f7ff fb57 	bl	800dfc4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e916:	4832      	ldr	r0, [pc, #200]	; (800e9e0 <xTaskGenericCreate+0x1cc>)
 800e918:	f7ff fb54 	bl	800dfc4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e91c:	4831      	ldr	r0, [pc, #196]	; (800e9e4 <xTaskGenericCreate+0x1d0>)
 800e91e:	f7ff fb51 	bl	800dfc4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e922:	4b31      	ldr	r3, [pc, #196]	; (800e9e8 <xTaskGenericCreate+0x1d4>)
 800e924:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e926:	4b31      	ldr	r3, [pc, #196]	; (800e9ec <xTaskGenericCreate+0x1d8>)
 800e928:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800e92a:	4a31      	ldr	r2, [pc, #196]	; (800e9f0 <xTaskGenericCreate+0x1dc>)
 800e92c:	6813      	ldr	r3, [r2, #0]
 800e92e:	3301      	adds	r3, #1
 800e930:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e932:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e936:	4a2f      	ldr	r2, [pc, #188]	; (800e9f4 <xTaskGenericCreate+0x1e0>)
 800e938:	6812      	ldr	r2, [r2, #0]
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d901      	bls.n	800e942 <xTaskGenericCreate+0x12e>
 800e93e:	4a2d      	ldr	r2, [pc, #180]	; (800e9f4 <xTaskGenericCreate+0x1e0>)
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	2014      	movs	r0, #20
 800e944:	4358      	muls	r0, r3
 800e946:	4b22      	ldr	r3, [pc, #136]	; (800e9d0 <xTaskGenericCreate+0x1bc>)
 800e948:	18c0      	adds	r0, r0, r3
 800e94a:	9901      	ldr	r1, [sp, #4]
 800e94c:	f7ff fb48 	bl	800dfe0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e950:	f001 f82a 	bl	800f9a8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e954:	4b28      	ldr	r3, [pc, #160]	; (800e9f8 <xTaskGenericCreate+0x1e4>)
 800e956:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e958:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00d      	beq.n	800e97a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e95e:	4b1b      	ldr	r3, [pc, #108]	; (800e9cc <xTaskGenericCreate+0x1b8>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e964:	42bb      	cmp	r3, r7
 800e966:	d208      	bcs.n	800e97a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800e968:	f001 f806 	bl	800f978 <vPortYield>
			xReturn = pdPASS;
 800e96c:	2001      	movs	r0, #1
 800e96e:	e004      	b.n	800e97a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800e970:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e972:	f001 f925 	bl	800fbc0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e976:	2001      	movs	r0, #1
 800e978:	4240      	negs	r0, r0
}
 800e97a:	b005      	add	sp, #20
 800e97c:	bc0c      	pop	{r2, r3}
 800e97e:	4690      	mov	r8, r2
 800e980:	469a      	mov	sl, r3
 800e982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e984:	1c6b      	adds	r3, r5, #1
 800e986:	0022      	movs	r2, r4
 800e988:	3235      	adds	r2, #53	; 0x35
 800e98a:	0021      	movs	r1, r4
 800e98c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e98e:	7818      	ldrb	r0, [r3, #0]
 800e990:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e992:	7818      	ldrb	r0, [r3, #0]
 800e994:	2800      	cmp	r0, #0
 800e996:	d100      	bne.n	800e99a <xTaskGenericCreate+0x186>
 800e998:	e775      	b.n	800e886 <xTaskGenericCreate+0x72>
 800e99a:	3301      	adds	r3, #1
 800e99c:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e99e:	4291      	cmp	r1, r2
 800e9a0:	d1f5      	bne.n	800e98e <xTaskGenericCreate+0x17a>
 800e9a2:	e770      	b.n	800e886 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800e9a4:	4b14      	ldr	r3, [pc, #80]	; (800e9f8 <xTaskGenericCreate+0x1e4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1be      	bne.n	800e92a <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e9ac:	4b07      	ldr	r3, [pc, #28]	; (800e9cc <xTaskGenericCreate+0x1b8>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b2:	42bb      	cmp	r3, r7
 800e9b4:	d8b9      	bhi.n	800e92a <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800e9b6:	4b05      	ldr	r3, [pc, #20]	; (800e9cc <xTaskGenericCreate+0x1b8>)
 800e9b8:	601c      	str	r4, [r3, #0]
 800e9ba:	e7b6      	b.n	800e92a <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e9bc:	2001      	movs	r0, #1
 800e9be:	4240      	negs	r0, r0
 800e9c0:	e7db      	b.n	800e97a <xTaskGenericCreate+0x166>
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	3fffffff 	.word	0x3fffffff
 800e9c8:	20001590 	.word	0x20001590
 800e9cc:	200014f4 	.word	0x200014f4
 800e9d0:	20001500 	.word	0x20001500
 800e9d4:	200015a8 	.word	0x200015a8
 800e9d8:	200015bc 	.word	0x200015bc
 800e9dc:	200015d4 	.word	0x200015d4
 800e9e0:	20001600 	.word	0x20001600
 800e9e4:	200015ec 	.word	0x200015ec
 800e9e8:	200014f8 	.word	0x200014f8
 800e9ec:	200014fc 	.word	0x200014fc
 800e9f0:	2000159c 	.word	0x2000159c
 800e9f4:	200015a4 	.word	0x200015a4
 800e9f8:	200015e8 	.word	0x200015e8

0800e9fc <uxTaskPriorityGet>:
	{
 800e9fc:	b510      	push	{r4, lr}
 800e9fe:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800ea00:	f000 ffc6 	bl	800f990 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ea04:	2c00      	cmp	r4, #0
 800ea06:	d004      	beq.n	800ea12 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800ea08:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ea0a:	f000 ffcd 	bl	800f9a8 <vPortExitCritical>
	}
 800ea0e:	0020      	movs	r0, r4
 800ea10:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ea12:	4b01      	ldr	r3, [pc, #4]	; (800ea18 <uxTaskPriorityGet+0x1c>)
 800ea14:	681c      	ldr	r4, [r3, #0]
 800ea16:	e7f7      	b.n	800ea08 <uxTaskPriorityGet+0xc>
 800ea18:	200014f4 	.word	0x200014f4

0800ea1c <vTaskPrioritySet>:
	{
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	0004      	movs	r4, r0
 800ea20:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800ea22:	2906      	cmp	r1, #6
 800ea24:	d901      	bls.n	800ea2a <vTaskPrioritySet+0xe>
 800ea26:	b672      	cpsid	i
 800ea28:	e7fe      	b.n	800ea28 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800ea2a:	f000 ffb1 	bl	800f990 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ea2e:	2c00      	cmp	r4, #0
 800ea30:	d101      	bne.n	800ea36 <vTaskPrioritySet+0x1a>
 800ea32:	4b21      	ldr	r3, [pc, #132]	; (800eab8 <vTaskPrioritySet+0x9c>)
 800ea34:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ea36:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ea38:	4295      	cmp	r5, r2
 800ea3a:	d032      	beq.n	800eaa2 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800ea3c:	d934      	bls.n	800eaa8 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800ea3e:	4b1e      	ldr	r3, [pc, #120]	; (800eab8 <vTaskPrioritySet+0x9c>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	42a3      	cmp	r3, r4
 800ea44:	d036      	beq.n	800eab4 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ea46:	4b1c      	ldr	r3, [pc, #112]	; (800eab8 <vTaskPrioritySet+0x9c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4c:	2600      	movs	r6, #0
 800ea4e:	429d      	cmp	r5, r3
 800ea50:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ea54:	428a      	cmp	r2, r1
 800ea56:	d100      	bne.n	800ea5a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800ea58:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800ea5a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea5c:	69a3      	ldr	r3, [r4, #24]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	db02      	blt.n	800ea68 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea62:	2207      	movs	r2, #7
 800ea64:	1b55      	subs	r5, r2, r5
 800ea66:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ea68:	2314      	movs	r3, #20
 800ea6a:	434b      	muls	r3, r1
 800ea6c:	4a13      	ldr	r2, [pc, #76]	; (800eabc <vTaskPrioritySet+0xa0>)
 800ea6e:	189b      	adds	r3, r3, r2
 800ea70:	6962      	ldr	r2, [r4, #20]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d111      	bne.n	800ea9a <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ea76:	1d25      	adds	r5, r4, #4
 800ea78:	0028      	movs	r0, r5
 800ea7a:	f7ff fad4 	bl	800e026 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea80:	4a0f      	ldr	r2, [pc, #60]	; (800eac0 <vTaskPrioritySet+0xa4>)
 800ea82:	6812      	ldr	r2, [r2, #0]
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d901      	bls.n	800ea8c <vTaskPrioritySet+0x70>
 800ea88:	4a0d      	ldr	r2, [pc, #52]	; (800eac0 <vTaskPrioritySet+0xa4>)
 800ea8a:	6013      	str	r3, [r2, #0]
 800ea8c:	2014      	movs	r0, #20
 800ea8e:	4358      	muls	r0, r3
 800ea90:	4b0a      	ldr	r3, [pc, #40]	; (800eabc <vTaskPrioritySet+0xa0>)
 800ea92:	18c0      	adds	r0, r0, r3
 800ea94:	0029      	movs	r1, r5
 800ea96:	f7ff faa3 	bl	800dfe0 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800ea9a:	2e01      	cmp	r6, #1
 800ea9c:	d101      	bne.n	800eaa2 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800ea9e:	f000 ff6b 	bl	800f978 <vPortYield>
		taskEXIT_CRITICAL();
 800eaa2:	f000 ff81 	bl	800f9a8 <vPortExitCritical>
	}
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800eaa8:	4b03      	ldr	r3, [pc, #12]	; (800eab8 <vTaskPrioritySet+0x9c>)
 800eaaa:	681e      	ldr	r6, [r3, #0]
 800eaac:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800eaae:	4273      	negs	r3, r6
 800eab0:	415e      	adcs	r6, r3
 800eab2:	e7ce      	b.n	800ea52 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800eab4:	2600      	movs	r6, #0
 800eab6:	e7cc      	b.n	800ea52 <vTaskPrioritySet+0x36>
 800eab8:	200014f4 	.word	0x200014f4
 800eabc:	20001500 	.word	0x20001500
 800eac0:	200015a4 	.word	0x200015a4

0800eac4 <vTaskStartScheduler>:
{
 800eac4:	b500      	push	{lr}
 800eac6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800eac8:	2300      	movs	r3, #0
 800eaca:	9303      	str	r3, [sp, #12]
 800eacc:	9302      	str	r3, [sp, #8]
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	22a0      	movs	r2, #160	; 0xa0
 800ead4:	490d      	ldr	r1, [pc, #52]	; (800eb0c <vTaskStartScheduler+0x48>)
 800ead6:	480e      	ldr	r0, [pc, #56]	; (800eb10 <vTaskStartScheduler+0x4c>)
 800ead8:	f7ff fe9c 	bl	800e814 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800eadc:	2801      	cmp	r0, #1
 800eade:	d003      	beq.n	800eae8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d110      	bne.n	800eb06 <vTaskStartScheduler+0x42>
 800eae4:	b672      	cpsid	i
 800eae6:	e7fe      	b.n	800eae6 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800eae8:	f000 fd68 	bl	800f5bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800eaec:	2801      	cmp	r0, #1
 800eaee:	d1f7      	bne.n	800eae0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800eaf0:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800eaf2:	4b08      	ldr	r3, [pc, #32]	; (800eb14 <vTaskStartScheduler+0x50>)
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800eaf8:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <vTaskStartScheduler+0x54>)
 800eafa:	2200      	movs	r2, #0
 800eafc:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800eafe:	f7f9 f96f 	bl	8007de0 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800eb02:	f000 ff0f 	bl	800f924 <xPortStartScheduler>
}
 800eb06:	b005      	add	sp, #20
 800eb08:	bd00      	pop	{pc}
 800eb0a:	46c0      	nop			; (mov r8, r8)
 800eb0c:	0801898c 	.word	0x0801898c
 800eb10:	0800ed85 	.word	0x0800ed85
 800eb14:	200015e8 	.word	0x200015e8
 800eb18:	20001614 	.word	0x20001614

0800eb1c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800eb1c:	4a02      	ldr	r2, [pc, #8]	; (800eb28 <vTaskSuspendAll+0xc>)
 800eb1e:	6813      	ldr	r3, [r2, #0]
 800eb20:	3301      	adds	r3, #1
 800eb22:	6013      	str	r3, [r2, #0]
}
 800eb24:	4770      	bx	lr
 800eb26:	46c0      	nop			; (mov r8, r8)
 800eb28:	20001598 	.word	0x20001598

0800eb2c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800eb2c:	4b01      	ldr	r3, [pc, #4]	; (800eb34 <xTaskGetTickCount+0x8>)
 800eb2e:	6818      	ldr	r0, [r3, #0]
}
 800eb30:	4770      	bx	lr
 800eb32:	46c0      	nop			; (mov r8, r8)
 800eb34:	20001614 	.word	0x20001614

0800eb38 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800eb38:	4b01      	ldr	r3, [pc, #4]	; (800eb40 <xTaskGetTickCountFromISR+0x8>)
 800eb3a:	6818      	ldr	r0, [r3, #0]
}
 800eb3c:	4770      	bx	lr
 800eb3e:	46c0      	nop			; (mov r8, r8)
 800eb40:	20001614 	.word	0x20001614

0800eb44 <xTaskIncrementTick>:
{
 800eb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb46:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb48:	4b39      	ldr	r3, [pc, #228]	; (800ec30 <xTaskIncrementTick+0xec>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d161      	bne.n	800ec14 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800eb50:	4b38      	ldr	r3, [pc, #224]	; (800ec34 <xTaskIncrementTick+0xf0>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	3201      	adds	r2, #1
 800eb56:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800eb58:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	d112      	bne.n	800eb84 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800eb5e:	4b36      	ldr	r3, [pc, #216]	; (800ec38 <xTaskIncrementTick+0xf4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <xTaskIncrementTick+0x28>
 800eb68:	b672      	cpsid	i
 800eb6a:	e7fe      	b.n	800eb6a <xTaskIncrementTick+0x26>
 800eb6c:	4a32      	ldr	r2, [pc, #200]	; (800ec38 <xTaskIncrementTick+0xf4>)
 800eb6e:	6811      	ldr	r1, [r2, #0]
 800eb70:	4b32      	ldr	r3, [pc, #200]	; (800ec3c <xTaskIncrementTick+0xf8>)
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	6010      	str	r0, [r2, #0]
 800eb76:	6019      	str	r1, [r3, #0]
 800eb78:	4a31      	ldr	r2, [pc, #196]	; (800ec40 <xTaskIncrementTick+0xfc>)
 800eb7a:	6813      	ldr	r3, [r2, #0]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	f7ff fdf0 	bl	800e764 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800eb84:	4b2f      	ldr	r3, [pc, #188]	; (800ec44 <xTaskIncrementTick+0x100>)
 800eb86:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800eb88:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800eb8a:	42b3      	cmp	r3, r6
 800eb8c:	d833      	bhi.n	800ebf6 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800eb8e:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb90:	4d29      	ldr	r5, [pc, #164]	; (800ec38 <xTaskIncrementTick+0xf4>)
 800eb92:	682b      	ldr	r3, [r5, #0]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d029      	beq.n	800ebee <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eb9a:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <xTaskIncrementTick+0xf4>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800eba2:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800eba4:	429e      	cmp	r6, r3
 800eba6:	d332      	bcc.n	800ec0e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eba8:	1d23      	adds	r3, r4, #4
 800ebaa:	9301      	str	r3, [sp, #4]
 800ebac:	0018      	movs	r0, r3
 800ebae:	f7ff fa3a 	bl	800e026 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ebb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ebb8:	0020      	movs	r0, r4
 800ebba:	3018      	adds	r0, #24
 800ebbc:	f7ff fa33 	bl	800e026 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ebc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ebc2:	4a21      	ldr	r2, [pc, #132]	; (800ec48 <xTaskIncrementTick+0x104>)
 800ebc4:	6812      	ldr	r2, [r2, #0]
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d901      	bls.n	800ebce <xTaskIncrementTick+0x8a>
 800ebca:	4a1f      	ldr	r2, [pc, #124]	; (800ec48 <xTaskIncrementTick+0x104>)
 800ebcc:	6013      	str	r3, [r2, #0]
 800ebce:	0098      	lsls	r0, r3, #2
 800ebd0:	18c0      	adds	r0, r0, r3
 800ebd2:	0080      	lsls	r0, r0, #2
 800ebd4:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <xTaskIncrementTick+0x108>)
 800ebd6:	18c0      	adds	r0, r0, r3
 800ebd8:	9901      	ldr	r1, [sp, #4]
 800ebda:	f7ff fa01 	bl	800dfe0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ebde:	4b1c      	ldr	r3, [pc, #112]	; (800ec50 <xTaskIncrementTick+0x10c>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ebe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d3d3      	bcc.n	800eb92 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800ebea:	2701      	movs	r7, #1
 800ebec:	e7d1      	b.n	800eb92 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800ebee:	4b15      	ldr	r3, [pc, #84]	; (800ec44 <xTaskIncrementTick+0x100>)
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	4252      	negs	r2, r2
 800ebf4:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ebf6:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <xTaskIncrementTick+0x10c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfc:	0093      	lsls	r3, r2, #2
 800ebfe:	189b      	adds	r3, r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4a12      	ldr	r2, [pc, #72]	; (800ec4c <xTaskIncrementTick+0x108>)
 800ec04:	589b      	ldr	r3, [r3, r2]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d909      	bls.n	800ec1e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800ec0a:	2701      	movs	r7, #1
 800ec0c:	e007      	b.n	800ec1e <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800ec0e:	4a0d      	ldr	r2, [pc, #52]	; (800ec44 <xTaskIncrementTick+0x100>)
 800ec10:	6013      	str	r3, [r2, #0]
							break;
 800ec12:	e7f0      	b.n	800ebf6 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800ec14:	4a0f      	ldr	r2, [pc, #60]	; (800ec54 <xTaskIncrementTick+0x110>)
 800ec16:	6813      	ldr	r3, [r2, #0]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ec1c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800ec1e:	4b0e      	ldr	r3, [pc, #56]	; (800ec58 <xTaskIncrementTick+0x114>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d000      	beq.n	800ec28 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800ec26:	2701      	movs	r7, #1
}
 800ec28:	0038      	movs	r0, r7
 800ec2a:	b003      	add	sp, #12
 800ec2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec2e:	46c0      	nop			; (mov r8, r8)
 800ec30:	20001598 	.word	0x20001598
 800ec34:	20001614 	.word	0x20001614
 800ec38:	200014f8 	.word	0x200014f8
 800ec3c:	200014fc 	.word	0x200014fc
 800ec40:	200015d0 	.word	0x200015d0
 800ec44:	200000a4 	.word	0x200000a4
 800ec48:	200015a4 	.word	0x200015a4
 800ec4c:	20001500 	.word	0x20001500
 800ec50:	200014f4 	.word	0x200014f4
 800ec54:	20001594 	.word	0x20001594
 800ec58:	20001618 	.word	0x20001618

0800ec5c <xTaskResumeAll>:
{
 800ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800ec5e:	4b2f      	ldr	r3, [pc, #188]	; (800ed1c <xTaskResumeAll+0xc0>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <xTaskResumeAll+0xe>
 800ec66:	b672      	cpsid	i
 800ec68:	e7fe      	b.n	800ec68 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800ec6a:	f000 fe91 	bl	800f990 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ec6e:	4b2b      	ldr	r3, [pc, #172]	; (800ed1c <xTaskResumeAll+0xc0>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	3a01      	subs	r2, #1
 800ec74:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec76:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec78:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	d105      	bne.n	800ec8a <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec7e:	4b28      	ldr	r3, [pc, #160]	; (800ed20 <xTaskResumeAll+0xc4>)
 800ec80:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ec82:	4d28      	ldr	r5, [pc, #160]	; (800ed24 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec84:	42a3      	cmp	r3, r4
 800ec86:	d12a      	bne.n	800ecde <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800ec88:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ec8a:	f000 fe8d 	bl	800f9a8 <vPortExitCritical>
}
 800ec8e:	0020      	movs	r0, r4
 800ec90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800ec92:	0098      	lsls	r0, r3, #2
 800ec94:	18c0      	adds	r0, r0, r3
 800ec96:	0080      	lsls	r0, r0, #2
 800ec98:	4b23      	ldr	r3, [pc, #140]	; (800ed28 <xTaskResumeAll+0xcc>)
 800ec9a:	18c0      	adds	r0, r0, r3
 800ec9c:	0021      	movs	r1, r4
 800ec9e:	f7ff f99f 	bl	800dfe0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eca2:	4b22      	ldr	r3, [pc, #136]	; (800ed2c <xTaskResumeAll+0xd0>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d214      	bcs.n	800ecd8 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecae:	6833      	ldr	r3, [r6, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d016      	beq.n	800ece2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ecb4:	68eb      	ldr	r3, [r5, #12]
 800ecb6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecb8:	0038      	movs	r0, r7
 800ecba:	3018      	adds	r0, #24
 800ecbc:	f7ff f9b3 	bl	800e026 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ecc0:	1d3c      	adds	r4, r7, #4
 800ecc2:	0020      	movs	r0, r4
 800ecc4:	f7ff f9af 	bl	800e026 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecca:	4a19      	ldr	r2, [pc, #100]	; (800ed30 <xTaskResumeAll+0xd4>)
 800eccc:	6812      	ldr	r2, [r2, #0]
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d9df      	bls.n	800ec92 <xTaskResumeAll+0x36>
 800ecd2:	4a17      	ldr	r2, [pc, #92]	; (800ed30 <xTaskResumeAll+0xd4>)
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	e7dc      	b.n	800ec92 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800ecd8:	4b16      	ldr	r3, [pc, #88]	; (800ed34 <xTaskResumeAll+0xd8>)
 800ecda:	2201      	movs	r2, #1
 800ecdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecde:	4e11      	ldr	r6, [pc, #68]	; (800ed24 <xTaskResumeAll+0xc8>)
 800ece0:	e7e5      	b.n	800ecae <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800ece2:	4b15      	ldr	r3, [pc, #84]	; (800ed38 <xTaskResumeAll+0xdc>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d005      	beq.n	800ecf6 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ecea:	4e13      	ldr	r6, [pc, #76]	; (800ed38 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800ecec:	4c11      	ldr	r4, [pc, #68]	; (800ed34 <xTaskResumeAll+0xd8>)
 800ecee:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ecf0:	6833      	ldr	r3, [r6, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d108      	bne.n	800ed08 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800ecf6:	4b0f      	ldr	r3, [pc, #60]	; (800ed34 <xTaskResumeAll+0xd8>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800ecfa:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d1c4      	bne.n	800ec8a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800ed00:	f000 fe3a 	bl	800f978 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800ed04:	3401      	adds	r4, #1
 800ed06:	e7c0      	b.n	800ec8a <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800ed08:	f7ff ff1c 	bl	800eb44 <xTaskIncrementTick>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d000      	beq.n	800ed12 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800ed10:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800ed12:	4a09      	ldr	r2, [pc, #36]	; (800ed38 <xTaskResumeAll+0xdc>)
 800ed14:	6813      	ldr	r3, [r2, #0]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	6013      	str	r3, [r2, #0]
 800ed1a:	e7e9      	b.n	800ecf0 <xTaskResumeAll+0x94>
 800ed1c:	20001598 	.word	0x20001598
 800ed20:	20001590 	.word	0x20001590
 800ed24:	200015d4 	.word	0x200015d4
 800ed28:	20001500 	.word	0x20001500
 800ed2c:	200014f4 	.word	0x200014f4
 800ed30:	200015a4 	.word	0x200015a4
 800ed34:	20001618 	.word	0x20001618
 800ed38:	20001594 	.word	0x20001594

0800ed3c <vTaskDelay>:
	{
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed40:	d016      	beq.n	800ed70 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800ed42:	4b0d      	ldr	r3, [pc, #52]	; (800ed78 <vTaskDelay+0x3c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d001      	beq.n	800ed4e <vTaskDelay+0x12>
 800ed4a:	b672      	cpsid	i
 800ed4c:	e7fe      	b.n	800ed4c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800ed4e:	f7ff fee5 	bl	800eb1c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800ed52:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <vTaskDelay+0x40>)
 800ed54:	681c      	ldr	r4, [r3, #0]
 800ed56:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed58:	4b09      	ldr	r3, [pc, #36]	; (800ed80 <vTaskDelay+0x44>)
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	3004      	adds	r0, #4
 800ed5e:	f7ff f962 	bl	800e026 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed62:	0020      	movs	r0, r4
 800ed64:	f7ff fd14 	bl	800e790 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ed68:	f7ff ff78 	bl	800ec5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d101      	bne.n	800ed74 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800ed70:	f000 fe02 	bl	800f978 <vPortYield>
	}
 800ed74:	bd70      	pop	{r4, r5, r6, pc}
 800ed76:	46c0      	nop			; (mov r8, r8)
 800ed78:	20001598 	.word	0x20001598
 800ed7c:	20001614 	.word	0x20001614
 800ed80:	200014f4 	.word	0x200014f4

0800ed84 <prvIdleTask>:
{
 800ed84:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800ed86:	4d16      	ldr	r5, [pc, #88]	; (800ede0 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ed88:	4e16      	ldr	r6, [pc, #88]	; (800ede4 <prvIdleTask+0x60>)
 800ed8a:	e003      	b.n	800ed94 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed8c:	4b16      	ldr	r3, [pc, #88]	; (800ede8 <prvIdleTask+0x64>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d822      	bhi.n	800edda <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800ed94:	682b      	ldr	r3, [r5, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d0f8      	beq.n	800ed8c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800ed9a:	f7ff febf 	bl	800eb1c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ed9e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800eda0:	f7ff ff5c 	bl	800ec5c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800eda4:	2c00      	cmp	r4, #0
 800eda6:	d0f5      	beq.n	800ed94 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800eda8:	f000 fdf2 	bl	800f990 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800edac:	4b0d      	ldr	r3, [pc, #52]	; (800ede4 <prvIdleTask+0x60>)
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edb2:	1d20      	adds	r0, r4, #4
 800edb4:	f7ff f937 	bl	800e026 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800edb8:	4a0c      	ldr	r2, [pc, #48]	; (800edec <prvIdleTask+0x68>)
 800edba:	6813      	ldr	r3, [r2, #0]
 800edbc:	3b01      	subs	r3, #1
 800edbe:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800edc0:	4a07      	ldr	r2, [pc, #28]	; (800ede0 <prvIdleTask+0x5c>)
 800edc2:	6813      	ldr	r3, [r2, #0]
 800edc4:	3b01      	subs	r3, #1
 800edc6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800edc8:	f000 fdee 	bl	800f9a8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800edcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800edce:	f000 fef7 	bl	800fbc0 <vPortFree>
		vPortFree( pxTCB );
 800edd2:	0020      	movs	r0, r4
 800edd4:	f000 fef4 	bl	800fbc0 <vPortFree>
 800edd8:	e7dc      	b.n	800ed94 <prvIdleTask+0x10>
				taskYIELD();
 800edda:	f000 fdcd 	bl	800f978 <vPortYield>
 800edde:	e7d9      	b.n	800ed94 <prvIdleTask+0x10>
 800ede0:	200015a0 	.word	0x200015a0
 800ede4:	20001600 	.word	0x20001600
 800ede8:	20001500 	.word	0x20001500
 800edec:	20001590 	.word	0x20001590

0800edf0 <uxTaskGetSystemState>:
	{
 800edf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf2:	46c6      	mov	lr, r8
 800edf4:	b500      	push	{lr}
 800edf6:	0006      	movs	r6, r0
 800edf8:	000d      	movs	r5, r1
 800edfa:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800edfc:	f7ff fe8e 	bl	800eb1c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ee00:	4b1e      	ldr	r3, [pc, #120]	; (800ee7c <uxTaskGetSystemState+0x8c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ee04:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ee06:	42ab      	cmp	r3, r5
 800ee08:	d831      	bhi.n	800ee6e <uxTaskGetSystemState+0x7e>
 800ee0a:	4d1d      	ldr	r5, [pc, #116]	; (800ee80 <uxTaskGetSystemState+0x90>)
 800ee0c:	002f      	movs	r7, r5
 800ee0e:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ee10:	0160      	lsls	r0, r4, #5
 800ee12:	1830      	adds	r0, r6, r0
 800ee14:	2201      	movs	r2, #1
 800ee16:	0029      	movs	r1, r5
 800ee18:	f7ff fc50 	bl	800e6bc <prvListTaskWithinSingleList>
 800ee1c:	1824      	adds	r4, r4, r0
 800ee1e:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee20:	42bd      	cmp	r5, r7
 800ee22:	d1f5      	bne.n	800ee10 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ee24:	4b17      	ldr	r3, [pc, #92]	; (800ee84 <uxTaskGetSystemState+0x94>)
 800ee26:	6819      	ldr	r1, [r3, #0]
 800ee28:	0160      	lsls	r0, r4, #5
 800ee2a:	1830      	adds	r0, r6, r0
 800ee2c:	2202      	movs	r2, #2
 800ee2e:	f7ff fc45 	bl	800e6bc <prvListTaskWithinSingleList>
 800ee32:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ee34:	4b14      	ldr	r3, [pc, #80]	; (800ee88 <uxTaskGetSystemState+0x98>)
 800ee36:	6819      	ldr	r1, [r3, #0]
 800ee38:	0160      	lsls	r0, r4, #5
 800ee3a:	1830      	adds	r0, r6, r0
 800ee3c:	2202      	movs	r2, #2
 800ee3e:	f7ff fc3d 	bl	800e6bc <prvListTaskWithinSingleList>
 800ee42:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ee44:	0160      	lsls	r0, r4, #5
 800ee46:	1830      	adds	r0, r6, r0
 800ee48:	2204      	movs	r2, #4
 800ee4a:	4910      	ldr	r1, [pc, #64]	; (800ee8c <uxTaskGetSystemState+0x9c>)
 800ee4c:	f7ff fc36 	bl	800e6bc <prvListTaskWithinSingleList>
 800ee50:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800ee52:	0160      	lsls	r0, r4, #5
 800ee54:	1830      	adds	r0, r6, r0
 800ee56:	2203      	movs	r2, #3
 800ee58:	490d      	ldr	r1, [pc, #52]	; (800ee90 <uxTaskGetSystemState+0xa0>)
 800ee5a:	f7ff fc2f 	bl	800e6bc <prvListTaskWithinSingleList>
 800ee5e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800ee60:	4643      	mov	r3, r8
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d003      	beq.n	800ee6e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ee66:	f7f8 ffcb 	bl	8007e00 <ulMainGetRunTimeCounterValue>
 800ee6a:	4643      	mov	r3, r8
 800ee6c:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800ee6e:	f7ff fef5 	bl	800ec5c <xTaskResumeAll>
	}
 800ee72:	0020      	movs	r0, r4
 800ee74:	bc04      	pop	{r2}
 800ee76:	4690      	mov	r8, r2
 800ee78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee7a:	46c0      	nop			; (mov r8, r8)
 800ee7c:	20001590 	.word	0x20001590
 800ee80:	20001578 	.word	0x20001578
 800ee84:	200014f8 	.word	0x200014f8
 800ee88:	200014fc 	.word	0x200014fc
 800ee8c:	20001600 	.word	0x20001600
 800ee90:	200015ec 	.word	0x200015ec

0800ee94 <vTaskSwitchContext>:
{
 800ee94:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ee96:	4b3a      	ldr	r3, [pc, #232]	; (800ef80 <vTaskSwitchContext+0xec>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ee9e:	4b39      	ldr	r3, [pc, #228]	; (800ef84 <vTaskSwitchContext+0xf0>)
 800eea0:	2201      	movs	r2, #1
 800eea2:	601a      	str	r2, [r3, #0]
}
 800eea4:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800eea6:	4b37      	ldr	r3, [pc, #220]	; (800ef84 <vTaskSwitchContext+0xf0>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800eeac:	f7f8 ffa8 	bl	8007e00 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800eeb0:	4b35      	ldr	r3, [pc, #212]	; (800ef88 <vTaskSwitchContext+0xf4>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4298      	cmp	r0, r3
 800eeb6:	d905      	bls.n	800eec4 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800eeb8:	4a34      	ldr	r2, [pc, #208]	; (800ef8c <vTaskSwitchContext+0xf8>)
 800eeba:	6812      	ldr	r2, [r2, #0]
 800eebc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800eebe:	1acb      	subs	r3, r1, r3
 800eec0:	181b      	adds	r3, r3, r0
 800eec2:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800eec4:	4b30      	ldr	r3, [pc, #192]	; (800ef88 <vTaskSwitchContext+0xf4>)
 800eec6:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800eec8:	4b30      	ldr	r3, [pc, #192]	; (800ef8c <vTaskSwitchContext+0xf8>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	6812      	ldr	r2, [r2, #0]
 800eed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d805      	bhi.n	800eee2 <vTaskSwitchContext+0x4e>
 800eed6:	4b2d      	ldr	r3, [pc, #180]	; (800ef8c <vTaskSwitchContext+0xf8>)
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	6819      	ldr	r1, [r3, #0]
 800eedc:	3134      	adds	r1, #52	; 0x34
 800eede:	f7fe f9fb 	bl	800d2d8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800eee2:	4b2a      	ldr	r3, [pc, #168]	; (800ef8c <vTaskSwitchContext+0xf8>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eee8:	2214      	movs	r2, #20
 800eeea:	4929      	ldr	r1, [pc, #164]	; (800ef90 <vTaskSwitchContext+0xfc>)
 800eeec:	f004 f95c 	bl	80131a8 <memcmp>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d005      	beq.n	800ef00 <vTaskSwitchContext+0x6c>
 800eef4:	4b25      	ldr	r3, [pc, #148]	; (800ef8c <vTaskSwitchContext+0xf8>)
 800eef6:	6818      	ldr	r0, [r3, #0]
 800eef8:	6819      	ldr	r1, [r3, #0]
 800eefa:	3134      	adds	r1, #52	; 0x34
 800eefc:	f7fe f9ec 	bl	800d2d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ef00:	4b24      	ldr	r3, [pc, #144]	; (800ef94 <vTaskSwitchContext+0x100>)
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	0093      	lsls	r3, r2, #2
 800ef06:	189b      	adds	r3, r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4a23      	ldr	r2, [pc, #140]	; (800ef98 <vTaskSwitchContext+0x104>)
 800ef0c:	589b      	ldr	r3, [r3, r2]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d115      	bne.n	800ef3e <vTaskSwitchContext+0xaa>
 800ef12:	4b20      	ldr	r3, [pc, #128]	; (800ef94 <vTaskSwitchContext+0x100>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00f      	beq.n	800ef3a <vTaskSwitchContext+0xa6>
 800ef1a:	4a1e      	ldr	r2, [pc, #120]	; (800ef94 <vTaskSwitchContext+0x100>)
 800ef1c:	4c1e      	ldr	r4, [pc, #120]	; (800ef98 <vTaskSwitchContext+0x104>)
 800ef1e:	0010      	movs	r0, r2
 800ef20:	6813      	ldr	r3, [r2, #0]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	6013      	str	r3, [r2, #0]
 800ef26:	6811      	ldr	r1, [r2, #0]
 800ef28:	008b      	lsls	r3, r1, #2
 800ef2a:	185b      	adds	r3, r3, r1
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	591b      	ldr	r3, [r3, r4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d104      	bne.n	800ef3e <vTaskSwitchContext+0xaa>
 800ef34:	6803      	ldr	r3, [r0, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d1f2      	bne.n	800ef20 <vTaskSwitchContext+0x8c>
 800ef3a:	b672      	cpsid	i
 800ef3c:	e7fe      	b.n	800ef3c <vTaskSwitchContext+0xa8>
 800ef3e:	4b15      	ldr	r3, [pc, #84]	; (800ef94 <vTaskSwitchContext+0x100>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	4c15      	ldr	r4, [pc, #84]	; (800ef98 <vTaskSwitchContext+0x104>)
 800ef44:	0093      	lsls	r3, r2, #2
 800ef46:	1899      	adds	r1, r3, r2
 800ef48:	0089      	lsls	r1, r1, #2
 800ef4a:	1861      	adds	r1, r4, r1
 800ef4c:	6848      	ldr	r0, [r1, #4]
 800ef4e:	6840      	ldr	r0, [r0, #4]
 800ef50:	6048      	str	r0, [r1, #4]
 800ef52:	189b      	adds	r3, r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	3308      	adds	r3, #8
 800ef58:	191b      	adds	r3, r3, r4
 800ef5a:	4298      	cmp	r0, r3
 800ef5c:	d009      	beq.n	800ef72 <vTaskSwitchContext+0xde>
 800ef5e:	0093      	lsls	r3, r2, #2
 800ef60:	189a      	adds	r2, r3, r2
 800ef62:	0092      	lsls	r2, r2, #2
 800ef64:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <vTaskSwitchContext+0x104>)
 800ef66:	189a      	adds	r2, r3, r2
 800ef68:	6853      	ldr	r3, [r2, #4]
 800ef6a:	68da      	ldr	r2, [r3, #12]
 800ef6c:	4b07      	ldr	r3, [pc, #28]	; (800ef8c <vTaskSwitchContext+0xf8>)
 800ef6e:	601a      	str	r2, [r3, #0]
}
 800ef70:	e798      	b.n	800eea4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ef72:	6840      	ldr	r0, [r0, #4]
 800ef74:	2114      	movs	r1, #20
 800ef76:	4351      	muls	r1, r2
 800ef78:	1863      	adds	r3, r4, r1
 800ef7a:	6058      	str	r0, [r3, #4]
 800ef7c:	e7ef      	b.n	800ef5e <vTaskSwitchContext+0xca>
 800ef7e:	46c0      	nop			; (mov r8, r8)
 800ef80:	20001598 	.word	0x20001598
 800ef84:	20001618 	.word	0x20001618
 800ef88:	2000158c 	.word	0x2000158c
 800ef8c:	200014f4 	.word	0x200014f4
 800ef90:	08018950 	.word	0x08018950
 800ef94:	200015a4 	.word	0x200015a4
 800ef98:	20001500 	.word	0x20001500

0800ef9c <vTaskPlaceOnEventList>:
{
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d101      	bne.n	800efa8 <vTaskPlaceOnEventList+0xc>
 800efa4:	b672      	cpsid	i
 800efa6:	e7fe      	b.n	800efa6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efa8:	4d0b      	ldr	r5, [pc, #44]	; (800efd8 <vTaskPlaceOnEventList+0x3c>)
 800efaa:	6829      	ldr	r1, [r5, #0]
 800efac:	3118      	adds	r1, #24
 800efae:	f7ff f823 	bl	800dff8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800efb2:	6828      	ldr	r0, [r5, #0]
 800efb4:	3004      	adds	r0, #4
 800efb6:	f7ff f836 	bl	800e026 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800efba:	1c63      	adds	r3, r4, #1
 800efbc:	d005      	beq.n	800efca <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800efbe:	4b07      	ldr	r3, [pc, #28]	; (800efdc <vTaskPlaceOnEventList+0x40>)
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800efc4:	f7ff fbe4 	bl	800e790 <prvAddCurrentTaskToDelayedList>
}
 800efc8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800efca:	4b03      	ldr	r3, [pc, #12]	; (800efd8 <vTaskPlaceOnEventList+0x3c>)
 800efcc:	6819      	ldr	r1, [r3, #0]
 800efce:	3104      	adds	r1, #4
 800efd0:	4803      	ldr	r0, [pc, #12]	; (800efe0 <vTaskPlaceOnEventList+0x44>)
 800efd2:	f7ff f805 	bl	800dfe0 <vListInsertEnd>
 800efd6:	e7f7      	b.n	800efc8 <vTaskPlaceOnEventList+0x2c>
 800efd8:	200014f4 	.word	0x200014f4
 800efdc:	20001614 	.word	0x20001614
 800efe0:	200015ec 	.word	0x200015ec

0800efe4 <vTaskPlaceOnEventListRestricted>:
	{
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800efe8:	2800      	cmp	r0, #0
 800efea:	d101      	bne.n	800eff0 <vTaskPlaceOnEventListRestricted+0xc>
 800efec:	b672      	cpsid	i
 800efee:	e7fe      	b.n	800efee <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eff0:	4c07      	ldr	r4, [pc, #28]	; (800f010 <vTaskPlaceOnEventListRestricted+0x2c>)
 800eff2:	6821      	ldr	r1, [r4, #0]
 800eff4:	3118      	adds	r1, #24
 800eff6:	f7fe fff3 	bl	800dfe0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800effa:	6820      	ldr	r0, [r4, #0]
 800effc:	3004      	adds	r0, #4
 800effe:	f7ff f812 	bl	800e026 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f002:	4b04      	ldr	r3, [pc, #16]	; (800f014 <vTaskPlaceOnEventListRestricted+0x30>)
 800f004:	6818      	ldr	r0, [r3, #0]
 800f006:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f008:	f7ff fbc2 	bl	800e790 <prvAddCurrentTaskToDelayedList>
	}
 800f00c:	bd70      	pop	{r4, r5, r6, pc}
 800f00e:	46c0      	nop			; (mov r8, r8)
 800f010:	200014f4 	.word	0x200014f4
 800f014:	20001614 	.word	0x20001614

0800f018 <xTaskRemoveFromEventList>:
{
 800f018:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f01a:	68c3      	ldr	r3, [r0, #12]
 800f01c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f01e:	2d00      	cmp	r5, #0
 800f020:	d101      	bne.n	800f026 <xTaskRemoveFromEventList+0xe>
 800f022:	b672      	cpsid	i
 800f024:	e7fe      	b.n	800f024 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f026:	002c      	movs	r4, r5
 800f028:	3418      	adds	r4, #24
 800f02a:	0020      	movs	r0, r4
 800f02c:	f7fe fffb 	bl	800e026 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f030:	4b13      	ldr	r3, [pc, #76]	; (800f080 <xTaskRemoveFromEventList+0x68>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d11e      	bne.n	800f076 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f038:	1d2c      	adds	r4, r5, #4
 800f03a:	0020      	movs	r0, r4
 800f03c:	f7fe fff3 	bl	800e026 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f040:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f042:	4a10      	ldr	r2, [pc, #64]	; (800f084 <xTaskRemoveFromEventList+0x6c>)
 800f044:	6812      	ldr	r2, [r2, #0]
 800f046:	4293      	cmp	r3, r2
 800f048:	d901      	bls.n	800f04e <xTaskRemoveFromEventList+0x36>
 800f04a:	4a0e      	ldr	r2, [pc, #56]	; (800f084 <xTaskRemoveFromEventList+0x6c>)
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	0098      	lsls	r0, r3, #2
 800f050:	18c0      	adds	r0, r0, r3
 800f052:	0080      	lsls	r0, r0, #2
 800f054:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <xTaskRemoveFromEventList+0x70>)
 800f056:	18c0      	adds	r0, r0, r3
 800f058:	0021      	movs	r1, r4
 800f05a:	f7fe ffc1 	bl	800dfe0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f05e:	4b0b      	ldr	r3, [pc, #44]	; (800f08c <xTaskRemoveFromEventList+0x74>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f066:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f068:	429a      	cmp	r2, r3
 800f06a:	d903      	bls.n	800f074 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800f06c:	4b08      	ldr	r3, [pc, #32]	; (800f090 <xTaskRemoveFromEventList+0x78>)
 800f06e:	2201      	movs	r2, #1
 800f070:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f072:	3001      	adds	r0, #1
}
 800f074:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f076:	0021      	movs	r1, r4
 800f078:	4806      	ldr	r0, [pc, #24]	; (800f094 <xTaskRemoveFromEventList+0x7c>)
 800f07a:	f7fe ffb1 	bl	800dfe0 <vListInsertEnd>
 800f07e:	e7ee      	b.n	800f05e <xTaskRemoveFromEventList+0x46>
 800f080:	20001598 	.word	0x20001598
 800f084:	200015a4 	.word	0x200015a4
 800f088:	20001500 	.word	0x20001500
 800f08c:	200014f4 	.word	0x200014f4
 800f090:	20001618 	.word	0x20001618
 800f094:	200015d4 	.word	0x200015d4

0800f098 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f098:	2800      	cmp	r0, #0
 800f09a:	d006      	beq.n	800f0aa <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f09c:	4b04      	ldr	r3, [pc, #16]	; (800f0b0 <vTaskSetTimeOutState+0x18>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f0a2:	4b04      	ldr	r3, [pc, #16]	; (800f0b4 <vTaskSetTimeOutState+0x1c>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6043      	str	r3, [r0, #4]
}
 800f0a8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f0aa:	b672      	cpsid	i
 800f0ac:	e7fe      	b.n	800f0ac <vTaskSetTimeOutState+0x14>
 800f0ae:	46c0      	nop			; (mov r8, r8)
 800f0b0:	200015d0 	.word	0x200015d0
 800f0b4:	20001614 	.word	0x20001614

0800f0b8 <xTaskCheckForTimeOut>:
{
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	0004      	movs	r4, r0
 800f0bc:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d003      	beq.n	800f0ca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800f0c2:	2900      	cmp	r1, #0
 800f0c4:	d103      	bne.n	800f0ce <xTaskCheckForTimeOut+0x16>
 800f0c6:	b672      	cpsid	i
 800f0c8:	e7fe      	b.n	800f0c8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800f0ca:	b672      	cpsid	i
 800f0cc:	e7fe      	b.n	800f0cc <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800f0ce:	f000 fc5f 	bl	800f990 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f0d2:	4b10      	ldr	r3, [pc, #64]	; (800f114 <xTaskCheckForTimeOut+0x5c>)
 800f0d4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f0d6:	6833      	ldr	r3, [r6, #0]
 800f0d8:	1c59      	adds	r1, r3, #1
 800f0da:	d019      	beq.n	800f110 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0dc:	490e      	ldr	r1, [pc, #56]	; (800f118 <xTaskCheckForTimeOut+0x60>)
 800f0de:	6809      	ldr	r1, [r1, #0]
 800f0e0:	6820      	ldr	r0, [r4, #0]
 800f0e2:	4288      	cmp	r0, r1
 800f0e4:	d003      	beq.n	800f0ee <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800f0e6:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	4291      	cmp	r1, r2
 800f0ec:	d904      	bls.n	800f0f8 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f0ee:	6861      	ldr	r1, [r4, #4]
 800f0f0:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800f0f2:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f0f4:	4283      	cmp	r3, r0
 800f0f6:	d803      	bhi.n	800f100 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800f0f8:	f000 fc56 	bl	800f9a8 <vPortExitCritical>
}
 800f0fc:	0028      	movs	r0, r5
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f100:	1a9b      	subs	r3, r3, r2
 800f102:	185b      	adds	r3, r3, r1
 800f104:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f106:	0020      	movs	r0, r4
 800f108:	f7ff ffc6 	bl	800f098 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f10c:	2500      	movs	r5, #0
 800f10e:	e7f3      	b.n	800f0f8 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800f110:	2500      	movs	r5, #0
 800f112:	e7f1      	b.n	800f0f8 <xTaskCheckForTimeOut+0x40>
 800f114:	20001614 	.word	0x20001614
 800f118:	200015d0 	.word	0x200015d0

0800f11c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f11c:	4b01      	ldr	r3, [pc, #4]	; (800f124 <vTaskMissedYield+0x8>)
 800f11e:	2201      	movs	r2, #1
 800f120:	601a      	str	r2, [r3, #0]
}
 800f122:	4770      	bx	lr
 800f124:	20001618 	.word	0x20001618

0800f128 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f128:	4b05      	ldr	r3, [pc, #20]	; (800f140 <xTaskGetSchedulerState+0x18>)
 800f12a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f12c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d004      	beq.n	800f13c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f132:	4b04      	ldr	r3, [pc, #16]	; (800f144 <xTaskGetSchedulerState+0x1c>)
 800f134:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f136:	4243      	negs	r3, r0
 800f138:	4158      	adcs	r0, r3
 800f13a:	0040      	lsls	r0, r0, #1
	}
 800f13c:	4770      	bx	lr
 800f13e:	46c0      	nop			; (mov r8, r8)
 800f140:	200015e8 	.word	0x200015e8
 800f144:	20001598 	.word	0x20001598

0800f148 <vTaskPriorityInherit>:
	{
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f14c:	d01a      	beq.n	800f184 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f14e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f150:	4b19      	ldr	r3, [pc, #100]	; (800f1b8 <vTaskPriorityInherit+0x70>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	429a      	cmp	r2, r3
 800f158:	d214      	bcs.n	800f184 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f15a:	6983      	ldr	r3, [r0, #24]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	db05      	blt.n	800f16c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f160:	4b15      	ldr	r3, [pc, #84]	; (800f1b8 <vTaskPriorityInherit+0x70>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f166:	2307      	movs	r3, #7
 800f168:	1a5b      	subs	r3, r3, r1
 800f16a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f16c:	0093      	lsls	r3, r2, #2
 800f16e:	189b      	adds	r3, r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4a12      	ldr	r2, [pc, #72]	; (800f1bc <vTaskPriorityInherit+0x74>)
 800f174:	189b      	adds	r3, r3, r2
 800f176:	6962      	ldr	r2, [r4, #20]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d004      	beq.n	800f186 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f17c:	4b0e      	ldr	r3, [pc, #56]	; (800f1b8 <vTaskPriorityInherit+0x70>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f182:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f184:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f186:	1d25      	adds	r5, r4, #4
 800f188:	0028      	movs	r0, r5
 800f18a:	f7fe ff4c 	bl	800e026 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f18e:	4b0a      	ldr	r3, [pc, #40]	; (800f1b8 <vTaskPriorityInherit+0x70>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f194:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f196:	4a0a      	ldr	r2, [pc, #40]	; (800f1c0 <vTaskPriorityInherit+0x78>)
 800f198:	6812      	ldr	r2, [r2, #0]
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d808      	bhi.n	800f1b0 <vTaskPriorityInherit+0x68>
 800f19e:	0098      	lsls	r0, r3, #2
 800f1a0:	18c0      	adds	r0, r0, r3
 800f1a2:	0080      	lsls	r0, r0, #2
 800f1a4:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <vTaskPriorityInherit+0x74>)
 800f1a6:	18c0      	adds	r0, r0, r3
 800f1a8:	0029      	movs	r1, r5
 800f1aa:	f7fe ff19 	bl	800dfe0 <vListInsertEnd>
	}
 800f1ae:	e7e9      	b.n	800f184 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f1b0:	4a03      	ldr	r2, [pc, #12]	; (800f1c0 <vTaskPriorityInherit+0x78>)
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	e7f3      	b.n	800f19e <vTaskPriorityInherit+0x56>
 800f1b6:	46c0      	nop			; (mov r8, r8)
 800f1b8:	200014f4 	.word	0x200014f4
 800f1bc:	20001500 	.word	0x20001500
 800f1c0:	200015a4 	.word	0x200015a4

0800f1c4 <xTaskPriorityDisinherit>:
	{
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f1c8:	d02b      	beq.n	800f222 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800f1ca:	4b18      	ldr	r3, [pc, #96]	; (800f22c <xTaskPriorityDisinherit+0x68>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4283      	cmp	r3, r0
 800f1d0:	d001      	beq.n	800f1d6 <xTaskPriorityDisinherit+0x12>
 800f1d2:	b672      	cpsid	i
 800f1d4:	e7fe      	b.n	800f1d4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <xTaskPriorityDisinherit+0x1c>
 800f1dc:	b672      	cpsid	i
 800f1de:	e7fe      	b.n	800f1de <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800f1e0:	3b01      	subs	r3, #1
 800f1e2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f1e6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f1e8:	428a      	cmp	r2, r1
 800f1ea:	d01c      	beq.n	800f226 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800f1ec:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f1ee:	4283      	cmp	r3, r0
 800f1f0:	d118      	bne.n	800f224 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f1f2:	1d25      	adds	r5, r4, #4
 800f1f4:	0028      	movs	r0, r5
 800f1f6:	f7fe ff16 	bl	800e026 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f1fc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1fe:	2207      	movs	r2, #7
 800f200:	1ad2      	subs	r2, r2, r3
 800f202:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f204:	4a0a      	ldr	r2, [pc, #40]	; (800f230 <xTaskPriorityDisinherit+0x6c>)
 800f206:	6812      	ldr	r2, [r2, #0]
 800f208:	4293      	cmp	r3, r2
 800f20a:	d901      	bls.n	800f210 <xTaskPriorityDisinherit+0x4c>
 800f20c:	4a08      	ldr	r2, [pc, #32]	; (800f230 <xTaskPriorityDisinherit+0x6c>)
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	2014      	movs	r0, #20
 800f212:	4358      	muls	r0, r3
 800f214:	4b07      	ldr	r3, [pc, #28]	; (800f234 <xTaskPriorityDisinherit+0x70>)
 800f216:	18c0      	adds	r0, r0, r3
 800f218:	0029      	movs	r1, r5
 800f21a:	f7fe fee1 	bl	800dfe0 <vListInsertEnd>
					xReturn = pdTRUE;
 800f21e:	2001      	movs	r0, #1
 800f220:	e000      	b.n	800f224 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800f222:	2000      	movs	r0, #0
	}
 800f224:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800f226:	2000      	movs	r0, #0
 800f228:	e7fc      	b.n	800f224 <xTaskPriorityDisinherit+0x60>
 800f22a:	46c0      	nop			; (mov r8, r8)
 800f22c:	200014f4 	.word	0x200014f4
 800f230:	200015a4 	.word	0x200015a4
 800f234:	20001500 	.word	0x20001500

0800f238 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23a:	b085      	sub	sp, #20
 800f23c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f23e:	2300      	movs	r3, #0
 800f240:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f242:	4b2b      	ldr	r3, [pc, #172]	; (800f2f0 <vTaskList+0xb8>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	0140      	lsls	r0, r0, #5
 800f24c:	f000 fc22 	bl	800fa94 <pvPortMalloc>
 800f250:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f252:	d04a      	beq.n	800f2ea <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f254:	9903      	ldr	r1, [sp, #12]
 800f256:	2200      	movs	r2, #0
 800f258:	f7ff fdca 	bl	800edf0 <uxTaskGetSystemState>
 800f25c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f25e:	2300      	movs	r3, #0
 800f260:	9302      	str	r3, [sp, #8]
 800f262:	9a02      	ldr	r2, [sp, #8]
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	429a      	cmp	r2, r3
 800f268:	d23c      	bcs.n	800f2e4 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f26a:	4e22      	ldr	r6, [pc, #136]	; (800f2f4 <vTaskList+0xbc>)
 800f26c:	e027      	b.n	800f2be <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800f26e:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f270:	2b01      	cmp	r3, #1
 800f272:	d133      	bne.n	800f2dc <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f274:	9b02      	ldr	r3, [sp, #8]
 800f276:	015b      	lsls	r3, r3, #5
 800f278:	18fb      	adds	r3, r7, r3
 800f27a:	6859      	ldr	r1, [r3, #4]
 800f27c:	0020      	movs	r0, r4
 800f27e:	f7ff fab1 	bl	800e7e4 <prvWriteNameToBuffer>
 800f282:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f284:	9b02      	ldr	r3, [sp, #8]
 800f286:	9a02      	ldr	r2, [sp, #8]
 800f288:	9902      	ldr	r1, [sp, #8]
 800f28a:	015b      	lsls	r3, r3, #5
 800f28c:	18fb      	adds	r3, r7, r3
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	0149      	lsls	r1, r1, #5
 800f292:	1879      	adds	r1, r7, r1
 800f294:	6889      	ldr	r1, [r1, #8]
 800f296:	9101      	str	r1, [sp, #4]
 800f298:	0152      	lsls	r2, r2, #5
 800f29a:	18ba      	adds	r2, r7, r2
 800f29c:	8b92      	ldrh	r2, [r2, #28]
 800f29e:	9200      	str	r2, [sp, #0]
 800f2a0:	002a      	movs	r2, r5
 800f2a2:	0031      	movs	r1, r6
 800f2a4:	f004 f896 	bl	80133d4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f2a8:	0020      	movs	r0, r4
 800f2aa:	f7f0 ff35 	bl	8000118 <strlen>
 800f2ae:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f2b0:	9b02      	ldr	r3, [sp, #8]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	9302      	str	r3, [sp, #8]
 800f2b6:	9a02      	ldr	r2, [sp, #8]
 800f2b8:	9b03      	ldr	r3, [sp, #12]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d212      	bcs.n	800f2e4 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f2be:	9b02      	ldr	r3, [sp, #8]
 800f2c0:	015b      	lsls	r3, r3, #5
 800f2c2:	18fb      	adds	r3, r7, r3
 800f2c4:	7b1b      	ldrb	r3, [r3, #12]
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d00a      	beq.n	800f2e0 <vTaskList+0xa8>
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	2a02      	cmp	r2, #2
 800f2ce:	d9ce      	bls.n	800f26e <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f2d0:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d0ce      	beq.n	800f274 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f2d6:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f2d8:	2b04      	cmp	r3, #4
 800f2da:	d0cb      	beq.n	800f274 <vTaskList+0x3c>
										cStatus = 0x00;
 800f2dc:	2500      	movs	r5, #0
										break;
 800f2de:	e7c9      	b.n	800f274 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f2e0:	2542      	movs	r5, #66	; 0x42
 800f2e2:	e7c7      	b.n	800f274 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f2e4:	0038      	movs	r0, r7
 800f2e6:	f000 fc6b 	bl	800fbc0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f2ea:	b005      	add	sp, #20
 800f2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2ee:	46c0      	nop			; (mov r8, r8)
 800f2f0:	20001590 	.word	0x20001590
 800f2f4:	0801897c 	.word	0x0801897c

0800f2f8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f2fe:	2300      	movs	r3, #0
 800f300:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f302:	4b26      	ldr	r3, [pc, #152]	; (800f39c <vTaskGetRunTimeStats+0xa4>)
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f308:	6818      	ldr	r0, [r3, #0]
 800f30a:	0140      	lsls	r0, r0, #5
 800f30c:	f000 fbc2 	bl	800fa94 <pvPortMalloc>
 800f310:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f312:	d014      	beq.n	800f33e <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f314:	9903      	ldr	r1, [sp, #12]
 800f316:	aa01      	add	r2, sp, #4
 800f318:	f7ff fd6a 	bl	800edf0 <uxTaskGetSystemState>
 800f31c:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f31e:	2164      	movs	r1, #100	; 0x64
 800f320:	9801      	ldr	r0, [sp, #4]
 800f322:	f7f0 ff0b 	bl	800013c <__udivsi3>
 800f326:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f328:	2800      	cmp	r0, #0
 800f32a:	d005      	beq.n	800f338 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f32c:	2300      	movs	r3, #0
 800f32e:	9302      	str	r3, [sp, #8]
 800f330:	9a02      	ldr	r2, [sp, #8]
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	429a      	cmp	r2, r3
 800f336:	d316      	bcc.n	800f366 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f338:	0030      	movs	r0, r6
 800f33a:	f000 fc41 	bl	800fbc0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f33e:	b004      	add	sp, #16
 800f340:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f342:	9b02      	ldr	r3, [sp, #8]
 800f344:	015b      	lsls	r3, r3, #5
 800f346:	18f3      	adds	r3, r6, r3
 800f348:	699a      	ldr	r2, [r3, #24]
 800f34a:	4915      	ldr	r1, [pc, #84]	; (800f3a0 <vTaskGetRunTimeStats+0xa8>)
 800f34c:	f004 f842 	bl	80133d4 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f350:	0020      	movs	r0, r4
 800f352:	f7f0 fee1 	bl	8000118 <strlen>
 800f356:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f358:	9b02      	ldr	r3, [sp, #8]
 800f35a:	3301      	adds	r3, #1
 800f35c:	9302      	str	r3, [sp, #8]
 800f35e:	9a02      	ldr	r2, [sp, #8]
 800f360:	9b03      	ldr	r3, [sp, #12]
 800f362:	429a      	cmp	r2, r3
 800f364:	d2e8      	bcs.n	800f338 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f366:	9b02      	ldr	r3, [sp, #8]
 800f368:	015b      	lsls	r3, r3, #5
 800f36a:	18f3      	adds	r3, r6, r3
 800f36c:	9901      	ldr	r1, [sp, #4]
 800f36e:	6998      	ldr	r0, [r3, #24]
 800f370:	f7f0 fee4 	bl	800013c <__udivsi3>
 800f374:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f376:	9b02      	ldr	r3, [sp, #8]
 800f378:	015b      	lsls	r3, r3, #5
 800f37a:	18f3      	adds	r3, r6, r3
 800f37c:	6859      	ldr	r1, [r3, #4]
 800f37e:	0020      	movs	r0, r4
 800f380:	f7ff fa30 	bl	800e7e4 <prvWriteNameToBuffer>
 800f384:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f386:	2d00      	cmp	r5, #0
 800f388:	d0db      	beq.n	800f342 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f38a:	9b02      	ldr	r3, [sp, #8]
 800f38c:	015b      	lsls	r3, r3, #5
 800f38e:	18f3      	adds	r3, r6, r3
 800f390:	699a      	ldr	r2, [r3, #24]
 800f392:	002b      	movs	r3, r5
 800f394:	4903      	ldr	r1, [pc, #12]	; (800f3a4 <vTaskGetRunTimeStats+0xac>)
 800f396:	f004 f81d 	bl	80133d4 <siprintf>
 800f39a:	e7d9      	b.n	800f350 <vTaskGetRunTimeStats+0x58>
 800f39c:	20001590 	.word	0x20001590
 800f3a0:	08018970 	.word	0x08018970
 800f3a4:	08018964 	.word	0x08018964

0800f3a8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f3a8:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <pvTaskIncrementMutexHeldCount+0x18>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d004      	beq.n	800f3ba <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3b0:	4b03      	ldr	r3, [pc, #12]	; (800f3c0 <pvTaskIncrementMutexHeldCount+0x18>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f3ba:	4b01      	ldr	r3, [pc, #4]	; (800f3c0 <pvTaskIncrementMutexHeldCount+0x18>)
 800f3bc:	6818      	ldr	r0, [r3, #0]
	}
 800f3be:	4770      	bx	lr
 800f3c0:	200014f4 	.word	0x200014f4

0800f3c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f3c4:	b570      	push	{r4, r5, r6, lr}
 800f3c6:	0005      	movs	r5, r0
 800f3c8:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f3ca:	f000 fae1 	bl	800f990 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f3ce:	4b20      	ldr	r3, [pc, #128]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f3d8:	4b1d      	ldr	r3, [pc, #116]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	235c      	movs	r3, #92	; 0x5c
 800f3de:	2101      	movs	r1, #1
 800f3e0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f3e2:	2c00      	cmp	r4, #0
 800f3e4:	d118      	bne.n	800f418 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f3e6:	f000 fadf 	bl	800f9a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f3ea:	f000 fad1 	bl	800f990 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f3ee:	4b18      	ldr	r3, [pc, #96]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f3f4:	2c00      	cmp	r4, #0
 800f3f6:	d006      	beq.n	800f406 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	d123      	bne.n	800f444 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800f3fc:	4b14      	ldr	r3, [pc, #80]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f402:	3b01      	subs	r3, #1
 800f404:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f406:	4b12      	ldr	r3, [pc, #72]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	235c      	movs	r3, #92	; 0x5c
 800f40c:	2100      	movs	r1, #0
 800f40e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f410:	f000 faca 	bl	800f9a8 <vPortExitCritical>

		return ulReturn;
	}
 800f414:	0020      	movs	r0, r4
 800f416:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f418:	4b0d      	ldr	r3, [pc, #52]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	3004      	adds	r0, #4
 800f41e:	f7fe fe02 	bl	800e026 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f422:	1c63      	adds	r3, r4, #1
 800f424:	d007      	beq.n	800f436 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800f426:	4b0b      	ldr	r3, [pc, #44]	; (800f454 <ulTaskNotifyTake+0x90>)
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f42c:	f7ff f9b0 	bl	800e790 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f430:	f000 faa2 	bl	800f978 <vPortYield>
 800f434:	e7d7      	b.n	800f3e6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f436:	4b06      	ldr	r3, [pc, #24]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f438:	6819      	ldr	r1, [r3, #0]
 800f43a:	3104      	adds	r1, #4
 800f43c:	4806      	ldr	r0, [pc, #24]	; (800f458 <ulTaskNotifyTake+0x94>)
 800f43e:	f7fe fdcf 	bl	800dfe0 <vListInsertEnd>
 800f442:	e7f5      	b.n	800f430 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f444:	4b02      	ldr	r3, [pc, #8]	; (800f450 <ulTaskNotifyTake+0x8c>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2200      	movs	r2, #0
 800f44a:	659a      	str	r2, [r3, #88]	; 0x58
 800f44c:	e7db      	b.n	800f406 <ulTaskNotifyTake+0x42>
 800f44e:	46c0      	nop			; (mov r8, r8)
 800f450:	200014f4 	.word	0x200014f4
 800f454:	20001614 	.word	0x20001614
 800f458:	200015ec 	.word	0x200015ec

0800f45c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	0004      	movs	r4, r0
 800f460:	000e      	movs	r6, r1
 800f462:	0015      	movs	r5, r2
 800f464:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800f466:	2800      	cmp	r0, #0
 800f468:	d101      	bne.n	800f46e <xTaskGenericNotify+0x12>
 800f46a:	b672      	cpsid	i
 800f46c:	e7fe      	b.n	800f46c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f46e:	f000 fa8f 	bl	800f990 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f472:	2f00      	cmp	r7, #0
 800f474:	d001      	beq.n	800f47a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f478:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f47a:	225c      	movs	r2, #92	; 0x5c
 800f47c:	5ca3      	ldrb	r3, [r4, r2]
 800f47e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f480:	2102      	movs	r1, #2
 800f482:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f484:	2d02      	cmp	r5, #2
 800f486:	d015      	beq.n	800f4b4 <xTaskGenericNotify+0x58>
 800f488:	d907      	bls.n	800f49a <xTaskGenericNotify+0x3e>
 800f48a:	2d03      	cmp	r5, #3
 800f48c:	d016      	beq.n	800f4bc <xTaskGenericNotify+0x60>
 800f48e:	2d04      	cmp	r5, #4
 800f490:	d105      	bne.n	800f49e <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f492:	2b02      	cmp	r3, #2
 800f494:	d035      	beq.n	800f502 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f496:	65a6      	str	r6, [r4, #88]	; 0x58
 800f498:	e001      	b.n	800f49e <xTaskGenericNotify+0x42>
			switch( eAction )
 800f49a:	2d01      	cmp	r5, #1
 800f49c:	d006      	beq.n	800f4ac <xTaskGenericNotify+0x50>
 800f49e:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d00d      	beq.n	800f4c0 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f4a4:	f000 fa80 	bl	800f9a8 <vPortExitCritical>

		return xReturn;
	}
 800f4a8:	0028      	movs	r0, r5
 800f4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800f4ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f4ae:	4316      	orrs	r6, r2
 800f4b0:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800f4b2:	e7f4      	b.n	800f49e <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800f4b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f4b6:	3201      	adds	r2, #1
 800f4b8:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f4ba:	e7f0      	b.n	800f49e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800f4bc:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800f4be:	e7ee      	b.n	800f49e <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f4c0:	1d25      	adds	r5, r4, #4
 800f4c2:	0028      	movs	r0, r5
 800f4c4:	f7fe fdaf 	bl	800e026 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f4c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4ca:	4a0f      	ldr	r2, [pc, #60]	; (800f508 <xTaskGenericNotify+0xac>)
 800f4cc:	6812      	ldr	r2, [r2, #0]
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d901      	bls.n	800f4d6 <xTaskGenericNotify+0x7a>
 800f4d2:	4a0d      	ldr	r2, [pc, #52]	; (800f508 <xTaskGenericNotify+0xac>)
 800f4d4:	6013      	str	r3, [r2, #0]
 800f4d6:	2014      	movs	r0, #20
 800f4d8:	4358      	muls	r0, r3
 800f4da:	4b0c      	ldr	r3, [pc, #48]	; (800f50c <xTaskGenericNotify+0xb0>)
 800f4dc:	18c0      	adds	r0, r0, r3
 800f4de:	0029      	movs	r1, r5
 800f4e0:	f7fe fd7e 	bl	800dfe0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f4e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <xTaskGenericNotify+0x92>
 800f4ea:	b672      	cpsid	i
 800f4ec:	e7fe      	b.n	800f4ec <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4ee:	4b08      	ldr	r3, [pc, #32]	; (800f510 <xTaskGenericNotify+0xb4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f6:	2501      	movs	r5, #1
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d9d3      	bls.n	800f4a4 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800f4fc:	f000 fa3c 	bl	800f978 <vPortYield>
 800f500:	e7d0      	b.n	800f4a4 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800f502:	2500      	movs	r5, #0
 800f504:	e7ce      	b.n	800f4a4 <xTaskGenericNotify+0x48>
 800f506:	46c0      	nop			; (mov r8, r8)
 800f508:	200015a4 	.word	0x200015a4
 800f50c:	20001500 	.word	0x20001500
 800f510:	200014f4 	.word	0x200014f4

0800f514 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f514:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f516:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f518:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f51a:	4291      	cmp	r1, r2
 800f51c:	d80b      	bhi.n	800f536 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f51e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f520:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f522:	6983      	ldr	r3, [r0, #24]
 800f524:	429a      	cmp	r2, r3
 800f526:	d211      	bcs.n	800f54c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f528:	1d01      	adds	r1, r0, #4
 800f52a:	4b09      	ldr	r3, [pc, #36]	; (800f550 <prvInsertTimerInActiveList+0x3c>)
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f7fe fd63 	bl	800dff8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f532:	2400      	movs	r4, #0
 800f534:	e00a      	b.n	800f54c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f536:	429a      	cmp	r2, r3
 800f538:	d202      	bcs.n	800f540 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f53a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f53c:	4299      	cmp	r1, r3
 800f53e:	d205      	bcs.n	800f54c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f540:	1d01      	adds	r1, r0, #4
 800f542:	4b04      	ldr	r3, [pc, #16]	; (800f554 <prvInsertTimerInActiveList+0x40>)
 800f544:	6818      	ldr	r0, [r3, #0]
 800f546:	f7fe fd57 	bl	800dff8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f54a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800f54c:	0020      	movs	r0, r4
 800f54e:	bd10      	pop	{r4, pc}
 800f550:	20001620 	.word	0x20001620
 800f554:	2000161c 	.word	0x2000161c

0800f558 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f558:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f55a:	f000 fa19 	bl	800f990 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f55e:	4b11      	ldr	r3, [pc, #68]	; (800f5a4 <prvCheckForValidListAndQueue+0x4c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d002      	beq.n	800f56c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f566:	f000 fa1f 	bl	800f9a8 <vPortExitCritical>
}
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f56c:	4d0e      	ldr	r5, [pc, #56]	; (800f5a8 <prvCheckForValidListAndQueue+0x50>)
 800f56e:	0028      	movs	r0, r5
 800f570:	f7fe fd28 	bl	800dfc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f574:	4c0d      	ldr	r4, [pc, #52]	; (800f5ac <prvCheckForValidListAndQueue+0x54>)
 800f576:	0020      	movs	r0, r4
 800f578:	f7fe fd24 	bl	800dfc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f57c:	4b0c      	ldr	r3, [pc, #48]	; (800f5b0 <prvCheckForValidListAndQueue+0x58>)
 800f57e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f580:	4b0c      	ldr	r3, [pc, #48]	; (800f5b4 <prvCheckForValidListAndQueue+0x5c>)
 800f582:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f584:	2200      	movs	r2, #0
 800f586:	2110      	movs	r1, #16
 800f588:	2004      	movs	r0, #4
 800f58a:	f7fe fe26 	bl	800e1da <xQueueGenericCreate>
 800f58e:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <prvCheckForValidListAndQueue+0x4c>)
 800f590:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800f592:	2800      	cmp	r0, #0
 800f594:	d101      	bne.n	800f59a <prvCheckForValidListAndQueue+0x42>
 800f596:	b672      	cpsid	i
 800f598:	e7fe      	b.n	800f598 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f59a:	4907      	ldr	r1, [pc, #28]	; (800f5b8 <prvCheckForValidListAndQueue+0x60>)
 800f59c:	f7ff f856 	bl	800e64c <vQueueAddToRegistry>
 800f5a0:	e7e1      	b.n	800f566 <prvCheckForValidListAndQueue+0xe>
 800f5a2:	46c0      	nop			; (mov r8, r8)
 800f5a4:	20001650 	.word	0x20001650
 800f5a8:	20001624 	.word	0x20001624
 800f5ac:	20001638 	.word	0x20001638
 800f5b0:	2000161c 	.word	0x2000161c
 800f5b4:	20001620 	.word	0x20001620
 800f5b8:	080189bc 	.word	0x080189bc

0800f5bc <xTimerCreateTimerTask>:
{
 800f5bc:	b500      	push	{lr}
 800f5be:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f5c0:	f7ff ffca 	bl	800f558 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <xTimerCreateTimerTask+0x34>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00d      	beq.n	800f5e8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	9302      	str	r3, [sp, #8]
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	3303      	adds	r3, #3
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	2300      	movs	r3, #0
 800f5da:	22a0      	movs	r2, #160	; 0xa0
 800f5dc:	4905      	ldr	r1, [pc, #20]	; (800f5f4 <xTimerCreateTimerTask+0x38>)
 800f5de:	4806      	ldr	r0, [pc, #24]	; (800f5f8 <xTimerCreateTimerTask+0x3c>)
 800f5e0:	f7ff f918 	bl	800e814 <xTaskGenericCreate>
	configASSERT( xReturn );
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d101      	bne.n	800f5ec <xTimerCreateTimerTask+0x30>
 800f5e8:	b672      	cpsid	i
 800f5ea:	e7fe      	b.n	800f5ea <xTimerCreateTimerTask+0x2e>
}
 800f5ec:	b005      	add	sp, #20
 800f5ee:	bd00      	pop	{pc}
 800f5f0:	20001650 	.word	0x20001650
 800f5f4:	080189c4 	.word	0x080189c4
 800f5f8:	0800f745 	.word	0x0800f745

0800f5fc <xTimerCreate>:
{
 800f5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5fe:	46c6      	mov	lr, r8
 800f600:	b500      	push	{lr}
 800f602:	4680      	mov	r8, r0
 800f604:	000d      	movs	r5, r1
 800f606:	0017      	movs	r7, r2
 800f608:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f60a:	2900      	cmp	r1, #0
 800f60c:	d014      	beq.n	800f638 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f60e:	202c      	movs	r0, #44	; 0x2c
 800f610:	f000 fa40 	bl	800fa94 <pvPortMalloc>
 800f614:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f616:	d00b      	beq.n	800f630 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f618:	f7ff ff9e 	bl	800f558 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f61c:	4643      	mov	r3, r8
 800f61e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f620:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f622:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f624:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f626:	9b06      	ldr	r3, [sp, #24]
 800f628:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f62a:	1d20      	adds	r0, r4, #4
 800f62c:	f7fe fcd5 	bl	800dfda <vListInitialiseItem>
}
 800f630:	0020      	movs	r0, r4
 800f632:	bc04      	pop	{r2}
 800f634:	4690      	mov	r8, r2
 800f636:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f638:	b672      	cpsid	i
 800f63a:	e7fe      	b.n	800f63a <xTimerCreate+0x3e>

0800f63c <xTimerGenericCommand>:
{
 800f63c:	b530      	push	{r4, r5, lr}
 800f63e:	b085      	sub	sp, #20
 800f640:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f642:	4b13      	ldr	r3, [pc, #76]	; (800f690 <xTimerGenericCommand+0x54>)
 800f644:	681c      	ldr	r4, [r3, #0]
 800f646:	2c00      	cmp	r4, #0
 800f648:	d020      	beq.n	800f68c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f64a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f64c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f64e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f650:	2905      	cmp	r1, #5
 800f652:	dc13      	bgt.n	800f67c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f654:	f7ff fd68 	bl	800f128 <xTaskGetSchedulerState>
 800f658:	2802      	cmp	r0, #2
 800f65a:	d007      	beq.n	800f66c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f65c:	4b0c      	ldr	r3, [pc, #48]	; (800f690 <xTimerGenericCommand+0x54>)
 800f65e:	6818      	ldr	r0, [r3, #0]
 800f660:	2300      	movs	r3, #0
 800f662:	2200      	movs	r2, #0
 800f664:	4669      	mov	r1, sp
 800f666:	f7fe fdf3 	bl	800e250 <xQueueGenericSend>
 800f66a:	e00d      	b.n	800f688 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f66c:	4b08      	ldr	r3, [pc, #32]	; (800f690 <xTimerGenericCommand+0x54>)
 800f66e:	6818      	ldr	r0, [r3, #0]
 800f670:	2300      	movs	r3, #0
 800f672:	9a08      	ldr	r2, [sp, #32]
 800f674:	4669      	mov	r1, sp
 800f676:	f7fe fdeb 	bl	800e250 <xQueueGenericSend>
 800f67a:	e005      	b.n	800f688 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f67c:	2300      	movs	r3, #0
 800f67e:	002a      	movs	r2, r5
 800f680:	4669      	mov	r1, sp
 800f682:	0020      	movs	r0, r4
 800f684:	f7fe fe7b 	bl	800e37e <xQueueGenericSendFromISR>
}
 800f688:	b005      	add	sp, #20
 800f68a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f68c:	2000      	movs	r0, #0
	return xReturn;
 800f68e:	e7fb      	b.n	800f688 <xTimerGenericCommand+0x4c>
 800f690:	20001650 	.word	0x20001650

0800f694 <prvSampleTimeNow>:
{
 800f694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f696:	46d6      	mov	lr, sl
 800f698:	464f      	mov	r7, r9
 800f69a:	4646      	mov	r6, r8
 800f69c:	b5c0      	push	{r6, r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800f6a2:	f7ff fa43 	bl	800eb2c <xTaskGetTickCount>
 800f6a6:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f6a8:	4b23      	ldr	r3, [pc, #140]	; (800f738 <prvSampleTimeNow+0xa4>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4283      	cmp	r3, r0
 800f6ae:	d80b      	bhi.n	800f6c8 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4642      	mov	r2, r8
 800f6b4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800f6b6:	4b20      	ldr	r3, [pc, #128]	; (800f738 <prvSampleTimeNow+0xa4>)
 800f6b8:	601f      	str	r7, [r3, #0]
}
 800f6ba:	0038      	movs	r0, r7
 800f6bc:	b004      	add	sp, #16
 800f6be:	bc1c      	pop	{r2, r3, r4}
 800f6c0:	4690      	mov	r8, r2
 800f6c2:	4699      	mov	r9, r3
 800f6c4:	46a2      	mov	sl, r4
 800f6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6c8:	4e1c      	ldr	r6, [pc, #112]	; (800f73c <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6ce:	6833      	ldr	r3, [r6, #0]
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	2a00      	cmp	r2, #0
 800f6d4:	d026      	beq.n	800f724 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6dc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6de:	1d25      	adds	r5, r4, #4
 800f6e0:	0028      	movs	r0, r5
 800f6e2:	f7fe fca0 	bl	800e026 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6e6:	0020      	movs	r0, r4
 800f6e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6ea:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f6ec:	69e3      	ldr	r3, [r4, #28]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d1ed      	bne.n	800f6ce <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f6f2:	69a3      	ldr	r3, [r4, #24]
 800f6f4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f6f6:	459a      	cmp	sl, r3
 800f6f8:	d209      	bcs.n	800f70e <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f6fa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6fc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6fe:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <prvSampleTimeNow+0xa8>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	9303      	str	r3, [sp, #12]
 800f704:	0029      	movs	r1, r5
 800f706:	0018      	movs	r0, r3
 800f708:	f7fe fc76 	bl	800dff8 <vListInsert>
 800f70c:	e7df      	b.n	800f6ce <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f70e:	464b      	mov	r3, r9
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	4652      	mov	r2, sl
 800f714:	4649      	mov	r1, r9
 800f716:	0020      	movs	r0, r4
 800f718:	f7ff ff90 	bl	800f63c <xTimerGenericCommand>
				configASSERT( xResult );
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d1d6      	bne.n	800f6ce <prvSampleTimeNow+0x3a>
 800f720:	b672      	cpsid	i
 800f722:	e7fe      	b.n	800f722 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800f724:	4a06      	ldr	r2, [pc, #24]	; (800f740 <prvSampleTimeNow+0xac>)
 800f726:	4905      	ldr	r1, [pc, #20]	; (800f73c <prvSampleTimeNow+0xa8>)
 800f728:	6810      	ldr	r0, [r2, #0]
 800f72a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f72c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f72e:	2301      	movs	r3, #1
 800f730:	4642      	mov	r2, r8
 800f732:	6013      	str	r3, [r2, #0]
 800f734:	e7bf      	b.n	800f6b6 <prvSampleTimeNow+0x22>
 800f736:	46c0      	nop			; (mov r8, r8)
 800f738:	2000164c 	.word	0x2000164c
 800f73c:	2000161c 	.word	0x2000161c
 800f740:	20001620 	.word	0x20001620

0800f744 <prvTimerTask>:
{
 800f744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f746:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800f748:	4e57      	ldr	r6, [pc, #348]	; (800f8a8 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f74a:	4b58      	ldr	r3, [pc, #352]	; (800f8ac <prvTimerTask+0x168>)
 800f74c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	2a00      	cmp	r2, #0
 800f752:	d100      	bne.n	800f756 <prvTimerTask+0x12>
 800f754:	e09c      	b.n	800f890 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800f75a:	f7ff f9df 	bl	800eb1c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f75e:	a808      	add	r0, sp, #32
 800f760:	f7ff ff98 	bl	800f694 <prvSampleTimeNow>
 800f764:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f766:	9b08      	ldr	r3, [sp, #32]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d000      	beq.n	800f76e <prvTimerTask+0x2a>
 800f76c:	e099      	b.n	800f8a2 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f76e:	42a0      	cmp	r0, r4
 800f770:	d233      	bcs.n	800f7da <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f772:	1b61      	subs	r1, r4, r5
 800f774:	4b4e      	ldr	r3, [pc, #312]	; (800f8b0 <prvTimerTask+0x16c>)
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	f7fe ff80 	bl	800e67c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f77c:	f7ff fa6e 	bl	800ec5c <xTaskResumeAll>
 800f780:	2800      	cmp	r0, #0
 800f782:	d050      	beq.n	800f826 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f784:	4c4a      	ldr	r4, [pc, #296]	; (800f8b0 <prvTimerTask+0x16c>)
 800f786:	2300      	movs	r3, #0
 800f788:	2200      	movs	r2, #0
 800f78a:	a908      	add	r1, sp, #32
 800f78c:	6820      	ldr	r0, [r4, #0]
 800f78e:	f7fe fe78 	bl	800e482 <xQueueGenericReceive>
 800f792:	2800      	cmp	r0, #0
 800f794:	d0d9      	beq.n	800f74a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f796:	9b08      	ldr	r3, [sp, #32]
 800f798:	9303      	str	r3, [sp, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	da0c      	bge.n	800f7b8 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a0:	9303      	str	r3, [sp, #12]
 800f7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a4:	9304      	str	r3, [sp, #16]
 800f7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a8:	9305      	str	r3, [sp, #20]
 800f7aa:	9903      	ldr	r1, [sp, #12]
 800f7ac:	9804      	ldr	r0, [sp, #16]
 800f7ae:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7b0:	9b08      	ldr	r3, [sp, #32]
 800f7b2:	9303      	str	r3, [sp, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dbe6      	blt.n	800f786 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f7ba:	696b      	ldr	r3, [r5, #20]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d002      	beq.n	800f7c6 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7c0:	1d28      	adds	r0, r5, #4
 800f7c2:	f7fe fc30 	bl	800e026 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7c6:	a807      	add	r0, sp, #28
 800f7c8:	f7ff ff64 	bl	800f694 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f7cc:	9b08      	ldr	r3, [sp, #32]
 800f7ce:	9303      	str	r3, [sp, #12]
 800f7d0:	2b09      	cmp	r3, #9
 800f7d2:	d8d8      	bhi.n	800f786 <prvTimerTask+0x42>
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	58f3      	ldr	r3, [r6, r3]
 800f7d8:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f7da:	f7ff fa3f 	bl	800ec5c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f7de:	4b33      	ldr	r3, [pc, #204]	; (800f8ac <prvTimerTask+0x168>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7e6:	1d38      	adds	r0, r7, #4
 800f7e8:	f7fe fc1d 	bl	800e026 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d003      	beq.n	800f7fa <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	0038      	movs	r0, r7
 800f7f6:	4798      	blx	r3
 800f7f8:	e7c4      	b.n	800f784 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	18e1      	adds	r1, r4, r3
 800f7fe:	0023      	movs	r3, r4
 800f800:	002a      	movs	r2, r5
 800f802:	0038      	movs	r0, r7
 800f804:	f7ff fe86 	bl	800f514 <prvInsertTimerInActiveList>
 800f808:	2801      	cmp	r0, #1
 800f80a:	d1f2      	bne.n	800f7f2 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f80c:	2100      	movs	r1, #0
 800f80e:	9100      	str	r1, [sp, #0]
 800f810:	000b      	movs	r3, r1
 800f812:	0022      	movs	r2, r4
 800f814:	0038      	movs	r0, r7
 800f816:	f7ff ff11 	bl	800f63c <xTimerGenericCommand>
			configASSERT( xResult );
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d1e9      	bne.n	800f7f2 <prvTimerTask+0xae>
 800f81e:	b672      	cpsid	i
 800f820:	e7fe      	b.n	800f820 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800f822:	2400      	movs	r4, #0
 800f824:	e7a5      	b.n	800f772 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800f826:	f000 f8a7 	bl	800f978 <vPortYield>
 800f82a:	e7ab      	b.n	800f784 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82e:	69aa      	ldr	r2, [r5, #24]
 800f830:	4694      	mov	ip, r2
 800f832:	4463      	add	r3, ip
 800f834:	0019      	movs	r1, r3
 800f836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f838:	0002      	movs	r2, r0
 800f83a:	0028      	movs	r0, r5
 800f83c:	f7ff fe6a 	bl	800f514 <prvInsertTimerInActiveList>
 800f840:	2801      	cmp	r0, #1
 800f842:	d1a0      	bne.n	800f786 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f844:	0028      	movs	r0, r5
 800f846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f848:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f84a:	69eb      	ldr	r3, [r5, #28]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d19a      	bne.n	800f786 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f852:	69a9      	ldr	r1, [r5, #24]
 800f854:	468c      	mov	ip, r1
 800f856:	4463      	add	r3, ip
 800f858:	001a      	movs	r2, r3
 800f85a:	2300      	movs	r3, #0
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	2100      	movs	r1, #0
 800f860:	0028      	movs	r0, r5
 800f862:	f7ff feeb 	bl	800f63c <xTimerGenericCommand>
							configASSERT( xResult );
 800f866:	2800      	cmp	r0, #0
 800f868:	d18d      	bne.n	800f786 <prvTimerTask+0x42>
 800f86a:	b672      	cpsid	i
 800f86c:	e7fe      	b.n	800f86c <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f86e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f870:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f872:	2900      	cmp	r1, #0
 800f874:	d006      	beq.n	800f884 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f876:	1841      	adds	r1, r0, r1
 800f878:	0003      	movs	r3, r0
 800f87a:	0002      	movs	r2, r0
 800f87c:	0028      	movs	r0, r5
 800f87e:	f7ff fe49 	bl	800f514 <prvInsertTimerInActiveList>
 800f882:	e780      	b.n	800f786 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f884:	b672      	cpsid	i
 800f886:	e7fe      	b.n	800f886 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800f888:	0028      	movs	r0, r5
 800f88a:	f000 f999 	bl	800fbc0 <vPortFree>
 800f88e:	e77a      	b.n	800f786 <prvTimerTask+0x42>
	vTaskSuspendAll();
 800f890:	f7ff f944 	bl	800eb1c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f894:	a808      	add	r0, sp, #32
 800f896:	f7ff fefd 	bl	800f694 <prvSampleTimeNow>
 800f89a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f89c:	9b08      	ldr	r3, [sp, #32]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d0bf      	beq.n	800f822 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800f8a2:	f7ff f9db 	bl	800ec5c <xTaskResumeAll>
 800f8a6:	e76d      	b.n	800f784 <prvTimerTask+0x40>
 800f8a8:	08018994 	.word	0x08018994
 800f8ac:	2000161c 	.word	0x2000161c
 800f8b0:	20001650 	.word	0x20001650

0800f8b4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f8b8:	d101      	bne.n	800f8be <pvTimerGetTimerID+0xa>
 800f8ba:	b672      	cpsid	i
 800f8bc:	e7fe      	b.n	800f8bc <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f8be:	f000 f867 	bl	800f990 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f8c2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f8c4:	f000 f870 	bl	800f9a8 <vPortExitCritical>

	return pvReturn;
}
 800f8c8:	0020      	movs	r0, r4
 800f8ca:	bd10      	pop	{r4, pc}

0800f8cc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8cc:	4b03      	ldr	r3, [pc, #12]	; (800f8dc <prvTaskExitError+0x10>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	d001      	beq.n	800f8d8 <prvTaskExitError+0xc>
 800f8d4:	b672      	cpsid	i
 800f8d6:	e7fe      	b.n	800f8d6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f8d8:	b672      	cpsid	i
 800f8da:	e7fe      	b.n	800f8da <prvTaskExitError+0xe>
 800f8dc:	200000a8 	.word	0x200000a8

0800f8e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f8e0:	4a06      	ldr	r2, [pc, #24]	; (800f8fc <pxCurrentTCBConst2>)
 800f8e2:	6813      	ldr	r3, [r2, #0]
 800f8e4:	6818      	ldr	r0, [r3, #0]
 800f8e6:	3020      	adds	r0, #32
 800f8e8:	f380 8809 	msr	PSP, r0
 800f8ec:	2002      	movs	r0, #2
 800f8ee:	f380 8814 	msr	CONTROL, r0
 800f8f2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f8f4:	46ae      	mov	lr, r5
 800f8f6:	b662      	cpsie	i
 800f8f8:	bd00      	pop	{pc}
 800f8fa:	46c0      	nop			; (mov r8, r8)

0800f8fc <pxCurrentTCBConst2>:
 800f8fc:	200014f4 	.word	0x200014f4

0800f900 <pxPortInitialiseStack>:
{
 800f900:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f902:	1f03      	subs	r3, r0, #4
 800f904:	2480      	movs	r4, #128	; 0x80
 800f906:	0464      	lsls	r4, r4, #17
 800f908:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f90a:	3b04      	subs	r3, #4
 800f90c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f90e:	3b04      	subs	r3, #4
 800f910:	4902      	ldr	r1, [pc, #8]	; (800f91c <pxPortInitialiseStack+0x1c>)
 800f912:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f914:	3b14      	subs	r3, #20
 800f916:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f918:	3840      	subs	r0, #64	; 0x40
}
 800f91a:	bd10      	pop	{r4, pc}
 800f91c:	0800f8cd 	.word	0x0800f8cd

0800f920 <SVC_Handler>:
}
 800f920:	4770      	bx	lr
	...

0800f924 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f924:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f926:	4b0f      	ldr	r3, [pc, #60]	; (800f964 <xPortStartScheduler+0x40>)
 800f928:	6819      	ldr	r1, [r3, #0]
 800f92a:	22ff      	movs	r2, #255	; 0xff
 800f92c:	0412      	lsls	r2, r2, #16
 800f92e:	430a      	orrs	r2, r1
 800f930:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f932:	6819      	ldr	r1, [r3, #0]
 800f934:	22ff      	movs	r2, #255	; 0xff
 800f936:	0612      	lsls	r2, r2, #24
 800f938:	430a      	orrs	r2, r1
 800f93a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f93c:	4b0a      	ldr	r3, [pc, #40]	; (800f968 <xPortStartScheduler+0x44>)
 800f93e:	6818      	ldr	r0, [r3, #0]
 800f940:	21fa      	movs	r1, #250	; 0xfa
 800f942:	0089      	lsls	r1, r1, #2
 800f944:	f7f0 fbfa 	bl	800013c <__udivsi3>
 800f948:	3801      	subs	r0, #1
 800f94a:	4b08      	ldr	r3, [pc, #32]	; (800f96c <xPortStartScheduler+0x48>)
 800f94c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f94e:	4b08      	ldr	r3, [pc, #32]	; (800f970 <xPortStartScheduler+0x4c>)
 800f950:	2207      	movs	r2, #7
 800f952:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f954:	4b07      	ldr	r3, [pc, #28]	; (800f974 <xPortStartScheduler+0x50>)
 800f956:	2200      	movs	r2, #0
 800f958:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f95a:	f7ff ffc1 	bl	800f8e0 <vPortStartFirstTask>
	prvTaskExitError();
 800f95e:	f7ff ffb5 	bl	800f8cc <prvTaskExitError>
 800f962:	46c0      	nop			; (mov r8, r8)
 800f964:	e000ed20 	.word	0xe000ed20
 800f968:	20000094 	.word	0x20000094
 800f96c:	e000e014 	.word	0xe000e014
 800f970:	e000e010 	.word	0xe000e010
 800f974:	200000a8 	.word	0x200000a8

0800f978 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f978:	4b04      	ldr	r3, [pc, #16]	; (800f98c <vPortYield+0x14>)
 800f97a:	2280      	movs	r2, #128	; 0x80
 800f97c:	0552      	lsls	r2, r2, #21
 800f97e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f980:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f984:	f3bf 8f6f 	isb	sy
}
 800f988:	4770      	bx	lr
 800f98a:	46c0      	nop			; (mov r8, r8)
 800f98c:	e000ed04 	.word	0xe000ed04

0800f990 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f990:	b672      	cpsid	i
    uxCriticalNesting++;
 800f992:	4a04      	ldr	r2, [pc, #16]	; (800f9a4 <vPortEnterCritical+0x14>)
 800f994:	6813      	ldr	r3, [r2, #0]
 800f996:	3301      	adds	r3, #1
 800f998:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f99a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f99e:	f3bf 8f6f 	isb	sy
}
 800f9a2:	4770      	bx	lr
 800f9a4:	200000a8 	.word	0x200000a8

0800f9a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f9a8:	4b06      	ldr	r3, [pc, #24]	; (800f9c4 <vPortExitCritical+0x1c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <vPortExitCritical+0xc>
 800f9b0:	b672      	cpsid	i
 800f9b2:	e7fe      	b.n	800f9b2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	4a03      	ldr	r2, [pc, #12]	; (800f9c4 <vPortExitCritical+0x1c>)
 800f9b8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d100      	bne.n	800f9c0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f9be:	b662      	cpsie	i
}
 800f9c0:	4770      	bx	lr
 800f9c2:	46c0      	nop			; (mov r8, r8)
 800f9c4:	200000a8 	.word	0x200000a8

0800f9c8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f9c8:	f3ef 8010 	mrs	r0, PRIMASK
 800f9cc:	b672      	cpsid	i
 800f9ce:	4770      	bx	lr
}
 800f9d0:	2000      	movs	r0, #0

0800f9d2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f9d2:	f380 8810 	msr	PRIMASK, r0
 800f9d6:	4770      	bx	lr

0800f9d8 <PendSV_Handler>:
	__asm volatile
 800f9d8:	f3ef 8009 	mrs	r0, PSP
 800f9dc:	4b0e      	ldr	r3, [pc, #56]	; (800fa18 <pxCurrentTCBConst>)
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	3820      	subs	r0, #32
 800f9e2:	6010      	str	r0, [r2, #0]
 800f9e4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f9e6:	4644      	mov	r4, r8
 800f9e8:	464d      	mov	r5, r9
 800f9ea:	4656      	mov	r6, sl
 800f9ec:	465f      	mov	r7, fp
 800f9ee:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f9f0:	b508      	push	{r3, lr}
 800f9f2:	b672      	cpsid	i
 800f9f4:	f7ff fa4e 	bl	800ee94 <vTaskSwitchContext>
 800f9f8:	b662      	cpsie	i
 800f9fa:	bc0c      	pop	{r2, r3}
 800f9fc:	6811      	ldr	r1, [r2, #0]
 800f9fe:	6808      	ldr	r0, [r1, #0]
 800fa00:	3010      	adds	r0, #16
 800fa02:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fa04:	46a0      	mov	r8, r4
 800fa06:	46a9      	mov	r9, r5
 800fa08:	46b2      	mov	sl, r6
 800fa0a:	46bb      	mov	fp, r7
 800fa0c:	f380 8809 	msr	PSP, r0
 800fa10:	3820      	subs	r0, #32
 800fa12:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fa14:	4718      	bx	r3
 800fa16:	46c0      	nop			; (mov r8, r8)

0800fa18 <pxCurrentTCBConst>:
 800fa18:	200014f4 	.word	0x200014f4

0800fa1c <xPortSysTickHandler>:
{
 800fa1c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa1e:	f7ff ffd3 	bl	800f9c8 <ulSetInterruptMaskFromISR>
 800fa22:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800fa24:	f7ff f88e 	bl	800eb44 <xTaskIncrementTick>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d003      	beq.n	800fa34 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800fa2c:	4b03      	ldr	r3, [pc, #12]	; (800fa3c <xPortSysTickHandler+0x20>)
 800fa2e:	2280      	movs	r2, #128	; 0x80
 800fa30:	0552      	lsls	r2, r2, #21
 800fa32:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fa34:	0020      	movs	r0, r4
 800fa36:	f7ff ffcc 	bl	800f9d2 <vClearInterruptMaskFromISR>
}
 800fa3a:	bd10      	pop	{r4, pc}
 800fa3c:	e000ed04 	.word	0xe000ed04

0800fa40 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fa40:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa42:	4b12      	ldr	r3, [pc, #72]	; (800fa8c <prvInsertBlockIntoFreeList+0x4c>)
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	4282      	cmp	r2, r0
 800fa48:	d319      	bcc.n	800fa7e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa4a:	685c      	ldr	r4, [r3, #4]
 800fa4c:	1919      	adds	r1, r3, r4
 800fa4e:	4288      	cmp	r0, r1
 800fa50:	d103      	bne.n	800fa5a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa52:	6841      	ldr	r1, [r0, #4]
 800fa54:	1909      	adds	r1, r1, r4
 800fa56:	6059      	str	r1, [r3, #4]
 800fa58:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa5a:	6841      	ldr	r1, [r0, #4]
 800fa5c:	1844      	adds	r4, r0, r1
 800fa5e:	42a2      	cmp	r2, r4
 800fa60:	d111      	bne.n	800fa86 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa62:	4c0b      	ldr	r4, [pc, #44]	; (800fa90 <prvInsertBlockIntoFreeList+0x50>)
 800fa64:	6824      	ldr	r4, [r4, #0]
 800fa66:	42a2      	cmp	r2, r4
 800fa68:	d00b      	beq.n	800fa82 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa6a:	6852      	ldr	r2, [r2, #4]
 800fa6c:	1852      	adds	r2, r2, r1
 800fa6e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa76:	4298      	cmp	r0, r3
 800fa78:	d000      	beq.n	800fa7c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa7a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa7c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa7e:	0013      	movs	r3, r2
 800fa80:	e7e0      	b.n	800fa44 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fa82:	6002      	str	r2, [r0, #0]
 800fa84:	e7f7      	b.n	800fa76 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa86:	6002      	str	r2, [r0, #0]
 800fa88:	e7f5      	b.n	800fa76 <prvInsertBlockIntoFreeList+0x36>
 800fa8a:	46c0      	nop			; (mov r8, r8)
 800fa8c:	2000609c 	.word	0x2000609c
 800fa90:	20001654 	.word	0x20001654

0800fa94 <pvPortMalloc>:
{
 800fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa96:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800fa98:	f7ff f840 	bl	800eb1c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fa9c:	4b41      	ldr	r3, [pc, #260]	; (800fba4 <pvPortMalloc+0x110>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d00a      	beq.n	800faba <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800faa4:	4b40      	ldr	r3, [pc, #256]	; (800fba8 <pvPortMalloc+0x114>)
 800faa6:	681f      	ldr	r7, [r3, #0]
 800faa8:	423c      	tst	r4, r7
 800faaa:	d02a      	beq.n	800fb02 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800faac:	f7ff f8d6 	bl	800ec5c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800fab0:	f7fd fc14 	bl	800d2dc <vApplicationMallocFailedHook>
 800fab4:	2500      	movs	r5, #0
}
 800fab6:	0028      	movs	r0, r5
 800fab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800faba:	4a3c      	ldr	r2, [pc, #240]	; (800fbac <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fabc:	0753      	lsls	r3, r2, #29
 800fabe:	d01e      	beq.n	800fafe <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fac0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fac2:	2307      	movs	r3, #7
 800fac4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800fac6:	4b3a      	ldr	r3, [pc, #232]	; (800fbb0 <pvPortMalloc+0x11c>)
 800fac8:	18d3      	adds	r3, r2, r3
 800faca:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800facc:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800face:	4839      	ldr	r0, [pc, #228]	; (800fbb4 <pvPortMalloc+0x120>)
 800fad0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fad2:	2100      	movs	r1, #0
 800fad4:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fad6:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800fad8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fada:	2007      	movs	r0, #7
 800fadc:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800fade:	4831      	ldr	r0, [pc, #196]	; (800fba4 <pvPortMalloc+0x110>)
 800fae0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800fae2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fae4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fae6:	1a99      	subs	r1, r3, r2
 800fae8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800faea:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800faec:	4b32      	ldr	r3, [pc, #200]	; (800fbb8 <pvPortMalloc+0x124>)
 800faee:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800faf0:	4b32      	ldr	r3, [pc, #200]	; (800fbbc <pvPortMalloc+0x128>)
 800faf2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800faf4:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <pvPortMalloc+0x114>)
 800faf6:	2280      	movs	r2, #128	; 0x80
 800faf8:	0612      	lsls	r2, r2, #24
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	e7d2      	b.n	800faa4 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fafe:	4b2c      	ldr	r3, [pc, #176]	; (800fbb0 <pvPortMalloc+0x11c>)
 800fb00:	e7e5      	b.n	800face <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800fb02:	2c00      	cmp	r4, #0
 800fb04:	d008      	beq.n	800fb18 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800fb06:	0023      	movs	r3, r4
 800fb08:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb0a:	075a      	lsls	r2, r3, #29
 800fb0c:	d002      	beq.n	800fb14 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb0e:	2207      	movs	r2, #7
 800fb10:	4393      	bics	r3, r2
 800fb12:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d102      	bne.n	800fb1e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800fb18:	f7ff f8a0 	bl	800ec5c <xTaskResumeAll>
 800fb1c:	e7c8      	b.n	800fab0 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb1e:	4a27      	ldr	r2, [pc, #156]	; (800fbbc <pvPortMalloc+0x128>)
 800fb20:	6816      	ldr	r6, [r2, #0]
 800fb22:	429e      	cmp	r6, r3
 800fb24:	d302      	bcc.n	800fb2c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800fb26:	4a23      	ldr	r2, [pc, #140]	; (800fbb4 <pvPortMalloc+0x120>)
 800fb28:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb2a:	e004      	b.n	800fb36 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800fb2c:	f7ff f896 	bl	800ec5c <xTaskResumeAll>
 800fb30:	e7be      	b.n	800fab0 <pvPortMalloc+0x1c>
 800fb32:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb34:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb36:	6861      	ldr	r1, [r4, #4]
 800fb38:	4299      	cmp	r1, r3
 800fb3a:	d202      	bcs.n	800fb42 <pvPortMalloc+0xae>
 800fb3c:	6821      	ldr	r1, [r4, #0]
 800fb3e:	2900      	cmp	r1, #0
 800fb40:	d1f7      	bne.n	800fb32 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800fb42:	4918      	ldr	r1, [pc, #96]	; (800fba4 <pvPortMalloc+0x110>)
 800fb44:	6809      	ldr	r1, [r1, #0]
 800fb46:	42a1      	cmp	r1, r4
 800fb48:	d00b      	beq.n	800fb62 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb4a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb4c:	6821      	ldr	r1, [r4, #0]
 800fb4e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb50:	6862      	ldr	r2, [r4, #4]
 800fb52:	1ad2      	subs	r2, r2, r3
 800fb54:	2a10      	cmp	r2, #16
 800fb56:	d90b      	bls.n	800fb70 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb58:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb5a:	0741      	lsls	r1, r0, #29
 800fb5c:	d004      	beq.n	800fb68 <pvPortMalloc+0xd4>
 800fb5e:	b672      	cpsid	i
 800fb60:	e7fe      	b.n	800fb60 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800fb62:	f7ff f87b 	bl	800ec5c <xTaskResumeAll>
 800fb66:	e7a3      	b.n	800fab0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb68:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb6a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800fb6c:	f7ff ff68 	bl	800fa40 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb70:	6862      	ldr	r2, [r4, #4]
 800fb72:	1ab6      	subs	r6, r6, r2
 800fb74:	4911      	ldr	r1, [pc, #68]	; (800fbbc <pvPortMalloc+0x128>)
 800fb76:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb78:	490f      	ldr	r1, [pc, #60]	; (800fbb8 <pvPortMalloc+0x124>)
 800fb7a:	6809      	ldr	r1, [r1, #0]
 800fb7c:	428e      	cmp	r6, r1
 800fb7e:	d201      	bcs.n	800fb84 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb80:	490d      	ldr	r1, [pc, #52]	; (800fbb8 <pvPortMalloc+0x124>)
 800fb82:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb84:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb86:	4317      	orrs	r7, r2
 800fb88:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800fb8e:	f7ff f865 	bl	800ec5c <xTaskResumeAll>
		if( pvReturn == NULL )
 800fb92:	2d00      	cmp	r5, #0
 800fb94:	d100      	bne.n	800fb98 <pvPortMalloc+0x104>
 800fb96:	e78b      	b.n	800fab0 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb98:	076b      	lsls	r3, r5, #29
 800fb9a:	d100      	bne.n	800fb9e <pvPortMalloc+0x10a>
 800fb9c:	e78b      	b.n	800fab6 <pvPortMalloc+0x22>
 800fb9e:	b672      	cpsid	i
 800fba0:	e7fe      	b.n	800fba0 <pvPortMalloc+0x10c>
 800fba2:	46c0      	nop			; (mov r8, r8)
 800fba4:	20001654 	.word	0x20001654
 800fba8:	20006090 	.word	0x20006090
 800fbac:	20001658 	.word	0x20001658
 800fbb0:	00004a38 	.word	0x00004a38
 800fbb4:	2000609c 	.word	0x2000609c
 800fbb8:	20006098 	.word	0x20006098
 800fbbc:	20006094 	.word	0x20006094

0800fbc0 <vPortFree>:
{
 800fbc0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	d020      	beq.n	800fc08 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbc6:	0003      	movs	r3, r0
 800fbc8:	3b08      	subs	r3, #8
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	4a0f      	ldr	r2, [pc, #60]	; (800fc0c <vPortFree+0x4c>)
 800fbce:	6812      	ldr	r2, [r2, #0]
 800fbd0:	421a      	tst	r2, r3
 800fbd2:	d101      	bne.n	800fbd8 <vPortFree+0x18>
 800fbd4:	b672      	cpsid	i
 800fbd6:	e7fe      	b.n	800fbd6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbd8:	0001      	movs	r1, r0
 800fbda:	3908      	subs	r1, #8
 800fbdc:	6809      	ldr	r1, [r1, #0]
 800fbde:	2900      	cmp	r1, #0
 800fbe0:	d001      	beq.n	800fbe6 <vPortFree+0x26>
 800fbe2:	b672      	cpsid	i
 800fbe4:	e7fe      	b.n	800fbe4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbe6:	3808      	subs	r0, #8
 800fbe8:	0004      	movs	r4, r0
 800fbea:	4393      	bics	r3, r2
 800fbec:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800fbee:	f7fe ff95 	bl	800eb1c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbf2:	4a07      	ldr	r2, [pc, #28]	; (800fc10 <vPortFree+0x50>)
 800fbf4:	6863      	ldr	r3, [r4, #4]
 800fbf6:	6811      	ldr	r1, [r2, #0]
 800fbf8:	468c      	mov	ip, r1
 800fbfa:	4463      	add	r3, ip
 800fbfc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fbfe:	0020      	movs	r0, r4
 800fc00:	f7ff ff1e 	bl	800fa40 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800fc04:	f7ff f82a 	bl	800ec5c <xTaskResumeAll>
}
 800fc08:	bd10      	pop	{r4, pc}
 800fc0a:	46c0      	nop			; (mov r8, r8)
 800fc0c:	20006090 	.word	0x20006090
 800fc10:	20006094 	.word	0x20006094

0800fc14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fc14:	b510      	push	{r4, lr}
 800fc16:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fc18:	f002 f922 	bl	8011e60 <HAL_RCC_GetHCLKFreq>
 800fc1c:	21fa      	movs	r1, #250	; 0xfa
 800fc1e:	0089      	lsls	r1, r1, #2
 800fc20:	f7f0 fa8c 	bl	800013c <__udivsi3>
 800fc24:	f000 fbc4 	bl	80103b0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fc28:	2001      	movs	r0, #1
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	0021      	movs	r1, r4
 800fc2e:	4240      	negs	r0, r0
 800fc30:	f000 fb76 	bl	8010320 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800fc34:	2000      	movs	r0, #0
 800fc36:	bd10      	pop	{r4, pc}

0800fc38 <HAL_Init>:
{
 800fc38:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fc3a:	4a06      	ldr	r2, [pc, #24]	; (800fc54 <HAL_Init+0x1c>)
 800fc3c:	6813      	ldr	r3, [r2, #0]
 800fc3e:	2110      	movs	r1, #16
 800fc40:	430b      	orrs	r3, r1
 800fc42:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fc44:	2000      	movs	r0, #0
 800fc46:	f7ff ffe5 	bl	800fc14 <HAL_InitTick>
  HAL_MspInit();
 800fc4a:	f001 fcb1 	bl	80115b0 <HAL_MspInit>
}
 800fc4e:	2000      	movs	r0, #0
 800fc50:	bd10      	pop	{r4, pc}
 800fc52:	46c0      	nop			; (mov r8, r8)
 800fc54:	40022000 	.word	0x40022000

0800fc58 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800fc58:	4a02      	ldr	r2, [pc, #8]	; (800fc64 <HAL_IncTick+0xc>)
 800fc5a:	6813      	ldr	r3, [r2, #0]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	6013      	str	r3, [r2, #0]
}
 800fc60:	4770      	bx	lr
 800fc62:	46c0      	nop			; (mov r8, r8)
 800fc64:	200060a4 	.word	0x200060a4

0800fc68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800fc68:	4b01      	ldr	r3, [pc, #4]	; (800fc70 <HAL_GetTick+0x8>)
 800fc6a:	6818      	ldr	r0, [r3, #0]
}
 800fc6c:	4770      	bx	lr
 800fc6e:	46c0      	nop			; (mov r8, r8)
 800fc70:	200060a4 	.word	0x200060a4

0800fc74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800fc74:	b510      	push	{r4, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800fc7a:	f7ff fff5 	bl	800fc68 <HAL_GetTick>
 800fc7e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fc80:	f7ff fff2 	bl	800fc68 <HAL_GetTick>
 800fc84:	9b01      	ldr	r3, [sp, #4]
 800fc86:	1b00      	subs	r0, r0, r4
 800fc88:	4298      	cmp	r0, r3
 800fc8a:	d3f9      	bcc.n	800fc80 <HAL_Delay+0xc>
  {
  }
}
 800fc8c:	b002      	add	sp, #8
 800fc8e:	bd10      	pop	{r4, pc}

0800fc90 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800fc90:	4b01      	ldr	r3, [pc, #4]	; (800fc98 <HAL_GetREVID+0x8>)
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	0c00      	lsrs	r0, r0, #16
}
 800fc96:	4770      	bx	lr
 800fc98:	40015800 	.word	0x40015800

0800fc9c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800fc9c:	4b02      	ldr	r3, [pc, #8]	; (800fca8 <HAL_GetDEVID+0xc>)
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	0500      	lsls	r0, r0, #20
 800fca2:	0d00      	lsrs	r0, r0, #20
}
 800fca4:	4770      	bx	lr
 800fca6:	46c0      	nop			; (mov r8, r8)
 800fca8:	40015800 	.word	0x40015800

0800fcac <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fcb0:	6803      	ldr	r3, [r0, #0]
 800fcb2:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800fcb4:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fcb6:	0752      	lsls	r2, r2, #29
 800fcb8:	d521      	bpl.n	800fcfe <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fcba:	689a      	ldr	r2, [r3, #8]
 800fcbc:	0752      	lsls	r2, r2, #29
 800fcbe:	d506      	bpl.n	800fcce <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800fcc0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fcc2:	0792      	lsls	r2, r2, #30
 800fcc4:	d403      	bmi.n	800fcce <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800fcc6:	689a      	ldr	r2, [r3, #8]
 800fcc8:	2110      	movs	r1, #16
 800fcca:	430a      	orrs	r2, r1
 800fccc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800fcce:	f7ff ffcb 	bl	800fc68 <HAL_GetTick>
 800fcd2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fcd4:	2504      	movs	r5, #4
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	421d      	tst	r5, r3
 800fcdc:	d00e      	beq.n	800fcfc <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800fcde:	f7ff ffc3 	bl	800fc68 <HAL_GetTick>
 800fce2:	1b80      	subs	r0, r0, r6
 800fce4:	2802      	cmp	r0, #2
 800fce6:	d9f6      	bls.n	800fcd6 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fce8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcea:	2210      	movs	r2, #16
 800fcec:	4313      	orrs	r3, r2
 800fcee:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcf2:	3a0f      	subs	r2, #15
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fcf8:	2001      	movs	r0, #1
 800fcfa:	e000      	b.n	800fcfe <ADC_ConversionStop+0x52>
  return HAL_OK;
 800fcfc:	2000      	movs	r0, #0
}
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}

0800fd00 <ADC_Disable>:
{
 800fd00:	b570      	push	{r4, r5, r6, lr}
 800fd02:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fd04:	6802      	ldr	r2, [r0, #0]
 800fd06:	6891      	ldr	r1, [r2, #8]
 800fd08:	2303      	movs	r3, #3
 800fd0a:	400b      	ands	r3, r1
  return HAL_OK;
 800fd0c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d000      	beq.n	800fd14 <ADC_Disable+0x14>
}
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fd14:	6813      	ldr	r3, [r2, #0]
 800fd16:	07db      	lsls	r3, r3, #31
 800fd18:	d402      	bmi.n	800fd20 <ADC_Disable+0x20>
 800fd1a:	68d3      	ldr	r3, [r2, #12]
 800fd1c:	041b      	lsls	r3, r3, #16
 800fd1e:	d5f8      	bpl.n	800fd12 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800fd20:	6891      	ldr	r1, [r2, #8]
 800fd22:	2305      	movs	r3, #5
 800fd24:	400b      	ands	r3, r1
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d009      	beq.n	800fd3e <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd2c:	2210      	movs	r2, #16
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fd34:	3a0f      	subs	r2, #15
 800fd36:	4313      	orrs	r3, r2
 800fd38:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fd3a:	2001      	movs	r0, #1
 800fd3c:	e7e9      	b.n	800fd12 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800fd3e:	6893      	ldr	r3, [r2, #8]
 800fd40:	2102      	movs	r1, #2
 800fd42:	430b      	orrs	r3, r1
 800fd44:	6093      	str	r3, [r2, #8]
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	2203      	movs	r2, #3
 800fd4a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800fd4c:	f7ff ff8c 	bl	800fc68 <HAL_GetTick>
 800fd50:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fd52:	2501      	movs	r5, #1
 800fd54:	6823      	ldr	r3, [r4, #0]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	421d      	tst	r5, r3
 800fd5a:	d00e      	beq.n	800fd7a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fd5c:	f7ff ff84 	bl	800fc68 <HAL_GetTick>
 800fd60:	1b80      	subs	r0, r0, r6
 800fd62:	2802      	cmp	r0, #2
 800fd64:	d9f6      	bls.n	800fd54 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd68:	2210      	movs	r2, #16
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fd70:	3a0f      	subs	r2, #15
 800fd72:	4313      	orrs	r3, r2
 800fd74:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fd76:	2001      	movs	r0, #1
 800fd78:	e7cb      	b.n	800fd12 <ADC_Disable+0x12>
  return HAL_OK;
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	e7c9      	b.n	800fd12 <ADC_Disable+0x12>
	...

0800fd80 <ADC_Enable>:
{
 800fd80:	b570      	push	{r4, r5, r6, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fd8a:	6803      	ldr	r3, [r0, #0]
 800fd8c:	6899      	ldr	r1, [r3, #8]
 800fd8e:	2203      	movs	r2, #3
 800fd90:	400a      	ands	r2, r1
 800fd92:	2a01      	cmp	r2, #1
 800fd94:	d02d      	beq.n	800fdf2 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800fd96:	6899      	ldr	r1, [r3, #8]
 800fd98:	4a20      	ldr	r2, [pc, #128]	; (800fe1c <ADC_Enable+0x9c>)
 800fd9a:	4211      	tst	r1, r2
 800fd9c:	d131      	bne.n	800fe02 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 800fd9e:	689a      	ldr	r2, [r3, #8]
 800fda0:	2101      	movs	r1, #1
 800fda2:	430a      	orrs	r2, r1
 800fda4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800fda6:	4b1e      	ldr	r3, [pc, #120]	; (800fe20 <ADC_Enable+0xa0>)
 800fda8:	6818      	ldr	r0, [r3, #0]
 800fdaa:	491e      	ldr	r1, [pc, #120]	; (800fe24 <ADC_Enable+0xa4>)
 800fdac:	f7f0 f9c6 	bl	800013c <__udivsi3>
 800fdb0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800fdb2:	9b01      	ldr	r3, [sp, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d005      	beq.n	800fdc4 <ADC_Enable+0x44>
      wait_loop_index--;
 800fdb8:	9b01      	ldr	r3, [sp, #4]
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800fdbe:	9b01      	ldr	r3, [sp, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1f9      	bne.n	800fdb8 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800fdc4:	f7ff ff50 	bl	800fc68 <HAL_GetTick>
 800fdc8:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fdca:	2501      	movs	r5, #1
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	421d      	tst	r5, r3
 800fdd2:	d121      	bne.n	800fe18 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fdd4:	f7ff ff48 	bl	800fc68 <HAL_GetTick>
 800fdd8:	1b80      	subs	r0, r0, r6
 800fdda:	2802      	cmp	r0, #2
 800fddc:	d9f6      	bls.n	800fdcc <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fdde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fde0:	2210      	movs	r2, #16
 800fde2:	4313      	orrs	r3, r2
 800fde4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fde6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fde8:	3a0f      	subs	r2, #15
 800fdea:	4313      	orrs	r3, r2
 800fdec:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fdee:	2001      	movs	r0, #1
 800fdf0:	e010      	b.n	800fe14 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fdf2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800fdf4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fdf6:	07d2      	lsls	r2, r2, #31
 800fdf8:	d40c      	bmi.n	800fe14 <ADC_Enable+0x94>
 800fdfa:	68da      	ldr	r2, [r3, #12]
 800fdfc:	0412      	lsls	r2, r2, #16
 800fdfe:	d5ca      	bpl.n	800fd96 <ADC_Enable+0x16>
 800fe00:	e008      	b.n	800fe14 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe04:	2210      	movs	r2, #16
 800fe06:	4313      	orrs	r3, r2
 800fe08:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fe0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fe0c:	3a0f      	subs	r2, #15
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fe12:	2001      	movs	r0, #1
}
 800fe14:	b002      	add	sp, #8
 800fe16:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800fe18:	2000      	movs	r0, #0
 800fe1a:	e7fb      	b.n	800fe14 <ADC_Enable+0x94>
 800fe1c:	80000017 	.word	0x80000017
 800fe20:	20000094 	.word	0x20000094
 800fe24:	000f4240 	.word	0x000f4240

0800fe28 <HAL_ADC_Init>:
{
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800fe2c:	d100      	bne.n	800fe30 <HAL_ADC_Init+0x8>
 800fe2e:	e09b      	b.n	800ff68 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fe30:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d073      	beq.n	800ff1e <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800fe36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe38:	06db      	lsls	r3, r3, #27
 800fe3a:	d500      	bpl.n	800fe3e <HAL_ADC_Init+0x16>
 800fe3c:	e08e      	b.n	800ff5c <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800fe3e:	6822      	ldr	r2, [r4, #0]
 800fe40:	6893      	ldr	r3, [r2, #8]
 800fe42:	2104      	movs	r1, #4
 800fe44:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800fe46:	d000      	beq.n	800fe4a <HAL_ADC_Init+0x22>
 800fe48:	e088      	b.n	800ff5c <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 800fe4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe4c:	4847      	ldr	r0, [pc, #284]	; (800ff6c <HAL_ADC_Init+0x144>)
 800fe4e:	4003      	ands	r3, r0
 800fe50:	3006      	adds	r0, #6
 800fe52:	30ff      	adds	r0, #255	; 0xff
 800fe54:	4303      	orrs	r3, r0
 800fe56:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fe58:	6890      	ldr	r0, [r2, #8]
 800fe5a:	2303      	movs	r3, #3
 800fe5c:	4003      	ands	r3, r0
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d063      	beq.n	800ff2a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 800fe62:	68d3      	ldr	r3, [r2, #12]
 800fe64:	2018      	movs	r0, #24
 800fe66:	4383      	bics	r3, r0
 800fe68:	68a0      	ldr	r0, [r4, #8]
 800fe6a:	4303      	orrs	r3, r0
 800fe6c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800fe6e:	6822      	ldr	r2, [r4, #0]
 800fe70:	6913      	ldr	r3, [r2, #16]
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	089b      	lsrs	r3, r3, #2
 800fe76:	6860      	ldr	r0, [r4, #4]
 800fe78:	4303      	orrs	r3, r0
 800fe7a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fe7c:	6822      	ldr	r2, [r4, #0]
 800fe7e:	68d3      	ldr	r3, [r2, #12]
 800fe80:	483b      	ldr	r0, [pc, #236]	; (800ff70 <HAL_ADC_Init+0x148>)
 800fe82:	4003      	ands	r3, r0
 800fe84:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fe86:	69a3      	ldr	r3, [r4, #24]
 800fe88:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fe8a:	69e3      	ldr	r3, [r4, #28]
 800fe8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fe8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fe90:	6a20      	ldr	r0, [r4, #32]
 800fe92:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fe94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe96:	000e      	movs	r6, r1
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d001      	beq.n	800fea0 <HAL_ADC_Init+0x78>
 800fe9c:	2680      	movs	r6, #128	; 0x80
 800fe9e:	0176      	lsls	r6, r6, #5
 800fea0:	68e3      	ldr	r3, [r4, #12]
 800fea2:	431a      	orrs	r2, r3
 800fea4:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fea6:	6923      	ldr	r3, [r4, #16]
 800fea8:	2b02      	cmp	r3, #2
 800feaa:	d045      	beq.n	800ff38 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800feac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800feae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800feb0:	4313      	orrs	r3, r2
 800feb2:	4333      	orrs	r3, r6
 800feb4:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800feb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800feb8:	2a01      	cmp	r2, #1
 800feba:	d03f      	beq.n	800ff3c <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800febc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800febe:	21c2      	movs	r1, #194	; 0xc2
 800fec0:	31ff      	adds	r1, #255	; 0xff
 800fec2:	428a      	cmp	r2, r1
 800fec4:	d002      	beq.n	800fecc <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fec6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fec8:	430a      	orrs	r2, r1
 800feca:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fecc:	6821      	ldr	r1, [r4, #0]
 800fece:	68ca      	ldr	r2, [r1, #12]
 800fed0:	431a      	orrs	r2, r3
 800fed2:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fed4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fed6:	2180      	movs	r1, #128	; 0x80
 800fed8:	0549      	lsls	r1, r1, #21
 800feda:	428a      	cmp	r2, r1
 800fedc:	d002      	beq.n	800fee4 <HAL_ADC_Init+0xbc>
 800fede:	3a01      	subs	r2, #1
 800fee0:	2a06      	cmp	r2, #6
 800fee2:	d80a      	bhi.n	800fefa <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fee4:	6820      	ldr	r0, [r4, #0]
 800fee6:	6941      	ldr	r1, [r0, #20]
 800fee8:	2207      	movs	r2, #7
 800feea:	4391      	bics	r1, r2
 800feec:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800feee:	6821      	ldr	r1, [r4, #0]
 800fef0:	6948      	ldr	r0, [r1, #20]
 800fef2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800fef4:	402a      	ands	r2, r5
 800fef6:	4302      	orrs	r2, r0
 800fef8:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fefa:	6822      	ldr	r2, [r4, #0]
 800fefc:	68d2      	ldr	r2, [r2, #12]
 800fefe:	491d      	ldr	r1, [pc, #116]	; (800ff74 <HAL_ADC_Init+0x14c>)
 800ff00:	400a      	ands	r2, r1
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d020      	beq.n	800ff48 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800ff06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff08:	2212      	movs	r2, #18
 800ff0a:	4393      	bics	r3, r2
 800ff0c:	3a02      	subs	r2, #2
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ff12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff14:	3a0f      	subs	r2, #15
 800ff16:	4313      	orrs	r3, r2
 800ff18:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800ff1a:	2001      	movs	r0, #1
 800ff1c:	e023      	b.n	800ff66 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 800ff1e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800ff20:	2240      	movs	r2, #64	; 0x40
 800ff22:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800ff24:	f7f8 fa84 	bl	8008430 <HAL_ADC_MspInit>
 800ff28:	e785      	b.n	800fe36 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ff2a:	6813      	ldr	r3, [r2, #0]
 800ff2c:	07db      	lsls	r3, r3, #31
 800ff2e:	d4a5      	bmi.n	800fe7c <HAL_ADC_Init+0x54>
 800ff30:	68d3      	ldr	r3, [r2, #12]
 800ff32:	041b      	lsls	r3, r3, #16
 800ff34:	d4a2      	bmi.n	800fe7c <HAL_ADC_Init+0x54>
 800ff36:	e794      	b.n	800fe62 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800ff38:	2104      	movs	r1, #4
 800ff3a:	e7b7      	b.n	800feac <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d1bd      	bne.n	800febc <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800ff40:	2280      	movs	r2, #128	; 0x80
 800ff42:	0252      	lsls	r2, r2, #9
 800ff44:	4313      	orrs	r3, r2
 800ff46:	e7b9      	b.n	800febc <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800ff48:	2300      	movs	r3, #0
 800ff4a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800ff4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff4e:	2203      	movs	r2, #3
 800ff50:	4393      	bics	r3, r2
 800ff52:	3a02      	subs	r2, #2
 800ff54:	4313      	orrs	r3, r2
 800ff56:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ff58:	2000      	movs	r0, #0
 800ff5a:	e004      	b.n	800ff66 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff5e:	2210      	movs	r2, #16
 800ff60:	4313      	orrs	r3, r2
 800ff62:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800ff64:	2001      	movs	r0, #1
}
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800ff68:	2001      	movs	r0, #1
 800ff6a:	e7fc      	b.n	800ff66 <HAL_ADC_Init+0x13e>
 800ff6c:	fffffefd 	.word	0xfffffefd
 800ff70:	fffe0219 	.word	0xfffe0219
 800ff74:	833fffe7 	.word	0x833fffe7

0800ff78 <HAL_ADC_Start_IT>:
{
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ff7c:	6803      	ldr	r3, [r0, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	075b      	lsls	r3, r3, #29
 800ff82:	d436      	bmi.n	800fff2 <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 800ff84:	2340      	movs	r3, #64	; 0x40
 800ff86:	5cc3      	ldrb	r3, [r0, r3]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d034      	beq.n	800fff6 <HAL_ADC_Start_IT+0x7e>
 800ff8c:	2340      	movs	r3, #64	; 0x40
 800ff8e:	2201      	movs	r2, #1
 800ff90:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ff92:	69c3      	ldr	r3, [r0, #28]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d121      	bne.n	800ffdc <HAL_ADC_Start_IT+0x64>
      ADC_STATE_CLR_SET(hadc->State,
 800ff98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff9a:	4a18      	ldr	r2, [pc, #96]	; (800fffc <HAL_ADC_Start_IT+0x84>)
 800ff9c:	401a      	ands	r2, r3
 800ff9e:	2380      	movs	r3, #128	; 0x80
 800ffa0:	005b      	lsls	r3, r3, #1
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800ffaa:	2240      	movs	r2, #64	; 0x40
 800ffac:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	3a24      	subs	r2, #36	; 0x24
 800ffb2:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 800ffb4:	6963      	ldr	r3, [r4, #20]
 800ffb6:	2b08      	cmp	r3, #8
 800ffb8:	d115      	bne.n	800ffe6 <HAL_ADC_Start_IT+0x6e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ffba:	6822      	ldr	r2, [r4, #0]
 800ffbc:	6853      	ldr	r3, [r2, #4]
 800ffbe:	2104      	movs	r1, #4
 800ffc0:	438b      	bics	r3, r1
 800ffc2:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800ffc4:	6822      	ldr	r2, [r4, #0]
 800ffc6:	6853      	ldr	r3, [r2, #4]
 800ffc8:	3114      	adds	r1, #20
 800ffca:	430b      	orrs	r3, r1
 800ffcc:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ffce:	6822      	ldr	r2, [r4, #0]
 800ffd0:	6893      	ldr	r3, [r2, #8]
 800ffd2:	2104      	movs	r1, #4
 800ffd4:	430b      	orrs	r3, r1
 800ffd6:	6093      	str	r3, [r2, #8]
 800ffd8:	2000      	movs	r0, #0
}
 800ffda:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800ffdc:	f7ff fed0 	bl	800fd80 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d0d9      	beq.n	800ff98 <HAL_ADC_Start_IT+0x20>
 800ffe4:	e7f9      	b.n	800ffda <HAL_ADC_Start_IT+0x62>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800ffe6:	6822      	ldr	r2, [r4, #0]
 800ffe8:	6853      	ldr	r3, [r2, #4]
 800ffea:	211c      	movs	r1, #28
 800ffec:	430b      	orrs	r3, r1
 800ffee:	6053      	str	r3, [r2, #4]
          break;
 800fff0:	e7ed      	b.n	800ffce <HAL_ADC_Start_IT+0x56>
    tmp_hal_status = HAL_BUSY;
 800fff2:	2002      	movs	r0, #2
 800fff4:	e7f1      	b.n	800ffda <HAL_ADC_Start_IT+0x62>
    __HAL_LOCK(hadc);
 800fff6:	2002      	movs	r0, #2
 800fff8:	e7ef      	b.n	800ffda <HAL_ADC_Start_IT+0x62>
 800fffa:	46c0      	nop			; (mov r8, r8)
 800fffc:	fffff0fe 	.word	0xfffff0fe

08010000 <HAL_ADC_Stop_IT>:
{
 8010000:	b510      	push	{r4, lr}
 8010002:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010004:	2340      	movs	r3, #64	; 0x40
 8010006:	5cc3      	ldrb	r3, [r0, r3]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d01c      	beq.n	8010046 <HAL_ADC_Stop_IT+0x46>
 801000c:	2340      	movs	r3, #64	; 0x40
 801000e:	2201      	movs	r2, #1
 8010010:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010012:	f7ff fe4b 	bl	800fcac <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010016:	2800      	cmp	r0, #0
 8010018:	d003      	beq.n	8010022 <HAL_ADC_Stop_IT+0x22>
  __HAL_UNLOCK(hadc);
 801001a:	2340      	movs	r3, #64	; 0x40
 801001c:	2200      	movs	r2, #0
 801001e:	54e2      	strb	r2, [r4, r3]
}
 8010020:	bd10      	pop	{r4, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8010022:	6822      	ldr	r2, [r4, #0]
 8010024:	6853      	ldr	r3, [r2, #4]
 8010026:	211c      	movs	r1, #28
 8010028:	438b      	bics	r3, r1
 801002a:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 801002c:	0020      	movs	r0, r4
 801002e:	f7ff fe67 	bl	800fd00 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010032:	2800      	cmp	r0, #0
 8010034:	d1f1      	bne.n	801001a <HAL_ADC_Stop_IT+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010036:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010038:	4a04      	ldr	r2, [pc, #16]	; (801004c <HAL_ADC_Stop_IT+0x4c>)
 801003a:	4013      	ands	r3, r2
 801003c:	3204      	adds	r2, #4
 801003e:	32ff      	adds	r2, #255	; 0xff
 8010040:	4313      	orrs	r3, r2
 8010042:	6463      	str	r3, [r4, #68]	; 0x44
 8010044:	e7e9      	b.n	801001a <HAL_ADC_Stop_IT+0x1a>
  __HAL_LOCK(hadc);
 8010046:	2002      	movs	r0, #2
 8010048:	e7ea      	b.n	8010020 <HAL_ADC_Stop_IT+0x20>
 801004a:	46c0      	nop			; (mov r8, r8)
 801004c:	fffffefe 	.word	0xfffffefe

08010050 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010050:	6803      	ldr	r3, [r0, #0]
 8010052:	2208      	movs	r2, #8
 8010054:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010056:	6803      	ldr	r3, [r0, #0]
 8010058:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 801005a:	4770      	bx	lr

0801005c <HAL_ADC_LevelOutOfWindowCallback>:
}
 801005c:	4770      	bx	lr

0801005e <HAL_ADC_ErrorCallback>:
}
 801005e:	4770      	bx	lr

08010060 <HAL_ADC_IRQHandler>:
{
 8010060:	b510      	push	{r4, lr}
 8010062:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010064:	6803      	ldr	r3, [r0, #0]
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	0752      	lsls	r2, r2, #29
 801006a:	d502      	bpl.n	8010072 <HAL_ADC_IRQHandler+0x12>
 801006c:	685a      	ldr	r2, [r3, #4]
 801006e:	0752      	lsls	r2, r2, #29
 8010070:	d405      	bmi.n	801007e <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8010072:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010074:	0712      	lsls	r2, r2, #28
 8010076:	d529      	bpl.n	80100cc <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8010078:	685a      	ldr	r2, [r3, #4]
 801007a:	0712      	lsls	r2, r2, #28
 801007c:	d526      	bpl.n	80100cc <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801007e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010080:	06d2      	lsls	r2, r2, #27
 8010082:	d404      	bmi.n	801008e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010084:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010086:	2280      	movs	r2, #128	; 0x80
 8010088:	0092      	lsls	r2, r2, #2
 801008a:	430a      	orrs	r2, r1
 801008c:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 801008e:	68d9      	ldr	r1, [r3, #12]
 8010090:	22c0      	movs	r2, #192	; 0xc0
 8010092:	0112      	lsls	r2, r2, #4
 8010094:	4211      	tst	r1, r2
 8010096:	d113      	bne.n	80100c0 <HAL_ADC_IRQHandler+0x60>
 8010098:	6a22      	ldr	r2, [r4, #32]
 801009a:	2a00      	cmp	r2, #0
 801009c:	d110      	bne.n	80100c0 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	0712      	lsls	r2, r2, #28
 80100a2:	d50d      	bpl.n	80100c0 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80100a4:	689a      	ldr	r2, [r3, #8]
 80100a6:	0752      	lsls	r2, r2, #29
 80100a8:	d431      	bmi.n	801010e <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80100aa:	685a      	ldr	r2, [r3, #4]
 80100ac:	210c      	movs	r1, #12
 80100ae:	438a      	bics	r2, r1
 80100b0:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80100b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80100b4:	4a20      	ldr	r2, [pc, #128]	; (8010138 <HAL_ADC_IRQHandler+0xd8>)
 80100b6:	4013      	ands	r3, r2
 80100b8:	3204      	adds	r2, #4
 80100ba:	32ff      	adds	r2, #255	; 0xff
 80100bc:	4313      	orrs	r3, r2
 80100be:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 80100c0:	0020      	movs	r0, r4
 80100c2:	f7f8 fc33 	bl	800892c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80100c6:	6823      	ldr	r3, [r4, #0]
 80100c8:	220c      	movs	r2, #12
 80100ca:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	0612      	lsls	r2, r2, #24
 80100d2:	d502      	bpl.n	80100da <HAL_ADC_IRQHandler+0x7a>
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	061b      	lsls	r3, r3, #24
 80100d8:	d422      	bmi.n	8010120 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	06d2      	lsls	r2, r2, #27
 80100e0:	d514      	bpl.n	801010c <HAL_ADC_IRQHandler+0xac>
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	06d2      	lsls	r2, r2, #27
 80100e6:	d511      	bpl.n	801010c <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80100e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100ea:	2a01      	cmp	r2, #1
 80100ec:	d002      	beq.n	80100f4 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80100ee:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80100f0:	07d2      	lsls	r2, r2, #31
 80100f2:	d508      	bpl.n	8010106 <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80100f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80100f6:	2102      	movs	r1, #2
 80100f8:	430a      	orrs	r2, r1
 80100fa:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80100fc:	2210      	movs	r2, #16
 80100fe:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8010100:	0020      	movs	r0, r4
 8010102:	f7ff ffac 	bl	801005e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	2210      	movs	r2, #16
 801010a:	601a      	str	r2, [r3, #0]
}
 801010c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801010e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010110:	2220      	movs	r2, #32
 8010112:	4313      	orrs	r3, r2
 8010114:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010118:	3a1f      	subs	r2, #31
 801011a:	4313      	orrs	r3, r2
 801011c:	64a3      	str	r3, [r4, #72]	; 0x48
 801011e:	e7cf      	b.n	80100c0 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010120:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010122:	2380      	movs	r3, #128	; 0x80
 8010124:	025b      	lsls	r3, r3, #9
 8010126:	4313      	orrs	r3, r2
 8010128:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801012a:	0020      	movs	r0, r4
 801012c:	f7ff ff96 	bl	801005c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	2280      	movs	r2, #128	; 0x80
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	e7d0      	b.n	80100da <HAL_ADC_IRQHandler+0x7a>
 8010138:	fffffefe 	.word	0xfffffefe

0801013c <HAL_ADC_ConfigChannel>:
{
 801013c:	b530      	push	{r4, r5, lr}
 801013e:	b083      	sub	sp, #12
 8010140:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010142:	2300      	movs	r3, #0
 8010144:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010146:	3340      	adds	r3, #64	; 0x40
 8010148:	5cc3      	ldrb	r3, [r0, r3]
 801014a:	2b01      	cmp	r3, #1
 801014c:	d100      	bne.n	8010150 <HAL_ADC_ConfigChannel+0x14>
 801014e:	e088      	b.n	8010262 <HAL_ADC_ConfigChannel+0x126>
 8010150:	2340      	movs	r3, #64	; 0x40
 8010152:	2201      	movs	r2, #1
 8010154:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010156:	6803      	ldr	r3, [r0, #0]
 8010158:	689a      	ldr	r2, [r3, #8]
 801015a:	0752      	lsls	r2, r2, #29
 801015c:	d475      	bmi.n	801024a <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 801015e:	4a42      	ldr	r2, [pc, #264]	; (8010268 <HAL_ADC_ConfigChannel+0x12c>)
 8010160:	6848      	ldr	r0, [r1, #4]
 8010162:	4290      	cmp	r0, r2
 8010164:	d050      	beq.n	8010208 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010166:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010168:	2201      	movs	r2, #1
 801016a:	680d      	ldr	r5, [r1, #0]
 801016c:	40aa      	lsls	r2, r5
 801016e:	4302      	orrs	r2, r0
 8010170:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010174:	2280      	movs	r2, #128	; 0x80
 8010176:	0552      	lsls	r2, r2, #21
 8010178:	4293      	cmp	r3, r2
 801017a:	d013      	beq.n	80101a4 <HAL_ADC_ConfigChannel+0x68>
 801017c:	3b01      	subs	r3, #1
 801017e:	2b06      	cmp	r3, #6
 8010180:	d910      	bls.n	80101a4 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010182:	6822      	ldr	r2, [r4, #0]
 8010184:	6950      	ldr	r0, [r2, #20]
 8010186:	2307      	movs	r3, #7
 8010188:	4003      	ands	r3, r0
 801018a:	6888      	ldr	r0, [r1, #8]
 801018c:	4298      	cmp	r0, r3
 801018e:	d009      	beq.n	80101a4 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010190:	6950      	ldr	r0, [r2, #20]
 8010192:	2307      	movs	r3, #7
 8010194:	4398      	bics	r0, r3
 8010196:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010198:	6822      	ldr	r2, [r4, #0]
 801019a:	6950      	ldr	r0, [r2, #20]
 801019c:	688d      	ldr	r5, [r1, #8]
 801019e:	402b      	ands	r3, r5
 80101a0:	4303      	orrs	r3, r0
 80101a2:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80101a4:	680b      	ldr	r3, [r1, #0]
 80101a6:	001a      	movs	r2, r3
 80101a8:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101aa:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80101ac:	2a02      	cmp	r2, #2
 80101ae:	d851      	bhi.n	8010254 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101b0:	4a2e      	ldr	r2, [pc, #184]	; (801026c <HAL_ADC_ConfigChannel+0x130>)
 80101b2:	6810      	ldr	r0, [r2, #0]
 80101b4:	2b10      	cmp	r3, #16
 80101b6:	d024      	beq.n	8010202 <HAL_ADC_ConfigChannel+0xc6>
 80101b8:	3b11      	subs	r3, #17
 80101ba:	425a      	negs	r2, r3
 80101bc:	415a      	adcs	r2, r3
 80101be:	4253      	negs	r3, r2
 80101c0:	4a2b      	ldr	r2, [pc, #172]	; (8010270 <HAL_ADC_ConfigChannel+0x134>)
 80101c2:	4013      	ands	r3, r2
 80101c4:	2280      	movs	r2, #128	; 0x80
 80101c6:	0452      	lsls	r2, r2, #17
 80101c8:	4694      	mov	ip, r2
 80101ca:	4463      	add	r3, ip
 80101cc:	4303      	orrs	r3, r0
 80101ce:	4a27      	ldr	r2, [pc, #156]	; (801026c <HAL_ADC_ConfigChannel+0x130>)
 80101d0:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80101d2:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101d4:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80101d6:	2b10      	cmp	r3, #16
 80101d8:	d13c      	bne.n	8010254 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80101da:	4b26      	ldr	r3, [pc, #152]	; (8010274 <HAL_ADC_ConfigChannel+0x138>)
 80101dc:	6818      	ldr	r0, [r3, #0]
 80101de:	4926      	ldr	r1, [pc, #152]	; (8010278 <HAL_ADC_ConfigChannel+0x13c>)
 80101e0:	f7ef ffac 	bl	800013c <__udivsi3>
 80101e4:	0083      	lsls	r3, r0, #2
 80101e6:	1818      	adds	r0, r3, r0
 80101e8:	0040      	lsls	r0, r0, #1
 80101ea:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 80101ec:	9b01      	ldr	r3, [sp, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d035      	beq.n	801025e <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80101f2:	9b01      	ldr	r3, [sp, #4]
 80101f4:	3b01      	subs	r3, #1
 80101f6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80101f8:	9b01      	ldr	r3, [sp, #4]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1f9      	bne.n	80101f2 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101fe:	2000      	movs	r0, #0
 8010200:	e028      	b.n	8010254 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010202:	2380      	movs	r3, #128	; 0x80
 8010204:	041b      	lsls	r3, r3, #16
 8010206:	e7e1      	b.n	80101cc <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801020a:	2001      	movs	r0, #1
 801020c:	680d      	ldr	r5, [r1, #0]
 801020e:	40a8      	lsls	r0, r5
 8010210:	4382      	bics	r2, r0
 8010212:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010214:	680b      	ldr	r3, [r1, #0]
 8010216:	001a      	movs	r2, r3
 8010218:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801021a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801021c:	2a02      	cmp	r2, #2
 801021e:	d819      	bhi.n	8010254 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010220:	4a12      	ldr	r2, [pc, #72]	; (801026c <HAL_ADC_ConfigChannel+0x130>)
 8010222:	6811      	ldr	r1, [r2, #0]
 8010224:	2b10      	cmp	r3, #16
 8010226:	d00e      	beq.n	8010246 <HAL_ADC_ConfigChannel+0x10a>
 8010228:	3b11      	subs	r3, #17
 801022a:	425a      	negs	r2, r3
 801022c:	415a      	adcs	r2, r3
 801022e:	4252      	negs	r2, r2
 8010230:	23c0      	movs	r3, #192	; 0xc0
 8010232:	041b      	lsls	r3, r3, #16
 8010234:	4013      	ands	r3, r2
 8010236:	4a11      	ldr	r2, [pc, #68]	; (801027c <HAL_ADC_ConfigChannel+0x140>)
 8010238:	4694      	mov	ip, r2
 801023a:	4463      	add	r3, ip
 801023c:	400b      	ands	r3, r1
 801023e:	4a0b      	ldr	r2, [pc, #44]	; (801026c <HAL_ADC_ConfigChannel+0x130>)
 8010240:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010242:	2000      	movs	r0, #0
 8010244:	e006      	b.n	8010254 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010246:	4b0e      	ldr	r3, [pc, #56]	; (8010280 <HAL_ADC_ConfigChannel+0x144>)
 8010248:	e7f8      	b.n	801023c <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801024a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801024c:	2220      	movs	r2, #32
 801024e:	4313      	orrs	r3, r2
 8010250:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010252:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010254:	2340      	movs	r3, #64	; 0x40
 8010256:	2200      	movs	r2, #0
 8010258:	54e2      	strb	r2, [r4, r3]
}
 801025a:	b003      	add	sp, #12
 801025c:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801025e:	2000      	movs	r0, #0
 8010260:	e7f8      	b.n	8010254 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8010262:	2002      	movs	r0, #2
 8010264:	e7f9      	b.n	801025a <HAL_ADC_ConfigChannel+0x11e>
 8010266:	46c0      	nop			; (mov r8, r8)
 8010268:	00001001 	.word	0x00001001
 801026c:	40012708 	.word	0x40012708
 8010270:	ff400000 	.word	0xff400000
 8010274:	20000094 	.word	0x20000094
 8010278:	000f4240 	.word	0x000f4240
 801027c:	feffffff 	.word	0xfeffffff
 8010280:	ff7fffff 	.word	0xff7fffff

08010284 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8010284:	b570      	push	{r4, r5, r6, lr}
 8010286:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010288:	2340      	movs	r3, #64	; 0x40
 801028a:	5cc3      	ldrb	r3, [r0, r3]
 801028c:	2b01      	cmp	r3, #1
 801028e:	d042      	beq.n	8010316 <HAL_ADCEx_Calibration_Start+0x92>
 8010290:	2340      	movs	r3, #64	; 0x40
 8010292:	2201      	movs	r2, #1
 8010294:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010296:	6802      	ldr	r2, [r0, #0]
 8010298:	6891      	ldr	r1, [r2, #8]
 801029a:	3b3d      	subs	r3, #61	; 0x3d
 801029c:	400b      	ands	r3, r1
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d105      	bne.n	80102ae <HAL_ADCEx_Calibration_Start+0x2a>
 80102a2:	6813      	ldr	r3, [r2, #0]
 80102a4:	07db      	lsls	r3, r3, #31
 80102a6:	d42d      	bmi.n	8010304 <HAL_ADCEx_Calibration_Start+0x80>
 80102a8:	68d3      	ldr	r3, [r2, #12]
 80102aa:	041b      	lsls	r3, r3, #16
 80102ac:	d42a      	bmi.n	8010304 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80102ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102b0:	491a      	ldr	r1, [pc, #104]	; (801031c <HAL_ADCEx_Calibration_Start+0x98>)
 80102b2:	400b      	ands	r3, r1
 80102b4:	3106      	adds	r1, #6
 80102b6:	31ff      	adds	r1, #255	; 0xff
 80102b8:	430b      	orrs	r3, r1
 80102ba:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80102bc:	6891      	ldr	r1, [r2, #8]
 80102be:	2380      	movs	r3, #128	; 0x80
 80102c0:	061b      	lsls	r3, r3, #24
 80102c2:	430b      	orrs	r3, r1
 80102c4:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 80102c6:	f7ff fccf 	bl	800fc68 <HAL_GetTick>
 80102ca:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	da0f      	bge.n	80102f4 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80102d4:	f7ff fcc8 	bl	800fc68 <HAL_GetTick>
 80102d8:	1b40      	subs	r0, r0, r5
 80102da:	2802      	cmp	r0, #2
 80102dc:	d9f6      	bls.n	80102cc <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80102de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102e0:	2212      	movs	r2, #18
 80102e2:	4393      	bics	r3, r2
 80102e4:	3a02      	subs	r2, #2
 80102e6:	4313      	orrs	r3, r2
 80102e8:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80102ea:	2340      	movs	r3, #64	; 0x40
 80102ec:	2200      	movs	r2, #0
 80102ee:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 80102f0:	2001      	movs	r0, #1
 80102f2:	e00f      	b.n	8010314 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80102f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102f6:	2203      	movs	r2, #3
 80102f8:	4393      	bics	r3, r2
 80102fa:	3a02      	subs	r2, #2
 80102fc:	4313      	orrs	r3, r2
 80102fe:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010300:	2000      	movs	r0, #0
 8010302:	e004      	b.n	801030e <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010304:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010306:	2220      	movs	r2, #32
 8010308:	4313      	orrs	r3, r2
 801030a:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 801030c:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801030e:	2340      	movs	r3, #64	; 0x40
 8010310:	2200      	movs	r2, #0
 8010312:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8010314:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8010316:	2002      	movs	r0, #2
 8010318:	e7fc      	b.n	8010314 <HAL_ADCEx_Calibration_Start+0x90>
 801031a:	46c0      	nop			; (mov r8, r8)
 801031c:	fffffefd 	.word	0xfffffefd

08010320 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010320:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010322:	2800      	cmp	r0, #0
 8010324:	db14      	blt.n	8010350 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010326:	0883      	lsrs	r3, r0, #2
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	4a15      	ldr	r2, [pc, #84]	; (8010380 <HAL_NVIC_SetPriority+0x60>)
 801032c:	4694      	mov	ip, r2
 801032e:	4463      	add	r3, ip
 8010330:	26c0      	movs	r6, #192	; 0xc0
 8010332:	00b6      	lsls	r6, r6, #2
 8010334:	599d      	ldr	r5, [r3, r6]
 8010336:	2403      	movs	r4, #3
 8010338:	4020      	ands	r0, r4
 801033a:	00c0      	lsls	r0, r0, #3
 801033c:	22ff      	movs	r2, #255	; 0xff
 801033e:	0014      	movs	r4, r2
 8010340:	4084      	lsls	r4, r0
 8010342:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010344:	0189      	lsls	r1, r1, #6
 8010346:	400a      	ands	r2, r1
 8010348:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801034a:	432a      	orrs	r2, r5
 801034c:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 801034e:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010350:	b2c0      	uxtb	r0, r0
 8010352:	230f      	movs	r3, #15
 8010354:	4003      	ands	r3, r0
 8010356:	3b08      	subs	r3, #8
 8010358:	089b      	lsrs	r3, r3, #2
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	4a09      	ldr	r2, [pc, #36]	; (8010384 <HAL_NVIC_SetPriority+0x64>)
 801035e:	4694      	mov	ip, r2
 8010360:	4463      	add	r3, ip
 8010362:	69dd      	ldr	r5, [r3, #28]
 8010364:	2203      	movs	r2, #3
 8010366:	4010      	ands	r0, r2
 8010368:	00c0      	lsls	r0, r0, #3
 801036a:	24ff      	movs	r4, #255	; 0xff
 801036c:	0022      	movs	r2, r4
 801036e:	4082      	lsls	r2, r0
 8010370:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010372:	0189      	lsls	r1, r1, #6
 8010374:	400c      	ands	r4, r1
 8010376:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010378:	432c      	orrs	r4, r5
 801037a:	61dc      	str	r4, [r3, #28]
 801037c:	e7e7      	b.n	801034e <HAL_NVIC_SetPriority+0x2e>
 801037e:	46c0      	nop			; (mov r8, r8)
 8010380:	e000e100 	.word	0xe000e100
 8010384:	e000ed00 	.word	0xe000ed00

08010388 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010388:	231f      	movs	r3, #31
 801038a:	4018      	ands	r0, r3
 801038c:	3b1e      	subs	r3, #30
 801038e:	4083      	lsls	r3, r0
 8010390:	4a01      	ldr	r2, [pc, #4]	; (8010398 <HAL_NVIC_EnableIRQ+0x10>)
 8010392:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010394:	4770      	bx	lr
 8010396:	46c0      	nop			; (mov r8, r8)
 8010398:	e000e100 	.word	0xe000e100

0801039c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801039c:	231f      	movs	r3, #31
 801039e:	4018      	ands	r0, r3
 80103a0:	3b1e      	subs	r3, #30
 80103a2:	4083      	lsls	r3, r0
 80103a4:	4901      	ldr	r1, [pc, #4]	; (80103ac <HAL_NVIC_DisableIRQ+0x10>)
 80103a6:	2280      	movs	r2, #128	; 0x80
 80103a8:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80103aa:	4770      	bx	lr
 80103ac:	e000e100 	.word	0xe000e100

080103b0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80103b0:	1e43      	subs	r3, r0, #1
 80103b2:	4a0a      	ldr	r2, [pc, #40]	; (80103dc <HAL_SYSTICK_Config+0x2c>)
 80103b4:	2001      	movs	r0, #1
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d80e      	bhi.n	80103d8 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80103ba:	4a09      	ldr	r2, [pc, #36]	; (80103e0 <HAL_SYSTICK_Config+0x30>)
 80103bc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80103be:	4809      	ldr	r0, [pc, #36]	; (80103e4 <HAL_SYSTICK_Config+0x34>)
 80103c0:	6a03      	ldr	r3, [r0, #32]
 80103c2:	021b      	lsls	r3, r3, #8
 80103c4:	0a1b      	lsrs	r3, r3, #8
 80103c6:	21c0      	movs	r1, #192	; 0xc0
 80103c8:	0609      	lsls	r1, r1, #24
 80103ca:	430b      	orrs	r3, r1
 80103cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80103ce:	2300      	movs	r3, #0
 80103d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80103d2:	3307      	adds	r3, #7
 80103d4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80103d6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80103d8:	4770      	bx	lr
 80103da:	46c0      	nop			; (mov r8, r8)
 80103dc:	00ffffff 	.word	0x00ffffff
 80103e0:	e000e010 	.word	0xe000e010
 80103e4:	e000ed00 	.word	0xe000ed00

080103e8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80103e8:	2804      	cmp	r0, #4
 80103ea:	d005      	beq.n	80103f8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80103ec:	4a05      	ldr	r2, [pc, #20]	; (8010404 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80103ee:	6813      	ldr	r3, [r2, #0]
 80103f0:	2104      	movs	r1, #4
 80103f2:	438b      	bics	r3, r1
 80103f4:	6013      	str	r3, [r2, #0]
  }
}
 80103f6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80103f8:	4a02      	ldr	r2, [pc, #8]	; (8010404 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80103fa:	6813      	ldr	r3, [r2, #0]
 80103fc:	2104      	movs	r1, #4
 80103fe:	430b      	orrs	r3, r1
 8010400:	6013      	str	r3, [r2, #0]
 8010402:	e7f8      	b.n	80103f6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010404:	e000e010 	.word	0xe000e010

08010408 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801040a:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 801040c:	0891      	lsrs	r1, r2, #2
 801040e:	d013      	beq.n	8010438 <CRC_Handle_8+0x30>
 8010410:	0034      	movs	r4, r6
 8010412:	2303      	movs	r3, #3
 8010414:	0017      	movs	r7, r2
 8010416:	439f      	bics	r7, r3
 8010418:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801041a:	7823      	ldrb	r3, [r4, #0]
 801041c:	061b      	lsls	r3, r3, #24
 801041e:	7865      	ldrb	r5, [r4, #1]
 8010420:	042d      	lsls	r5, r5, #16
 8010422:	432b      	orrs	r3, r5
 8010424:	78e5      	ldrb	r5, [r4, #3]
 8010426:	432b      	orrs	r3, r5
 8010428:	78a5      	ldrb	r5, [r4, #2]
 801042a:	022d      	lsls	r5, r5, #8
 801042c:	432b      	orrs	r3, r5
 801042e:	6805      	ldr	r5, [r0, #0]
 8010430:	602b      	str	r3, [r5, #0]
 8010432:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010434:	42bc      	cmp	r4, r7
 8010436:	d1f0      	bne.n	801041a <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010438:	2303      	movs	r3, #3
 801043a:	401a      	ands	r2, r3
 801043c:	d01e      	beq.n	801047c <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 801043e:	2a01      	cmp	r2, #1
 8010440:	d00a      	beq.n	8010458 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010442:	2a02      	cmp	r2, #2
 8010444:	d10d      	bne.n	8010462 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010446:	0089      	lsls	r1, r1, #2
 8010448:	5c72      	ldrb	r2, [r6, r1]
 801044a:	0212      	lsls	r2, r2, #8
 801044c:	1871      	adds	r1, r6, r1
 801044e:	784b      	ldrb	r3, [r1, #1]
 8010450:	4313      	orrs	r3, r2
 8010452:	6802      	ldr	r2, [r0, #0]
 8010454:	8013      	strh	r3, [r2, #0]
 8010456:	e011      	b.n	801047c <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010458:	0089      	lsls	r1, r1, #2
 801045a:	5d8b      	ldrb	r3, [r1, r6]
 801045c:	6802      	ldr	r2, [r0, #0]
 801045e:	7013      	strb	r3, [r2, #0]
 8010460:	e00c      	b.n	801047c <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010462:	2a03      	cmp	r2, #3
 8010464:	d10a      	bne.n	801047c <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010466:	0089      	lsls	r1, r1, #2
 8010468:	5c72      	ldrb	r2, [r6, r1]
 801046a:	0212      	lsls	r2, r2, #8
 801046c:	1871      	adds	r1, r6, r1
 801046e:	784b      	ldrb	r3, [r1, #1]
 8010470:	4313      	orrs	r3, r2
 8010472:	6802      	ldr	r2, [r0, #0]
 8010474:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010476:	788b      	ldrb	r3, [r1, #2]
 8010478:	6802      	ldr	r2, [r0, #0]
 801047a:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801047c:	6803      	ldr	r3, [r0, #0]
 801047e:	6818      	ldr	r0, [r3, #0]
}
 8010480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010482 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010484:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010486:	0852      	lsrs	r2, r2, #1
 8010488:	d00b      	beq.n	80104a2 <CRC_Handle_16+0x20>
 801048a:	000c      	movs	r4, r1
 801048c:	0097      	lsls	r7, r2, #2
 801048e:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010490:	8823      	ldrh	r3, [r4, #0]
 8010492:	041b      	lsls	r3, r3, #16
 8010494:	8866      	ldrh	r6, [r4, #2]
 8010496:	4333      	orrs	r3, r6
 8010498:	6806      	ldr	r6, [r0, #0]
 801049a:	6033      	str	r3, [r6, #0]
 801049c:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 801049e:	42bc      	cmp	r4, r7
 80104a0:	d1f6      	bne.n	8010490 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 80104a2:	07eb      	lsls	r3, r5, #31
 80104a4:	d503      	bpl.n	80104ae <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80104a6:	0092      	lsls	r2, r2, #2
 80104a8:	5a53      	ldrh	r3, [r2, r1]
 80104aa:	6802      	ldr	r2, [r0, #0]
 80104ac:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80104ae:	6803      	ldr	r3, [r0, #0]
 80104b0:	6818      	ldr	r0, [r3, #0]
}
 80104b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080104b4 <HAL_CRC_Init>:
{
 80104b4:	b510      	push	{r4, lr}
 80104b6:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80104b8:	d029      	beq.n	801050e <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80104ba:	7f43      	ldrb	r3, [r0, #29]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d01e      	beq.n	80104fe <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80104c0:	2302      	movs	r3, #2
 80104c2:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80104c4:	0020      	movs	r0, r4
 80104c6:	f000 f8b1 	bl	801062c <HAL_CRCEx_Init>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d121      	bne.n	8010512 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80104ce:	7963      	ldrb	r3, [r4, #5]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d118      	bne.n	8010506 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	2201      	movs	r2, #1
 80104d8:	4252      	negs	r2, r2
 80104da:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80104dc:	6822      	ldr	r2, [r4, #0]
 80104de:	6893      	ldr	r3, [r2, #8]
 80104e0:	2160      	movs	r1, #96	; 0x60
 80104e2:	438b      	bics	r3, r1
 80104e4:	6961      	ldr	r1, [r4, #20]
 80104e6:	430b      	orrs	r3, r1
 80104e8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80104ea:	6822      	ldr	r2, [r4, #0]
 80104ec:	6893      	ldr	r3, [r2, #8]
 80104ee:	2180      	movs	r1, #128	; 0x80
 80104f0:	438b      	bics	r3, r1
 80104f2:	69a1      	ldr	r1, [r4, #24]
 80104f4:	430b      	orrs	r3, r1
 80104f6:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80104f8:	2301      	movs	r3, #1
 80104fa:	7763      	strb	r3, [r4, #29]
}
 80104fc:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80104fe:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010500:	f7fc fc96 	bl	800ce30 <HAL_CRC_MspInit>
 8010504:	e7dc      	b.n	80104c0 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010506:	6823      	ldr	r3, [r4, #0]
 8010508:	6922      	ldr	r2, [r4, #16]
 801050a:	611a      	str	r2, [r3, #16]
 801050c:	e7e6      	b.n	80104dc <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801050e:	2001      	movs	r0, #1
 8010510:	e7f4      	b.n	80104fc <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010512:	2001      	movs	r0, #1
 8010514:	e7f2      	b.n	80104fc <HAL_CRC_Init+0x48>

08010516 <HAL_CRC_Accumulate>:
{
 8010516:	b510      	push	{r4, lr}
 8010518:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801051a:	7f03      	ldrb	r3, [r0, #28]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d024      	beq.n	801056a <HAL_CRC_Accumulate+0x54>
 8010520:	2301      	movs	r3, #1
 8010522:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010524:	3301      	adds	r3, #1
 8010526:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010528:	6a03      	ldr	r3, [r0, #32]
 801052a:	2b02      	cmp	r3, #2
 801052c:	d01a      	beq.n	8010564 <HAL_CRC_Accumulate+0x4e>
 801052e:	2b03      	cmp	r3, #3
 8010530:	d007      	beq.n	8010542 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010532:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010534:	2b01      	cmp	r3, #1
 8010536:	d011      	beq.n	801055c <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010538:	2301      	movs	r3, #1
 801053a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801053c:	2300      	movs	r3, #0
 801053e:	7723      	strb	r3, [r4, #28]
}
 8010540:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010542:	2a00      	cmp	r2, #0
 8010544:	d007      	beq.n	8010556 <HAL_CRC_Accumulate+0x40>
 8010546:	000b      	movs	r3, r1
 8010548:	0092      	lsls	r2, r2, #2
 801054a:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801054c:	6822      	ldr	r2, [r4, #0]
 801054e:	cb01      	ldmia	r3!, {r0}
 8010550:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010552:	428b      	cmp	r3, r1
 8010554:	d1fa      	bne.n	801054c <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	6818      	ldr	r0, [r3, #0]
      break;
 801055a:	e7ed      	b.n	8010538 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801055c:	0020      	movs	r0, r4
 801055e:	f7ff ff53 	bl	8010408 <CRC_Handle_8>
      break;
 8010562:	e7e9      	b.n	8010538 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010564:	f7ff ff8d 	bl	8010482 <CRC_Handle_16>
      break;
 8010568:	e7e6      	b.n	8010538 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 801056a:	2002      	movs	r0, #2
 801056c:	e7e8      	b.n	8010540 <HAL_CRC_Accumulate+0x2a>

0801056e <HAL_CRC_Calculate>:
{
 801056e:	b570      	push	{r4, r5, r6, lr}
 8010570:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010572:	7f03      	ldrb	r3, [r0, #28]
 8010574:	2b01      	cmp	r3, #1
 8010576:	d029      	beq.n	80105cc <HAL_CRC_Calculate+0x5e>
 8010578:	2501      	movs	r5, #1
 801057a:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801057c:	2302      	movs	r3, #2
 801057e:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010580:	6800      	ldr	r0, [r0, #0]
 8010582:	6883      	ldr	r3, [r0, #8]
 8010584:	432b      	orrs	r3, r5
 8010586:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010588:	6a23      	ldr	r3, [r4, #32]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d01a      	beq.n	80105c4 <HAL_CRC_Calculate+0x56>
 801058e:	2b03      	cmp	r3, #3
 8010590:	d007      	beq.n	80105a2 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010592:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010594:	2b01      	cmp	r3, #1
 8010596:	d011      	beq.n	80105bc <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010598:	2301      	movs	r3, #1
 801059a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801059c:	2300      	movs	r3, #0
 801059e:	7723      	strb	r3, [r4, #28]
}
 80105a0:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80105a2:	2a00      	cmp	r2, #0
 80105a4:	d007      	beq.n	80105b6 <HAL_CRC_Calculate+0x48>
 80105a6:	000b      	movs	r3, r1
 80105a8:	0092      	lsls	r2, r2, #2
 80105aa:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80105ac:	6820      	ldr	r0, [r4, #0]
 80105ae:	cb20      	ldmia	r3!, {r5}
 80105b0:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80105b2:	428b      	cmp	r3, r1
 80105b4:	d1fa      	bne.n	80105ac <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	6818      	ldr	r0, [r3, #0]
      break;
 80105ba:	e7ed      	b.n	8010598 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80105bc:	0020      	movs	r0, r4
 80105be:	f7ff ff23 	bl	8010408 <CRC_Handle_8>
      break;
 80105c2:	e7e9      	b.n	8010598 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80105c4:	0020      	movs	r0, r4
 80105c6:	f7ff ff5c 	bl	8010482 <CRC_Handle_16>
      break;
 80105ca:	e7e5      	b.n	8010598 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 80105cc:	2002      	movs	r0, #2
 80105ce:	e7e7      	b.n	80105a0 <HAL_CRC_Calculate+0x32>

080105d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80105d0:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80105d2:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80105d4:	2501      	movs	r5, #1
 80105d6:	002c      	movs	r4, r5
 80105d8:	409c      	lsls	r4, r3
 80105da:	4221      	tst	r1, r4
 80105dc:	d10b      	bne.n	80105f6 <HAL_CRCEx_Polynomial_Set+0x26>
 80105de:	3b01      	subs	r3, #1
 80105e0:	d2f9      	bcs.n	80105d6 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 80105e2:	2a10      	cmp	r2, #16
 80105e4:	d01c      	beq.n	8010620 <HAL_CRCEx_Polynomial_Set+0x50>
 80105e6:	2a18      	cmp	r2, #24
 80105e8:	d01e      	beq.n	8010628 <HAL_CRCEx_Polynomial_Set+0x58>
 80105ea:	2a08      	cmp	r2, #8
 80105ec:	d109      	bne.n	8010602 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 80105ee:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 80105f0:	2b0f      	cmp	r3, #15
 80105f2:	d906      	bls.n	8010602 <HAL_CRCEx_Polynomial_Set+0x32>
 80105f4:	e00e      	b.n	8010614 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 80105f6:	2a10      	cmp	r2, #16
 80105f8:	d012      	beq.n	8010620 <HAL_CRCEx_Polynomial_Set+0x50>
 80105fa:	2a18      	cmp	r2, #24
 80105fc:	d00c      	beq.n	8010618 <HAL_CRCEx_Polynomial_Set+0x48>
 80105fe:	2a08      	cmp	r2, #8
 8010600:	d0f5      	beq.n	80105ee <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010602:	6803      	ldr	r3, [r0, #0]
 8010604:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010606:	6801      	ldr	r1, [r0, #0]
 8010608:	688b      	ldr	r3, [r1, #8]
 801060a:	2018      	movs	r0, #24
 801060c:	4383      	bics	r3, r0
 801060e:	431a      	orrs	r2, r3
 8010610:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010612:	2400      	movs	r4, #0
}
 8010614:	0020      	movs	r0, r4
 8010616:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010618:	2b06      	cmp	r3, #6
 801061a:	d9f2      	bls.n	8010602 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 801061c:	2401      	movs	r4, #1
 801061e:	e7f9      	b.n	8010614 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010620:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010622:	2b07      	cmp	r3, #7
 8010624:	d9ed      	bls.n	8010602 <HAL_CRCEx_Polynomial_Set+0x32>
 8010626:	e7f5      	b.n	8010614 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010628:	2401      	movs	r4, #1
 801062a:	e7f3      	b.n	8010614 <HAL_CRCEx_Polynomial_Set+0x44>

0801062c <HAL_CRCEx_Init>:
{
 801062c:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801062e:	7903      	ldrb	r3, [r0, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d109      	bne.n	8010648 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010634:	6803      	ldr	r3, [r0, #0]
 8010636:	4a08      	ldr	r2, [pc, #32]	; (8010658 <HAL_CRCEx_Init+0x2c>)
 8010638:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801063a:	6802      	ldr	r2, [r0, #0]
 801063c:	6893      	ldr	r3, [r2, #8]
 801063e:	2118      	movs	r1, #24
 8010640:	438b      	bics	r3, r1
 8010642:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010644:	2000      	movs	r0, #0
}
 8010646:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010648:	68c2      	ldr	r2, [r0, #12]
 801064a:	6881      	ldr	r1, [r0, #8]
 801064c:	f7ff ffc0 	bl	80105d0 <HAL_CRCEx_Polynomial_Set>
 8010650:	1e43      	subs	r3, r0, #1
 8010652:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010654:	b2c0      	uxtb	r0, r0
 8010656:	e7f6      	b.n	8010646 <HAL_CRCEx_Init+0x1a>
 8010658:	04c11db7 	.word	0x04c11db7

0801065c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 801065c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801065e:	2800      	cmp	r0, #0
 8010660:	d022      	beq.n	80106a8 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010662:	2321      	movs	r3, #33	; 0x21
 8010664:	5cc3      	ldrb	r3, [r0, r3]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 801066a:	3320      	adds	r3, #32
 801066c:	2200      	movs	r2, #0
 801066e:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010670:	2121      	movs	r1, #33	; 0x21
 8010672:	2302      	movs	r3, #2
 8010674:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010676:	6804      	ldr	r4, [r0, #0]
 8010678:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801067a:	4a0c      	ldr	r2, [pc, #48]	; (80106ac <HAL_DMA_Init+0x50>)
 801067c:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801067e:	6843      	ldr	r3, [r0, #4]
 8010680:	6885      	ldr	r5, [r0, #8]
 8010682:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010684:	68c5      	ldr	r5, [r0, #12]
 8010686:	432b      	orrs	r3, r5
 8010688:	6905      	ldr	r5, [r0, #16]
 801068a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801068c:	6945      	ldr	r5, [r0, #20]
 801068e:	432b      	orrs	r3, r5
 8010690:	6985      	ldr	r5, [r0, #24]
 8010692:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010694:	69c5      	ldr	r5, [r0, #28]
 8010696:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010698:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801069a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801069c:	2300      	movs	r3, #0
 801069e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80106a0:	3301      	adds	r3, #1
 80106a2:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 80106a4:	2000      	movs	r0, #0
}  
 80106a6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80106a8:	2001      	movs	r0, #1
 80106aa:	e7fc      	b.n	80106a6 <HAL_DMA_Init+0x4a>
 80106ac:	ffffc00f 	.word	0xffffc00f

080106b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80106b0:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 80106b2:	2420      	movs	r4, #32
 80106b4:	5d04      	ldrb	r4, [r0, r4]
 80106b6:	2c01      	cmp	r4, #1
 80106b8:	d02d      	beq.n	8010716 <HAL_DMA_Start_IT+0x66>
 80106ba:	2601      	movs	r6, #1
 80106bc:	2420      	movs	r4, #32
 80106be:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80106c0:	3401      	adds	r4, #1
 80106c2:	2502      	movs	r5, #2
 80106c4:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80106c6:	6805      	ldr	r5, [r0, #0]
 80106c8:	682c      	ldr	r4, [r5, #0]
 80106ca:	43b4      	bics	r4, r6
 80106cc:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80106ce:	6804      	ldr	r4, [r0, #0]
 80106d0:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80106d2:	6843      	ldr	r3, [r0, #4]
 80106d4:	2b10      	cmp	r3, #16
 80106d6:	d019      	beq.n	801070c <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80106d8:	6803      	ldr	r3, [r0, #0]
 80106da:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80106e0:	6802      	ldr	r2, [r0, #0]
 80106e2:	6813      	ldr	r3, [r2, #0]
 80106e4:	2102      	movs	r1, #2
 80106e6:	430b      	orrs	r3, r1
 80106e8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80106ea:	6802      	ldr	r2, [r0, #0]
 80106ec:	6813      	ldr	r3, [r2, #0]
 80106ee:	3102      	adds	r1, #2
 80106f0:	430b      	orrs	r3, r1
 80106f2:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80106f4:	6802      	ldr	r2, [r0, #0]
 80106f6:	6813      	ldr	r3, [r2, #0]
 80106f8:	3104      	adds	r1, #4
 80106fa:	430b      	orrs	r3, r1
 80106fc:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80106fe:	6802      	ldr	r2, [r0, #0]
 8010700:	6813      	ldr	r3, [r2, #0]
 8010702:	3907      	subs	r1, #7
 8010704:	430b      	orrs	r3, r1
 8010706:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010708:	2000      	movs	r0, #0
} 
 801070a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 801070c:	6803      	ldr	r3, [r0, #0]
 801070e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010710:	6803      	ldr	r3, [r0, #0]
 8010712:	60d9      	str	r1, [r3, #12]
 8010714:	e7e4      	b.n	80106e0 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010716:	2002      	movs	r0, #2
 8010718:	e7f7      	b.n	801070a <HAL_DMA_Start_IT+0x5a>

0801071a <HAL_DMA_Abort>:
{
 801071a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801071e:	6802      	ldr	r2, [r0, #0]
 8010720:	6813      	ldr	r3, [r2, #0]
 8010722:	2101      	movs	r1, #1
 8010724:	438b      	bics	r3, r1
 8010726:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010728:	f7ff fa9e 	bl	800fc68 <HAL_GetTick>
 801072c:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801072e:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010730:	26fa      	movs	r6, #250	; 0xfa
 8010732:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	421d      	tst	r5, r3
 801073a:	d00f      	beq.n	801075c <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801073c:	f7ff fa94 	bl	800fc68 <HAL_GetTick>
 8010740:	1bc0      	subs	r0, r0, r7
 8010742:	42b0      	cmp	r0, r6
 8010744:	d9f6      	bls.n	8010734 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010748:	2220      	movs	r2, #32
 801074a:	4313      	orrs	r3, r2
 801074c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801074e:	2321      	movs	r3, #33	; 0x21
 8010750:	2103      	movs	r1, #3
 8010752:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010754:	2300      	movs	r3, #0
 8010756:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010758:	2003      	movs	r0, #3
 801075a:	e006      	b.n	801076a <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 801075c:	2321      	movs	r3, #33	; 0x21
 801075e:	2201      	movs	r2, #1
 8010760:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010762:	3b01      	subs	r3, #1
 8010764:	2200      	movs	r2, #0
 8010766:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010768:	2000      	movs	r0, #0
}
 801076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801076c <HAL_DMA_IRQHandler>:
{        
 801076c:	b510      	push	{r4, lr}
 801076e:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010770:	6803      	ldr	r3, [r0, #0]
 8010772:	4ab4      	ldr	r2, [pc, #720]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d94d      	bls.n	8010814 <HAL_DMA_IRQHandler+0xa8>
 8010778:	4ab3      	ldr	r2, [pc, #716]	; (8010a48 <HAL_DMA_IRQHandler+0x2dc>)
 801077a:	6811      	ldr	r1, [r2, #0]
 801077c:	4ab3      	ldr	r2, [pc, #716]	; (8010a4c <HAL_DMA_IRQHandler+0x2e0>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d026      	beq.n	80107d0 <HAL_DMA_IRQHandler+0x64>
 8010782:	4ab3      	ldr	r2, [pc, #716]	; (8010a50 <HAL_DMA_IRQHandler+0x2e4>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d02d      	beq.n	80107e4 <HAL_DMA_IRQHandler+0x78>
 8010788:	4ab2      	ldr	r2, [pc, #712]	; (8010a54 <HAL_DMA_IRQHandler+0x2e8>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d02c      	beq.n	80107e8 <HAL_DMA_IRQHandler+0x7c>
 801078e:	4ab2      	ldr	r2, [pc, #712]	; (8010a58 <HAL_DMA_IRQHandler+0x2ec>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d02c      	beq.n	80107ee <HAL_DMA_IRQHandler+0x82>
 8010794:	4ab1      	ldr	r2, [pc, #708]	; (8010a5c <HAL_DMA_IRQHandler+0x2f0>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d02c      	beq.n	80107f4 <HAL_DMA_IRQHandler+0x88>
 801079a:	4ab1      	ldr	r2, [pc, #708]	; (8010a60 <HAL_DMA_IRQHandler+0x2f4>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d02c      	beq.n	80107fa <HAL_DMA_IRQHandler+0x8e>
 80107a0:	4aa8      	ldr	r2, [pc, #672]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d02c      	beq.n	8010800 <HAL_DMA_IRQHandler+0x94>
 80107a6:	4aaf      	ldr	r2, [pc, #700]	; (8010a64 <HAL_DMA_IRQHandler+0x2f8>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d02c      	beq.n	8010806 <HAL_DMA_IRQHandler+0x9a>
 80107ac:	4aae      	ldr	r2, [pc, #696]	; (8010a68 <HAL_DMA_IRQHandler+0x2fc>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d02b      	beq.n	801080a <HAL_DMA_IRQHandler+0x9e>
 80107b2:	4aae      	ldr	r2, [pc, #696]	; (8010a6c <HAL_DMA_IRQHandler+0x300>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d02a      	beq.n	801080e <HAL_DMA_IRQHandler+0xa2>
 80107b8:	4aad      	ldr	r2, [pc, #692]	; (8010a70 <HAL_DMA_IRQHandler+0x304>)
 80107ba:	189a      	adds	r2, r3, r2
 80107bc:	4250      	negs	r0, r2
 80107be:	4142      	adcs	r2, r0
 80107c0:	4252      	negs	r2, r2
 80107c2:	48ac      	ldr	r0, [pc, #688]	; (8010a74 <HAL_DMA_IRQHandler+0x308>)
 80107c4:	4002      	ands	r2, r0
 80107c6:	2080      	movs	r0, #128	; 0x80
 80107c8:	0300      	lsls	r0, r0, #12
 80107ca:	4684      	mov	ip, r0
 80107cc:	4462      	add	r2, ip
 80107ce:	e000      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 80107d0:	2208      	movs	r2, #8
 80107d2:	420a      	tst	r2, r1
 80107d4:	d100      	bne.n	80107d8 <HAL_DMA_IRQHandler+0x6c>
 80107d6:	e0e6      	b.n	80109a6 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	0712      	lsls	r2, r2, #28
 80107dc:	d500      	bpl.n	80107e0 <HAL_DMA_IRQHandler+0x74>
 80107de:	e097      	b.n	8010910 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107e0:	6823      	ldr	r3, [r4, #0]
 80107e2:	e0e0      	b.n	80109a6 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107e4:	2280      	movs	r2, #128	; 0x80
 80107e6:	e7f4      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 80107e8:	2280      	movs	r2, #128	; 0x80
 80107ea:	0112      	lsls	r2, r2, #4
 80107ec:	e7f1      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 80107ee:	2280      	movs	r2, #128	; 0x80
 80107f0:	0212      	lsls	r2, r2, #8
 80107f2:	e7ee      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 80107f4:	2280      	movs	r2, #128	; 0x80
 80107f6:	0312      	lsls	r2, r2, #12
 80107f8:	e7eb      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 80107fa:	2280      	movs	r2, #128	; 0x80
 80107fc:	0412      	lsls	r2, r2, #16
 80107fe:	e7e8      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 8010800:	2280      	movs	r2, #128	; 0x80
 8010802:	0512      	lsls	r2, r2, #20
 8010804:	e7e5      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 8010806:	2208      	movs	r2, #8
 8010808:	e7e3      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 801080a:	2280      	movs	r2, #128	; 0x80
 801080c:	e7e1      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 801080e:	2280      	movs	r2, #128	; 0x80
 8010810:	0112      	lsls	r2, r2, #4
 8010812:	e7de      	b.n	80107d2 <HAL_DMA_IRQHandler+0x66>
 8010814:	4a98      	ldr	r2, [pc, #608]	; (8010a78 <HAL_DMA_IRQHandler+0x30c>)
 8010816:	6811      	ldr	r1, [r2, #0]
 8010818:	4a8c      	ldr	r2, [pc, #560]	; (8010a4c <HAL_DMA_IRQHandler+0x2e0>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d026      	beq.n	801086c <HAL_DMA_IRQHandler+0x100>
 801081e:	4a8c      	ldr	r2, [pc, #560]	; (8010a50 <HAL_DMA_IRQHandler+0x2e4>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d05d      	beq.n	80108e0 <HAL_DMA_IRQHandler+0x174>
 8010824:	4a8b      	ldr	r2, [pc, #556]	; (8010a54 <HAL_DMA_IRQHandler+0x2e8>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d05c      	beq.n	80108e4 <HAL_DMA_IRQHandler+0x178>
 801082a:	4a8b      	ldr	r2, [pc, #556]	; (8010a58 <HAL_DMA_IRQHandler+0x2ec>)
 801082c:	4293      	cmp	r3, r2
 801082e:	d05c      	beq.n	80108ea <HAL_DMA_IRQHandler+0x17e>
 8010830:	4a8a      	ldr	r2, [pc, #552]	; (8010a5c <HAL_DMA_IRQHandler+0x2f0>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d05c      	beq.n	80108f0 <HAL_DMA_IRQHandler+0x184>
 8010836:	4a8a      	ldr	r2, [pc, #552]	; (8010a60 <HAL_DMA_IRQHandler+0x2f4>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d05c      	beq.n	80108f6 <HAL_DMA_IRQHandler+0x18a>
 801083c:	4a81      	ldr	r2, [pc, #516]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 801083e:	4293      	cmp	r3, r2
 8010840:	d05c      	beq.n	80108fc <HAL_DMA_IRQHandler+0x190>
 8010842:	4a88      	ldr	r2, [pc, #544]	; (8010a64 <HAL_DMA_IRQHandler+0x2f8>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d05c      	beq.n	8010902 <HAL_DMA_IRQHandler+0x196>
 8010848:	4a87      	ldr	r2, [pc, #540]	; (8010a68 <HAL_DMA_IRQHandler+0x2fc>)
 801084a:	4293      	cmp	r3, r2
 801084c:	d05b      	beq.n	8010906 <HAL_DMA_IRQHandler+0x19a>
 801084e:	4a87      	ldr	r2, [pc, #540]	; (8010a6c <HAL_DMA_IRQHandler+0x300>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d05a      	beq.n	801090a <HAL_DMA_IRQHandler+0x19e>
 8010854:	4a86      	ldr	r2, [pc, #536]	; (8010a70 <HAL_DMA_IRQHandler+0x304>)
 8010856:	189a      	adds	r2, r3, r2
 8010858:	4250      	negs	r0, r2
 801085a:	4142      	adcs	r2, r0
 801085c:	4252      	negs	r2, r2
 801085e:	4885      	ldr	r0, [pc, #532]	; (8010a74 <HAL_DMA_IRQHandler+0x308>)
 8010860:	4002      	ands	r2, r0
 8010862:	2080      	movs	r0, #128	; 0x80
 8010864:	0300      	lsls	r0, r0, #12
 8010866:	4684      	mov	ip, r0
 8010868:	4462      	add	r2, ip
 801086a:	e000      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 801086c:	2208      	movs	r2, #8
 801086e:	420a      	tst	r2, r1
 8010870:	d000      	beq.n	8010874 <HAL_DMA_IRQHandler+0x108>
 8010872:	e3ad      	b.n	8010fd0 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010874:	4a80      	ldr	r2, [pc, #512]	; (8010a78 <HAL_DMA_IRQHandler+0x30c>)
 8010876:	6811      	ldr	r1, [r2, #0]
 8010878:	4a74      	ldr	r2, [pc, #464]	; (8010a4c <HAL_DMA_IRQHandler+0x2e0>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d100      	bne.n	8010880 <HAL_DMA_IRQHandler+0x114>
 801087e:	e198      	b.n	8010bb2 <HAL_DMA_IRQHandler+0x446>
 8010880:	4a73      	ldr	r2, [pc, #460]	; (8010a50 <HAL_DMA_IRQHandler+0x2e4>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d100      	bne.n	8010888 <HAL_DMA_IRQHandler+0x11c>
 8010886:	e1da      	b.n	8010c3e <HAL_DMA_IRQHandler+0x4d2>
 8010888:	4a72      	ldr	r2, [pc, #456]	; (8010a54 <HAL_DMA_IRQHandler+0x2e8>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d100      	bne.n	8010890 <HAL_DMA_IRQHandler+0x124>
 801088e:	e1d8      	b.n	8010c42 <HAL_DMA_IRQHandler+0x4d6>
 8010890:	4a71      	ldr	r2, [pc, #452]	; (8010a58 <HAL_DMA_IRQHandler+0x2ec>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d100      	bne.n	8010898 <HAL_DMA_IRQHandler+0x12c>
 8010896:	e1d7      	b.n	8010c48 <HAL_DMA_IRQHandler+0x4dc>
 8010898:	4a70      	ldr	r2, [pc, #448]	; (8010a5c <HAL_DMA_IRQHandler+0x2f0>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d100      	bne.n	80108a0 <HAL_DMA_IRQHandler+0x134>
 801089e:	e1d6      	b.n	8010c4e <HAL_DMA_IRQHandler+0x4e2>
 80108a0:	4a6f      	ldr	r2, [pc, #444]	; (8010a60 <HAL_DMA_IRQHandler+0x2f4>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d100      	bne.n	80108a8 <HAL_DMA_IRQHandler+0x13c>
 80108a6:	e1d5      	b.n	8010c54 <HAL_DMA_IRQHandler+0x4e8>
 80108a8:	4a66      	ldr	r2, [pc, #408]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d100      	bne.n	80108b0 <HAL_DMA_IRQHandler+0x144>
 80108ae:	e1d4      	b.n	8010c5a <HAL_DMA_IRQHandler+0x4ee>
 80108b0:	4a6c      	ldr	r2, [pc, #432]	; (8010a64 <HAL_DMA_IRQHandler+0x2f8>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d100      	bne.n	80108b8 <HAL_DMA_IRQHandler+0x14c>
 80108b6:	e1d3      	b.n	8010c60 <HAL_DMA_IRQHandler+0x4f4>
 80108b8:	4a6b      	ldr	r2, [pc, #428]	; (8010a68 <HAL_DMA_IRQHandler+0x2fc>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d100      	bne.n	80108c0 <HAL_DMA_IRQHandler+0x154>
 80108be:	e1d1      	b.n	8010c64 <HAL_DMA_IRQHandler+0x4f8>
 80108c0:	4a6a      	ldr	r2, [pc, #424]	; (8010a6c <HAL_DMA_IRQHandler+0x300>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d100      	bne.n	80108c8 <HAL_DMA_IRQHandler+0x15c>
 80108c6:	e1cf      	b.n	8010c68 <HAL_DMA_IRQHandler+0x4fc>
 80108c8:	4a69      	ldr	r2, [pc, #420]	; (8010a70 <HAL_DMA_IRQHandler+0x304>)
 80108ca:	189a      	adds	r2, r3, r2
 80108cc:	4250      	negs	r0, r2
 80108ce:	4142      	adcs	r2, r0
 80108d0:	4252      	negs	r2, r2
 80108d2:	486a      	ldr	r0, [pc, #424]	; (8010a7c <HAL_DMA_IRQHandler+0x310>)
 80108d4:	4002      	ands	r2, r0
 80108d6:	2080      	movs	r0, #128	; 0x80
 80108d8:	02c0      	lsls	r0, r0, #11
 80108da:	4684      	mov	ip, r0
 80108dc:	4462      	add	r2, ip
 80108de:	e169      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108e0:	2280      	movs	r2, #128	; 0x80
 80108e2:	e7c4      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 80108e4:	2280      	movs	r2, #128	; 0x80
 80108e6:	0112      	lsls	r2, r2, #4
 80108e8:	e7c1      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 80108ea:	2280      	movs	r2, #128	; 0x80
 80108ec:	0212      	lsls	r2, r2, #8
 80108ee:	e7be      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 80108f0:	2280      	movs	r2, #128	; 0x80
 80108f2:	0312      	lsls	r2, r2, #12
 80108f4:	e7bb      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 80108f6:	2280      	movs	r2, #128	; 0x80
 80108f8:	0412      	lsls	r2, r2, #16
 80108fa:	e7b8      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 80108fc:	2280      	movs	r2, #128	; 0x80
 80108fe:	0512      	lsls	r2, r2, #20
 8010900:	e7b5      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 8010902:	2208      	movs	r2, #8
 8010904:	e7b3      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 8010906:	2280      	movs	r2, #128	; 0x80
 8010908:	e7b1      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
 801090a:	2280      	movs	r2, #128	; 0x80
 801090c:	0112      	lsls	r2, r2, #4
 801090e:	e7ae      	b.n	801086e <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	2108      	movs	r1, #8
 8010914:	438a      	bics	r2, r1
 8010916:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010918:	6823      	ldr	r3, [r4, #0]
 801091a:	4a4a      	ldr	r2, [pc, #296]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d800      	bhi.n	8010922 <HAL_DMA_IRQHandler+0x1b6>
 8010920:	e0ae      	b.n	8010a80 <HAL_DMA_IRQHandler+0x314>
 8010922:	4a4a      	ldr	r2, [pc, #296]	; (8010a4c <HAL_DMA_IRQHandler+0x2e0>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d027      	beq.n	8010978 <HAL_DMA_IRQHandler+0x20c>
 8010928:	4a49      	ldr	r2, [pc, #292]	; (8010a50 <HAL_DMA_IRQHandler+0x2e4>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d071      	beq.n	8010a12 <HAL_DMA_IRQHandler+0x2a6>
 801092e:	4a49      	ldr	r2, [pc, #292]	; (8010a54 <HAL_DMA_IRQHandler+0x2e8>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d070      	beq.n	8010a16 <HAL_DMA_IRQHandler+0x2aa>
 8010934:	4a48      	ldr	r2, [pc, #288]	; (8010a58 <HAL_DMA_IRQHandler+0x2ec>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d070      	beq.n	8010a1c <HAL_DMA_IRQHandler+0x2b0>
 801093a:	4a48      	ldr	r2, [pc, #288]	; (8010a5c <HAL_DMA_IRQHandler+0x2f0>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d070      	beq.n	8010a22 <HAL_DMA_IRQHandler+0x2b6>
 8010940:	4a47      	ldr	r2, [pc, #284]	; (8010a60 <HAL_DMA_IRQHandler+0x2f4>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d070      	beq.n	8010a28 <HAL_DMA_IRQHandler+0x2bc>
 8010946:	4a3f      	ldr	r2, [pc, #252]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d070      	beq.n	8010a2e <HAL_DMA_IRQHandler+0x2c2>
 801094c:	4a45      	ldr	r2, [pc, #276]	; (8010a64 <HAL_DMA_IRQHandler+0x2f8>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d070      	beq.n	8010a34 <HAL_DMA_IRQHandler+0x2c8>
 8010952:	4a45      	ldr	r2, [pc, #276]	; (8010a68 <HAL_DMA_IRQHandler+0x2fc>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d06f      	beq.n	8010a38 <HAL_DMA_IRQHandler+0x2cc>
 8010958:	4a44      	ldr	r2, [pc, #272]	; (8010a6c <HAL_DMA_IRQHandler+0x300>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d06e      	beq.n	8010a3c <HAL_DMA_IRQHandler+0x2d0>
 801095e:	4a44      	ldr	r2, [pc, #272]	; (8010a70 <HAL_DMA_IRQHandler+0x304>)
 8010960:	4694      	mov	ip, r2
 8010962:	4463      	add	r3, ip
 8010964:	425a      	negs	r2, r3
 8010966:	4153      	adcs	r3, r2
 8010968:	425b      	negs	r3, r3
 801096a:	4a42      	ldr	r2, [pc, #264]	; (8010a74 <HAL_DMA_IRQHandler+0x308>)
 801096c:	4013      	ands	r3, r2
 801096e:	2280      	movs	r2, #128	; 0x80
 8010970:	0312      	lsls	r2, r2, #12
 8010972:	4694      	mov	ip, r2
 8010974:	4463      	add	r3, ip
 8010976:	e000      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010978:	2308      	movs	r3, #8
 801097a:	4a33      	ldr	r2, [pc, #204]	; (8010a48 <HAL_DMA_IRQHandler+0x2dc>)
 801097c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801097e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010980:	2201      	movs	r2, #1
 8010982:	4313      	orrs	r3, r2
 8010984:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010986:	2321      	movs	r3, #33	; 0x21
 8010988:	3203      	adds	r2, #3
 801098a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 801098c:	3b01      	subs	r3, #1
 801098e:	2200      	movs	r2, #0
 8010990:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010992:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010994:	2b00      	cmp	r3, #0
 8010996:	d001      	beq.n	801099c <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8010998:	0020      	movs	r0, r4
 801099a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801099c:	6823      	ldr	r3, [r4, #0]
 801099e:	4a29      	ldr	r2, [pc, #164]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d800      	bhi.n	80109a6 <HAL_DMA_IRQHandler+0x23a>
 80109a4:	e766      	b.n	8010874 <HAL_DMA_IRQHandler+0x108>
 80109a6:	4a28      	ldr	r2, [pc, #160]	; (8010a48 <HAL_DMA_IRQHandler+0x2dc>)
 80109a8:	6811      	ldr	r1, [r2, #0]
 80109aa:	4a28      	ldr	r2, [pc, #160]	; (8010a4c <HAL_DMA_IRQHandler+0x2e0>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d100      	bne.n	80109b2 <HAL_DMA_IRQHandler+0x246>
 80109b0:	e0ad      	b.n	8010b0e <HAL_DMA_IRQHandler+0x3a2>
 80109b2:	4a27      	ldr	r2, [pc, #156]	; (8010a50 <HAL_DMA_IRQHandler+0x2e4>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d100      	bne.n	80109ba <HAL_DMA_IRQHandler+0x24e>
 80109b8:	e0e3      	b.n	8010b82 <HAL_DMA_IRQHandler+0x416>
 80109ba:	4a26      	ldr	r2, [pc, #152]	; (8010a54 <HAL_DMA_IRQHandler+0x2e8>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d100      	bne.n	80109c2 <HAL_DMA_IRQHandler+0x256>
 80109c0:	e0e1      	b.n	8010b86 <HAL_DMA_IRQHandler+0x41a>
 80109c2:	4a25      	ldr	r2, [pc, #148]	; (8010a58 <HAL_DMA_IRQHandler+0x2ec>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d100      	bne.n	80109ca <HAL_DMA_IRQHandler+0x25e>
 80109c8:	e0e0      	b.n	8010b8c <HAL_DMA_IRQHandler+0x420>
 80109ca:	4a24      	ldr	r2, [pc, #144]	; (8010a5c <HAL_DMA_IRQHandler+0x2f0>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d100      	bne.n	80109d2 <HAL_DMA_IRQHandler+0x266>
 80109d0:	e0df      	b.n	8010b92 <HAL_DMA_IRQHandler+0x426>
 80109d2:	4a23      	ldr	r2, [pc, #140]	; (8010a60 <HAL_DMA_IRQHandler+0x2f4>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d100      	bne.n	80109da <HAL_DMA_IRQHandler+0x26e>
 80109d8:	e0de      	b.n	8010b98 <HAL_DMA_IRQHandler+0x42c>
 80109da:	4a1a      	ldr	r2, [pc, #104]	; (8010a44 <HAL_DMA_IRQHandler+0x2d8>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d100      	bne.n	80109e2 <HAL_DMA_IRQHandler+0x276>
 80109e0:	e0dd      	b.n	8010b9e <HAL_DMA_IRQHandler+0x432>
 80109e2:	4a20      	ldr	r2, [pc, #128]	; (8010a64 <HAL_DMA_IRQHandler+0x2f8>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d100      	bne.n	80109ea <HAL_DMA_IRQHandler+0x27e>
 80109e8:	e0dc      	b.n	8010ba4 <HAL_DMA_IRQHandler+0x438>
 80109ea:	4a1f      	ldr	r2, [pc, #124]	; (8010a68 <HAL_DMA_IRQHandler+0x2fc>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d100      	bne.n	80109f2 <HAL_DMA_IRQHandler+0x286>
 80109f0:	e0da      	b.n	8010ba8 <HAL_DMA_IRQHandler+0x43c>
 80109f2:	4a1e      	ldr	r2, [pc, #120]	; (8010a6c <HAL_DMA_IRQHandler+0x300>)
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d100      	bne.n	80109fa <HAL_DMA_IRQHandler+0x28e>
 80109f8:	e0d8      	b.n	8010bac <HAL_DMA_IRQHandler+0x440>
 80109fa:	4a1d      	ldr	r2, [pc, #116]	; (8010a70 <HAL_DMA_IRQHandler+0x304>)
 80109fc:	189a      	adds	r2, r3, r2
 80109fe:	4250      	negs	r0, r2
 8010a00:	4142      	adcs	r2, r0
 8010a02:	4252      	negs	r2, r2
 8010a04:	481d      	ldr	r0, [pc, #116]	; (8010a7c <HAL_DMA_IRQHandler+0x310>)
 8010a06:	4002      	ands	r2, r0
 8010a08:	2080      	movs	r0, #128	; 0x80
 8010a0a:	02c0      	lsls	r0, r0, #11
 8010a0c:	4684      	mov	ip, r0
 8010a0e:	4462      	add	r2, ip
 8010a10:	e07e      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a12:	2380      	movs	r3, #128	; 0x80
 8010a14:	e7b1      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a16:	2380      	movs	r3, #128	; 0x80
 8010a18:	011b      	lsls	r3, r3, #4
 8010a1a:	e7ae      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a1c:	2380      	movs	r3, #128	; 0x80
 8010a1e:	021b      	lsls	r3, r3, #8
 8010a20:	e7ab      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a22:	2380      	movs	r3, #128	; 0x80
 8010a24:	031b      	lsls	r3, r3, #12
 8010a26:	e7a8      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a28:	2380      	movs	r3, #128	; 0x80
 8010a2a:	041b      	lsls	r3, r3, #16
 8010a2c:	e7a5      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a2e:	2380      	movs	r3, #128	; 0x80
 8010a30:	051b      	lsls	r3, r3, #20
 8010a32:	e7a2      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a34:	2308      	movs	r3, #8
 8010a36:	e7a0      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a38:	2380      	movs	r3, #128	; 0x80
 8010a3a:	e79e      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a3c:	2380      	movs	r3, #128	; 0x80
 8010a3e:	011b      	lsls	r3, r3, #4
 8010a40:	e79b      	b.n	801097a <HAL_DMA_IRQHandler+0x20e>
 8010a42:	46c0      	nop			; (mov r8, r8)
 8010a44:	40020080 	.word	0x40020080
 8010a48:	40020400 	.word	0x40020400
 8010a4c:	40020008 	.word	0x40020008
 8010a50:	4002001c 	.word	0x4002001c
 8010a54:	40020030 	.word	0x40020030
 8010a58:	40020044 	.word	0x40020044
 8010a5c:	40020058 	.word	0x40020058
 8010a60:	4002006c 	.word	0x4002006c
 8010a64:	40020408 	.word	0x40020408
 8010a68:	4002041c 	.word	0x4002041c
 8010a6c:	40020430 	.word	0x40020430
 8010a70:	bffdfbbc 	.word	0xbffdfbbc
 8010a74:	fff88000 	.word	0xfff88000
 8010a78:	40020000 	.word	0x40020000
 8010a7c:	fffc4000 	.word	0xfffc4000
 8010a80:	4aaa      	ldr	r2, [pc, #680]	; (8010d2c <HAL_DMA_IRQHandler+0x5c0>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d027      	beq.n	8010ad6 <HAL_DMA_IRQHandler+0x36a>
 8010a86:	4aaa      	ldr	r2, [pc, #680]	; (8010d30 <HAL_DMA_IRQHandler+0x5c4>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d028      	beq.n	8010ade <HAL_DMA_IRQHandler+0x372>
 8010a8c:	4aa9      	ldr	r2, [pc, #676]	; (8010d34 <HAL_DMA_IRQHandler+0x5c8>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d027      	beq.n	8010ae2 <HAL_DMA_IRQHandler+0x376>
 8010a92:	4aa9      	ldr	r2, [pc, #676]	; (8010d38 <HAL_DMA_IRQHandler+0x5cc>)
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d027      	beq.n	8010ae8 <HAL_DMA_IRQHandler+0x37c>
 8010a98:	4aa8      	ldr	r2, [pc, #672]	; (8010d3c <HAL_DMA_IRQHandler+0x5d0>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d027      	beq.n	8010aee <HAL_DMA_IRQHandler+0x382>
 8010a9e:	4aa8      	ldr	r2, [pc, #672]	; (8010d40 <HAL_DMA_IRQHandler+0x5d4>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d027      	beq.n	8010af4 <HAL_DMA_IRQHandler+0x388>
 8010aa4:	4aa7      	ldr	r2, [pc, #668]	; (8010d44 <HAL_DMA_IRQHandler+0x5d8>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d027      	beq.n	8010afa <HAL_DMA_IRQHandler+0x38e>
 8010aaa:	4aa7      	ldr	r2, [pc, #668]	; (8010d48 <HAL_DMA_IRQHandler+0x5dc>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d027      	beq.n	8010b00 <HAL_DMA_IRQHandler+0x394>
 8010ab0:	4aa6      	ldr	r2, [pc, #664]	; (8010d4c <HAL_DMA_IRQHandler+0x5e0>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d026      	beq.n	8010b04 <HAL_DMA_IRQHandler+0x398>
 8010ab6:	4aa6      	ldr	r2, [pc, #664]	; (8010d50 <HAL_DMA_IRQHandler+0x5e4>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d025      	beq.n	8010b08 <HAL_DMA_IRQHandler+0x39c>
 8010abc:	4aa5      	ldr	r2, [pc, #660]	; (8010d54 <HAL_DMA_IRQHandler+0x5e8>)
 8010abe:	4694      	mov	ip, r2
 8010ac0:	4463      	add	r3, ip
 8010ac2:	425a      	negs	r2, r3
 8010ac4:	4153      	adcs	r3, r2
 8010ac6:	425b      	negs	r3, r3
 8010ac8:	4aa3      	ldr	r2, [pc, #652]	; (8010d58 <HAL_DMA_IRQHandler+0x5ec>)
 8010aca:	4013      	ands	r3, r2
 8010acc:	2280      	movs	r2, #128	; 0x80
 8010ace:	0312      	lsls	r2, r2, #12
 8010ad0:	4694      	mov	ip, r2
 8010ad2:	4463      	add	r3, ip
 8010ad4:	e000      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010ad6:	2308      	movs	r3, #8
 8010ad8:	4aa0      	ldr	r2, [pc, #640]	; (8010d5c <HAL_DMA_IRQHandler+0x5f0>)
 8010ada:	6053      	str	r3, [r2, #4]
 8010adc:	e74f      	b.n	801097e <HAL_DMA_IRQHandler+0x212>
 8010ade:	2380      	movs	r3, #128	; 0x80
 8010ae0:	e7fa      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010ae2:	2380      	movs	r3, #128	; 0x80
 8010ae4:	011b      	lsls	r3, r3, #4
 8010ae6:	e7f7      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010ae8:	2380      	movs	r3, #128	; 0x80
 8010aea:	021b      	lsls	r3, r3, #8
 8010aec:	e7f4      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010aee:	2380      	movs	r3, #128	; 0x80
 8010af0:	031b      	lsls	r3, r3, #12
 8010af2:	e7f1      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010af4:	2380      	movs	r3, #128	; 0x80
 8010af6:	041b      	lsls	r3, r3, #16
 8010af8:	e7ee      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010afa:	2380      	movs	r3, #128	; 0x80
 8010afc:	051b      	lsls	r3, r3, #20
 8010afe:	e7eb      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010b00:	2308      	movs	r3, #8
 8010b02:	e7e9      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010b04:	2380      	movs	r3, #128	; 0x80
 8010b06:	e7e7      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
 8010b08:	2380      	movs	r3, #128	; 0x80
 8010b0a:	011b      	lsls	r3, r3, #4
 8010b0c:	e7e4      	b.n	8010ad8 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b0e:	2204      	movs	r2, #4
 8010b10:	420a      	tst	r2, r1
 8010b12:	d152      	bne.n	8010bba <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010b14:	6821      	ldr	r1, [r4, #0]
 8010b16:	4b92      	ldr	r3, [pc, #584]	; (8010d60 <HAL_DMA_IRQHandler+0x5f4>)
 8010b18:	6818      	ldr	r0, [r3, #0]
 8010b1a:	4a84      	ldr	r2, [pc, #528]	; (8010d2c <HAL_DMA_IRQHandler+0x5c0>)
 8010b1c:	4291      	cmp	r1, r2
 8010b1e:	d100      	bne.n	8010b22 <HAL_DMA_IRQHandler+0x3b6>
 8010b20:	e16b      	b.n	8010dfa <HAL_DMA_IRQHandler+0x68e>
 8010b22:	4a83      	ldr	r2, [pc, #524]	; (8010d30 <HAL_DMA_IRQHandler+0x5c4>)
 8010b24:	4291      	cmp	r1, r2
 8010b26:	d100      	bne.n	8010b2a <HAL_DMA_IRQHandler+0x3be>
 8010b28:	e1aa      	b.n	8010e80 <HAL_DMA_IRQHandler+0x714>
 8010b2a:	4a82      	ldr	r2, [pc, #520]	; (8010d34 <HAL_DMA_IRQHandler+0x5c8>)
 8010b2c:	4291      	cmp	r1, r2
 8010b2e:	d100      	bne.n	8010b32 <HAL_DMA_IRQHandler+0x3c6>
 8010b30:	e1a8      	b.n	8010e84 <HAL_DMA_IRQHandler+0x718>
 8010b32:	4a81      	ldr	r2, [pc, #516]	; (8010d38 <HAL_DMA_IRQHandler+0x5cc>)
 8010b34:	4291      	cmp	r1, r2
 8010b36:	d100      	bne.n	8010b3a <HAL_DMA_IRQHandler+0x3ce>
 8010b38:	e1a7      	b.n	8010e8a <HAL_DMA_IRQHandler+0x71e>
 8010b3a:	4b80      	ldr	r3, [pc, #512]	; (8010d3c <HAL_DMA_IRQHandler+0x5d0>)
 8010b3c:	4299      	cmp	r1, r3
 8010b3e:	d100      	bne.n	8010b42 <HAL_DMA_IRQHandler+0x3d6>
 8010b40:	e1a6      	b.n	8010e90 <HAL_DMA_IRQHandler+0x724>
 8010b42:	4b7f      	ldr	r3, [pc, #508]	; (8010d40 <HAL_DMA_IRQHandler+0x5d4>)
 8010b44:	4299      	cmp	r1, r3
 8010b46:	d100      	bne.n	8010b4a <HAL_DMA_IRQHandler+0x3de>
 8010b48:	e1a5      	b.n	8010e96 <HAL_DMA_IRQHandler+0x72a>
 8010b4a:	4b7e      	ldr	r3, [pc, #504]	; (8010d44 <HAL_DMA_IRQHandler+0x5d8>)
 8010b4c:	4299      	cmp	r1, r3
 8010b4e:	d100      	bne.n	8010b52 <HAL_DMA_IRQHandler+0x3e6>
 8010b50:	e1a4      	b.n	8010e9c <HAL_DMA_IRQHandler+0x730>
 8010b52:	4b7d      	ldr	r3, [pc, #500]	; (8010d48 <HAL_DMA_IRQHandler+0x5dc>)
 8010b54:	4299      	cmp	r1, r3
 8010b56:	d100      	bne.n	8010b5a <HAL_DMA_IRQHandler+0x3ee>
 8010b58:	e1a3      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x736>
 8010b5a:	4b7c      	ldr	r3, [pc, #496]	; (8010d4c <HAL_DMA_IRQHandler+0x5e0>)
 8010b5c:	4299      	cmp	r1, r3
 8010b5e:	d100      	bne.n	8010b62 <HAL_DMA_IRQHandler+0x3f6>
 8010b60:	e1a1      	b.n	8010ea6 <HAL_DMA_IRQHandler+0x73a>
 8010b62:	4b7b      	ldr	r3, [pc, #492]	; (8010d50 <HAL_DMA_IRQHandler+0x5e4>)
 8010b64:	4299      	cmp	r1, r3
 8010b66:	d100      	bne.n	8010b6a <HAL_DMA_IRQHandler+0x3fe>
 8010b68:	e19f      	b.n	8010eaa <HAL_DMA_IRQHandler+0x73e>
 8010b6a:	4b7a      	ldr	r3, [pc, #488]	; (8010d54 <HAL_DMA_IRQHandler+0x5e8>)
 8010b6c:	18ca      	adds	r2, r1, r3
 8010b6e:	4253      	negs	r3, r2
 8010b70:	415a      	adcs	r2, r3
 8010b72:	4252      	negs	r2, r2
 8010b74:	4b7b      	ldr	r3, [pc, #492]	; (8010d64 <HAL_DMA_IRQHandler+0x5f8>)
 8010b76:	4013      	ands	r3, r2
 8010b78:	2280      	movs	r2, #128	; 0x80
 8010b7a:	0292      	lsls	r2, r2, #10
 8010b7c:	4694      	mov	ip, r2
 8010b7e:	4463      	add	r3, ip
 8010b80:	e13c      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b82:	2240      	movs	r2, #64	; 0x40
 8010b84:	e7c4      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010b86:	2280      	movs	r2, #128	; 0x80
 8010b88:	00d2      	lsls	r2, r2, #3
 8010b8a:	e7c1      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010b8c:	2280      	movs	r2, #128	; 0x80
 8010b8e:	01d2      	lsls	r2, r2, #7
 8010b90:	e7be      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010b92:	2280      	movs	r2, #128	; 0x80
 8010b94:	02d2      	lsls	r2, r2, #11
 8010b96:	e7bb      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010b98:	2280      	movs	r2, #128	; 0x80
 8010b9a:	03d2      	lsls	r2, r2, #15
 8010b9c:	e7b8      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010b9e:	2280      	movs	r2, #128	; 0x80
 8010ba0:	04d2      	lsls	r2, r2, #19
 8010ba2:	e7b5      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010ba4:	2204      	movs	r2, #4
 8010ba6:	e7b3      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010ba8:	2240      	movs	r2, #64	; 0x40
 8010baa:	e7b1      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010bac:	2280      	movs	r2, #128	; 0x80
 8010bae:	00d2      	lsls	r2, r2, #3
 8010bb0:	e7ae      	b.n	8010b10 <HAL_DMA_IRQHandler+0x3a4>
 8010bb2:	2204      	movs	r2, #4
 8010bb4:	420a      	tst	r2, r1
 8010bb6:	d100      	bne.n	8010bba <HAL_DMA_IRQHandler+0x44e>
 8010bb8:	e208      	b.n	8010fcc <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	0752      	lsls	r2, r2, #29
 8010bbe:	d561      	bpl.n	8010c84 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	0692      	lsls	r2, r2, #26
 8010bc4:	d403      	bmi.n	8010bce <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	2104      	movs	r1, #4
 8010bca:	438a      	bics	r2, r1
 8010bcc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	4a5c      	ldr	r2, [pc, #368]	; (8010d44 <HAL_DMA_IRQHandler+0x5d8>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d800      	bhi.n	8010bd8 <HAL_DMA_IRQHandler+0x46c>
 8010bd6:	e0c9      	b.n	8010d6c <HAL_DMA_IRQHandler+0x600>
 8010bd8:	4a54      	ldr	r2, [pc, #336]	; (8010d2c <HAL_DMA_IRQHandler+0x5c0>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d047      	beq.n	8010c6e <HAL_DMA_IRQHandler+0x502>
 8010bde:	4a54      	ldr	r2, [pc, #336]	; (8010d30 <HAL_DMA_IRQHandler+0x5c4>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d100      	bne.n	8010be6 <HAL_DMA_IRQHandler+0x47a>
 8010be4:	e089      	b.n	8010cfa <HAL_DMA_IRQHandler+0x58e>
 8010be6:	4a53      	ldr	r2, [pc, #332]	; (8010d34 <HAL_DMA_IRQHandler+0x5c8>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d100      	bne.n	8010bee <HAL_DMA_IRQHandler+0x482>
 8010bec:	e087      	b.n	8010cfe <HAL_DMA_IRQHandler+0x592>
 8010bee:	4a52      	ldr	r2, [pc, #328]	; (8010d38 <HAL_DMA_IRQHandler+0x5cc>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d100      	bne.n	8010bf6 <HAL_DMA_IRQHandler+0x48a>
 8010bf4:	e086      	b.n	8010d04 <HAL_DMA_IRQHandler+0x598>
 8010bf6:	4a51      	ldr	r2, [pc, #324]	; (8010d3c <HAL_DMA_IRQHandler+0x5d0>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d100      	bne.n	8010bfe <HAL_DMA_IRQHandler+0x492>
 8010bfc:	e085      	b.n	8010d0a <HAL_DMA_IRQHandler+0x59e>
 8010bfe:	4a50      	ldr	r2, [pc, #320]	; (8010d40 <HAL_DMA_IRQHandler+0x5d4>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d100      	bne.n	8010c06 <HAL_DMA_IRQHandler+0x49a>
 8010c04:	e084      	b.n	8010d10 <HAL_DMA_IRQHandler+0x5a4>
 8010c06:	4a4f      	ldr	r2, [pc, #316]	; (8010d44 <HAL_DMA_IRQHandler+0x5d8>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d100      	bne.n	8010c0e <HAL_DMA_IRQHandler+0x4a2>
 8010c0c:	e083      	b.n	8010d16 <HAL_DMA_IRQHandler+0x5aa>
 8010c0e:	4a4e      	ldr	r2, [pc, #312]	; (8010d48 <HAL_DMA_IRQHandler+0x5dc>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d100      	bne.n	8010c16 <HAL_DMA_IRQHandler+0x4aa>
 8010c14:	e082      	b.n	8010d1c <HAL_DMA_IRQHandler+0x5b0>
 8010c16:	4a4d      	ldr	r2, [pc, #308]	; (8010d4c <HAL_DMA_IRQHandler+0x5e0>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d100      	bne.n	8010c1e <HAL_DMA_IRQHandler+0x4b2>
 8010c1c:	e080      	b.n	8010d20 <HAL_DMA_IRQHandler+0x5b4>
 8010c1e:	4a4c      	ldr	r2, [pc, #304]	; (8010d50 <HAL_DMA_IRQHandler+0x5e4>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d07f      	beq.n	8010d24 <HAL_DMA_IRQHandler+0x5b8>
 8010c24:	4a4b      	ldr	r2, [pc, #300]	; (8010d54 <HAL_DMA_IRQHandler+0x5e8>)
 8010c26:	4694      	mov	ip, r2
 8010c28:	4463      	add	r3, ip
 8010c2a:	425a      	negs	r2, r3
 8010c2c:	4153      	adcs	r3, r2
 8010c2e:	425b      	negs	r3, r3
 8010c30:	4a4d      	ldr	r2, [pc, #308]	; (8010d68 <HAL_DMA_IRQHandler+0x5fc>)
 8010c32:	4013      	ands	r3, r2
 8010c34:	2280      	movs	r2, #128	; 0x80
 8010c36:	02d2      	lsls	r2, r2, #11
 8010c38:	4694      	mov	ip, r2
 8010c3a:	4463      	add	r3, ip
 8010c3c:	e018      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c3e:	2240      	movs	r2, #64	; 0x40
 8010c40:	e7b8      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c42:	2280      	movs	r2, #128	; 0x80
 8010c44:	00d2      	lsls	r2, r2, #3
 8010c46:	e7b5      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c48:	2280      	movs	r2, #128	; 0x80
 8010c4a:	01d2      	lsls	r2, r2, #7
 8010c4c:	e7b2      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c4e:	2280      	movs	r2, #128	; 0x80
 8010c50:	02d2      	lsls	r2, r2, #11
 8010c52:	e7af      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c54:	2280      	movs	r2, #128	; 0x80
 8010c56:	03d2      	lsls	r2, r2, #15
 8010c58:	e7ac      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c5a:	2280      	movs	r2, #128	; 0x80
 8010c5c:	04d2      	lsls	r2, r2, #19
 8010c5e:	e7a9      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c60:	2204      	movs	r2, #4
 8010c62:	e7a7      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c64:	2240      	movs	r2, #64	; 0x40
 8010c66:	e7a5      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
 8010c68:	2280      	movs	r2, #128	; 0x80
 8010c6a:	00d2      	lsls	r2, r2, #3
 8010c6c:	e7a2      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010c6e:	2304      	movs	r3, #4
 8010c70:	4a3b      	ldr	r2, [pc, #236]	; (8010d60 <HAL_DMA_IRQHandler+0x5f4>)
 8010c72:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010c74:	2321      	movs	r3, #33	; 0x21
 8010c76:	2211      	movs	r2, #17
 8010c78:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d001      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8010c80:	0020      	movs	r0, r4
 8010c82:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010c84:	6821      	ldr	r1, [r4, #0]
 8010c86:	4b2f      	ldr	r3, [pc, #188]	; (8010d44 <HAL_DMA_IRQHandler+0x5d8>)
 8010c88:	4299      	cmp	r1, r3
 8010c8a:	d900      	bls.n	8010c8e <HAL_DMA_IRQHandler+0x522>
 8010c8c:	e743      	b.n	8010b16 <HAL_DMA_IRQHandler+0x3aa>
 8010c8e:	4b33      	ldr	r3, [pc, #204]	; (8010d5c <HAL_DMA_IRQHandler+0x5f0>)
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	4a26      	ldr	r2, [pc, #152]	; (8010d2c <HAL_DMA_IRQHandler+0x5c0>)
 8010c94:	4291      	cmp	r1, r2
 8010c96:	d100      	bne.n	8010c9a <HAL_DMA_IRQHandler+0x52e>
 8010c98:	e10a      	b.n	8010eb0 <HAL_DMA_IRQHandler+0x744>
 8010c9a:	4a25      	ldr	r2, [pc, #148]	; (8010d30 <HAL_DMA_IRQHandler+0x5c4>)
 8010c9c:	4291      	cmp	r1, r2
 8010c9e:	d100      	bne.n	8010ca2 <HAL_DMA_IRQHandler+0x536>
 8010ca0:	e10c      	b.n	8010ebc <HAL_DMA_IRQHandler+0x750>
 8010ca2:	4a24      	ldr	r2, [pc, #144]	; (8010d34 <HAL_DMA_IRQHandler+0x5c8>)
 8010ca4:	4291      	cmp	r1, r2
 8010ca6:	d100      	bne.n	8010caa <HAL_DMA_IRQHandler+0x53e>
 8010ca8:	e10a      	b.n	8010ec0 <HAL_DMA_IRQHandler+0x754>
 8010caa:	4a23      	ldr	r2, [pc, #140]	; (8010d38 <HAL_DMA_IRQHandler+0x5cc>)
 8010cac:	4291      	cmp	r1, r2
 8010cae:	d100      	bne.n	8010cb2 <HAL_DMA_IRQHandler+0x546>
 8010cb0:	e109      	b.n	8010ec6 <HAL_DMA_IRQHandler+0x75a>
 8010cb2:	4b22      	ldr	r3, [pc, #136]	; (8010d3c <HAL_DMA_IRQHandler+0x5d0>)
 8010cb4:	4299      	cmp	r1, r3
 8010cb6:	d100      	bne.n	8010cba <HAL_DMA_IRQHandler+0x54e>
 8010cb8:	e108      	b.n	8010ecc <HAL_DMA_IRQHandler+0x760>
 8010cba:	4b21      	ldr	r3, [pc, #132]	; (8010d40 <HAL_DMA_IRQHandler+0x5d4>)
 8010cbc:	4299      	cmp	r1, r3
 8010cbe:	d100      	bne.n	8010cc2 <HAL_DMA_IRQHandler+0x556>
 8010cc0:	e107      	b.n	8010ed2 <HAL_DMA_IRQHandler+0x766>
 8010cc2:	4b20      	ldr	r3, [pc, #128]	; (8010d44 <HAL_DMA_IRQHandler+0x5d8>)
 8010cc4:	4299      	cmp	r1, r3
 8010cc6:	d100      	bne.n	8010cca <HAL_DMA_IRQHandler+0x55e>
 8010cc8:	e106      	b.n	8010ed8 <HAL_DMA_IRQHandler+0x76c>
 8010cca:	4b1f      	ldr	r3, [pc, #124]	; (8010d48 <HAL_DMA_IRQHandler+0x5dc>)
 8010ccc:	4299      	cmp	r1, r3
 8010cce:	d100      	bne.n	8010cd2 <HAL_DMA_IRQHandler+0x566>
 8010cd0:	e105      	b.n	8010ede <HAL_DMA_IRQHandler+0x772>
 8010cd2:	4b1e      	ldr	r3, [pc, #120]	; (8010d4c <HAL_DMA_IRQHandler+0x5e0>)
 8010cd4:	4299      	cmp	r1, r3
 8010cd6:	d100      	bne.n	8010cda <HAL_DMA_IRQHandler+0x56e>
 8010cd8:	e103      	b.n	8010ee2 <HAL_DMA_IRQHandler+0x776>
 8010cda:	4b1d      	ldr	r3, [pc, #116]	; (8010d50 <HAL_DMA_IRQHandler+0x5e4>)
 8010cdc:	4299      	cmp	r1, r3
 8010cde:	d100      	bne.n	8010ce2 <HAL_DMA_IRQHandler+0x576>
 8010ce0:	e101      	b.n	8010ee6 <HAL_DMA_IRQHandler+0x77a>
 8010ce2:	4b1c      	ldr	r3, [pc, #112]	; (8010d54 <HAL_DMA_IRQHandler+0x5e8>)
 8010ce4:	18ca      	adds	r2, r1, r3
 8010ce6:	4253      	negs	r3, r2
 8010ce8:	415a      	adcs	r2, r3
 8010cea:	4252      	negs	r2, r2
 8010cec:	4b1d      	ldr	r3, [pc, #116]	; (8010d64 <HAL_DMA_IRQHandler+0x5f8>)
 8010cee:	4013      	ands	r3, r2
 8010cf0:	2280      	movs	r2, #128	; 0x80
 8010cf2:	0292      	lsls	r2, r2, #10
 8010cf4:	4694      	mov	ip, r2
 8010cf6:	4463      	add	r3, ip
 8010cf8:	e0db      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010cfa:	2340      	movs	r3, #64	; 0x40
 8010cfc:	e7b8      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010cfe:	2380      	movs	r3, #128	; 0x80
 8010d00:	00db      	lsls	r3, r3, #3
 8010d02:	e7b5      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d04:	2380      	movs	r3, #128	; 0x80
 8010d06:	01db      	lsls	r3, r3, #7
 8010d08:	e7b2      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d0a:	2380      	movs	r3, #128	; 0x80
 8010d0c:	02db      	lsls	r3, r3, #11
 8010d0e:	e7af      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d10:	2380      	movs	r3, #128	; 0x80
 8010d12:	03db      	lsls	r3, r3, #15
 8010d14:	e7ac      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d16:	2380      	movs	r3, #128	; 0x80
 8010d18:	04db      	lsls	r3, r3, #19
 8010d1a:	e7a9      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d1c:	2304      	movs	r3, #4
 8010d1e:	e7a7      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d20:	2340      	movs	r3, #64	; 0x40
 8010d22:	e7a5      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d24:	2380      	movs	r3, #128	; 0x80
 8010d26:	00db      	lsls	r3, r3, #3
 8010d28:	e7a2      	b.n	8010c70 <HAL_DMA_IRQHandler+0x504>
 8010d2a:	46c0      	nop			; (mov r8, r8)
 8010d2c:	40020008 	.word	0x40020008
 8010d30:	4002001c 	.word	0x4002001c
 8010d34:	40020030 	.word	0x40020030
 8010d38:	40020044 	.word	0x40020044
 8010d3c:	40020058 	.word	0x40020058
 8010d40:	4002006c 	.word	0x4002006c
 8010d44:	40020080 	.word	0x40020080
 8010d48:	40020408 	.word	0x40020408
 8010d4c:	4002041c 	.word	0x4002041c
 8010d50:	40020430 	.word	0x40020430
 8010d54:	bffdfbbc 	.word	0xbffdfbbc
 8010d58:	fff88000 	.word	0xfff88000
 8010d5c:	40020000 	.word	0x40020000
 8010d60:	40020400 	.word	0x40020400
 8010d64:	fffe2000 	.word	0xfffe2000
 8010d68:	fffc4000 	.word	0xfffc4000
 8010d6c:	4a9b      	ldr	r2, [pc, #620]	; (8010fdc <HAL_DMA_IRQHandler+0x870>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d027      	beq.n	8010dc2 <HAL_DMA_IRQHandler+0x656>
 8010d72:	4a9b      	ldr	r2, [pc, #620]	; (8010fe0 <HAL_DMA_IRQHandler+0x874>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d028      	beq.n	8010dca <HAL_DMA_IRQHandler+0x65e>
 8010d78:	4a9a      	ldr	r2, [pc, #616]	; (8010fe4 <HAL_DMA_IRQHandler+0x878>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d027      	beq.n	8010dce <HAL_DMA_IRQHandler+0x662>
 8010d7e:	4a9a      	ldr	r2, [pc, #616]	; (8010fe8 <HAL_DMA_IRQHandler+0x87c>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d027      	beq.n	8010dd4 <HAL_DMA_IRQHandler+0x668>
 8010d84:	4a99      	ldr	r2, [pc, #612]	; (8010fec <HAL_DMA_IRQHandler+0x880>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d027      	beq.n	8010dda <HAL_DMA_IRQHandler+0x66e>
 8010d8a:	4a99      	ldr	r2, [pc, #612]	; (8010ff0 <HAL_DMA_IRQHandler+0x884>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d027      	beq.n	8010de0 <HAL_DMA_IRQHandler+0x674>
 8010d90:	4a98      	ldr	r2, [pc, #608]	; (8010ff4 <HAL_DMA_IRQHandler+0x888>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d027      	beq.n	8010de6 <HAL_DMA_IRQHandler+0x67a>
 8010d96:	4a98      	ldr	r2, [pc, #608]	; (8010ff8 <HAL_DMA_IRQHandler+0x88c>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d027      	beq.n	8010dec <HAL_DMA_IRQHandler+0x680>
 8010d9c:	4a97      	ldr	r2, [pc, #604]	; (8010ffc <HAL_DMA_IRQHandler+0x890>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d026      	beq.n	8010df0 <HAL_DMA_IRQHandler+0x684>
 8010da2:	4a97      	ldr	r2, [pc, #604]	; (8011000 <HAL_DMA_IRQHandler+0x894>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d025      	beq.n	8010df4 <HAL_DMA_IRQHandler+0x688>
 8010da8:	4a96      	ldr	r2, [pc, #600]	; (8011004 <HAL_DMA_IRQHandler+0x898>)
 8010daa:	4694      	mov	ip, r2
 8010dac:	4463      	add	r3, ip
 8010dae:	425a      	negs	r2, r3
 8010db0:	4153      	adcs	r3, r2
 8010db2:	425b      	negs	r3, r3
 8010db4:	4a94      	ldr	r2, [pc, #592]	; (8011008 <HAL_DMA_IRQHandler+0x89c>)
 8010db6:	4013      	ands	r3, r2
 8010db8:	2280      	movs	r2, #128	; 0x80
 8010dba:	02d2      	lsls	r2, r2, #11
 8010dbc:	4694      	mov	ip, r2
 8010dbe:	4463      	add	r3, ip
 8010dc0:	e000      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010dc2:	2304      	movs	r3, #4
 8010dc4:	4a91      	ldr	r2, [pc, #580]	; (801100c <HAL_DMA_IRQHandler+0x8a0>)
 8010dc6:	6053      	str	r3, [r2, #4]
 8010dc8:	e754      	b.n	8010c74 <HAL_DMA_IRQHandler+0x508>
 8010dca:	2340      	movs	r3, #64	; 0x40
 8010dcc:	e7fa      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010dce:	2380      	movs	r3, #128	; 0x80
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	e7f7      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010dd4:	2380      	movs	r3, #128	; 0x80
 8010dd6:	01db      	lsls	r3, r3, #7
 8010dd8:	e7f4      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010dda:	2380      	movs	r3, #128	; 0x80
 8010ddc:	02db      	lsls	r3, r3, #11
 8010dde:	e7f1      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010de0:	2380      	movs	r3, #128	; 0x80
 8010de2:	03db      	lsls	r3, r3, #15
 8010de4:	e7ee      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010de6:	2380      	movs	r3, #128	; 0x80
 8010de8:	04db      	lsls	r3, r3, #19
 8010dea:	e7eb      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010dec:	2304      	movs	r3, #4
 8010dee:	e7e9      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010df0:	2340      	movs	r3, #64	; 0x40
 8010df2:	e7e7      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
 8010df4:	2380      	movs	r3, #128	; 0x80
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	e7e4      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010dfa:	2302      	movs	r3, #2
 8010dfc:	4003      	ands	r3, r0
 8010dfe:	1e5a      	subs	r2, r3, #1
 8010e00:	4193      	sbcs	r3, r2
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d100      	bne.n	8010e0a <HAL_DMA_IRQHandler+0x69e>
 8010e08:	e080      	b.n	8010f0c <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010e0a:	680b      	ldr	r3, [r1, #0]
 8010e0c:	079b      	lsls	r3, r3, #30
 8010e0e:	d57d      	bpl.n	8010f0c <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010e10:	680b      	ldr	r3, [r1, #0]
 8010e12:	069b      	lsls	r3, r3, #26
 8010e14:	d403      	bmi.n	8010e1e <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010e16:	680b      	ldr	r3, [r1, #0]
 8010e18:	2202      	movs	r2, #2
 8010e1a:	4393      	bics	r3, r2
 8010e1c:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	4a74      	ldr	r2, [pc, #464]	; (8010ff4 <HAL_DMA_IRQHandler+0x888>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d800      	bhi.n	8010e28 <HAL_DMA_IRQHandler+0x6bc>
 8010e26:	e08a      	b.n	8010f3e <HAL_DMA_IRQHandler+0x7d2>
 8010e28:	4a6c      	ldr	r2, [pc, #432]	; (8010fdc <HAL_DMA_IRQHandler+0x870>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d05e      	beq.n	8010eec <HAL_DMA_IRQHandler+0x780>
 8010e2e:	4a6c      	ldr	r2, [pc, #432]	; (8010fe0 <HAL_DMA_IRQHandler+0x874>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d100      	bne.n	8010e36 <HAL_DMA_IRQHandler+0x6ca>
 8010e34:	e06b      	b.n	8010f0e <HAL_DMA_IRQHandler+0x7a2>
 8010e36:	4a6b      	ldr	r2, [pc, #428]	; (8010fe4 <HAL_DMA_IRQHandler+0x878>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d06a      	beq.n	8010f12 <HAL_DMA_IRQHandler+0x7a6>
 8010e3c:	4a6a      	ldr	r2, [pc, #424]	; (8010fe8 <HAL_DMA_IRQHandler+0x87c>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d06a      	beq.n	8010f18 <HAL_DMA_IRQHandler+0x7ac>
 8010e42:	4a6a      	ldr	r2, [pc, #424]	; (8010fec <HAL_DMA_IRQHandler+0x880>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d06a      	beq.n	8010f1e <HAL_DMA_IRQHandler+0x7b2>
 8010e48:	4a69      	ldr	r2, [pc, #420]	; (8010ff0 <HAL_DMA_IRQHandler+0x884>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d06a      	beq.n	8010f24 <HAL_DMA_IRQHandler+0x7b8>
 8010e4e:	4a69      	ldr	r2, [pc, #420]	; (8010ff4 <HAL_DMA_IRQHandler+0x888>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d06a      	beq.n	8010f2a <HAL_DMA_IRQHandler+0x7be>
 8010e54:	4a68      	ldr	r2, [pc, #416]	; (8010ff8 <HAL_DMA_IRQHandler+0x88c>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d06a      	beq.n	8010f30 <HAL_DMA_IRQHandler+0x7c4>
 8010e5a:	4a68      	ldr	r2, [pc, #416]	; (8010ffc <HAL_DMA_IRQHandler+0x890>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d069      	beq.n	8010f34 <HAL_DMA_IRQHandler+0x7c8>
 8010e60:	4a67      	ldr	r2, [pc, #412]	; (8011000 <HAL_DMA_IRQHandler+0x894>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d068      	beq.n	8010f38 <HAL_DMA_IRQHandler+0x7cc>
 8010e66:	4a67      	ldr	r2, [pc, #412]	; (8011004 <HAL_DMA_IRQHandler+0x898>)
 8010e68:	4694      	mov	ip, r2
 8010e6a:	4463      	add	r3, ip
 8010e6c:	425a      	negs	r2, r3
 8010e6e:	4153      	adcs	r3, r2
 8010e70:	425b      	negs	r3, r3
 8010e72:	4a67      	ldr	r2, [pc, #412]	; (8011010 <HAL_DMA_IRQHandler+0x8a4>)
 8010e74:	4013      	ands	r3, r2
 8010e76:	2280      	movs	r2, #128	; 0x80
 8010e78:	0292      	lsls	r2, r2, #10
 8010e7a:	4694      	mov	ip, r2
 8010e7c:	4463      	add	r3, ip
 8010e7e:	e036      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010e80:	2320      	movs	r3, #32
 8010e82:	e7bb      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010e84:	2380      	movs	r3, #128	; 0x80
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	e7b8      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010e8a:	2380      	movs	r3, #128	; 0x80
 8010e8c:	019b      	lsls	r3, r3, #6
 8010e8e:	e7b5      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010e90:	2380      	movs	r3, #128	; 0x80
 8010e92:	029b      	lsls	r3, r3, #10
 8010e94:	e7b2      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010e96:	2380      	movs	r3, #128	; 0x80
 8010e98:	039b      	lsls	r3, r3, #14
 8010e9a:	e7af      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010e9c:	2380      	movs	r3, #128	; 0x80
 8010e9e:	049b      	lsls	r3, r3, #18
 8010ea0:	e7ac      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010ea2:	2302      	movs	r3, #2
 8010ea4:	e7aa      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010ea6:	2320      	movs	r3, #32
 8010ea8:	e7a8      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010eaa:	2380      	movs	r3, #128	; 0x80
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	e7a5      	b.n	8010dfc <HAL_DMA_IRQHandler+0x690>
 8010eb0:	2302      	movs	r3, #2
 8010eb2:	4003      	ands	r3, r0
 8010eb4:	1e5a      	subs	r2, r3, #1
 8010eb6:	4193      	sbcs	r3, r2
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	e7a3      	b.n	8010e04 <HAL_DMA_IRQHandler+0x698>
 8010ebc:	2320      	movs	r3, #32
 8010ebe:	e7f8      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ec0:	2380      	movs	r3, #128	; 0x80
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	e7f5      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ec6:	2380      	movs	r3, #128	; 0x80
 8010ec8:	019b      	lsls	r3, r3, #6
 8010eca:	e7f2      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ecc:	2380      	movs	r3, #128	; 0x80
 8010ece:	029b      	lsls	r3, r3, #10
 8010ed0:	e7ef      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ed2:	2380      	movs	r3, #128	; 0x80
 8010ed4:	039b      	lsls	r3, r3, #14
 8010ed6:	e7ec      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ed8:	2380      	movs	r3, #128	; 0x80
 8010eda:	049b      	lsls	r3, r3, #18
 8010edc:	e7e9      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ede:	2302      	movs	r3, #2
 8010ee0:	e7e7      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ee2:	2320      	movs	r3, #32
 8010ee4:	e7e5      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
 8010ee6:	2380      	movs	r3, #128	; 0x80
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	e7e2      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010eec:	2302      	movs	r3, #2
 8010eee:	4a49      	ldr	r2, [pc, #292]	; (8011014 <HAL_DMA_IRQHandler+0x8a8>)
 8010ef0:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ef4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010ef6:	2321      	movs	r3, #33	; 0x21
 8010ef8:	2201      	movs	r2, #1
 8010efa:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010efc:	3b01      	subs	r3, #1
 8010efe:	2200      	movs	r2, #0
 8010f00:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d001      	beq.n	8010f0c <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8010f08:	0020      	movs	r0, r4
 8010f0a:	4798      	blx	r3
}  
 8010f0c:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f0e:	2320      	movs	r3, #32
 8010f10:	e7ed      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f12:	2380      	movs	r3, #128	; 0x80
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	e7ea      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f18:	2380      	movs	r3, #128	; 0x80
 8010f1a:	019b      	lsls	r3, r3, #6
 8010f1c:	e7e7      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f1e:	2380      	movs	r3, #128	; 0x80
 8010f20:	029b      	lsls	r3, r3, #10
 8010f22:	e7e4      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f24:	2380      	movs	r3, #128	; 0x80
 8010f26:	039b      	lsls	r3, r3, #14
 8010f28:	e7e1      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f2a:	2380      	movs	r3, #128	; 0x80
 8010f2c:	049b      	lsls	r3, r3, #18
 8010f2e:	e7de      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f30:	2302      	movs	r3, #2
 8010f32:	e7dc      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f34:	2320      	movs	r3, #32
 8010f36:	e7da      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f38:	2380      	movs	r3, #128	; 0x80
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	e7d7      	b.n	8010eee <HAL_DMA_IRQHandler+0x782>
 8010f3e:	4a27      	ldr	r2, [pc, #156]	; (8010fdc <HAL_DMA_IRQHandler+0x870>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d027      	beq.n	8010f94 <HAL_DMA_IRQHandler+0x828>
 8010f44:	4a26      	ldr	r2, [pc, #152]	; (8010fe0 <HAL_DMA_IRQHandler+0x874>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d028      	beq.n	8010f9c <HAL_DMA_IRQHandler+0x830>
 8010f4a:	4a26      	ldr	r2, [pc, #152]	; (8010fe4 <HAL_DMA_IRQHandler+0x878>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d027      	beq.n	8010fa0 <HAL_DMA_IRQHandler+0x834>
 8010f50:	4a25      	ldr	r2, [pc, #148]	; (8010fe8 <HAL_DMA_IRQHandler+0x87c>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d027      	beq.n	8010fa6 <HAL_DMA_IRQHandler+0x83a>
 8010f56:	4a25      	ldr	r2, [pc, #148]	; (8010fec <HAL_DMA_IRQHandler+0x880>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d027      	beq.n	8010fac <HAL_DMA_IRQHandler+0x840>
 8010f5c:	4a24      	ldr	r2, [pc, #144]	; (8010ff0 <HAL_DMA_IRQHandler+0x884>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d027      	beq.n	8010fb2 <HAL_DMA_IRQHandler+0x846>
 8010f62:	4a24      	ldr	r2, [pc, #144]	; (8010ff4 <HAL_DMA_IRQHandler+0x888>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d027      	beq.n	8010fb8 <HAL_DMA_IRQHandler+0x84c>
 8010f68:	4a23      	ldr	r2, [pc, #140]	; (8010ff8 <HAL_DMA_IRQHandler+0x88c>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d027      	beq.n	8010fbe <HAL_DMA_IRQHandler+0x852>
 8010f6e:	4a23      	ldr	r2, [pc, #140]	; (8010ffc <HAL_DMA_IRQHandler+0x890>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d026      	beq.n	8010fc2 <HAL_DMA_IRQHandler+0x856>
 8010f74:	4a22      	ldr	r2, [pc, #136]	; (8011000 <HAL_DMA_IRQHandler+0x894>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d025      	beq.n	8010fc6 <HAL_DMA_IRQHandler+0x85a>
 8010f7a:	4a22      	ldr	r2, [pc, #136]	; (8011004 <HAL_DMA_IRQHandler+0x898>)
 8010f7c:	4694      	mov	ip, r2
 8010f7e:	4463      	add	r3, ip
 8010f80:	425a      	negs	r2, r3
 8010f82:	4153      	adcs	r3, r2
 8010f84:	425b      	negs	r3, r3
 8010f86:	4a22      	ldr	r2, [pc, #136]	; (8011010 <HAL_DMA_IRQHandler+0x8a4>)
 8010f88:	4013      	ands	r3, r2
 8010f8a:	2280      	movs	r2, #128	; 0x80
 8010f8c:	0292      	lsls	r2, r2, #10
 8010f8e:	4694      	mov	ip, r2
 8010f90:	4463      	add	r3, ip
 8010f92:	e000      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010f94:	2302      	movs	r3, #2
 8010f96:	4a1d      	ldr	r2, [pc, #116]	; (801100c <HAL_DMA_IRQHandler+0x8a0>)
 8010f98:	6053      	str	r3, [r2, #4]
 8010f9a:	e7aa      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x786>
 8010f9c:	2320      	movs	r3, #32
 8010f9e:	e7fa      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fa0:	2380      	movs	r3, #128	; 0x80
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	e7f7      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fa6:	2380      	movs	r3, #128	; 0x80
 8010fa8:	019b      	lsls	r3, r3, #6
 8010faa:	e7f4      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fac:	2380      	movs	r3, #128	; 0x80
 8010fae:	029b      	lsls	r3, r3, #10
 8010fb0:	e7f1      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fb2:	2380      	movs	r3, #128	; 0x80
 8010fb4:	039b      	lsls	r3, r3, #14
 8010fb6:	e7ee      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fb8:	2380      	movs	r3, #128	; 0x80
 8010fba:	049b      	lsls	r3, r3, #18
 8010fbc:	e7eb      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fbe:	2302      	movs	r3, #2
 8010fc0:	e7e9      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fc2:	2320      	movs	r3, #32
 8010fc4:	e7e7      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
 8010fc6:	2380      	movs	r3, #128	; 0x80
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	e7e4      	b.n	8010f96 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010fcc:	6821      	ldr	r1, [r4, #0]
 8010fce:	e65e      	b.n	8010c8e <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	0712      	lsls	r2, r2, #28
 8010fd4:	d500      	bpl.n	8010fd8 <HAL_DMA_IRQHandler+0x86c>
 8010fd6:	e49b      	b.n	8010910 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fd8:	6823      	ldr	r3, [r4, #0]
 8010fda:	e44b      	b.n	8010874 <HAL_DMA_IRQHandler+0x108>
 8010fdc:	40020008 	.word	0x40020008
 8010fe0:	4002001c 	.word	0x4002001c
 8010fe4:	40020030 	.word	0x40020030
 8010fe8:	40020044 	.word	0x40020044
 8010fec:	40020058 	.word	0x40020058
 8010ff0:	4002006c 	.word	0x4002006c
 8010ff4:	40020080 	.word	0x40020080
 8010ff8:	40020408 	.word	0x40020408
 8010ffc:	4002041c 	.word	0x4002041c
 8011000:	40020430 	.word	0x40020430
 8011004:	bffdfbbc 	.word	0xbffdfbbc
 8011008:	fffc4000 	.word	0xfffc4000
 801100c:	40020000 	.word	0x40020000
 8011010:	fffe2000 	.word	0xfffe2000
 8011014:	40020400 	.word	0x40020400

08011018 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011018:	4b0a      	ldr	r3, [pc, #40]	; (8011044 <FLASH_SetErrorCode+0x2c>)
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	06db      	lsls	r3, r3, #27
 801101e:	d504      	bpl.n	801102a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011020:	4a09      	ldr	r2, [pc, #36]	; (8011048 <FLASH_SetErrorCode+0x30>)
 8011022:	69d3      	ldr	r3, [r2, #28]
 8011024:	2102      	movs	r1, #2
 8011026:	430b      	orrs	r3, r1
 8011028:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801102a:	4b06      	ldr	r3, [pc, #24]	; (8011044 <FLASH_SetErrorCode+0x2c>)
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	075b      	lsls	r3, r3, #29
 8011030:	d504      	bpl.n	801103c <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011032:	4a05      	ldr	r2, [pc, #20]	; (8011048 <FLASH_SetErrorCode+0x30>)
 8011034:	69d3      	ldr	r3, [r2, #28]
 8011036:	2101      	movs	r1, #1
 8011038:	430b      	orrs	r3, r1
 801103a:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801103c:	4b01      	ldr	r3, [pc, #4]	; (8011044 <FLASH_SetErrorCode+0x2c>)
 801103e:	2214      	movs	r2, #20
 8011040:	60da      	str	r2, [r3, #12]
}  
 8011042:	4770      	bx	lr
 8011044:	40022000 	.word	0x40022000
 8011048:	20006650 	.word	0x20006650

0801104c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 801104c:	4b05      	ldr	r3, [pc, #20]	; (8011064 <HAL_FLASH_Unlock+0x18>)
 801104e:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011050:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011052:	061b      	lsls	r3, r3, #24
 8011054:	d505      	bpl.n	8011062 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011056:	4b03      	ldr	r3, [pc, #12]	; (8011064 <HAL_FLASH_Unlock+0x18>)
 8011058:	4a03      	ldr	r2, [pc, #12]	; (8011068 <HAL_FLASH_Unlock+0x1c>)
 801105a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801105c:	4a03      	ldr	r2, [pc, #12]	; (801106c <HAL_FLASH_Unlock+0x20>)
 801105e:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011060:	2000      	movs	r0, #0
}
 8011062:	4770      	bx	lr
 8011064:	40022000 	.word	0x40022000
 8011068:	45670123 	.word	0x45670123
 801106c:	cdef89ab 	.word	0xcdef89ab

08011070 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011070:	4a03      	ldr	r2, [pc, #12]	; (8011080 <HAL_FLASH_Lock+0x10>)
 8011072:	6913      	ldr	r3, [r2, #16]
 8011074:	2180      	movs	r1, #128	; 0x80
 8011076:	430b      	orrs	r3, r1
 8011078:	6113      	str	r3, [r2, #16]
}
 801107a:	2000      	movs	r0, #0
 801107c:	4770      	bx	lr
 801107e:	46c0      	nop			; (mov r8, r8)
 8011080:	40022000 	.word	0x40022000

08011084 <FLASH_WaitForLastOperation>:
{
 8011084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011086:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011088:	f7fe fdee 	bl	800fc68 <HAL_GetTick>
 801108c:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801108e:	4e13      	ldr	r6, [pc, #76]	; (80110dc <FLASH_WaitForLastOperation+0x58>)
 8011090:	2501      	movs	r5, #1
 8011092:	68f3      	ldr	r3, [r6, #12]
 8011094:	421d      	tst	r5, r3
 8011096:	d00a      	beq.n	80110ae <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011098:	1c63      	adds	r3, r4, #1
 801109a:	d0fa      	beq.n	8011092 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801109c:	2c00      	cmp	r4, #0
 801109e:	d01a      	beq.n	80110d6 <FLASH_WaitForLastOperation+0x52>
 80110a0:	f7fe fde2 	bl	800fc68 <HAL_GetTick>
 80110a4:	1bc0      	subs	r0, r0, r7
 80110a6:	42a0      	cmp	r0, r4
 80110a8:	d9f3      	bls.n	8011092 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 80110aa:	2003      	movs	r0, #3
 80110ac:	e012      	b.n	80110d4 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80110ae:	4b0b      	ldr	r3, [pc, #44]	; (80110dc <FLASH_WaitForLastOperation+0x58>)
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	069b      	lsls	r3, r3, #26
 80110b4:	d502      	bpl.n	80110bc <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80110b6:	4b09      	ldr	r3, [pc, #36]	; (80110dc <FLASH_WaitForLastOperation+0x58>)
 80110b8:	2220      	movs	r2, #32
 80110ba:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80110bc:	4b07      	ldr	r3, [pc, #28]	; (80110dc <FLASH_WaitForLastOperation+0x58>)
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	06db      	lsls	r3, r3, #27
 80110c2:	d404      	bmi.n	80110ce <FLASH_WaitForLastOperation+0x4a>
 80110c4:	4b05      	ldr	r3, [pc, #20]	; (80110dc <FLASH_WaitForLastOperation+0x58>)
 80110c6:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80110c8:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80110ca:	075b      	lsls	r3, r3, #29
 80110cc:	d502      	bpl.n	80110d4 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 80110ce:	f7ff ffa3 	bl	8011018 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80110d2:	2001      	movs	r0, #1
}
 80110d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80110d6:	2003      	movs	r0, #3
 80110d8:	e7fc      	b.n	80110d4 <FLASH_WaitForLastOperation+0x50>
 80110da:	46c0      	nop			; (mov r8, r8)
 80110dc:	40022000 	.word	0x40022000

080110e0 <HAL_FLASH_Program>:
{
 80110e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110e2:	46de      	mov	lr, fp
 80110e4:	4657      	mov	r7, sl
 80110e6:	464e      	mov	r6, r9
 80110e8:	4645      	mov	r5, r8
 80110ea:	b5e0      	push	{r5, r6, r7, lr}
 80110ec:	b083      	sub	sp, #12
 80110ee:	0004      	movs	r4, r0
 80110f0:	000e      	movs	r6, r1
 80110f2:	9201      	str	r2, [sp, #4]
 80110f4:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80110f6:	4b2a      	ldr	r3, [pc, #168]	; (80111a0 <HAL_FLASH_Program+0xc0>)
 80110f8:	7e1b      	ldrb	r3, [r3, #24]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d04b      	beq.n	8011196 <HAL_FLASH_Program+0xb6>
 80110fe:	4b28      	ldr	r3, [pc, #160]	; (80111a0 <HAL_FLASH_Program+0xc0>)
 8011100:	2201      	movs	r2, #1
 8011102:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011104:	4827      	ldr	r0, [pc, #156]	; (80111a4 <HAL_FLASH_Program+0xc4>)
 8011106:	f7ff ffbd 	bl	8011084 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801110a:	2800      	cmp	r0, #0
 801110c:	d139      	bne.n	8011182 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801110e:	2c01      	cmp	r4, #1
 8011110:	d043      	beq.n	801119a <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011112:	3c02      	subs	r4, #2
 8011114:	4263      	negs	r3, r4
 8011116:	415c      	adcs	r4, r3
 8011118:	4264      	negs	r4, r4
 801111a:	2301      	movs	r3, #1
 801111c:	439c      	bics	r4, r3
 801111e:	46a0      	mov	r8, r4
 8011120:	3303      	adds	r3, #3
 8011122:	469c      	mov	ip, r3
 8011124:	44e0      	add	r8, ip
{
 8011126:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011128:	4b1d      	ldr	r3, [pc, #116]	; (80111a0 <HAL_FLASH_Program+0xc0>)
 801112a:	469b      	mov	fp, r3
 801112c:	2300      	movs	r3, #0
 801112e:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011130:	4c1d      	ldr	r4, [pc, #116]	; (80111a8 <HAL_FLASH_Program+0xc8>)
 8011132:	e01e      	b.n	8011172 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011134:	2220      	movs	r2, #32
 8011136:	1ad2      	subs	r2, r2, r3
 8011138:	4649      	mov	r1, r9
 801113a:	4091      	lsls	r1, r2
 801113c:	000a      	movs	r2, r1
 801113e:	9901      	ldr	r1, [sp, #4]
 8011140:	40d9      	lsrs	r1, r3
 8011142:	000b      	movs	r3, r1
 8011144:	4313      	orrs	r3, r2
 8011146:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011148:	465a      	mov	r2, fp
 801114a:	4651      	mov	r1, sl
 801114c:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801114e:	6922      	ldr	r2, [r4, #16]
 8011150:	2701      	movs	r7, #1
 8011152:	433a      	orrs	r2, r7
 8011154:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011156:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011158:	4812      	ldr	r0, [pc, #72]	; (80111a4 <HAL_FLASH_Program+0xc4>)
 801115a:	f7ff ff93 	bl	8011084 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801115e:	6923      	ldr	r3, [r4, #16]
 8011160:	43bb      	bics	r3, r7
 8011162:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011164:	2800      	cmp	r0, #0
 8011166:	d10c      	bne.n	8011182 <HAL_FLASH_Program+0xa2>
 8011168:	3501      	adds	r5, #1
 801116a:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 801116c:	b2eb      	uxtb	r3, r5
 801116e:	4598      	cmp	r8, r3
 8011170:	d907      	bls.n	8011182 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011172:	012b      	lsls	r3, r5, #4
 8011174:	2220      	movs	r2, #32
 8011176:	4252      	negs	r2, r2
 8011178:	189a      	adds	r2, r3, r2
 801117a:	d4db      	bmi.n	8011134 <HAL_FLASH_Program+0x54>
 801117c:	464b      	mov	r3, r9
 801117e:	40d3      	lsrs	r3, r2
 8011180:	e7e1      	b.n	8011146 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011182:	4b07      	ldr	r3, [pc, #28]	; (80111a0 <HAL_FLASH_Program+0xc0>)
 8011184:	2200      	movs	r2, #0
 8011186:	761a      	strb	r2, [r3, #24]
}
 8011188:	b003      	add	sp, #12
 801118a:	bc3c      	pop	{r2, r3, r4, r5}
 801118c:	4690      	mov	r8, r2
 801118e:	4699      	mov	r9, r3
 8011190:	46a2      	mov	sl, r4
 8011192:	46ab      	mov	fp, r5
 8011194:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011196:	2002      	movs	r0, #2
 8011198:	e7f6      	b.n	8011188 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 801119a:	2301      	movs	r3, #1
 801119c:	4698      	mov	r8, r3
 801119e:	e7c2      	b.n	8011126 <HAL_FLASH_Program+0x46>
 80111a0:	20006650 	.word	0x20006650
 80111a4:	0000c350 	.word	0x0000c350
 80111a8:	40022000 	.word	0x40022000

080111ac <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111ac:	4b06      	ldr	r3, [pc, #24]	; (80111c8 <FLASH_MassErase+0x1c>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80111b2:	4b06      	ldr	r3, [pc, #24]	; (80111cc <FLASH_MassErase+0x20>)
 80111b4:	691a      	ldr	r2, [r3, #16]
 80111b6:	2104      	movs	r1, #4
 80111b8:	430a      	orrs	r2, r1
 80111ba:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80111bc:	691a      	ldr	r2, [r3, #16]
 80111be:	313c      	adds	r1, #60	; 0x3c
 80111c0:	430a      	orrs	r2, r1
 80111c2:	611a      	str	r2, [r3, #16]
}
 80111c4:	4770      	bx	lr
 80111c6:	46c0      	nop			; (mov r8, r8)
 80111c8:	20006650 	.word	0x20006650
 80111cc:	40022000 	.word	0x40022000

080111d0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111d0:	4b06      	ldr	r3, [pc, #24]	; (80111ec <FLASH_PageErase+0x1c>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80111d6:	4b06      	ldr	r3, [pc, #24]	; (80111f0 <FLASH_PageErase+0x20>)
 80111d8:	691a      	ldr	r2, [r3, #16]
 80111da:	2102      	movs	r1, #2
 80111dc:	430a      	orrs	r2, r1
 80111de:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80111e0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80111e2:	691a      	ldr	r2, [r3, #16]
 80111e4:	313e      	adds	r1, #62	; 0x3e
 80111e6:	430a      	orrs	r2, r1
 80111e8:	611a      	str	r2, [r3, #16]
}
 80111ea:	4770      	bx	lr
 80111ec:	20006650 	.word	0x20006650
 80111f0:	40022000 	.word	0x40022000

080111f4 <HAL_FLASHEx_Erase>:
{
 80111f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111f6:	46c6      	mov	lr, r8
 80111f8:	b500      	push	{lr}
 80111fa:	0006      	movs	r6, r0
 80111fc:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80111fe:	4b2a      	ldr	r3, [pc, #168]	; (80112a8 <HAL_FLASHEx_Erase+0xb4>)
 8011200:	7e1b      	ldrb	r3, [r3, #24]
 8011202:	2b01      	cmp	r3, #1
 8011204:	d04d      	beq.n	80112a2 <HAL_FLASHEx_Erase+0xae>
 8011206:	4b28      	ldr	r3, [pc, #160]	; (80112a8 <HAL_FLASHEx_Erase+0xb4>)
 8011208:	2201      	movs	r2, #1
 801120a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	2b01      	cmp	r3, #1
 8011210:	d029      	beq.n	8011266 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011212:	4826      	ldr	r0, [pc, #152]	; (80112ac <HAL_FLASHEx_Erase+0xb8>)
 8011214:	f7ff ff36 	bl	8011084 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011218:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801121a:	2800      	cmp	r0, #0
 801121c:	d129      	bne.n	8011272 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 801121e:	2301      	movs	r3, #1
 8011220:	425b      	negs	r3, r3
 8011222:	4642      	mov	r2, r8
 8011224:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011226:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011228:	68b3      	ldr	r3, [r6, #8]
 801122a:	02db      	lsls	r3, r3, #11
 801122c:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 801122e:	429c      	cmp	r4, r3
 8011230:	d235      	bcs.n	801129e <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011232:	4f1f      	ldr	r7, [pc, #124]	; (80112b0 <HAL_FLASHEx_Erase+0xbc>)
 8011234:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8011236:	0020      	movs	r0, r4
 8011238:	f7ff ffca 	bl	80111d0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801123c:	481b      	ldr	r0, [pc, #108]	; (80112ac <HAL_FLASHEx_Erase+0xb8>)
 801123e:	f7ff ff21 	bl	8011084 <FLASH_WaitForLastOperation>
 8011242:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	43ab      	bics	r3, r5
 8011248:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 801124a:	2800      	cmp	r0, #0
 801124c:	d124      	bne.n	8011298 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 801124e:	2380      	movs	r3, #128	; 0x80
 8011250:	011b      	lsls	r3, r3, #4
 8011252:	469c      	mov	ip, r3
 8011254:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011256:	68b3      	ldr	r3, [r6, #8]
 8011258:	02db      	lsls	r3, r3, #11
 801125a:	6871      	ldr	r1, [r6, #4]
 801125c:	468c      	mov	ip, r1
 801125e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011260:	42a3      	cmp	r3, r4
 8011262:	d8e8      	bhi.n	8011236 <HAL_FLASHEx_Erase+0x42>
 8011264:	e005      	b.n	8011272 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011266:	4811      	ldr	r0, [pc, #68]	; (80112ac <HAL_FLASHEx_Erase+0xb8>)
 8011268:	f7ff ff0c 	bl	8011084 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 801126c:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801126e:	2800      	cmp	r0, #0
 8011270:	d006      	beq.n	8011280 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8011272:	4b0d      	ldr	r3, [pc, #52]	; (80112a8 <HAL_FLASHEx_Erase+0xb4>)
 8011274:	2100      	movs	r1, #0
 8011276:	7619      	strb	r1, [r3, #24]
}
 8011278:	0010      	movs	r0, r2
 801127a:	bc04      	pop	{r2}
 801127c:	4690      	mov	r8, r2
 801127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011280:	f7ff ff94 	bl	80111ac <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011284:	4809      	ldr	r0, [pc, #36]	; (80112ac <HAL_FLASHEx_Erase+0xb8>)
 8011286:	f7ff fefd 	bl	8011084 <FLASH_WaitForLastOperation>
 801128a:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801128c:	4908      	ldr	r1, [pc, #32]	; (80112b0 <HAL_FLASHEx_Erase+0xbc>)
 801128e:	690b      	ldr	r3, [r1, #16]
 8011290:	2004      	movs	r0, #4
 8011292:	4383      	bics	r3, r0
 8011294:	610b      	str	r3, [r1, #16]
 8011296:	e7ec      	b.n	8011272 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011298:	4643      	mov	r3, r8
 801129a:	601c      	str	r4, [r3, #0]
            break;
 801129c:	e7e9      	b.n	8011272 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801129e:	2201      	movs	r2, #1
 80112a0:	e7e7      	b.n	8011272 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 80112a2:	2202      	movs	r2, #2
 80112a4:	e7e8      	b.n	8011278 <HAL_FLASHEx_Erase+0x84>
 80112a6:	46c0      	nop			; (mov r8, r8)
 80112a8:	20006650 	.word	0x20006650
 80112ac:	0000c350 	.word	0x0000c350
 80112b0:	40022000 	.word	0x40022000

080112b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b6:	46de      	mov	lr, fp
 80112b8:	4657      	mov	r7, sl
 80112ba:	464e      	mov	r6, r9
 80112bc:	4645      	mov	r5, r8
 80112be:	b5e0      	push	{r5, r6, r7, lr}
 80112c0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80112c2:	680a      	ldr	r2, [r1, #0]
 80112c4:	2a00      	cmp	r2, #0
 80112c6:	d100      	bne.n	80112ca <HAL_GPIO_Init+0x16>
 80112c8:	e0bf      	b.n	801144a <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 80112ca:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80112cc:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80112ce:	2410      	movs	r4, #16
 80112d0:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80112d2:	3c0d      	subs	r4, #13
 80112d4:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80112d6:	2480      	movs	r4, #128	; 0x80
 80112d8:	0564      	lsls	r4, r4, #21
 80112da:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80112dc:	4c5e      	ldr	r4, [pc, #376]	; (8011458 <HAL_GPIO_Init+0x1a4>)
 80112de:	1904      	adds	r4, r0, r4
 80112e0:	1e65      	subs	r5, r4, #1
 80112e2:	41ac      	sbcs	r4, r5
 80112e4:	3404      	adds	r4, #4
 80112e6:	46a1      	mov	r9, r4
 80112e8:	e03b      	b.n	8011362 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 80112ea:	08dc      	lsrs	r4, r3, #3
 80112ec:	00a4      	lsls	r4, r4, #2
 80112ee:	1904      	adds	r4, r0, r4
 80112f0:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80112f2:	2507      	movs	r5, #7
 80112f4:	401d      	ands	r5, r3
 80112f6:	00ad      	lsls	r5, r5, #2
 80112f8:	220f      	movs	r2, #15
 80112fa:	40aa      	lsls	r2, r5
 80112fc:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80112fe:	690a      	ldr	r2, [r1, #16]
 8011300:	40aa      	lsls	r2, r5
 8011302:	0015      	movs	r5, r2
 8011304:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011306:	6225      	str	r5, [r4, #32]
 8011308:	e035      	b.n	8011376 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801130a:	2500      	movs	r5, #0
 801130c:	465a      	mov	r2, fp
 801130e:	4095      	lsls	r5, r2
 8011310:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011312:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011314:	4c51      	ldr	r4, [pc, #324]	; (801145c <HAL_GPIO_Init+0x1a8>)
 8011316:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011318:	9a01      	ldr	r2, [sp, #4]
 801131a:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801131c:	684a      	ldr	r2, [r1, #4]
 801131e:	03d2      	lsls	r2, r2, #15
 8011320:	d500      	bpl.n	8011324 <HAL_GPIO_Init+0x70>
 8011322:	e086      	b.n	8011432 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011324:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011326:	4f4d      	ldr	r7, [pc, #308]	; (801145c <HAL_GPIO_Init+0x1a8>)
 8011328:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 801132a:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801132c:	684a      	ldr	r2, [r1, #4]
 801132e:	0392      	lsls	r2, r2, #14
 8011330:	d500      	bpl.n	8011334 <HAL_GPIO_Init+0x80>
 8011332:	e081      	b.n	8011438 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011334:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011336:	4f49      	ldr	r7, [pc, #292]	; (801145c <HAL_GPIO_Init+0x1a8>)
 8011338:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801133a:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801133c:	684a      	ldr	r2, [r1, #4]
 801133e:	02d2      	lsls	r2, r2, #11
 8011340:	d47d      	bmi.n	801143e <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011342:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011344:	4f45      	ldr	r7, [pc, #276]	; (801145c <HAL_GPIO_Init+0x1a8>)
 8011346:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8011348:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801134a:	684a      	ldr	r2, [r1, #4]
 801134c:	0292      	lsls	r2, r2, #10
 801134e:	d479      	bmi.n	8011444 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011350:	0022      	movs	r2, r4
 8011352:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011354:	4c41      	ldr	r4, [pc, #260]	; (801145c <HAL_GPIO_Init+0x1a8>)
 8011356:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011358:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801135a:	680a      	ldr	r2, [r1, #0]
 801135c:	0014      	movs	r4, r2
 801135e:	40dc      	lsrs	r4, r3
 8011360:	d073      	beq.n	801144a <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011362:	0034      	movs	r4, r6
 8011364:	409c      	lsls	r4, r3
 8011366:	4022      	ands	r2, r4
 8011368:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 801136a:	d0f5      	beq.n	8011358 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801136c:	684c      	ldr	r4, [r1, #4]
 801136e:	4642      	mov	r2, r8
 8011370:	4394      	bics	r4, r2
 8011372:	2c02      	cmp	r4, #2
 8011374:	d0b9      	beq.n	80112ea <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011376:	6804      	ldr	r4, [r0, #0]
 8011378:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801137a:	4665      	mov	r5, ip
 801137c:	40bd      	lsls	r5, r7
 801137e:	43ed      	mvns	r5, r5
 8011380:	402c      	ands	r4, r5
 8011382:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011384:	684c      	ldr	r4, [r1, #4]
 8011386:	4662      	mov	r2, ip
 8011388:	4014      	ands	r4, r2
 801138a:	40bc      	lsls	r4, r7
 801138c:	465a      	mov	r2, fp
 801138e:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011390:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011392:	684c      	ldr	r4, [r1, #4]
 8011394:	4642      	mov	r2, r8
 8011396:	4394      	bics	r4, r2
 8011398:	3c01      	subs	r4, #1
 801139a:	2c01      	cmp	r4, #1
 801139c:	d813      	bhi.n	80113c6 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 801139e:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80113a0:	402c      	ands	r4, r5
 80113a2:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80113a4:	68cc      	ldr	r4, [r1, #12]
 80113a6:	40bc      	lsls	r4, r7
 80113a8:	465a      	mov	r2, fp
 80113aa:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 80113ac:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80113ae:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80113b0:	0032      	movs	r2, r6
 80113b2:	409a      	lsls	r2, r3
 80113b4:	4394      	bics	r4, r2
 80113b6:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80113b8:	684a      	ldr	r2, [r1, #4]
 80113ba:	0914      	lsrs	r4, r2, #4
 80113bc:	4034      	ands	r4, r6
 80113be:	409c      	lsls	r4, r3
 80113c0:	465a      	mov	r2, fp
 80113c2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80113c4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80113c6:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80113c8:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80113ca:	688d      	ldr	r5, [r1, #8]
 80113cc:	40bd      	lsls	r5, r7
 80113ce:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80113d0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80113d2:	684a      	ldr	r2, [r1, #4]
 80113d4:	4654      	mov	r4, sl
 80113d6:	4222      	tst	r2, r4
 80113d8:	d0be      	beq.n	8011358 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80113da:	4c21      	ldr	r4, [pc, #132]	; (8011460 <HAL_GPIO_Init+0x1ac>)
 80113dc:	69a5      	ldr	r5, [r4, #24]
 80113de:	4335      	orrs	r5, r6
 80113e0:	61a5      	str	r5, [r4, #24]
 80113e2:	69a4      	ldr	r4, [r4, #24]
 80113e4:	4034      	ands	r4, r6
 80113e6:	9403      	str	r4, [sp, #12]
 80113e8:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80113ea:	089c      	lsrs	r4, r3, #2
 80113ec:	00a4      	lsls	r4, r4, #2
 80113ee:	4a1d      	ldr	r2, [pc, #116]	; (8011464 <HAL_GPIO_Init+0x1b0>)
 80113f0:	4693      	mov	fp, r2
 80113f2:	445c      	add	r4, fp
 80113f4:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80113f6:	4667      	mov	r7, ip
 80113f8:	401f      	ands	r7, r3
 80113fa:	00ba      	lsls	r2, r7, #2
 80113fc:	4693      	mov	fp, r2
 80113fe:	270f      	movs	r7, #15
 8011400:	4097      	lsls	r7, r2
 8011402:	43bd      	bics	r5, r7
 8011404:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011406:	2590      	movs	r5, #144	; 0x90
 8011408:	05ed      	lsls	r5, r5, #23
 801140a:	42a8      	cmp	r0, r5
 801140c:	d100      	bne.n	8011410 <HAL_GPIO_Init+0x15c>
 801140e:	e77c      	b.n	801130a <HAL_GPIO_Init+0x56>
 8011410:	4d15      	ldr	r5, [pc, #84]	; (8011468 <HAL_GPIO_Init+0x1b4>)
 8011412:	42a8      	cmp	r0, r5
 8011414:	d007      	beq.n	8011426 <HAL_GPIO_Init+0x172>
 8011416:	4d15      	ldr	r5, [pc, #84]	; (801146c <HAL_GPIO_Init+0x1b8>)
 8011418:	42a8      	cmp	r0, r5
 801141a:	d006      	beq.n	801142a <HAL_GPIO_Init+0x176>
 801141c:	4d14      	ldr	r5, [pc, #80]	; (8011470 <HAL_GPIO_Init+0x1bc>)
 801141e:	42a8      	cmp	r0, r5
 8011420:	d005      	beq.n	801142e <HAL_GPIO_Init+0x17a>
 8011422:	464d      	mov	r5, r9
 8011424:	e772      	b.n	801130c <HAL_GPIO_Init+0x58>
 8011426:	0035      	movs	r5, r6
 8011428:	e770      	b.n	801130c <HAL_GPIO_Init+0x58>
 801142a:	2502      	movs	r5, #2
 801142c:	e76e      	b.n	801130c <HAL_GPIO_Init+0x58>
 801142e:	4665      	mov	r5, ip
 8011430:	e76c      	b.n	801130c <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011432:	9a01      	ldr	r2, [sp, #4]
 8011434:	4314      	orrs	r4, r2
 8011436:	e776      	b.n	8011326 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011438:	9a01      	ldr	r2, [sp, #4]
 801143a:	4314      	orrs	r4, r2
 801143c:	e77b      	b.n	8011336 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 801143e:	9a01      	ldr	r2, [sp, #4]
 8011440:	4314      	orrs	r4, r2
 8011442:	e77f      	b.n	8011344 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011444:	9a01      	ldr	r2, [sp, #4]
 8011446:	4322      	orrs	r2, r4
 8011448:	e784      	b.n	8011354 <HAL_GPIO_Init+0xa0>
  } 
}
 801144a:	b005      	add	sp, #20
 801144c:	bc3c      	pop	{r2, r3, r4, r5}
 801144e:	4690      	mov	r8, r2
 8011450:	4699      	mov	r9, r3
 8011452:	46a2      	mov	sl, r4
 8011454:	46ab      	mov	fp, r5
 8011456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011458:	b7fff000 	.word	0xb7fff000
 801145c:	40010400 	.word	0x40010400
 8011460:	40021000 	.word	0x40021000
 8011464:	40010000 	.word	0x40010000
 8011468:	48000400 	.word	0x48000400
 801146c:	48000800 	.word	0x48000800
 8011470:	48000c00 	.word	0x48000c00

08011474 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011476:	46de      	mov	lr, fp
 8011478:	4657      	mov	r7, sl
 801147a:	464e      	mov	r6, r9
 801147c:	4645      	mov	r5, r8
 801147e:	b5e0      	push	{r5, r6, r7, lr}
 8011480:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011482:	2900      	cmp	r1, #0
 8011484:	d071      	beq.n	801156a <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8011486:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011488:	2201      	movs	r2, #1
 801148a:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801148c:	3202      	adds	r2, #2
 801148e:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011490:	3204      	adds	r2, #4
 8011492:	4693      	mov	fp, r2
 8011494:	3208      	adds	r2, #8
 8011496:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011498:	4a37      	ldr	r2, [pc, #220]	; (8011578 <HAL_GPIO_DeInit+0x104>)
 801149a:	1882      	adds	r2, r0, r2
 801149c:	1e54      	subs	r4, r2, #1
 801149e:	41a2      	sbcs	r2, r4
 80114a0:	3204      	adds	r2, #4
 80114a2:	9201      	str	r2, [sp, #4]
 80114a4:	9100      	str	r1, [sp, #0]
 80114a6:	e009      	b.n	80114bc <HAL_GPIO_DeInit+0x48>
 80114a8:	2100      	movs	r1, #0
 80114aa:	4689      	mov	r9, r1
 80114ac:	4649      	mov	r1, r9
 80114ae:	40a9      	lsls	r1, r5
 80114b0:	42b1      	cmp	r1, r6
 80114b2:	d048      	beq.n	8011546 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 80114b4:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80114b6:	9a00      	ldr	r2, [sp, #0]
 80114b8:	40da      	lsrs	r2, r3
 80114ba:	d056      	beq.n	801156a <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 80114bc:	4662      	mov	r2, ip
 80114be:	409a      	lsls	r2, r3
 80114c0:	9900      	ldr	r1, [sp, #0]
 80114c2:	400a      	ands	r2, r1
    if (iocurrent)
 80114c4:	d0f6      	beq.n	80114b4 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80114c6:	6804      	ldr	r4, [r0, #0]
 80114c8:	005d      	lsls	r5, r3, #1
 80114ca:	4646      	mov	r6, r8
 80114cc:	40ae      	lsls	r6, r5
 80114ce:	43f5      	mvns	r5, r6
 80114d0:	402c      	ands	r4, r5
 80114d2:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80114d4:	08dc      	lsrs	r4, r3, #3
 80114d6:	00a4      	lsls	r4, r4, #2
 80114d8:	1904      	adds	r4, r0, r4
 80114da:	6a26      	ldr	r6, [r4, #32]
 80114dc:	465f      	mov	r7, fp
 80114de:	401f      	ands	r7, r3
 80114e0:	00bf      	lsls	r7, r7, #2
 80114e2:	4651      	mov	r1, sl
 80114e4:	40b9      	lsls	r1, r7
 80114e6:	438e      	bics	r6, r1
 80114e8:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80114ea:	6884      	ldr	r4, [r0, #8]
 80114ec:	402c      	ands	r4, r5
 80114ee:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80114f0:	6844      	ldr	r4, [r0, #4]
 80114f2:	4666      	mov	r6, ip
 80114f4:	409e      	lsls	r6, r3
 80114f6:	43b4      	bics	r4, r6
 80114f8:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80114fa:	68c4      	ldr	r4, [r0, #12]
 80114fc:	4025      	ands	r5, r4
 80114fe:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011500:	089c      	lsrs	r4, r3, #2
 8011502:	00a4      	lsls	r4, r4, #2
 8011504:	491d      	ldr	r1, [pc, #116]	; (801157c <HAL_GPIO_DeInit+0x108>)
 8011506:	4689      	mov	r9, r1
 8011508:	444c      	add	r4, r9
 801150a:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801150c:	4645      	mov	r5, r8
 801150e:	401d      	ands	r5, r3
 8011510:	00ad      	lsls	r5, r5, #2
 8011512:	4657      	mov	r7, sl
 8011514:	40af      	lsls	r7, r5
 8011516:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011518:	2190      	movs	r1, #144	; 0x90
 801151a:	05c9      	lsls	r1, r1, #23
 801151c:	4288      	cmp	r0, r1
 801151e:	d0c3      	beq.n	80114a8 <HAL_GPIO_DeInit+0x34>
 8011520:	4917      	ldr	r1, [pc, #92]	; (8011580 <HAL_GPIO_DeInit+0x10c>)
 8011522:	4288      	cmp	r0, r1
 8011524:	d008      	beq.n	8011538 <HAL_GPIO_DeInit+0xc4>
 8011526:	4917      	ldr	r1, [pc, #92]	; (8011584 <HAL_GPIO_DeInit+0x110>)
 8011528:	4288      	cmp	r0, r1
 801152a:	d007      	beq.n	801153c <HAL_GPIO_DeInit+0xc8>
 801152c:	4916      	ldr	r1, [pc, #88]	; (8011588 <HAL_GPIO_DeInit+0x114>)
 801152e:	4288      	cmp	r0, r1
 8011530:	d007      	beq.n	8011542 <HAL_GPIO_DeInit+0xce>
 8011532:	9901      	ldr	r1, [sp, #4]
 8011534:	4689      	mov	r9, r1
 8011536:	e7b9      	b.n	80114ac <HAL_GPIO_DeInit+0x38>
 8011538:	46e1      	mov	r9, ip
 801153a:	e7b7      	b.n	80114ac <HAL_GPIO_DeInit+0x38>
 801153c:	2102      	movs	r1, #2
 801153e:	4689      	mov	r9, r1
 8011540:	e7b4      	b.n	80114ac <HAL_GPIO_DeInit+0x38>
 8011542:	46c1      	mov	r9, r8
 8011544:	e7b2      	b.n	80114ac <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011546:	68a5      	ldr	r5, [r4, #8]
 8011548:	43bd      	bics	r5, r7
 801154a:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 801154c:	4c0f      	ldr	r4, [pc, #60]	; (801158c <HAL_GPIO_DeInit+0x118>)
 801154e:	6825      	ldr	r5, [r4, #0]
 8011550:	43d2      	mvns	r2, r2
 8011552:	4015      	ands	r5, r2
 8011554:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011556:	6865      	ldr	r5, [r4, #4]
 8011558:	4015      	ands	r5, r2
 801155a:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 801155c:	68a5      	ldr	r5, [r4, #8]
 801155e:	4015      	ands	r5, r2
 8011560:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011562:	68e5      	ldr	r5, [r4, #12]
 8011564:	402a      	ands	r2, r5
 8011566:	60e2      	str	r2, [r4, #12]
 8011568:	e7a4      	b.n	80114b4 <HAL_GPIO_DeInit+0x40>
  }
}
 801156a:	b003      	add	sp, #12
 801156c:	bc3c      	pop	{r2, r3, r4, r5}
 801156e:	4690      	mov	r8, r2
 8011570:	4699      	mov	r9, r3
 8011572:	46a2      	mov	sl, r4
 8011574:	46ab      	mov	fp, r5
 8011576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011578:	b7fff000 	.word	0xb7fff000
 801157c:	40010000 	.word	0x40010000
 8011580:	48000400 	.word	0x48000400
 8011584:	48000800 	.word	0x48000800
 8011588:	48000c00 	.word	0x48000c00
 801158c:	40010400 	.word	0x40010400

08011590 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011590:	6900      	ldr	r0, [r0, #16]
 8011592:	4008      	ands	r0, r1
 8011594:	1e41      	subs	r1, r0, #1
 8011596:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011598:	b2c0      	uxtb	r0, r0
  }
 801159a:	4770      	bx	lr

0801159c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801159c:	2a00      	cmp	r2, #0
 801159e:	d101      	bne.n	80115a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80115a0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80115a2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80115a4:	6181      	str	r1, [r0, #24]
 80115a6:	e7fc      	b.n	80115a2 <HAL_GPIO_WritePin+0x6>

080115a8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80115a8:	6943      	ldr	r3, [r0, #20]
 80115aa:	4059      	eors	r1, r3
 80115ac:	6141      	str	r1, [r0, #20]
}
 80115ae:	4770      	bx	lr

080115b0 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80115b0:	4770      	bx	lr
	...

080115b4 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80115b4:	4a03      	ldr	r2, [pc, #12]	; (80115c4 <HAL_PWR_EnableBkUpAccess+0x10>)
 80115b6:	6811      	ldr	r1, [r2, #0]
 80115b8:	2380      	movs	r3, #128	; 0x80
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	430b      	orrs	r3, r1
 80115be:	6013      	str	r3, [r2, #0]
}
 80115c0:	4770      	bx	lr
 80115c2:	46c0      	nop			; (mov r8, r8)
 80115c4:	40007000 	.word	0x40007000

080115c8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80115c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ca:	46c6      	mov	lr, r8
 80115cc:	b500      	push	{lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80115d2:	6803      	ldr	r3, [r0, #0]
 80115d4:	07db      	lsls	r3, r3, #31
 80115d6:	d538      	bpl.n	801164a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80115d8:	4bbd      	ldr	r3, [pc, #756]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80115da:	685a      	ldr	r2, [r3, #4]
 80115dc:	230c      	movs	r3, #12
 80115de:	4013      	ands	r3, r2
 80115e0:	2b04      	cmp	r3, #4
 80115e2:	d02a      	beq.n	801163a <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80115e4:	4bba      	ldr	r3, [pc, #744]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	230c      	movs	r3, #12
 80115ea:	4013      	ands	r3, r2
 80115ec:	2b08      	cmp	r3, #8
 80115ee:	d108      	bne.n	8011602 <HAL_RCC_OscConfig+0x3a>
 80115f0:	4bb7      	ldr	r3, [pc, #732]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	22c0      	movs	r2, #192	; 0xc0
 80115f6:	0252      	lsls	r2, r2, #9
 80115f8:	4013      	ands	r3, r2
 80115fa:	2280      	movs	r2, #128	; 0x80
 80115fc:	0252      	lsls	r2, r2, #9
 80115fe:	4293      	cmp	r3, r2
 8011600:	d01b      	beq.n	801163a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011602:	4bb3      	ldr	r3, [pc, #716]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	49b3      	ldr	r1, [pc, #716]	; (80118d4 <HAL_RCC_OscConfig+0x30c>)
 8011608:	400a      	ands	r2, r1
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	49b2      	ldr	r1, [pc, #712]	; (80118d8 <HAL_RCC_OscConfig+0x310>)
 8011610:	400a      	ands	r2, r1
 8011612:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011614:	f7fe fb28 	bl	800fc68 <HAL_GetTick>
 8011618:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801161a:	4ead      	ldr	r6, [pc, #692]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801161c:	2580      	movs	r5, #128	; 0x80
 801161e:	02ad      	lsls	r5, r5, #10
 8011620:	6833      	ldr	r3, [r6, #0]
 8011622:	422b      	tst	r3, r5
 8011624:	d039      	beq.n	801169a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011626:	f7fe fb1f 	bl	800fc68 <HAL_GetTick>
 801162a:	1bc0      	subs	r0, r0, r7
 801162c:	2864      	cmp	r0, #100	; 0x64
 801162e:	d9f7      	bls.n	8011620 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011630:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011632:	b002      	add	sp, #8
 8011634:	bc04      	pop	{r2}
 8011636:	4690      	mov	r8, r2
 8011638:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801163a:	4ba5      	ldr	r3, [pc, #660]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	039b      	lsls	r3, r3, #14
 8011640:	d503      	bpl.n	801164a <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8011642:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011644:	6863      	ldr	r3, [r4, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d0f3      	beq.n	8011632 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	079b      	lsls	r3, r3, #30
 801164e:	d400      	bmi.n	8011652 <HAL_RCC_OscConfig+0x8a>
 8011650:	e08d      	b.n	801176e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011652:	4b9f      	ldr	r3, [pc, #636]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	220c      	movs	r2, #12
 8011658:	421a      	tst	r2, r3
 801165a:	d077      	beq.n	801174c <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801165c:	4b9c      	ldr	r3, [pc, #624]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801165e:	685a      	ldr	r2, [r3, #4]
 8011660:	230c      	movs	r3, #12
 8011662:	4013      	ands	r3, r2
 8011664:	2b08      	cmp	r3, #8
 8011666:	d068      	beq.n	801173a <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011668:	68e3      	ldr	r3, [r4, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d100      	bne.n	8011670 <HAL_RCC_OscConfig+0xa8>
 801166e:	e0a1      	b.n	80117b4 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011670:	4a97      	ldr	r2, [pc, #604]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011672:	6813      	ldr	r3, [r2, #0]
 8011674:	2101      	movs	r1, #1
 8011676:	430b      	orrs	r3, r1
 8011678:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801167a:	f7fe faf5 	bl	800fc68 <HAL_GetTick>
 801167e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011680:	4e93      	ldr	r6, [pc, #588]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011682:	2502      	movs	r5, #2
 8011684:	6833      	ldr	r3, [r6, #0]
 8011686:	421d      	tst	r5, r3
 8011688:	d000      	beq.n	801168c <HAL_RCC_OscConfig+0xc4>
 801168a:	e08a      	b.n	80117a2 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801168c:	f7fe faec 	bl	800fc68 <HAL_GetTick>
 8011690:	1bc0      	subs	r0, r0, r7
 8011692:	2864      	cmp	r0, #100	; 0x64
 8011694:	d9f6      	bls.n	8011684 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8011696:	2003      	movs	r0, #3
 8011698:	e7cb      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801169a:	6863      	ldr	r3, [r4, #4]
 801169c:	2b01      	cmp	r3, #1
 801169e:	d00b      	beq.n	80116b8 <HAL_RCC_OscConfig+0xf0>
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d122      	bne.n	80116ea <HAL_RCC_OscConfig+0x122>
 80116a4:	4b8a      	ldr	r3, [pc, #552]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	498a      	ldr	r1, [pc, #552]	; (80118d4 <HAL_RCC_OscConfig+0x30c>)
 80116aa:	400a      	ands	r2, r1
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	4989      	ldr	r1, [pc, #548]	; (80118d8 <HAL_RCC_OscConfig+0x310>)
 80116b2:	400a      	ands	r2, r1
 80116b4:	601a      	str	r2, [r3, #0]
 80116b6:	e005      	b.n	80116c4 <HAL_RCC_OscConfig+0xfc>
 80116b8:	4a85      	ldr	r2, [pc, #532]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80116ba:	6811      	ldr	r1, [r2, #0]
 80116bc:	2380      	movs	r3, #128	; 0x80
 80116be:	025b      	lsls	r3, r3, #9
 80116c0:	430b      	orrs	r3, r1
 80116c2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80116c4:	6863      	ldr	r3, [r4, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d027      	beq.n	801171a <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 80116ca:	f7fe facd 	bl	800fc68 <HAL_GetTick>
 80116ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116d0:	4e7f      	ldr	r6, [pc, #508]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80116d2:	2580      	movs	r5, #128	; 0x80
 80116d4:	02ad      	lsls	r5, r5, #10
 80116d6:	6833      	ldr	r3, [r6, #0]
 80116d8:	422b      	tst	r3, r5
 80116da:	d1b6      	bne.n	801164a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80116dc:	f7fe fac4 	bl	800fc68 <HAL_GetTick>
 80116e0:	1bc0      	subs	r0, r0, r7
 80116e2:	2864      	cmp	r0, #100	; 0x64
 80116e4:	d9f7      	bls.n	80116d6 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80116e6:	2003      	movs	r0, #3
 80116e8:	e7a3      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80116ea:	2b05      	cmp	r3, #5
 80116ec:	d009      	beq.n	8011702 <HAL_RCC_OscConfig+0x13a>
 80116ee:	4b78      	ldr	r3, [pc, #480]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	4978      	ldr	r1, [pc, #480]	; (80118d4 <HAL_RCC_OscConfig+0x30c>)
 80116f4:	400a      	ands	r2, r1
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	4977      	ldr	r1, [pc, #476]	; (80118d8 <HAL_RCC_OscConfig+0x310>)
 80116fc:	400a      	ands	r2, r1
 80116fe:	601a      	str	r2, [r3, #0]
 8011700:	e7e0      	b.n	80116c4 <HAL_RCC_OscConfig+0xfc>
 8011702:	4b73      	ldr	r3, [pc, #460]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011704:	6819      	ldr	r1, [r3, #0]
 8011706:	2280      	movs	r2, #128	; 0x80
 8011708:	02d2      	lsls	r2, r2, #11
 801170a:	430a      	orrs	r2, r1
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	6819      	ldr	r1, [r3, #0]
 8011710:	2280      	movs	r2, #128	; 0x80
 8011712:	0252      	lsls	r2, r2, #9
 8011714:	430a      	orrs	r2, r1
 8011716:	601a      	str	r2, [r3, #0]
 8011718:	e7d4      	b.n	80116c4 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 801171a:	f7fe faa5 	bl	800fc68 <HAL_GetTick>
 801171e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011720:	4e6b      	ldr	r6, [pc, #428]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011722:	2580      	movs	r5, #128	; 0x80
 8011724:	02ad      	lsls	r5, r5, #10
 8011726:	6833      	ldr	r3, [r6, #0]
 8011728:	422b      	tst	r3, r5
 801172a:	d08e      	beq.n	801164a <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801172c:	f7fe fa9c 	bl	800fc68 <HAL_GetTick>
 8011730:	1bc0      	subs	r0, r0, r7
 8011732:	2864      	cmp	r0, #100	; 0x64
 8011734:	d9f7      	bls.n	8011726 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8011736:	2003      	movs	r0, #3
 8011738:	e77b      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801173a:	4b65      	ldr	r3, [pc, #404]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	22c0      	movs	r2, #192	; 0xc0
 8011740:	0252      	lsls	r2, r2, #9
 8011742:	4013      	ands	r3, r2
 8011744:	2280      	movs	r2, #128	; 0x80
 8011746:	0212      	lsls	r2, r2, #8
 8011748:	4293      	cmp	r3, r2
 801174a:	d18d      	bne.n	8011668 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801174c:	4b60      	ldr	r3, [pc, #384]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	079b      	lsls	r3, r3, #30
 8011752:	d504      	bpl.n	801175e <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011754:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011756:	68e3      	ldr	r3, [r4, #12]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d000      	beq.n	801175e <HAL_RCC_OscConfig+0x196>
 801175c:	e769      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801175e:	495c      	ldr	r1, [pc, #368]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011760:	680a      	ldr	r2, [r1, #0]
 8011762:	6923      	ldr	r3, [r4, #16]
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	20f8      	movs	r0, #248	; 0xf8
 8011768:	4382      	bics	r2, r0
 801176a:	4313      	orrs	r3, r2
 801176c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	071b      	lsls	r3, r3, #28
 8011772:	d547      	bpl.n	8011804 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011774:	6a23      	ldr	r3, [r4, #32]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d030      	beq.n	80117dc <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801177a:	4a55      	ldr	r2, [pc, #340]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801177c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801177e:	2101      	movs	r1, #1
 8011780:	430b      	orrs	r3, r1
 8011782:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011784:	f7fe fa70 	bl	800fc68 <HAL_GetTick>
 8011788:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801178a:	4e51      	ldr	r6, [pc, #324]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801178c:	2502      	movs	r5, #2
 801178e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011790:	421d      	tst	r5, r3
 8011792:	d137      	bne.n	8011804 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011794:	f7fe fa68 	bl	800fc68 <HAL_GetTick>
 8011798:	1bc0      	subs	r0, r0, r7
 801179a:	2864      	cmp	r0, #100	; 0x64
 801179c:	d9f7      	bls.n	801178e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801179e:	2003      	movs	r0, #3
 80117a0:	e747      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80117a2:	494b      	ldr	r1, [pc, #300]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80117a4:	680a      	ldr	r2, [r1, #0]
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	00db      	lsls	r3, r3, #3
 80117aa:	20f8      	movs	r0, #248	; 0xf8
 80117ac:	4382      	bics	r2, r0
 80117ae:	4313      	orrs	r3, r2
 80117b0:	600b      	str	r3, [r1, #0]
 80117b2:	e7dc      	b.n	801176e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 80117b4:	4a46      	ldr	r2, [pc, #280]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80117b6:	6813      	ldr	r3, [r2, #0]
 80117b8:	2101      	movs	r1, #1
 80117ba:	438b      	bics	r3, r1
 80117bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80117be:	f7fe fa53 	bl	800fc68 <HAL_GetTick>
 80117c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80117c4:	4e42      	ldr	r6, [pc, #264]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80117c6:	2502      	movs	r5, #2
 80117c8:	6833      	ldr	r3, [r6, #0]
 80117ca:	421d      	tst	r5, r3
 80117cc:	d0cf      	beq.n	801176e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80117ce:	f7fe fa4b 	bl	800fc68 <HAL_GetTick>
 80117d2:	1bc0      	subs	r0, r0, r7
 80117d4:	2864      	cmp	r0, #100	; 0x64
 80117d6:	d9f7      	bls.n	80117c8 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80117d8:	2003      	movs	r0, #3
 80117da:	e72a      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80117dc:	4a3c      	ldr	r2, [pc, #240]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80117de:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80117e0:	2101      	movs	r1, #1
 80117e2:	438b      	bics	r3, r1
 80117e4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80117e6:	f7fe fa3f 	bl	800fc68 <HAL_GetTick>
 80117ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80117ec:	4e38      	ldr	r6, [pc, #224]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 80117ee:	2502      	movs	r5, #2
 80117f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80117f2:	421d      	tst	r5, r3
 80117f4:	d006      	beq.n	8011804 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80117f6:	f7fe fa37 	bl	800fc68 <HAL_GetTick>
 80117fa:	1bc0      	subs	r0, r0, r7
 80117fc:	2864      	cmp	r0, #100	; 0x64
 80117fe:	d9f7      	bls.n	80117f0 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8011800:	2003      	movs	r0, #3
 8011802:	e716      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	075b      	lsls	r3, r3, #29
 8011808:	d442      	bmi.n	8011890 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801180a:	6823      	ldr	r3, [r4, #0]
 801180c:	06db      	lsls	r3, r3, #27
 801180e:	d512      	bpl.n	8011836 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011810:	6963      	ldr	r3, [r4, #20]
 8011812:	2b01      	cmp	r3, #1
 8011814:	d100      	bne.n	8011818 <HAL_RCC_OscConfig+0x250>
 8011816:	e0ce      	b.n	80119b6 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011818:	3305      	adds	r3, #5
 801181a:	d000      	beq.n	801181e <HAL_RCC_OscConfig+0x256>
 801181c:	e0ec      	b.n	80119f8 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 801181e:	4a2c      	ldr	r2, [pc, #176]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011820:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011822:	2104      	movs	r1, #4
 8011824:	438b      	bics	r3, r1
 8011826:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011828:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801182a:	69a3      	ldr	r3, [r4, #24]
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	20f8      	movs	r0, #248	; 0xf8
 8011830:	4381      	bics	r1, r0
 8011832:	430b      	orrs	r3, r1
 8011834:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	069b      	lsls	r3, r3, #26
 801183a:	d400      	bmi.n	801183e <HAL_RCC_OscConfig+0x276>
 801183c:	e106      	b.n	8011a4c <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801183e:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011840:	685a      	ldr	r2, [r3, #4]
 8011842:	230c      	movs	r3, #12
 8011844:	4013      	ands	r3, r2
 8011846:	2b0c      	cmp	r3, #12
 8011848:	d100      	bne.n	801184c <HAL_RCC_OscConfig+0x284>
 801184a:	e0f6      	b.n	8011a3a <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801184c:	4b20      	ldr	r3, [pc, #128]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	230c      	movs	r3, #12
 8011852:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011854:	2b08      	cmp	r3, #8
 8011856:	d100      	bne.n	801185a <HAL_RCC_OscConfig+0x292>
 8011858:	e0e7      	b.n	8011a2a <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801185a:	69e3      	ldr	r3, [r4, #28]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d100      	bne.n	8011862 <HAL_RCC_OscConfig+0x29a>
 8011860:	e116      	b.n	8011a90 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8011862:	4a1b      	ldr	r2, [pc, #108]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011864:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011866:	2380      	movs	r3, #128	; 0x80
 8011868:	025b      	lsls	r3, r3, #9
 801186a:	430b      	orrs	r3, r1
 801186c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801186e:	f7fe f9fb 	bl	800fc68 <HAL_GetTick>
 8011872:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011874:	4e16      	ldr	r6, [pc, #88]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011876:	2580      	movs	r5, #128	; 0x80
 8011878:	026d      	lsls	r5, r5, #9
 801187a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801187c:	422b      	tst	r3, r5
 801187e:	d000      	beq.n	8011882 <HAL_RCC_OscConfig+0x2ba>
 8011880:	e0e4      	b.n	8011a4c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011882:	f7fe f9f1 	bl	800fc68 <HAL_GetTick>
 8011886:	1bc0      	subs	r0, r0, r7
 8011888:	2864      	cmp	r0, #100	; 0x64
 801188a:	d9f6      	bls.n	801187a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 801188c:	2003      	movs	r0, #3
 801188e:	e6d0      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011890:	4a0f      	ldr	r2, [pc, #60]	; (80118d0 <HAL_RCC_OscConfig+0x308>)
 8011892:	69d1      	ldr	r1, [r2, #28]
 8011894:	2080      	movs	r0, #128	; 0x80
 8011896:	0540      	lsls	r0, r0, #21
 8011898:	4301      	orrs	r1, r0
 801189a:	61d1      	str	r1, [r2, #28]
 801189c:	69d3      	ldr	r3, [r2, #28]
 801189e:	4003      	ands	r3, r0
 80118a0:	9301      	str	r3, [sp, #4]
 80118a2:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80118a4:	4a0d      	ldr	r2, [pc, #52]	; (80118dc <HAL_RCC_OscConfig+0x314>)
 80118a6:	6811      	ldr	r1, [r2, #0]
 80118a8:	2380      	movs	r3, #128	; 0x80
 80118aa:	005b      	lsls	r3, r3, #1
 80118ac:	430b      	orrs	r3, r1
 80118ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80118b0:	f7fe f9da 	bl	800fc68 <HAL_GetTick>
 80118b4:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80118b6:	4e09      	ldr	r6, [pc, #36]	; (80118dc <HAL_RCC_OscConfig+0x314>)
 80118b8:	2580      	movs	r5, #128	; 0x80
 80118ba:	006d      	lsls	r5, r5, #1
 80118bc:	6833      	ldr	r3, [r6, #0]
 80118be:	422b      	tst	r3, r5
 80118c0:	d10e      	bne.n	80118e0 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80118c2:	f7fe f9d1 	bl	800fc68 <HAL_GetTick>
 80118c6:	1bc0      	subs	r0, r0, r7
 80118c8:	2864      	cmp	r0, #100	; 0x64
 80118ca:	d9f7      	bls.n	80118bc <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 80118cc:	2003      	movs	r0, #3
 80118ce:	e6b0      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
 80118d0:	40021000 	.word	0x40021000
 80118d4:	fffeffff 	.word	0xfffeffff
 80118d8:	fffbffff 	.word	0xfffbffff
 80118dc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80118e0:	4b95      	ldr	r3, [pc, #596]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 80118e2:	6a1a      	ldr	r2, [r3, #32]
 80118e4:	2101      	movs	r1, #1
 80118e6:	438a      	bics	r2, r1
 80118e8:	621a      	str	r2, [r3, #32]
 80118ea:	6a1a      	ldr	r2, [r3, #32]
 80118ec:	3103      	adds	r1, #3
 80118ee:	438a      	bics	r2, r1
 80118f0:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80118f2:	f7fe f9b9 	bl	800fc68 <HAL_GetTick>
 80118f6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80118f8:	4e8f      	ldr	r6, [pc, #572]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 80118fa:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80118fc:	4f8f      	ldr	r7, [pc, #572]	; (8011b3c <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80118fe:	6a33      	ldr	r3, [r6, #32]
 8011900:	421d      	tst	r5, r3
 8011902:	d007      	beq.n	8011914 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011904:	f7fe f9b0 	bl	800fc68 <HAL_GetTick>
 8011908:	4643      	mov	r3, r8
 801190a:	1ac0      	subs	r0, r0, r3
 801190c:	42b8      	cmp	r0, r7
 801190e:	d9f6      	bls.n	80118fe <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8011910:	2003      	movs	r0, #3
 8011912:	e68e      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011914:	68a3      	ldr	r3, [r4, #8]
 8011916:	2b01      	cmp	r3, #1
 8011918:	d00b      	beq.n	8011932 <HAL_RCC_OscConfig+0x36a>
 801191a:	2b00      	cmp	r3, #0
 801191c:	d123      	bne.n	8011966 <HAL_RCC_OscConfig+0x39e>
 801191e:	4b86      	ldr	r3, [pc, #536]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011920:	6a1a      	ldr	r2, [r3, #32]
 8011922:	2101      	movs	r1, #1
 8011924:	438a      	bics	r2, r1
 8011926:	621a      	str	r2, [r3, #32]
 8011928:	6a1a      	ldr	r2, [r3, #32]
 801192a:	3103      	adds	r1, #3
 801192c:	438a      	bics	r2, r1
 801192e:	621a      	str	r2, [r3, #32]
 8011930:	e004      	b.n	801193c <HAL_RCC_OscConfig+0x374>
 8011932:	4a81      	ldr	r2, [pc, #516]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011934:	6a13      	ldr	r3, [r2, #32]
 8011936:	2101      	movs	r1, #1
 8011938:	430b      	orrs	r3, r1
 801193a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801193c:	68a3      	ldr	r3, [r4, #8]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d027      	beq.n	8011992 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8011942:	f7fe f991 	bl	800fc68 <HAL_GetTick>
 8011946:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011948:	4e7b      	ldr	r6, [pc, #492]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 801194a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801194c:	4f7b      	ldr	r7, [pc, #492]	; (8011b3c <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801194e:	6a33      	ldr	r3, [r6, #32]
 8011950:	421d      	tst	r5, r3
 8011952:	d000      	beq.n	8011956 <HAL_RCC_OscConfig+0x38e>
 8011954:	e759      	b.n	801180a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011956:	f7fe f987 	bl	800fc68 <HAL_GetTick>
 801195a:	4643      	mov	r3, r8
 801195c:	1ac0      	subs	r0, r0, r3
 801195e:	42b8      	cmp	r0, r7
 8011960:	d9f5      	bls.n	801194e <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8011962:	2003      	movs	r0, #3
 8011964:	e665      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011966:	2b05      	cmp	r3, #5
 8011968:	d009      	beq.n	801197e <HAL_RCC_OscConfig+0x3b6>
 801196a:	4b73      	ldr	r3, [pc, #460]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 801196c:	6a1a      	ldr	r2, [r3, #32]
 801196e:	2101      	movs	r1, #1
 8011970:	438a      	bics	r2, r1
 8011972:	621a      	str	r2, [r3, #32]
 8011974:	6a1a      	ldr	r2, [r3, #32]
 8011976:	3103      	adds	r1, #3
 8011978:	438a      	bics	r2, r1
 801197a:	621a      	str	r2, [r3, #32]
 801197c:	e7de      	b.n	801193c <HAL_RCC_OscConfig+0x374>
 801197e:	4b6e      	ldr	r3, [pc, #440]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011980:	6a1a      	ldr	r2, [r3, #32]
 8011982:	2104      	movs	r1, #4
 8011984:	430a      	orrs	r2, r1
 8011986:	621a      	str	r2, [r3, #32]
 8011988:	6a1a      	ldr	r2, [r3, #32]
 801198a:	3903      	subs	r1, #3
 801198c:	430a      	orrs	r2, r1
 801198e:	621a      	str	r2, [r3, #32]
 8011990:	e7d4      	b.n	801193c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8011992:	f7fe f969 	bl	800fc68 <HAL_GetTick>
 8011996:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011998:	4e67      	ldr	r6, [pc, #412]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 801199a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801199c:	4f67      	ldr	r7, [pc, #412]	; (8011b3c <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801199e:	6a33      	ldr	r3, [r6, #32]
 80119a0:	421d      	tst	r5, r3
 80119a2:	d100      	bne.n	80119a6 <HAL_RCC_OscConfig+0x3de>
 80119a4:	e731      	b.n	801180a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80119a6:	f7fe f95f 	bl	800fc68 <HAL_GetTick>
 80119aa:	4643      	mov	r3, r8
 80119ac:	1ac0      	subs	r0, r0, r3
 80119ae:	42b8      	cmp	r0, r7
 80119b0:	d9f5      	bls.n	801199e <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 80119b2:	2003      	movs	r0, #3
 80119b4:	e63d      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80119b6:	4b60      	ldr	r3, [pc, #384]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 80119b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119ba:	2104      	movs	r1, #4
 80119bc:	430a      	orrs	r2, r1
 80119be:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80119c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119c2:	3903      	subs	r1, #3
 80119c4:	430a      	orrs	r2, r1
 80119c6:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80119c8:	f7fe f94e 	bl	800fc68 <HAL_GetTick>
 80119cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80119ce:	4e5a      	ldr	r6, [pc, #360]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 80119d0:	2502      	movs	r5, #2
 80119d2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80119d4:	421d      	tst	r5, r3
 80119d6:	d106      	bne.n	80119e6 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80119d8:	f7fe f946 	bl	800fc68 <HAL_GetTick>
 80119dc:	1bc0      	subs	r0, r0, r7
 80119de:	2864      	cmp	r0, #100	; 0x64
 80119e0:	d9f7      	bls.n	80119d2 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80119e2:	2003      	movs	r0, #3
 80119e4:	e625      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80119e6:	4954      	ldr	r1, [pc, #336]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 80119e8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80119ea:	69a3      	ldr	r3, [r4, #24]
 80119ec:	00db      	lsls	r3, r3, #3
 80119ee:	20f8      	movs	r0, #248	; 0xf8
 80119f0:	4382      	bics	r2, r0
 80119f2:	4313      	orrs	r3, r2
 80119f4:	634b      	str	r3, [r1, #52]	; 0x34
 80119f6:	e71e      	b.n	8011836 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80119f8:	4b4f      	ldr	r3, [pc, #316]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 80119fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119fc:	2104      	movs	r1, #4
 80119fe:	430a      	orrs	r2, r1
 8011a00:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a04:	3903      	subs	r1, #3
 8011a06:	438a      	bics	r2, r1
 8011a08:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011a0a:	f7fe f92d 	bl	800fc68 <HAL_GetTick>
 8011a0e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011a10:	4e49      	ldr	r6, [pc, #292]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a12:	2502      	movs	r5, #2
 8011a14:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011a16:	421d      	tst	r5, r3
 8011a18:	d100      	bne.n	8011a1c <HAL_RCC_OscConfig+0x454>
 8011a1a:	e70c      	b.n	8011836 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011a1c:	f7fe f924 	bl	800fc68 <HAL_GetTick>
 8011a20:	1bc0      	subs	r0, r0, r7
 8011a22:	2864      	cmp	r0, #100	; 0x64
 8011a24:	d9f6      	bls.n	8011a14 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8011a26:	2003      	movs	r0, #3
 8011a28:	e603      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011a2a:	4b43      	ldr	r3, [pc, #268]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	22c0      	movs	r2, #192	; 0xc0
 8011a30:	0252      	lsls	r2, r2, #9
 8011a32:	4013      	ands	r3, r2
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d000      	beq.n	8011a3a <HAL_RCC_OscConfig+0x472>
 8011a38:	e70f      	b.n	801185a <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011a3a:	4b3f      	ldr	r3, [pc, #252]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a3e:	03db      	lsls	r3, r3, #15
 8011a40:	d504      	bpl.n	8011a4c <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8011a42:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011a44:	69e3      	ldr	r3, [r4, #28]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d000      	beq.n	8011a4c <HAL_RCC_OscConfig+0x484>
 8011a4a:	e5f2      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8011a4e:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d100      	bne.n	8011a56 <HAL_RCC_OscConfig+0x48e>
 8011a54:	e5ed      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011a56:	4a38      	ldr	r2, [pc, #224]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a58:	6851      	ldr	r1, [r2, #4]
 8011a5a:	220c      	movs	r2, #12
 8011a5c:	400a      	ands	r2, r1
 8011a5e:	2a08      	cmp	r2, #8
 8011a60:	d068      	beq.n	8011b34 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d029      	beq.n	8011aba <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8011a66:	4a34      	ldr	r2, [pc, #208]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a68:	6813      	ldr	r3, [r2, #0]
 8011a6a:	4935      	ldr	r1, [pc, #212]	; (8011b40 <HAL_RCC_OscConfig+0x578>)
 8011a6c:	400b      	ands	r3, r1
 8011a6e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011a70:	f7fe f8fa 	bl	800fc68 <HAL_GetTick>
 8011a74:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011a76:	4d30      	ldr	r5, [pc, #192]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a78:	2480      	movs	r4, #128	; 0x80
 8011a7a:	04a4      	lsls	r4, r4, #18
 8011a7c:	682b      	ldr	r3, [r5, #0]
 8011a7e:	4223      	tst	r3, r4
 8011a80:	d056      	beq.n	8011b30 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011a82:	f7fe f8f1 	bl	800fc68 <HAL_GetTick>
 8011a86:	1b80      	subs	r0, r0, r6
 8011a88:	2864      	cmp	r0, #100	; 0x64
 8011a8a:	d9f7      	bls.n	8011a7c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8011a8c:	2003      	movs	r0, #3
 8011a8e:	e5d0      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8011a90:	4a29      	ldr	r2, [pc, #164]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011a92:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011a94:	492b      	ldr	r1, [pc, #172]	; (8011b44 <HAL_RCC_OscConfig+0x57c>)
 8011a96:	400b      	ands	r3, r1
 8011a98:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011a9a:	f7fe f8e5 	bl	800fc68 <HAL_GetTick>
 8011a9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011aa0:	4e25      	ldr	r6, [pc, #148]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011aa2:	2580      	movs	r5, #128	; 0x80
 8011aa4:	026d      	lsls	r5, r5, #9
 8011aa6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011aa8:	422b      	tst	r3, r5
 8011aaa:	d0cf      	beq.n	8011a4c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011aac:	f7fe f8dc 	bl	800fc68 <HAL_GetTick>
 8011ab0:	1bc0      	subs	r0, r0, r7
 8011ab2:	2864      	cmp	r0, #100	; 0x64
 8011ab4:	d9f7      	bls.n	8011aa6 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8011ab6:	2003      	movs	r0, #3
 8011ab8:	e5bb      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8011aba:	4a1f      	ldr	r2, [pc, #124]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011abc:	6813      	ldr	r3, [r2, #0]
 8011abe:	4920      	ldr	r1, [pc, #128]	; (8011b40 <HAL_RCC_OscConfig+0x578>)
 8011ac0:	400b      	ands	r3, r1
 8011ac2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011ac4:	f7fe f8d0 	bl	800fc68 <HAL_GetTick>
 8011ac8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011aca:	4e1b      	ldr	r6, [pc, #108]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011acc:	2580      	movs	r5, #128	; 0x80
 8011ace:	04ad      	lsls	r5, r5, #18
 8011ad0:	6833      	ldr	r3, [r6, #0]
 8011ad2:	422b      	tst	r3, r5
 8011ad4:	d006      	beq.n	8011ae4 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ad6:	f7fe f8c7 	bl	800fc68 <HAL_GetTick>
 8011ada:	1bc0      	subs	r0, r0, r7
 8011adc:	2864      	cmp	r0, #100	; 0x64
 8011ade:	d9f7      	bls.n	8011ad0 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8011ae0:	2003      	movs	r0, #3
 8011ae2:	e5a6      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011ae4:	4b14      	ldr	r3, [pc, #80]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae8:	210f      	movs	r1, #15
 8011aea:	438a      	bics	r2, r1
 8011aec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011aee:	430a      	orrs	r2, r1
 8011af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8011af2:	6859      	ldr	r1, [r3, #4]
 8011af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011af6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011af8:	4302      	orrs	r2, r0
 8011afa:	4813      	ldr	r0, [pc, #76]	; (8011b48 <HAL_RCC_OscConfig+0x580>)
 8011afc:	4001      	ands	r1, r0
 8011afe:	430a      	orrs	r2, r1
 8011b00:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8011b02:	6819      	ldr	r1, [r3, #0]
 8011b04:	2280      	movs	r2, #128	; 0x80
 8011b06:	0452      	lsls	r2, r2, #17
 8011b08:	430a      	orrs	r2, r1
 8011b0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011b0c:	f7fe f8ac 	bl	800fc68 <HAL_GetTick>
 8011b10:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011b12:	4d09      	ldr	r5, [pc, #36]	; (8011b38 <HAL_RCC_OscConfig+0x570>)
 8011b14:	2480      	movs	r4, #128	; 0x80
 8011b16:	04a4      	lsls	r4, r4, #18
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	4223      	tst	r3, r4
 8011b1c:	d106      	bne.n	8011b2c <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b1e:	f7fe f8a3 	bl	800fc68 <HAL_GetTick>
 8011b22:	1b80      	subs	r0, r0, r6
 8011b24:	2864      	cmp	r0, #100	; 0x64
 8011b26:	d9f7      	bls.n	8011b18 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8011b28:	2003      	movs	r0, #3
 8011b2a:	e582      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8011b2c:	2000      	movs	r0, #0
 8011b2e:	e580      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
 8011b30:	2000      	movs	r0, #0
 8011b32:	e57e      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8011b34:	2001      	movs	r0, #1
 8011b36:	e57c      	b.n	8011632 <HAL_RCC_OscConfig+0x6a>
 8011b38:	40021000 	.word	0x40021000
 8011b3c:	00001388 	.word	0x00001388
 8011b40:	feffffff 	.word	0xfeffffff
 8011b44:	fffeffff 	.word	0xfffeffff
 8011b48:	ffc27fff 	.word	0xffc27fff

08011b4c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b4e:	46ce      	mov	lr, r9
 8011b50:	4647      	mov	r7, r8
 8011b52:	b580      	push	{r7, lr}
 8011b54:	0005      	movs	r5, r0
 8011b56:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011b58:	4b95      	ldr	r3, [pc, #596]	; (8011db0 <HAL_RCC_ClockConfig+0x264>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	4013      	ands	r3, r2
 8011b60:	428b      	cmp	r3, r1
 8011b62:	d300      	bcc.n	8011b66 <HAL_RCC_ClockConfig+0x1a>
 8011b64:	e089      	b.n	8011c7a <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b66:	4992      	ldr	r1, [pc, #584]	; (8011db0 <HAL_RCC_ClockConfig+0x264>)
 8011b68:	680b      	ldr	r3, [r1, #0]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	4393      	bics	r3, r2
 8011b6e:	4323      	orrs	r3, r4
 8011b70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011b72:	680b      	ldr	r3, [r1, #0]
 8011b74:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8011b76:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011b78:	42a2      	cmp	r2, r4
 8011b7a:	d003      	beq.n	8011b84 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011b7c:	bc0c      	pop	{r2, r3}
 8011b7e:	4690      	mov	r8, r2
 8011b80:	4699      	mov	r9, r3
 8011b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	079b      	lsls	r3, r3, #30
 8011b88:	d506      	bpl.n	8011b98 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011b8a:	4a8a      	ldr	r2, [pc, #552]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011b8c:	6853      	ldr	r3, [r2, #4]
 8011b8e:	21f0      	movs	r1, #240	; 0xf0
 8011b90:	438b      	bics	r3, r1
 8011b92:	68a9      	ldr	r1, [r5, #8]
 8011b94:	430b      	orrs	r3, r1
 8011b96:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011b98:	682b      	ldr	r3, [r5, #0]
 8011b9a:	07db      	lsls	r3, r3, #31
 8011b9c:	d400      	bmi.n	8011ba0 <HAL_RCC_ClockConfig+0x54>
 8011b9e:	e0f7      	b.n	8011d90 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ba0:	686b      	ldr	r3, [r5, #4]
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d009      	beq.n	8011bba <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011ba6:	2b02      	cmp	r3, #2
 8011ba8:	d02b      	beq.n	8011c02 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011baa:	2b03      	cmp	r3, #3
 8011bac:	d02f      	beq.n	8011c0e <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011bae:	4a81      	ldr	r2, [pc, #516]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011bb0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011bb2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011bb4:	0792      	lsls	r2, r2, #30
 8011bb6:	d405      	bmi.n	8011bc4 <HAL_RCC_ClockConfig+0x78>
 8011bb8:	e7e0      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011bba:	4a7e      	ldr	r2, [pc, #504]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011bbc:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011bbe:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011bc0:	0392      	lsls	r2, r2, #14
 8011bc2:	d5db      	bpl.n	8011b7c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011bc4:	497b      	ldr	r1, [pc, #492]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011bc6:	684a      	ldr	r2, [r1, #4]
 8011bc8:	2003      	movs	r0, #3
 8011bca:	4382      	bics	r2, r0
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011bd0:	f7fe f84a 	bl	800fc68 <HAL_GetTick>
 8011bd4:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011bd6:	686b      	ldr	r3, [r5, #4]
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d01e      	beq.n	8011c1a <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011bdc:	2b02      	cmp	r3, #2
 8011bde:	d02c      	beq.n	8011c3a <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011be0:	2b03      	cmp	r3, #3
 8011be2:	d03a      	beq.n	8011c5a <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011be4:	4f73      	ldr	r7, [pc, #460]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011be6:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011be8:	4b73      	ldr	r3, [pc, #460]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011bea:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	421e      	tst	r6, r3
 8011bf0:	d100      	bne.n	8011bf4 <HAL_RCC_ClockConfig+0xa8>
 8011bf2:	e0cd      	b.n	8011d90 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011bf4:	f7fe f838 	bl	800fc68 <HAL_GetTick>
 8011bf8:	1b00      	subs	r0, r0, r4
 8011bfa:	4540      	cmp	r0, r8
 8011bfc:	d9f6      	bls.n	8011bec <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8011bfe:	2003      	movs	r0, #3
 8011c00:	e7bc      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c02:	4a6c      	ldr	r2, [pc, #432]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011c04:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011c06:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c08:	0192      	lsls	r2, r2, #6
 8011c0a:	d4db      	bmi.n	8011bc4 <HAL_RCC_ClockConfig+0x78>
 8011c0c:	e7b6      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011c0e:	4a69      	ldr	r2, [pc, #420]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8011c12:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011c14:	03d2      	lsls	r2, r2, #15
 8011c16:	d4d5      	bmi.n	8011bc4 <HAL_RCC_ClockConfig+0x78>
 8011c18:	e7b0      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011c1a:	4f66      	ldr	r7, [pc, #408]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011c1c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c1e:	4b66      	ldr	r3, [pc, #408]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011c20:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	4033      	ands	r3, r6
 8011c26:	2b04      	cmp	r3, #4
 8011c28:	d100      	bne.n	8011c2c <HAL_RCC_ClockConfig+0xe0>
 8011c2a:	e0b1      	b.n	8011d90 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c2c:	f7fe f81c 	bl	800fc68 <HAL_GetTick>
 8011c30:	1b00      	subs	r0, r0, r4
 8011c32:	4540      	cmp	r0, r8
 8011c34:	d9f5      	bls.n	8011c22 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8011c36:	2003      	movs	r0, #3
 8011c38:	e7a0      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011c3a:	4f5e      	ldr	r7, [pc, #376]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011c3c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c3e:	4b5e      	ldr	r3, [pc, #376]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011c40:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	4033      	ands	r3, r6
 8011c46:	2b08      	cmp	r3, #8
 8011c48:	d100      	bne.n	8011c4c <HAL_RCC_ClockConfig+0x100>
 8011c4a:	e0a1      	b.n	8011d90 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c4c:	f7fe f80c 	bl	800fc68 <HAL_GetTick>
 8011c50:	1b00      	subs	r0, r0, r4
 8011c52:	4540      	cmp	r0, r8
 8011c54:	d9f5      	bls.n	8011c42 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8011c56:	2003      	movs	r0, #3
 8011c58:	e790      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011c5a:	4f56      	ldr	r7, [pc, #344]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011c5c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c5e:	4b56      	ldr	r3, [pc, #344]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011c60:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4033      	ands	r3, r6
 8011c66:	2b0c      	cmp	r3, #12
 8011c68:	d100      	bne.n	8011c6c <HAL_RCC_ClockConfig+0x120>
 8011c6a:	e091      	b.n	8011d90 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c6c:	f7fd fffc 	bl	800fc68 <HAL_GetTick>
 8011c70:	1b00      	subs	r0, r0, r4
 8011c72:	4540      	cmp	r0, r8
 8011c74:	d9f5      	bls.n	8011c62 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8011c76:	2003      	movs	r0, #3
 8011c78:	e780      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c7a:	6803      	ldr	r3, [r0, #0]
 8011c7c:	079b      	lsls	r3, r3, #30
 8011c7e:	d506      	bpl.n	8011c8e <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c80:	4a4c      	ldr	r2, [pc, #304]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011c82:	6853      	ldr	r3, [r2, #4]
 8011c84:	21f0      	movs	r1, #240	; 0xf0
 8011c86:	438b      	bics	r3, r1
 8011c88:	6881      	ldr	r1, [r0, #8]
 8011c8a:	430b      	orrs	r3, r1
 8011c8c:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c8e:	682b      	ldr	r3, [r5, #0]
 8011c90:	07db      	lsls	r3, r3, #31
 8011c92:	d571      	bpl.n	8011d78 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c94:	686b      	ldr	r3, [r5, #4]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d009      	beq.n	8011cae <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	d02d      	beq.n	8011cfa <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c9e:	2b03      	cmp	r3, #3
 8011ca0:	d031      	beq.n	8011d06 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ca2:	4a44      	ldr	r2, [pc, #272]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011ca4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011ca6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ca8:	0792      	lsls	r2, r2, #30
 8011caa:	d406      	bmi.n	8011cba <HAL_RCC_ClockConfig+0x16e>
 8011cac:	e766      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011cae:	4a41      	ldr	r2, [pc, #260]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011cb0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011cb2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011cb4:	0392      	lsls	r2, r2, #14
 8011cb6:	d400      	bmi.n	8011cba <HAL_RCC_ClockConfig+0x16e>
 8011cb8:	e760      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011cba:	493e      	ldr	r1, [pc, #248]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011cbc:	684a      	ldr	r2, [r1, #4]
 8011cbe:	2003      	movs	r0, #3
 8011cc0:	4382      	bics	r2, r0
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011cc6:	f7fd ffcf 	bl	800fc68 <HAL_GetTick>
 8011cca:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ccc:	686b      	ldr	r3, [r5, #4]
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d01f      	beq.n	8011d12 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d02e      	beq.n	8011d34 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	d03d      	beq.n	8011d56 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011cda:	4b36      	ldr	r3, [pc, #216]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011cdc:	4698      	mov	r8, r3
 8011cde:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ce0:	4b35      	ldr	r3, [pc, #212]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011ce2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011ce4:	4643      	mov	r3, r8
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	421f      	tst	r7, r3
 8011cea:	d045      	beq.n	8011d78 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cec:	f7fd ffbc 	bl	800fc68 <HAL_GetTick>
 8011cf0:	1b80      	subs	r0, r0, r6
 8011cf2:	4548      	cmp	r0, r9
 8011cf4:	d9f6      	bls.n	8011ce4 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8011cf6:	2003      	movs	r0, #3
 8011cf8:	e740      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011cfa:	4a2e      	ldr	r2, [pc, #184]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011cfc:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011cfe:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d00:	0192      	lsls	r2, r2, #6
 8011d02:	d4da      	bmi.n	8011cba <HAL_RCC_ClockConfig+0x16e>
 8011d04:	e73a      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d06:	4a2b      	ldr	r2, [pc, #172]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8011d0a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d0c:	03d2      	lsls	r2, r2, #15
 8011d0e:	d4d4      	bmi.n	8011cba <HAL_RCC_ClockConfig+0x16e>
 8011d10:	e734      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d12:	4b28      	ldr	r3, [pc, #160]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011d14:	4698      	mov	r8, r3
 8011d16:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d18:	4b27      	ldr	r3, [pc, #156]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011d1a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d1c:	4643      	mov	r3, r8
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	403b      	ands	r3, r7
 8011d22:	2b04      	cmp	r3, #4
 8011d24:	d028      	beq.n	8011d78 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d26:	f7fd ff9f 	bl	800fc68 <HAL_GetTick>
 8011d2a:	1b80      	subs	r0, r0, r6
 8011d2c:	4548      	cmp	r0, r9
 8011d2e:	d9f5      	bls.n	8011d1c <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8011d30:	2003      	movs	r0, #3
 8011d32:	e723      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d34:	4b1f      	ldr	r3, [pc, #124]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011d36:	4698      	mov	r8, r3
 8011d38:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d3a:	4b1f      	ldr	r3, [pc, #124]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011d3c:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d3e:	4643      	mov	r3, r8
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	403b      	ands	r3, r7
 8011d44:	2b08      	cmp	r3, #8
 8011d46:	d017      	beq.n	8011d78 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d48:	f7fd ff8e 	bl	800fc68 <HAL_GetTick>
 8011d4c:	1b80      	subs	r0, r0, r6
 8011d4e:	4548      	cmp	r0, r9
 8011d50:	d9f5      	bls.n	8011d3e <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8011d52:	2003      	movs	r0, #3
 8011d54:	e712      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011d56:	4b17      	ldr	r3, [pc, #92]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011d58:	4698      	mov	r8, r3
 8011d5a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d5c:	4b16      	ldr	r3, [pc, #88]	; (8011db8 <HAL_RCC_ClockConfig+0x26c>)
 8011d5e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011d60:	4643      	mov	r3, r8
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	403b      	ands	r3, r7
 8011d66:	2b0c      	cmp	r3, #12
 8011d68:	d006      	beq.n	8011d78 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d6a:	f7fd ff7d 	bl	800fc68 <HAL_GetTick>
 8011d6e:	1b80      	subs	r0, r0, r6
 8011d70:	4548      	cmp	r0, r9
 8011d72:	d9f5      	bls.n	8011d60 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8011d74:	2003      	movs	r0, #3
 8011d76:	e701      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d78:	490d      	ldr	r1, [pc, #52]	; (8011db0 <HAL_RCC_ClockConfig+0x264>)
 8011d7a:	680b      	ldr	r3, [r1, #0]
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	4393      	bics	r3, r2
 8011d80:	4323      	orrs	r3, r4
 8011d82:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011d84:	680b      	ldr	r3, [r1, #0]
 8011d86:	401a      	ands	r2, r3
      return HAL_ERROR;
 8011d88:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011d8a:	42a2      	cmp	r2, r4
 8011d8c:	d000      	beq.n	8011d90 <HAL_RCC_ClockConfig+0x244>
 8011d8e:	e6f5      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	075b      	lsls	r3, r3, #29
 8011d94:	d506      	bpl.n	8011da4 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011d96:	4a07      	ldr	r2, [pc, #28]	; (8011db4 <HAL_RCC_ClockConfig+0x268>)
 8011d98:	6853      	ldr	r3, [r2, #4]
 8011d9a:	4908      	ldr	r1, [pc, #32]	; (8011dbc <HAL_RCC_ClockConfig+0x270>)
 8011d9c:	400b      	ands	r3, r1
 8011d9e:	68e9      	ldr	r1, [r5, #12]
 8011da0:	430b      	orrs	r3, r1
 8011da2:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011da4:	2000      	movs	r0, #0
 8011da6:	f7fd ff35 	bl	800fc14 <HAL_InitTick>
  return HAL_OK;
 8011daa:	2000      	movs	r0, #0
 8011dac:	e6e6      	b.n	8011b7c <HAL_RCC_ClockConfig+0x30>
 8011dae:	46c0      	nop			; (mov r8, r8)
 8011db0:	40022000 	.word	0x40022000
 8011db4:	40021000 	.word	0x40021000
 8011db8:	00001388 	.word	0x00001388
 8011dbc:	fffff8ff 	.word	0xfffff8ff

08011dc0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011dc0:	b530      	push	{r4, r5, lr}
 8011dc2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011dc4:	aa04      	add	r2, sp, #16
 8011dc6:	4b21      	ldr	r3, [pc, #132]	; (8011e4c <HAL_RCC_GetSysClockFreq+0x8c>)
 8011dc8:	0018      	movs	r0, r3
 8011dca:	c832      	ldmia	r0!, {r1, r4, r5}
 8011dcc:	c232      	stmia	r2!, {r1, r4, r5}
 8011dce:	0011      	movs	r1, r2
 8011dd0:	6802      	ldr	r2, [r0, #0]
 8011dd2:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011dd4:	466a      	mov	r2, sp
 8011dd6:	3310      	adds	r3, #16
 8011dd8:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011dda:	c213      	stmia	r2!, {r0, r1, r4}
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011de0:	4b1b      	ldr	r3, [pc, #108]	; (8011e50 <HAL_RCC_GetSysClockFreq+0x90>)
 8011de2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011de4:	200c      	movs	r0, #12
 8011de6:	4018      	ands	r0, r3
 8011de8:	2808      	cmp	r0, #8
 8011dea:	d00a      	beq.n	8011e02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011dec:	380c      	subs	r0, #12
 8011dee:	4243      	negs	r3, r0
 8011df0:	4158      	adcs	r0, r3
 8011df2:	4240      	negs	r0, r0
 8011df4:	4b17      	ldr	r3, [pc, #92]	; (8011e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8011df6:	4018      	ands	r0, r3
 8011df8:	4b17      	ldr	r3, [pc, #92]	; (8011e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8011dfa:	469c      	mov	ip, r3
 8011dfc:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011dfe:	b009      	add	sp, #36	; 0x24
 8011e00:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011e02:	0c99      	lsrs	r1, r3, #18
 8011e04:	220f      	movs	r2, #15
 8011e06:	4011      	ands	r1, r2
 8011e08:	a804      	add	r0, sp, #16
 8011e0a:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011e0c:	4910      	ldr	r1, [pc, #64]	; (8011e50 <HAL_RCC_GetSysClockFreq+0x90>)
 8011e0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011e10:	400a      	ands	r2, r1
 8011e12:	4669      	mov	r1, sp
 8011e14:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011e16:	22c0      	movs	r2, #192	; 0xc0
 8011e18:	0252      	lsls	r2, r2, #9
 8011e1a:	4013      	ands	r3, r2
 8011e1c:	2280      	movs	r2, #128	; 0x80
 8011e1e:	0252      	lsls	r2, r2, #9
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d008      	beq.n	8011e36 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011e24:	22c0      	movs	r2, #192	; 0xc0
 8011e26:	0252      	lsls	r2, r2, #9
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	d009      	beq.n	8011e40 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011e2c:	480a      	ldr	r0, [pc, #40]	; (8011e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8011e2e:	f7ee f985 	bl	800013c <__udivsi3>
 8011e32:	4360      	muls	r0, r4
 8011e34:	e7e3      	b.n	8011dfe <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011e36:	4808      	ldr	r0, [pc, #32]	; (8011e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8011e38:	f7ee f980 	bl	800013c <__udivsi3>
 8011e3c:	4360      	muls	r0, r4
 8011e3e:	e7de      	b.n	8011dfe <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011e40:	4806      	ldr	r0, [pc, #24]	; (8011e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8011e42:	f7ee f97b 	bl	800013c <__udivsi3>
 8011e46:	4360      	muls	r0, r4
 8011e48:	e7d9      	b.n	8011dfe <HAL_RCC_GetSysClockFreq+0x3e>
 8011e4a:	46c0      	nop			; (mov r8, r8)
 8011e4c:	08015844 	.word	0x08015844
 8011e50:	40021000 	.word	0x40021000
 8011e54:	02625a00 	.word	0x02625a00
 8011e58:	007a1200 	.word	0x007a1200
 8011e5c:	02dc6c00 	.word	0x02dc6c00

08011e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011e60:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011e62:	f7ff ffad 	bl	8011dc0 <HAL_RCC_GetSysClockFreq>
 8011e66:	4b05      	ldr	r3, [pc, #20]	; (8011e7c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	061b      	lsls	r3, r3, #24
 8011e6c:	0f1b      	lsrs	r3, r3, #28
 8011e6e:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <HAL_RCC_GetHCLKFreq+0x20>)
 8011e70:	5cd3      	ldrb	r3, [r2, r3]
 8011e72:	40d8      	lsrs	r0, r3
 8011e74:	4b03      	ldr	r3, [pc, #12]	; (8011e84 <HAL_RCC_GetHCLKFreq+0x24>)
 8011e76:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011e78:	bd10      	pop	{r4, pc}
 8011e7a:	46c0      	nop			; (mov r8, r8)
 8011e7c:	40021000 	.word	0x40021000
 8011e80:	080189cc 	.word	0x080189cc
 8011e84:	20000094 	.word	0x20000094

08011e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011e88:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011e8a:	f7ff ffe9 	bl	8011e60 <HAL_RCC_GetHCLKFreq>
 8011e8e:	4b04      	ldr	r3, [pc, #16]	; (8011ea0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	055b      	lsls	r3, r3, #21
 8011e94:	0f5b      	lsrs	r3, r3, #29
 8011e96:	4a03      	ldr	r2, [pc, #12]	; (8011ea4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011e98:	5cd3      	ldrb	r3, [r2, r3]
 8011e9a:	40d8      	lsrs	r0, r3
}    
 8011e9c:	bd10      	pop	{r4, pc}
 8011e9e:	46c0      	nop			; (mov r8, r8)
 8011ea0:	40021000 	.word	0x40021000
 8011ea4:	080189cc 	.word	0x080189cc

08011ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eaa:	46c6      	mov	lr, r8
 8011eac:	b500      	push	{lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011eb2:	6803      	ldr	r3, [r0, #0]
 8011eb4:	03db      	lsls	r3, r3, #15
 8011eb6:	d507      	bpl.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011eb8:	4b43      	ldr	r3, [pc, #268]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011eba:	6a1b      	ldr	r3, [r3, #32]
 8011ebc:	6842      	ldr	r2, [r0, #4]
 8011ebe:	4053      	eors	r3, r2
 8011ec0:	22c0      	movs	r2, #192	; 0xc0
 8011ec2:	0092      	lsls	r2, r2, #2
 8011ec4:	4213      	tst	r3, r2
 8011ec6:	d136      	bne.n	8011f36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	07db      	lsls	r3, r3, #31
 8011ecc:	d506      	bpl.n	8011edc <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011ece:	4a3e      	ldr	r2, [pc, #248]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ed0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011ed2:	2103      	movs	r1, #3
 8011ed4:	438b      	bics	r3, r1
 8011ed6:	68a1      	ldr	r1, [r4, #8]
 8011ed8:	430b      	orrs	r3, r1
 8011eda:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	079b      	lsls	r3, r3, #30
 8011ee0:	d506      	bpl.n	8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011ee2:	4a39      	ldr	r2, [pc, #228]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011ee6:	4939      	ldr	r1, [pc, #228]	; (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011ee8:	400b      	ands	r3, r1
 8011eea:	68e1      	ldr	r1, [r4, #12]
 8011eec:	430b      	orrs	r3, r1
 8011eee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011ef0:	6823      	ldr	r3, [r4, #0]
 8011ef2:	035b      	lsls	r3, r3, #13
 8011ef4:	d506      	bpl.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011ef6:	4a34      	ldr	r2, [pc, #208]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ef8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011efa:	4935      	ldr	r1, [pc, #212]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8011efc:	400b      	ands	r3, r1
 8011efe:	6921      	ldr	r1, [r4, #16]
 8011f00:	430b      	orrs	r3, r1
 8011f02:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011f04:	6823      	ldr	r3, [r4, #0]
 8011f06:	069b      	lsls	r3, r3, #26
 8011f08:	d506      	bpl.n	8011f18 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011f0a:	4a2f      	ldr	r2, [pc, #188]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011f0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f0e:	2110      	movs	r1, #16
 8011f10:	438b      	bics	r3, r1
 8011f12:	6961      	ldr	r1, [r4, #20]
 8011f14:	430b      	orrs	r3, r1
 8011f16:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011f18:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	055b      	lsls	r3, r3, #21
 8011f1e:	d506      	bpl.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011f20:	4a29      	ldr	r2, [pc, #164]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011f22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f24:	2140      	movs	r1, #64	; 0x40
 8011f26:	438b      	bics	r3, r1
 8011f28:	69a1      	ldr	r1, [r4, #24]
 8011f2a:	430b      	orrs	r3, r1
 8011f2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011f2e:	b002      	add	sp, #8
 8011f30:	bc04      	pop	{r2}
 8011f32:	4690      	mov	r8, r2
 8011f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011f36:	4a24      	ldr	r2, [pc, #144]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011f38:	69d1      	ldr	r1, [r2, #28]
 8011f3a:	2080      	movs	r0, #128	; 0x80
 8011f3c:	0540      	lsls	r0, r0, #21
 8011f3e:	4301      	orrs	r1, r0
 8011f40:	61d1      	str	r1, [r2, #28]
 8011f42:	69d3      	ldr	r3, [r2, #28]
 8011f44:	4003      	ands	r3, r0
 8011f46:	9301      	str	r3, [sp, #4]
 8011f48:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011f4a:	4a22      	ldr	r2, [pc, #136]	; (8011fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011f4c:	6811      	ldr	r1, [r2, #0]
 8011f4e:	2380      	movs	r3, #128	; 0x80
 8011f50:	005b      	lsls	r3, r3, #1
 8011f52:	430b      	orrs	r3, r1
 8011f54:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011f56:	f7fd fe87 	bl	800fc68 <HAL_GetTick>
 8011f5a:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011f5c:	4e1d      	ldr	r6, [pc, #116]	; (8011fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011f5e:	2580      	movs	r5, #128	; 0x80
 8011f60:	006d      	lsls	r5, r5, #1
 8011f62:	6833      	ldr	r3, [r6, #0]
 8011f64:	422b      	tst	r3, r5
 8011f66:	d106      	bne.n	8011f76 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011f68:	f7fd fe7e 	bl	800fc68 <HAL_GetTick>
 8011f6c:	1bc0      	subs	r0, r0, r7
 8011f6e:	2864      	cmp	r0, #100	; 0x64
 8011f70:	d9f7      	bls.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011f72:	2003      	movs	r0, #3
 8011f74:	e7db      	b.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011f76:	4b14      	ldr	r3, [pc, #80]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011f78:	6a18      	ldr	r0, [r3, #32]
 8011f7a:	4a17      	ldr	r2, [pc, #92]	; (8011fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011f7c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011f7e:	6a1d      	ldr	r5, [r3, #32]
 8011f80:	2180      	movs	r1, #128	; 0x80
 8011f82:	0249      	lsls	r1, r1, #9
 8011f84:	4329      	orrs	r1, r5
 8011f86:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011f88:	6a19      	ldr	r1, [r3, #32]
 8011f8a:	4d14      	ldr	r5, [pc, #80]	; (8011fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8011f8c:	4029      	ands	r1, r5
 8011f8e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011f90:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011f92:	0783      	lsls	r3, r0, #30
 8011f94:	d407      	bmi.n	8011fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011f96:	4a0c      	ldr	r2, [pc, #48]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011f98:	6a13      	ldr	r3, [r2, #32]
 8011f9a:	490f      	ldr	r1, [pc, #60]	; (8011fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011f9c:	400b      	ands	r3, r1
 8011f9e:	6861      	ldr	r1, [r4, #4]
 8011fa0:	430b      	orrs	r3, r1
 8011fa2:	6213      	str	r3, [r2, #32]
 8011fa4:	e790      	b.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011fa6:	f7fd fe5f 	bl	800fc68 <HAL_GetTick>
 8011faa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011fac:	4e06      	ldr	r6, [pc, #24]	; (8011fc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011fae:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011fb0:	4f0b      	ldr	r7, [pc, #44]	; (8011fe0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011fb2:	6a33      	ldr	r3, [r6, #32]
 8011fb4:	421d      	tst	r5, r3
 8011fb6:	d1ee      	bne.n	8011f96 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011fb8:	f7fd fe56 	bl	800fc68 <HAL_GetTick>
 8011fbc:	4643      	mov	r3, r8
 8011fbe:	1ac0      	subs	r0, r0, r3
 8011fc0:	42b8      	cmp	r0, r7
 8011fc2:	d9f6      	bls.n	8011fb2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8011fc4:	2003      	movs	r0, #3
 8011fc6:	e7b2      	b.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8011fc8:	40021000 	.word	0x40021000
 8011fcc:	fffcffff 	.word	0xfffcffff
 8011fd0:	fff3ffff 	.word	0xfff3ffff
 8011fd4:	40007000 	.word	0x40007000
 8011fd8:	fffffcff 	.word	0xfffffcff
 8011fdc:	fffeffff 	.word	0xfffeffff
 8011fe0:	00001388 	.word	0x00001388

08011fe4 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011fe4:	4770      	bx	lr

08011fe6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8011fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe8:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011fea:	6802      	ldr	r2, [r0, #0]
 8011fec:	68d3      	ldr	r3, [r2, #12]
 8011fee:	21a0      	movs	r1, #160	; 0xa0
 8011ff0:	438b      	bics	r3, r1
 8011ff2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011ff4:	f7fd fe38 	bl	800fc68 <HAL_GetTick>
 8011ff8:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011ffa:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011ffc:	26fa      	movs	r6, #250	; 0xfa
 8011ffe:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	421d      	tst	r5, r3
 8012006:	d106      	bne.n	8012016 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012008:	f7fd fe2e 	bl	800fc68 <HAL_GetTick>
 801200c:	1bc0      	subs	r0, r0, r7
 801200e:	42b0      	cmp	r0, r6
 8012010:	d9f6      	bls.n	8012000 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012012:	2003      	movs	r0, #3
 8012014:	e000      	b.n	8012018 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012016:	2000      	movs	r0, #0
}
 8012018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801201a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801201a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801201e:	6803      	ldr	r3, [r0, #0]
 8012020:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012022:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012024:	0652      	lsls	r2, r2, #25
 8012026:	d500      	bpl.n	801202a <RTC_EnterInitMode+0x10>
}
 8012028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801202a:	2201      	movs	r2, #1
 801202c:	4252      	negs	r2, r2
 801202e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012030:	f7fd fe1a 	bl	800fc68 <HAL_GetTick>
 8012034:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012036:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012038:	26fa      	movs	r6, #250	; 0xfa
 801203a:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	421d      	tst	r5, r3
 8012042:	d106      	bne.n	8012052 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012044:	f7fd fe10 	bl	800fc68 <HAL_GetTick>
 8012048:	1bc0      	subs	r0, r0, r7
 801204a:	42b0      	cmp	r0, r6
 801204c:	d9f6      	bls.n	801203c <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 801204e:	2003      	movs	r0, #3
 8012050:	e7ea      	b.n	8012028 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012052:	2000      	movs	r0, #0
 8012054:	e7e8      	b.n	8012028 <RTC_EnterInitMode+0xe>
	...

08012058 <HAL_RTC_Init>:
{
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801205c:	d046      	beq.n	80120ec <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801205e:	7f43      	ldrb	r3, [r0, #29]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d038      	beq.n	80120d6 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012064:	2302      	movs	r3, #2
 8012066:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012068:	6823      	ldr	r3, [r4, #0]
 801206a:	22ca      	movs	r2, #202	; 0xca
 801206c:	625a      	str	r2, [r3, #36]	; 0x24
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	3a77      	subs	r2, #119	; 0x77
 8012072:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012074:	0020      	movs	r0, r4
 8012076:	f7ff ffd0 	bl	801201a <RTC_EnterInitMode>
 801207a:	2800      	cmp	r0, #0
 801207c:	d12f      	bne.n	80120de <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801207e:	6822      	ldr	r2, [r4, #0]
 8012080:	6893      	ldr	r3, [r2, #8]
 8012082:	491b      	ldr	r1, [pc, #108]	; (80120f0 <HAL_RTC_Init+0x98>)
 8012084:	400b      	ands	r3, r1
 8012086:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012088:	6822      	ldr	r2, [r4, #0]
 801208a:	6891      	ldr	r1, [r2, #8]
 801208c:	6863      	ldr	r3, [r4, #4]
 801208e:	6925      	ldr	r5, [r4, #16]
 8012090:	432b      	orrs	r3, r5
 8012092:	6965      	ldr	r5, [r4, #20]
 8012094:	432b      	orrs	r3, r5
 8012096:	430b      	orrs	r3, r1
 8012098:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	68e2      	ldr	r2, [r4, #12]
 801209e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80120a0:	6822      	ldr	r2, [r4, #0]
 80120a2:	6911      	ldr	r1, [r2, #16]
 80120a4:	68a3      	ldr	r3, [r4, #8]
 80120a6:	041b      	lsls	r3, r3, #16
 80120a8:	430b      	orrs	r3, r1
 80120aa:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80120ac:	6822      	ldr	r2, [r4, #0]
 80120ae:	68d3      	ldr	r3, [r2, #12]
 80120b0:	2180      	movs	r1, #128	; 0x80
 80120b2:	438b      	bics	r3, r1
 80120b4:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80120b6:	6822      	ldr	r2, [r4, #0]
 80120b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80120ba:	490e      	ldr	r1, [pc, #56]	; (80120f4 <HAL_RTC_Init+0x9c>)
 80120bc:	400b      	ands	r3, r1
 80120be:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80120c0:	6822      	ldr	r2, [r4, #0]
 80120c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80120c4:	69a1      	ldr	r1, [r4, #24]
 80120c6:	430b      	orrs	r3, r1
 80120c8:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	22ff      	movs	r2, #255	; 0xff
 80120ce:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80120d0:	2301      	movs	r3, #1
 80120d2:	7763      	strb	r3, [r4, #29]
}
 80120d4:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80120d6:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80120d8:	f7ff ff84 	bl	8011fe4 <HAL_RTC_MspInit>
 80120dc:	e7c2      	b.n	8012064 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	22ff      	movs	r2, #255	; 0xff
 80120e2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80120e4:	2304      	movs	r3, #4
 80120e6:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80120e8:	2001      	movs	r0, #1
 80120ea:	e7f3      	b.n	80120d4 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80120ec:	2001      	movs	r0, #1
 80120ee:	e7f1      	b.n	80120d4 <HAL_RTC_Init+0x7c>
 80120f0:	ff8fffbf 	.word	0xff8fffbf
 80120f4:	fffbffff 	.word	0xfffbffff

080120f8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80120f8:	2809      	cmp	r0, #9
 80120fa:	d909      	bls.n	8012110 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80120fc:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80120fe:	3301      	adds	r3, #1
    Value -= 10;
 8012100:	380a      	subs	r0, #10
 8012102:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012104:	2809      	cmp	r0, #9
 8012106:	d8fa      	bhi.n	80120fe <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012108:	011b      	lsls	r3, r3, #4
 801210a:	4318      	orrs	r0, r3
 801210c:	b2c0      	uxtb	r0, r0
}
 801210e:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	e7f9      	b.n	8012108 <RTC_ByteToBcd2+0x10>

08012114 <HAL_RTC_SetTime>:
{
 8012114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012116:	46c6      	mov	lr, r8
 8012118:	b500      	push	{lr}
 801211a:	0004      	movs	r4, r0
 801211c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 801211e:	7f03      	ldrb	r3, [r0, #28]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d100      	bne.n	8012126 <HAL_RTC_SetTime+0x12>
 8012124:	e075      	b.n	8012212 <HAL_RTC_SetTime+0xfe>
 8012126:	2301      	movs	r3, #1
 8012128:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801212a:	3301      	adds	r3, #1
 801212c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801212e:	2a00      	cmp	r2, #0
 8012130:	d144      	bne.n	80121bc <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012132:	6803      	ldr	r3, [r0, #0]
 8012134:	689b      	ldr	r3, [r3, #8]
 8012136:	065b      	lsls	r3, r3, #25
 8012138:	d401      	bmi.n	801213e <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 801213a:	2300      	movs	r3, #0
 801213c:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801213e:	7830      	ldrb	r0, [r6, #0]
 8012140:	f7ff ffda 	bl	80120f8 <RTC_ByteToBcd2>
 8012144:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012146:	7870      	ldrb	r0, [r6, #1]
 8012148:	f7ff ffd6 	bl	80120f8 <RTC_ByteToBcd2>
 801214c:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801214e:	78b0      	ldrb	r0, [r6, #2]
 8012150:	f7ff ffd2 	bl	80120f8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012154:	7a35      	ldrb	r5, [r6, #8]
 8012156:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012158:	4305      	orrs	r5, r0
 801215a:	4643      	mov	r3, r8
 801215c:	0418      	lsls	r0, r3, #16
 801215e:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012160:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012162:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012164:	6823      	ldr	r3, [r4, #0]
 8012166:	22ca      	movs	r2, #202	; 0xca
 8012168:	625a      	str	r2, [r3, #36]	; 0x24
 801216a:	6823      	ldr	r3, [r4, #0]
 801216c:	3a77      	subs	r2, #119	; 0x77
 801216e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012170:	0020      	movs	r0, r4
 8012172:	f7ff ff52 	bl	801201a <RTC_EnterInitMode>
 8012176:	1e07      	subs	r7, r0, #0
 8012178:	d131      	bne.n	80121de <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801217a:	6823      	ldr	r3, [r4, #0]
 801217c:	4826      	ldr	r0, [pc, #152]	; (8012218 <HAL_RTC_SetTime+0x104>)
 801217e:	4005      	ands	r5, r0
 8012180:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012182:	6822      	ldr	r2, [r4, #0]
 8012184:	6893      	ldr	r3, [r2, #8]
 8012186:	4925      	ldr	r1, [pc, #148]	; (801221c <HAL_RTC_SetTime+0x108>)
 8012188:	400b      	ands	r3, r1
 801218a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801218c:	6822      	ldr	r2, [r4, #0]
 801218e:	6891      	ldr	r1, [r2, #8]
 8012190:	68f3      	ldr	r3, [r6, #12]
 8012192:	6930      	ldr	r0, [r6, #16]
 8012194:	4303      	orrs	r3, r0
 8012196:	430b      	orrs	r3, r1
 8012198:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801219a:	6822      	ldr	r2, [r4, #0]
 801219c:	68d3      	ldr	r3, [r2, #12]
 801219e:	2180      	movs	r1, #128	; 0x80
 80121a0:	438b      	bics	r3, r1
 80121a2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80121a4:	6823      	ldr	r3, [r4, #0]
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	069b      	lsls	r3, r3, #26
 80121aa:	d524      	bpl.n	80121f6 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80121ac:	6823      	ldr	r3, [r4, #0]
 80121ae:	22ff      	movs	r2, #255	; 0xff
 80121b0:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80121b2:	2301      	movs	r3, #1
 80121b4:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80121b6:	2300      	movs	r3, #0
 80121b8:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80121ba:	e018      	b.n	80121ee <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80121bc:	6803      	ldr	r3, [r0, #0]
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	065b      	lsls	r3, r3, #25
 80121c2:	d401      	bmi.n	80121c8 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 80121c4:	2300      	movs	r3, #0
 80121c6:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80121c8:	7835      	ldrb	r5, [r6, #0]
 80121ca:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80121cc:	7870      	ldrb	r0, [r6, #1]
 80121ce:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80121d0:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80121d2:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80121d4:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80121d6:	7a30      	ldrb	r0, [r6, #8]
 80121d8:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80121da:	4305      	orrs	r5, r0
 80121dc:	e7c2      	b.n	8012164 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	22ff      	movs	r2, #255	; 0xff
 80121e2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80121e4:	2304      	movs	r3, #4
 80121e6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80121e8:	2300      	movs	r3, #0
 80121ea:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80121ec:	2701      	movs	r7, #1
}
 80121ee:	0038      	movs	r0, r7
 80121f0:	bc04      	pop	{r2}
 80121f2:	4690      	mov	r8, r2
 80121f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80121f6:	0020      	movs	r0, r4
 80121f8:	f7ff fef5 	bl	8011fe6 <HAL_RTC_WaitForSynchro>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d0d5      	beq.n	80121ac <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012200:	6823      	ldr	r3, [r4, #0]
 8012202:	22ff      	movs	r2, #255	; 0xff
 8012204:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012206:	2304      	movs	r3, #4
 8012208:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801220a:	2300      	movs	r3, #0
 801220c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801220e:	2701      	movs	r7, #1
 8012210:	e7ed      	b.n	80121ee <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8012212:	2702      	movs	r7, #2
 8012214:	e7eb      	b.n	80121ee <HAL_RTC_SetTime+0xda>
 8012216:	46c0      	nop			; (mov r8, r8)
 8012218:	007f7f7f 	.word	0x007f7f7f
 801221c:	fffbffff 	.word	0xfffbffff

08012220 <HAL_RTC_SetDate>:
{
 8012220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012222:	46c6      	mov	lr, r8
 8012224:	b500      	push	{lr}
 8012226:	0004      	movs	r4, r0
 8012228:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801222a:	7f03      	ldrb	r3, [r0, #28]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d03a      	beq.n	80122a6 <HAL_RTC_SetDate+0x86>
 8012230:	2301      	movs	r3, #1
 8012232:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012234:	3301      	adds	r3, #1
 8012236:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012238:	2a00      	cmp	r2, #0
 801223a:	d136      	bne.n	80122aa <HAL_RTC_SetDate+0x8a>
 801223c:	784b      	ldrb	r3, [r1, #1]
 801223e:	06da      	lsls	r2, r3, #27
 8012240:	d503      	bpl.n	801224a <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012242:	2210      	movs	r2, #16
 8012244:	4393      	bics	r3, r2
 8012246:	330a      	adds	r3, #10
 8012248:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801224a:	78f0      	ldrb	r0, [r6, #3]
 801224c:	f7ff ff54 	bl	80120f8 <RTC_ByteToBcd2>
 8012250:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012252:	7870      	ldrb	r0, [r6, #1]
 8012254:	f7ff ff50 	bl	80120f8 <RTC_ByteToBcd2>
 8012258:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801225a:	78b0      	ldrb	r0, [r6, #2]
 801225c:	f7ff ff4c 	bl	80120f8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012260:	7835      	ldrb	r5, [r6, #0]
 8012262:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012264:	4305      	orrs	r5, r0
 8012266:	4643      	mov	r3, r8
 8012268:	0418      	lsls	r0, r3, #16
 801226a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801226c:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801226e:	433d      	orrs	r5, r7
 8012270:	e025      	b.n	80122be <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012272:	6823      	ldr	r3, [r4, #0]
 8012274:	22ff      	movs	r2, #255	; 0xff
 8012276:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012278:	2304      	movs	r3, #4
 801227a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801227c:	2300      	movs	r3, #0
 801227e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012280:	2601      	movs	r6, #1
}
 8012282:	0030      	movs	r0, r6
 8012284:	bc04      	pop	{r2}
 8012286:	4690      	mov	r8, r2
 8012288:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801228a:	0020      	movs	r0, r4
 801228c:	f7ff feab 	bl	8011fe6 <HAL_RTC_WaitForSynchro>
 8012290:	2800      	cmp	r0, #0
 8012292:	d02c      	beq.n	80122ee <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	22ff      	movs	r2, #255	; 0xff
 8012298:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801229a:	2304      	movs	r3, #4
 801229c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801229e:	2300      	movs	r3, #0
 80122a0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80122a2:	2601      	movs	r6, #1
 80122a4:	e7ed      	b.n	8012282 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 80122a6:	2602      	movs	r6, #2
 80122a8:	e7eb      	b.n	8012282 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80122aa:	78cd      	ldrb	r5, [r1, #3]
 80122ac:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80122ae:	7848      	ldrb	r0, [r1, #1]
 80122b0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80122b2:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 80122b4:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80122b6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 80122b8:	7808      	ldrb	r0, [r1, #0]
 80122ba:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80122bc:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80122be:	6823      	ldr	r3, [r4, #0]
 80122c0:	22ca      	movs	r2, #202	; 0xca
 80122c2:	625a      	str	r2, [r3, #36]	; 0x24
 80122c4:	6823      	ldr	r3, [r4, #0]
 80122c6:	3a77      	subs	r2, #119	; 0x77
 80122c8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80122ca:	0020      	movs	r0, r4
 80122cc:	f7ff fea5 	bl	801201a <RTC_EnterInitMode>
 80122d0:	1e06      	subs	r6, r0, #0
 80122d2:	d1ce      	bne.n	8012272 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80122d4:	6823      	ldr	r3, [r4, #0]
 80122d6:	480a      	ldr	r0, [pc, #40]	; (8012300 <HAL_RTC_SetDate+0xe0>)
 80122d8:	4005      	ands	r5, r0
 80122da:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80122dc:	6822      	ldr	r2, [r4, #0]
 80122de:	68d3      	ldr	r3, [r2, #12]
 80122e0:	2180      	movs	r1, #128	; 0x80
 80122e2:	438b      	bics	r3, r1
 80122e4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80122e6:	6823      	ldr	r3, [r4, #0]
 80122e8:	689b      	ldr	r3, [r3, #8]
 80122ea:	069b      	lsls	r3, r3, #26
 80122ec:	d5cd      	bpl.n	801228a <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	22ff      	movs	r2, #255	; 0xff
 80122f2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80122f4:	2301      	movs	r3, #1
 80122f6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80122f8:	2300      	movs	r3, #0
 80122fa:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80122fc:	e7c1      	b.n	8012282 <HAL_RTC_SetDate+0x62>
 80122fe:	46c0      	nop			; (mov r8, r8)
 8012300:	00ffff3f 	.word	0x00ffff3f

08012304 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012304:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012306:	0900      	lsrs	r0, r0, #4
 8012308:	0083      	lsls	r3, r0, #2
 801230a:	181b      	adds	r3, r3, r0
 801230c:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801230e:	200f      	movs	r0, #15
 8012310:	4010      	ands	r0, r2
 8012312:	1818      	adds	r0, r3, r0
 8012314:	b2c0      	uxtb	r0, r0
}
 8012316:	4770      	bx	lr

08012318 <HAL_RTC_GetTime>:
{
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801231c:	6803      	ldr	r3, [r0, #0]
 801231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012320:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012322:	6803      	ldr	r3, [r0, #0]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	490e      	ldr	r1, [pc, #56]	; (8012360 <HAL_RTC_GetTime+0x48>)
 8012328:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801232a:	0c19      	lsrs	r1, r3, #16
 801232c:	203f      	movs	r0, #63	; 0x3f
 801232e:	4008      	ands	r0, r1
 8012330:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012332:	0a1e      	lsrs	r6, r3, #8
 8012334:	b2f6      	uxtb	r6, r6
 8012336:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012338:	b2dc      	uxtb	r4, r3
 801233a:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801233c:	2340      	movs	r3, #64	; 0x40
 801233e:	400b      	ands	r3, r1
 8012340:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012342:	2a00      	cmp	r2, #0
 8012344:	d10a      	bne.n	801235c <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012346:	f7ff ffdd 	bl	8012304 <RTC_Bcd2ToByte>
 801234a:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801234c:	0030      	movs	r0, r6
 801234e:	f7ff ffd9 	bl	8012304 <RTC_Bcd2ToByte>
 8012352:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012354:	0020      	movs	r0, r4
 8012356:	f7ff ffd5 	bl	8012304 <RTC_Bcd2ToByte>
 801235a:	70a8      	strb	r0, [r5, #2]
}
 801235c:	2000      	movs	r0, #0
 801235e:	bd70      	pop	{r4, r5, r6, pc}
 8012360:	007f7f7f 	.word	0x007f7f7f

08012364 <HAL_RTC_GetDate>:
{
 8012364:	b570      	push	{r4, r5, r6, lr}
 8012366:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012368:	6803      	ldr	r3, [r0, #0]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	490d      	ldr	r1, [pc, #52]	; (80123a4 <HAL_RTC_GetDate+0x40>)
 801236e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012370:	0c18      	lsrs	r0, r3, #16
 8012372:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012374:	04dd      	lsls	r5, r3, #19
 8012376:	0eed      	lsrs	r5, r5, #27
 8012378:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801237a:	b2de      	uxtb	r6, r3
 801237c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801237e:	041b      	lsls	r3, r3, #16
 8012380:	0f5b      	lsrs	r3, r3, #29
 8012382:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012384:	2a00      	cmp	r2, #0
 8012386:	d10a      	bne.n	801239e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012388:	f7ff ffbc 	bl	8012304 <RTC_Bcd2ToByte>
 801238c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801238e:	0028      	movs	r0, r5
 8012390:	f7ff ffb8 	bl	8012304 <RTC_Bcd2ToByte>
 8012394:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012396:	0030      	movs	r0, r6
 8012398:	f7ff ffb4 	bl	8012304 <RTC_Bcd2ToByte>
 801239c:	70a0      	strb	r0, [r4, #2]
}
 801239e:	2000      	movs	r0, #0
 80123a0:	bd70      	pop	{r4, r5, r6, pc}
 80123a2:	46c0      	nop			; (mov r8, r8)
 80123a4:	00ffff3f 	.word	0x00ffff3f

080123a8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80123a8:	6803      	ldr	r3, [r0, #0]
 80123aa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80123ac:	0089      	lsls	r1, r1, #2
 80123ae:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80123b0:	600a      	str	r2, [r1, #0]
}
 80123b2:	4770      	bx	lr

080123b4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80123b4:	6803      	ldr	r3, [r0, #0]
 80123b6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80123b8:	0089      	lsls	r1, r1, #2
 80123ba:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80123bc:	6808      	ldr	r0, [r1, #0]
}
 80123be:	4770      	bx	lr

080123c0 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80123c0:	4770      	bx	lr

080123c2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80123c2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80123c4:	2239      	movs	r2, #57	; 0x39
 80123c6:	2302      	movs	r3, #2
 80123c8:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80123ca:	6804      	ldr	r4, [r0, #0]
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	2101      	movs	r1, #1
 80123d0:	430b      	orrs	r3, r1
 80123d2:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80123d4:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80123d6:	2000      	movs	r0, #0
 80123d8:	bd10      	pop	{r4, pc}
	...

080123dc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80123dc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80123de:	4a36      	ldr	r2, [pc, #216]	; (80124b8 <TIM_Base_SetConfig+0xdc>)
 80123e0:	4290      	cmp	r0, r2
 80123e2:	d022      	beq.n	801242a <TIM_Base_SetConfig+0x4e>
 80123e4:	2280      	movs	r2, #128	; 0x80
 80123e6:	05d2      	lsls	r2, r2, #23
 80123e8:	4290      	cmp	r0, r2
 80123ea:	d014      	beq.n	8012416 <TIM_Base_SetConfig+0x3a>
 80123ec:	4a33      	ldr	r2, [pc, #204]	; (80124bc <TIM_Base_SetConfig+0xe0>)
 80123ee:	4290      	cmp	r0, r2
 80123f0:	d016      	beq.n	8012420 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80123f2:	4a33      	ldr	r2, [pc, #204]	; (80124c0 <TIM_Base_SetConfig+0xe4>)
 80123f4:	4290      	cmp	r0, r2
 80123f6:	d040      	beq.n	801247a <TIM_Base_SetConfig+0x9e>
 80123f8:	4a32      	ldr	r2, [pc, #200]	; (80124c4 <TIM_Base_SetConfig+0xe8>)
 80123fa:	4290      	cmp	r0, r2
 80123fc:	d047      	beq.n	801248e <TIM_Base_SetConfig+0xb2>
 80123fe:	4a32      	ldr	r2, [pc, #200]	; (80124c8 <TIM_Base_SetConfig+0xec>)
 8012400:	4290      	cmp	r0, r2
 8012402:	d04e      	beq.n	80124a2 <TIM_Base_SetConfig+0xc6>
 8012404:	4a31      	ldr	r2, [pc, #196]	; (80124cc <TIM_Base_SetConfig+0xf0>)
 8012406:	4290      	cmp	r0, r2
 8012408:	d02d      	beq.n	8012466 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 801240a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801240c:	688b      	ldr	r3, [r1, #8]
 801240e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012410:	680b      	ldr	r3, [r1, #0]
 8012412:	6283      	str	r3, [r0, #40]	; 0x28
 8012414:	e024      	b.n	8012460 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012416:	2270      	movs	r2, #112	; 0x70
 8012418:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801241a:	684a      	ldr	r2, [r1, #4]
 801241c:	4313      	orrs	r3, r2
 801241e:	e008      	b.n	8012432 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012420:	2270      	movs	r2, #112	; 0x70
 8012422:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012424:	684a      	ldr	r2, [r1, #4]
 8012426:	4313      	orrs	r3, r2
 8012428:	e003      	b.n	8012432 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801242a:	2270      	movs	r2, #112	; 0x70
 801242c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801242e:	684a      	ldr	r2, [r1, #4]
 8012430:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012432:	4a27      	ldr	r2, [pc, #156]	; (80124d0 <TIM_Base_SetConfig+0xf4>)
 8012434:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012436:	68ca      	ldr	r2, [r1, #12]
 8012438:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801243a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801243c:	688b      	ldr	r3, [r1, #8]
 801243e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012440:	680b      	ldr	r3, [r1, #0]
 8012442:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012444:	4b1c      	ldr	r3, [pc, #112]	; (80124b8 <TIM_Base_SetConfig+0xdc>)
 8012446:	4298      	cmp	r0, r3
 8012448:	d008      	beq.n	801245c <TIM_Base_SetConfig+0x80>
 801244a:	4b1e      	ldr	r3, [pc, #120]	; (80124c4 <TIM_Base_SetConfig+0xe8>)
 801244c:	4298      	cmp	r0, r3
 801244e:	d005      	beq.n	801245c <TIM_Base_SetConfig+0x80>
 8012450:	4b1d      	ldr	r3, [pc, #116]	; (80124c8 <TIM_Base_SetConfig+0xec>)
 8012452:	4298      	cmp	r0, r3
 8012454:	d002      	beq.n	801245c <TIM_Base_SetConfig+0x80>
 8012456:	4b1d      	ldr	r3, [pc, #116]	; (80124cc <TIM_Base_SetConfig+0xf0>)
 8012458:	4298      	cmp	r0, r3
 801245a:	d101      	bne.n	8012460 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801245c:	690b      	ldr	r3, [r1, #16]
 801245e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012460:	2301      	movs	r3, #1
 8012462:	6143      	str	r3, [r0, #20]
}
 8012464:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012466:	4a1a      	ldr	r2, [pc, #104]	; (80124d0 <TIM_Base_SetConfig+0xf4>)
 8012468:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801246a:	68ca      	ldr	r2, [r1, #12]
 801246c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801246e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012470:	688b      	ldr	r3, [r1, #8]
 8012472:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012474:	680b      	ldr	r3, [r1, #0]
 8012476:	6283      	str	r3, [r0, #40]	; 0x28
 8012478:	e7f0      	b.n	801245c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801247a:	4a15      	ldr	r2, [pc, #84]	; (80124d0 <TIM_Base_SetConfig+0xf4>)
 801247c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801247e:	68ca      	ldr	r2, [r1, #12]
 8012480:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012482:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012484:	688b      	ldr	r3, [r1, #8]
 8012486:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012488:	680b      	ldr	r3, [r1, #0]
 801248a:	6283      	str	r3, [r0, #40]	; 0x28
 801248c:	e7e8      	b.n	8012460 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 801248e:	4a10      	ldr	r2, [pc, #64]	; (80124d0 <TIM_Base_SetConfig+0xf4>)
 8012490:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012492:	68ca      	ldr	r2, [r1, #12]
 8012494:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012496:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012498:	688b      	ldr	r3, [r1, #8]
 801249a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801249c:	680b      	ldr	r3, [r1, #0]
 801249e:	6283      	str	r3, [r0, #40]	; 0x28
 80124a0:	e7dc      	b.n	801245c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80124a2:	4a0b      	ldr	r2, [pc, #44]	; (80124d0 <TIM_Base_SetConfig+0xf4>)
 80124a4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80124a6:	68ca      	ldr	r2, [r1, #12]
 80124a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80124aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80124ac:	688b      	ldr	r3, [r1, #8]
 80124ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80124b0:	680b      	ldr	r3, [r1, #0]
 80124b2:	6283      	str	r3, [r0, #40]	; 0x28
 80124b4:	e7d2      	b.n	801245c <TIM_Base_SetConfig+0x80>
 80124b6:	46c0      	nop			; (mov r8, r8)
 80124b8:	40012c00 	.word	0x40012c00
 80124bc:	40000400 	.word	0x40000400
 80124c0:	40002000 	.word	0x40002000
 80124c4:	40014000 	.word	0x40014000
 80124c8:	40014400 	.word	0x40014400
 80124cc:	40014800 	.word	0x40014800
 80124d0:	fffffcff 	.word	0xfffffcff

080124d4 <HAL_TIM_Base_Init>:
{
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80124d8:	d014      	beq.n	8012504 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80124da:	2339      	movs	r3, #57	; 0x39
 80124dc:	5cc3      	ldrb	r3, [r0, r3]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00a      	beq.n	80124f8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80124e2:	2539      	movs	r5, #57	; 0x39
 80124e4:	2302      	movs	r3, #2
 80124e6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80124e8:	1d21      	adds	r1, r4, #4
 80124ea:	6820      	ldr	r0, [r4, #0]
 80124ec:	f7ff ff76 	bl	80123dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80124f0:	2301      	movs	r3, #1
 80124f2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80124f4:	2000      	movs	r0, #0
}
 80124f6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80124f8:	3338      	adds	r3, #56	; 0x38
 80124fa:	2200      	movs	r2, #0
 80124fc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80124fe:	f7ff ff5f 	bl	80123c0 <HAL_TIM_Base_MspInit>
 8012502:	e7ee      	b.n	80124e2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012504:	2001      	movs	r0, #1
 8012506:	e7f6      	b.n	80124f6 <HAL_TIM_Base_Init+0x22>

08012508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012508:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801250a:	2338      	movs	r3, #56	; 0x38
 801250c:	5cc3      	ldrb	r3, [r0, r3]
 801250e:	2b01      	cmp	r3, #1
 8012510:	d01e      	beq.n	8012550 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012512:	2238      	movs	r2, #56	; 0x38
 8012514:	2501      	movs	r5, #1
 8012516:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012518:	2439      	movs	r4, #57	; 0x39
 801251a:	2302      	movs	r3, #2
 801251c:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801251e:	6806      	ldr	r6, [r0, #0]
 8012520:	6873      	ldr	r3, [r6, #4]
 8012522:	2770      	movs	r7, #112	; 0x70
 8012524:	43bb      	bics	r3, r7
 8012526:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012528:	6806      	ldr	r6, [r0, #0]
 801252a:	6873      	ldr	r3, [r6, #4]
 801252c:	680f      	ldr	r7, [r1, #0]
 801252e:	433b      	orrs	r3, r7
 8012530:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012532:	6806      	ldr	r6, [r0, #0]
 8012534:	68b3      	ldr	r3, [r6, #8]
 8012536:	2780      	movs	r7, #128	; 0x80
 8012538:	43bb      	bics	r3, r7
 801253a:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 801253c:	6806      	ldr	r6, [r0, #0]
 801253e:	68b3      	ldr	r3, [r6, #8]
 8012540:	6849      	ldr	r1, [r1, #4]
 8012542:	430b      	orrs	r3, r1
 8012544:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012546:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012548:	2300      	movs	r3, #0
 801254a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 801254c:	2000      	movs	r0, #0
}
 801254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012550:	2002      	movs	r0, #2
 8012552:	e7fc      	b.n	801254e <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012554 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012554:	4770      	bx	lr

08012556 <HAL_UART_DeInit>:
{
 8012556:	b570      	push	{r4, r5, r6, lr}
 8012558:	0004      	movs	r4, r0
    return HAL_ERROR;
 801255a:	2001      	movs	r0, #1
  if(huart == NULL)
 801255c:	2c00      	cmp	r4, #0
 801255e:	d016      	beq.n	801258e <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012560:	2669      	movs	r6, #105	; 0x69
 8012562:	2302      	movs	r3, #2
 8012564:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012566:	6822      	ldr	r2, [r4, #0]
 8012568:	6813      	ldr	r3, [r2, #0]
 801256a:	2101      	movs	r1, #1
 801256c:	438b      	bics	r3, r1
 801256e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012570:	6823      	ldr	r3, [r4, #0]
 8012572:	2500      	movs	r5, #0
 8012574:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801257a:	6823      	ldr	r3, [r4, #0]
 801257c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801257e:	0020      	movs	r0, r4
 8012580:	f7ff ffe8 	bl	8012554 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012584:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012586:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012588:	2368      	movs	r3, #104	; 0x68
 801258a:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801258c:	2000      	movs	r0, #0
}
 801258e:	bd70      	pop	{r4, r5, r6, pc}

08012590 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012590:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012592:	2369      	movs	r3, #105	; 0x69
 8012594:	5cc3      	ldrb	r3, [r0, r3]
 8012596:	2b01      	cmp	r3, #1
 8012598:	d004      	beq.n	80125a4 <HAL_UART_Transmit_IT+0x14>
 801259a:	2369      	movs	r3, #105	; 0x69
 801259c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801259e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80125a0:	2c22      	cmp	r4, #34	; 0x22
 80125a2:	d127      	bne.n	80125f4 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 80125a4:	2900      	cmp	r1, #0
 80125a6:	d02b      	beq.n	8012600 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 80125a8:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80125aa:	2a00      	cmp	r2, #0
 80125ac:	d022      	beq.n	80125f4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80125ae:	3367      	adds	r3, #103	; 0x67
 80125b0:	5cc3      	ldrb	r3, [r0, r3]
 80125b2:	2b01      	cmp	r3, #1
 80125b4:	d026      	beq.n	8012604 <HAL_UART_Transmit_IT+0x74>
 80125b6:	2368      	movs	r3, #104	; 0x68
 80125b8:	2401      	movs	r4, #1
 80125ba:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 80125bc:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80125be:	3b18      	subs	r3, #24
 80125c0:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80125c2:	3302      	adds	r3, #2
 80125c4:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125c6:	2300      	movs	r3, #0
 80125c8:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80125ca:	3369      	adds	r3, #105	; 0x69
 80125cc:	5cc3      	ldrb	r3, [r0, r3]
 80125ce:	2b22      	cmp	r3, #34	; 0x22
 80125d0:	d012      	beq.n	80125f8 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80125d2:	2369      	movs	r3, #105	; 0x69
 80125d4:	2212      	movs	r2, #18
 80125d6:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80125d8:	6802      	ldr	r2, [r0, #0]
 80125da:	6893      	ldr	r3, [r2, #8]
 80125dc:	2101      	movs	r1, #1
 80125de:	430b      	orrs	r3, r1
 80125e0:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 80125e2:	2368      	movs	r3, #104	; 0x68
 80125e4:	2200      	movs	r2, #0
 80125e6:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80125e8:	6802      	ldr	r2, [r0, #0]
 80125ea:	6813      	ldr	r3, [r2, #0]
 80125ec:	317f      	adds	r1, #127	; 0x7f
 80125ee:	430b      	orrs	r3, r1
 80125f0:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80125f2:	2300      	movs	r3, #0
  }
}
 80125f4:	0018      	movs	r0, r3
 80125f6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80125f8:	3347      	adds	r3, #71	; 0x47
 80125fa:	2232      	movs	r2, #50	; 0x32
 80125fc:	54c2      	strb	r2, [r0, r3]
 80125fe:	e7eb      	b.n	80125d8 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8012600:	2301      	movs	r3, #1
 8012602:	e7f7      	b.n	80125f4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012604:	2302      	movs	r3, #2
 8012606:	e7f5      	b.n	80125f4 <HAL_UART_Transmit_IT+0x64>

08012608 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012608:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801260a:	2369      	movs	r3, #105	; 0x69
 801260c:	5cc3      	ldrb	r3, [r0, r3]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d004      	beq.n	801261c <HAL_UART_Receive_IT+0x14>
 8012612:	2369      	movs	r3, #105	; 0x69
 8012614:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012616:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012618:	2c12      	cmp	r4, #18
 801261a:	d14e      	bne.n	80126ba <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 801261c:	2900      	cmp	r1, #0
 801261e:	d05d      	beq.n	80126dc <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8012620:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012622:	2a00      	cmp	r2, #0
 8012624:	d049      	beq.n	80126ba <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012626:	3367      	adds	r3, #103	; 0x67
 8012628:	5cc3      	ldrb	r3, [r0, r3]
 801262a:	2b01      	cmp	r3, #1
 801262c:	d058      	beq.n	80126e0 <HAL_UART_Receive_IT+0xd8>
 801262e:	2368      	movs	r3, #104	; 0x68
 8012630:	2401      	movs	r4, #1
 8012632:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8012634:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012636:	3b10      	subs	r3, #16
 8012638:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 801263a:	3302      	adds	r3, #2
 801263c:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 801263e:	6883      	ldr	r3, [r0, #8]
 8012640:	2280      	movs	r2, #128	; 0x80
 8012642:	0152      	lsls	r2, r2, #5
 8012644:	4293      	cmp	r3, r2
 8012646:	d008      	beq.n	801265a <HAL_UART_Receive_IT+0x52>
 8012648:	2b00      	cmp	r3, #0
 801264a:	d115      	bne.n	8012678 <HAL_UART_Receive_IT+0x70>
 801264c:	6903      	ldr	r3, [r0, #16]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d10e      	bne.n	8012670 <HAL_UART_Receive_IT+0x68>
 8012652:	335c      	adds	r3, #92	; 0x5c
 8012654:	22ff      	movs	r2, #255	; 0xff
 8012656:	52c2      	strh	r2, [r0, r3]
 8012658:	e012      	b.n	8012680 <HAL_UART_Receive_IT+0x78>
 801265a:	6903      	ldr	r3, [r0, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d103      	bne.n	8012668 <HAL_UART_Receive_IT+0x60>
 8012660:	335c      	adds	r3, #92	; 0x5c
 8012662:	4a20      	ldr	r2, [pc, #128]	; (80126e4 <HAL_UART_Receive_IT+0xdc>)
 8012664:	52c2      	strh	r2, [r0, r3]
 8012666:	e00b      	b.n	8012680 <HAL_UART_Receive_IT+0x78>
 8012668:	235c      	movs	r3, #92	; 0x5c
 801266a:	22ff      	movs	r2, #255	; 0xff
 801266c:	52c2      	strh	r2, [r0, r3]
 801266e:	e007      	b.n	8012680 <HAL_UART_Receive_IT+0x78>
 8012670:	235c      	movs	r3, #92	; 0x5c
 8012672:	227f      	movs	r2, #127	; 0x7f
 8012674:	52c2      	strh	r2, [r0, r3]
 8012676:	e003      	b.n	8012680 <HAL_UART_Receive_IT+0x78>
 8012678:	2280      	movs	r2, #128	; 0x80
 801267a:	0552      	lsls	r2, r2, #21
 801267c:	4293      	cmp	r3, r2
 801267e:	d01e      	beq.n	80126be <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012680:	2300      	movs	r3, #0
 8012682:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012684:	3369      	adds	r3, #105	; 0x69
 8012686:	5cc3      	ldrb	r3, [r0, r3]
 8012688:	2b12      	cmp	r3, #18
 801268a:	d023      	beq.n	80126d4 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801268c:	2369      	movs	r3, #105	; 0x69
 801268e:	2222      	movs	r2, #34	; 0x22
 8012690:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012692:	6802      	ldr	r2, [r0, #0]
 8012694:	6811      	ldr	r1, [r2, #0]
 8012696:	2380      	movs	r3, #128	; 0x80
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	430b      	orrs	r3, r1
 801269c:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801269e:	6802      	ldr	r2, [r0, #0]
 80126a0:	6893      	ldr	r3, [r2, #8]
 80126a2:	2101      	movs	r1, #1
 80126a4:	430b      	orrs	r3, r1
 80126a6:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 80126a8:	2368      	movs	r3, #104	; 0x68
 80126aa:	2200      	movs	r2, #0
 80126ac:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80126ae:	6802      	ldr	r2, [r0, #0]
 80126b0:	6813      	ldr	r3, [r2, #0]
 80126b2:	311f      	adds	r1, #31
 80126b4:	430b      	orrs	r3, r1
 80126b6:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80126b8:	2300      	movs	r3, #0
  }
}
 80126ba:	0018      	movs	r0, r3
 80126bc:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80126be:	6903      	ldr	r3, [r0, #16]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d103      	bne.n	80126cc <HAL_UART_Receive_IT+0xc4>
 80126c4:	335c      	adds	r3, #92	; 0x5c
 80126c6:	227f      	movs	r2, #127	; 0x7f
 80126c8:	52c2      	strh	r2, [r0, r3]
 80126ca:	e7d9      	b.n	8012680 <HAL_UART_Receive_IT+0x78>
 80126cc:	235c      	movs	r3, #92	; 0x5c
 80126ce:	223f      	movs	r2, #63	; 0x3f
 80126d0:	52c2      	strh	r2, [r0, r3]
 80126d2:	e7d5      	b.n	8012680 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80126d4:	3357      	adds	r3, #87	; 0x57
 80126d6:	2232      	movs	r2, #50	; 0x32
 80126d8:	54c2      	strb	r2, [r0, r3]
 80126da:	e7da      	b.n	8012692 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 80126dc:	2301      	movs	r3, #1
 80126de:	e7ec      	b.n	80126ba <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80126e0:	2302      	movs	r3, #2
 80126e2:	e7ea      	b.n	80126ba <HAL_UART_Receive_IT+0xb2>
 80126e4:	000001ff 	.word	0x000001ff

080126e8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80126e8:	b510      	push	{r4, lr}
 80126ea:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80126ec:	2369      	movs	r3, #105	; 0x69
 80126ee:	5cc3      	ldrb	r3, [r0, r3]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d004      	beq.n	80126fe <HAL_UART_Transmit_DMA+0x16>
 80126f4:	2369      	movs	r3, #105	; 0x69
 80126f6:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80126f8:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80126fa:	2b22      	cmp	r3, #34	; 0x22
 80126fc:	d134      	bne.n	8012768 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80126fe:	2900      	cmp	r1, #0
 8012700:	d037      	beq.n	8012772 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8012702:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012704:	2a00      	cmp	r2, #0
 8012706:	d02f      	beq.n	8012768 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012708:	2368      	movs	r3, #104	; 0x68
 801270a:	5ce3      	ldrb	r3, [r4, r3]
 801270c:	2b01      	cmp	r3, #1
 801270e:	d032      	beq.n	8012776 <HAL_UART_Transmit_DMA+0x8e>
 8012710:	2368      	movs	r3, #104	; 0x68
 8012712:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8012714:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012716:	3b18      	subs	r3, #24
 8012718:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 801271a:	3302      	adds	r3, #2
 801271c:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801271e:	2300      	movs	r3, #0
 8012720:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012722:	3369      	adds	r3, #105	; 0x69
 8012724:	5ce3      	ldrb	r3, [r4, r3]
 8012726:	2b22      	cmp	r3, #34	; 0x22
 8012728:	d01f      	beq.n	801276a <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801272a:	2369      	movs	r3, #105	; 0x69
 801272c:	2012      	movs	r0, #18
 801272e:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012730:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012732:	4812      	ldr	r0, [pc, #72]	; (801277c <HAL_UART_Transmit_DMA+0x94>)
 8012734:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012736:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012738:	4811      	ldr	r0, [pc, #68]	; (8012780 <HAL_UART_Transmit_DMA+0x98>)
 801273a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801273c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801273e:	4811      	ldr	r0, [pc, #68]	; (8012784 <HAL_UART_Transmit_DMA+0x9c>)
 8012740:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012742:	6820      	ldr	r0, [r4, #0]
 8012744:	3028      	adds	r0, #40	; 0x28
 8012746:	0013      	movs	r3, r2
 8012748:	0002      	movs	r2, r0
 801274a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801274c:	f7fd ffb0 	bl	80106b0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	2240      	movs	r2, #64	; 0x40
 8012754:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012756:	6822      	ldr	r2, [r4, #0]
 8012758:	6893      	ldr	r3, [r2, #8]
 801275a:	2180      	movs	r1, #128	; 0x80
 801275c:	430b      	orrs	r3, r1
 801275e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012760:	2368      	movs	r3, #104	; 0x68
 8012762:	2200      	movs	r2, #0
 8012764:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012766:	2000      	movs	r0, #0
  }
}
 8012768:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801276a:	3347      	adds	r3, #71	; 0x47
 801276c:	3031      	adds	r0, #49	; 0x31
 801276e:	54e0      	strb	r0, [r4, r3]
 8012770:	e7de      	b.n	8012730 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8012772:	2001      	movs	r0, #1
 8012774:	e7f8      	b.n	8012768 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012776:	2002      	movs	r0, #2
 8012778:	e7f6      	b.n	8012768 <HAL_UART_Transmit_DMA+0x80>
 801277a:	46c0      	nop			; (mov r8, r8)
 801277c:	08012821 	.word	0x08012821
 8012780:	08012853 	.word	0x08012853
 8012784:	080128a3 	.word	0x080128a3

08012788 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012788:	b510      	push	{r4, lr}
 801278a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801278c:	2069      	movs	r0, #105	; 0x69
 801278e:	5c20      	ldrb	r0, [r4, r0]
 8012790:	2801      	cmp	r0, #1
 8012792:	d004      	beq.n	801279e <HAL_UART_Receive_DMA+0x16>
 8012794:	2369      	movs	r3, #105	; 0x69
 8012796:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012798:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801279a:	2b12      	cmp	r3, #18
 801279c:	d130      	bne.n	8012800 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 801279e:	2900      	cmp	r1, #0
 80127a0:	d033      	beq.n	801280a <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 80127a2:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80127a4:	2a00      	cmp	r2, #0
 80127a6:	d02b      	beq.n	8012800 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80127a8:	2368      	movs	r3, #104	; 0x68
 80127aa:	5ce3      	ldrb	r3, [r4, r3]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d02e      	beq.n	801280e <HAL_UART_Receive_DMA+0x86>
 80127b0:	2368      	movs	r3, #104	; 0x68
 80127b2:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 80127b4:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80127b6:	3b10      	subs	r3, #16
 80127b8:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127ba:	2300      	movs	r3, #0
 80127bc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80127be:	3369      	adds	r3, #105	; 0x69
 80127c0:	5ce3      	ldrb	r3, [r4, r3]
 80127c2:	2b12      	cmp	r3, #18
 80127c4:	d01d      	beq.n	8012802 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80127c6:	2369      	movs	r3, #105	; 0x69
 80127c8:	2022      	movs	r0, #34	; 0x22
 80127ca:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80127cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127ce:	4811      	ldr	r0, [pc, #68]	; (8012814 <HAL_UART_Receive_DMA+0x8c>)
 80127d0:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80127d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127d4:	4810      	ldr	r0, [pc, #64]	; (8012818 <HAL_UART_Receive_DMA+0x90>)
 80127d6:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80127d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127da:	4810      	ldr	r0, [pc, #64]	; (801281c <HAL_UART_Receive_DMA+0x94>)
 80127dc:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80127de:	6820      	ldr	r0, [r4, #0]
 80127e0:	3024      	adds	r0, #36	; 0x24
 80127e2:	0013      	movs	r3, r2
 80127e4:	000a      	movs	r2, r1
 80127e6:	0001      	movs	r1, r0
 80127e8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80127ea:	f7fd ff61 	bl	80106b0 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80127ee:	6822      	ldr	r2, [r4, #0]
 80127f0:	6893      	ldr	r3, [r2, #8]
 80127f2:	2140      	movs	r1, #64	; 0x40
 80127f4:	430b      	orrs	r3, r1
 80127f6:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80127f8:	2368      	movs	r3, #104	; 0x68
 80127fa:	2200      	movs	r2, #0
 80127fc:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80127fe:	2000      	movs	r0, #0
  }
}
 8012800:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012802:	3357      	adds	r3, #87	; 0x57
 8012804:	3031      	adds	r0, #49	; 0x31
 8012806:	54e0      	strb	r0, [r4, r3]
 8012808:	e7e0      	b.n	80127cc <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 801280a:	2001      	movs	r0, #1
 801280c:	e7f8      	b.n	8012800 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 801280e:	2002      	movs	r0, #2
 8012810:	e7f6      	b.n	8012800 <HAL_UART_Receive_DMA+0x78>
 8012812:	46c0      	nop			; (mov r8, r8)
 8012814:	0801285d 	.word	0x0801285d
 8012818:	08012899 	.word	0x08012899
 801281c:	080128a3 	.word	0x080128a3

08012820 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012820:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012822:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012824:	6802      	ldr	r2, [r0, #0]
 8012826:	6812      	ldr	r2, [r2, #0]
 8012828:	0692      	lsls	r2, r2, #26
 801282a:	d40d      	bmi.n	8012848 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 801282c:	2252      	movs	r2, #82	; 0x52
 801282e:	2100      	movs	r1, #0
 8012830:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012832:	6819      	ldr	r1, [r3, #0]
 8012834:	688a      	ldr	r2, [r1, #8]
 8012836:	2080      	movs	r0, #128	; 0x80
 8012838:	4382      	bics	r2, r0
 801283a:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	6813      	ldr	r3, [r2, #0]
 8012840:	2140      	movs	r1, #64	; 0x40
 8012842:	430b      	orrs	r3, r1
 8012844:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012846:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012848:	0018      	movs	r0, r3
 801284a:	f7fa fccb 	bl	800d1e4 <HAL_UART_TxCpltCallback>
}
 801284e:	e7fa      	b.n	8012846 <UART_DMATransmitCplt+0x26>

08012850 <HAL_UART_TxHalfCpltCallback>:
}
 8012850:	4770      	bx	lr

08012852 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012852:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012854:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012856:	f7ff fffb 	bl	8012850 <HAL_UART_TxHalfCpltCallback>
}
 801285a:	bd10      	pop	{r4, pc}

0801285c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801285c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801285e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012860:	6802      	ldr	r2, [r0, #0]
 8012862:	6812      	ldr	r2, [r2, #0]
 8012864:	0692      	lsls	r2, r2, #26
 8012866:	d40e      	bmi.n	8012886 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012868:	225a      	movs	r2, #90	; 0x5a
 801286a:	2100      	movs	r1, #0
 801286c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801286e:	6819      	ldr	r1, [r3, #0]
 8012870:	688a      	ldr	r2, [r1, #8]
 8012872:	2040      	movs	r0, #64	; 0x40
 8012874:	4382      	bics	r2, r0
 8012876:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012878:	2269      	movs	r2, #105	; 0x69
 801287a:	5c9a      	ldrb	r2, [r3, r2]
 801287c:	2a32      	cmp	r2, #50	; 0x32
 801287e:	d006      	beq.n	801288e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012880:	2269      	movs	r2, #105	; 0x69
 8012882:	2101      	movs	r1, #1
 8012884:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012886:	0018      	movs	r0, r3
 8012888:	f7fa fcea 	bl	800d260 <HAL_UART_RxCpltCallback>
}
 801288c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801288e:	3237      	adds	r2, #55	; 0x37
 8012890:	2112      	movs	r1, #18
 8012892:	5499      	strb	r1, [r3, r2]
 8012894:	e7f7      	b.n	8012886 <UART_DMAReceiveCplt+0x2a>

08012896 <HAL_UART_RxHalfCpltCallback>:
}
 8012896:	4770      	bx	lr

08012898 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012898:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801289a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801289c:	f7ff fffb 	bl	8012896 <HAL_UART_RxHalfCpltCallback>
}
 80128a0:	bd10      	pop	{r4, pc}

080128a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80128a2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80128a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	225a      	movs	r2, #90	; 0x5a
 80128aa:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80128ac:	3a08      	subs	r2, #8
 80128ae:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80128b0:	3369      	adds	r3, #105	; 0x69
 80128b2:	3a51      	subs	r2, #81	; 0x51
 80128b4:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80128b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80128b8:	320f      	adds	r2, #15
 80128ba:	4313      	orrs	r3, r2
 80128bc:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80128be:	f7fa fca9 	bl	800d214 <HAL_UART_ErrorCallback>
}
 80128c2:	bd10      	pop	{r4, pc}

080128c4 <UART_SetConfig>:
{
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80128c8:	6801      	ldr	r1, [r0, #0]
 80128ca:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128cc:	6883      	ldr	r3, [r0, #8]
 80128ce:	6900      	ldr	r0, [r0, #16]
 80128d0:	4303      	orrs	r3, r0
 80128d2:	6960      	ldr	r0, [r4, #20]
 80128d4:	4303      	orrs	r3, r0
 80128d6:	69e0      	ldr	r0, [r4, #28]
 80128d8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80128da:	487e      	ldr	r0, [pc, #504]	; (8012ad4 <UART_SetConfig+0x210>)
 80128dc:	4002      	ands	r2, r0
 80128de:	4313      	orrs	r3, r2
 80128e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80128e2:	6822      	ldr	r2, [r4, #0]
 80128e4:	6853      	ldr	r3, [r2, #4]
 80128e6:	497c      	ldr	r1, [pc, #496]	; (8012ad8 <UART_SetConfig+0x214>)
 80128e8:	400b      	ands	r3, r1
 80128ea:	68e1      	ldr	r1, [r4, #12]
 80128ec:	430b      	orrs	r3, r1
 80128ee:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80128f0:	6821      	ldr	r1, [r4, #0]
 80128f2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80128f4:	69a3      	ldr	r3, [r4, #24]
 80128f6:	6a20      	ldr	r0, [r4, #32]
 80128f8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80128fa:	4878      	ldr	r0, [pc, #480]	; (8012adc <UART_SetConfig+0x218>)
 80128fc:	4002      	ands	r2, r0
 80128fe:	4313      	orrs	r3, r2
 8012900:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012902:	6825      	ldr	r5, [r4, #0]
 8012904:	4b76      	ldr	r3, [pc, #472]	; (8012ae0 <UART_SetConfig+0x21c>)
 8012906:	429d      	cmp	r5, r3
 8012908:	d022      	beq.n	8012950 <UART_SetConfig+0x8c>
 801290a:	4b76      	ldr	r3, [pc, #472]	; (8012ae4 <UART_SetConfig+0x220>)
 801290c:	429d      	cmp	r5, r3
 801290e:	d034      	beq.n	801297a <UART_SetConfig+0xb6>
 8012910:	4b75      	ldr	r3, [pc, #468]	; (8012ae8 <UART_SetConfig+0x224>)
 8012912:	429d      	cmp	r5, r3
 8012914:	d100      	bne.n	8012918 <UART_SetConfig+0x54>
 8012916:	e06b      	b.n	80129f0 <UART_SetConfig+0x12c>
 8012918:	4b74      	ldr	r3, [pc, #464]	; (8012aec <UART_SetConfig+0x228>)
 801291a:	429d      	cmp	r5, r3
 801291c:	d100      	bne.n	8012920 <UART_SetConfig+0x5c>
 801291e:	e08e      	b.n	8012a3e <UART_SetConfig+0x17a>
 8012920:	4b73      	ldr	r3, [pc, #460]	; (8012af0 <UART_SetConfig+0x22c>)
 8012922:	429d      	cmp	r5, r3
 8012924:	d100      	bne.n	8012928 <UART_SetConfig+0x64>
 8012926:	e08a      	b.n	8012a3e <UART_SetConfig+0x17a>
 8012928:	4b72      	ldr	r3, [pc, #456]	; (8012af4 <UART_SetConfig+0x230>)
 801292a:	429d      	cmp	r5, r3
 801292c:	d100      	bne.n	8012930 <UART_SetConfig+0x6c>
 801292e:	e086      	b.n	8012a3e <UART_SetConfig+0x17a>
 8012930:	4b71      	ldr	r3, [pc, #452]	; (8012af8 <UART_SetConfig+0x234>)
 8012932:	429d      	cmp	r5, r3
 8012934:	d100      	bne.n	8012938 <UART_SetConfig+0x74>
 8012936:	e082      	b.n	8012a3e <UART_SetConfig+0x17a>
 8012938:	4b70      	ldr	r3, [pc, #448]	; (8012afc <UART_SetConfig+0x238>)
 801293a:	429d      	cmp	r5, r3
 801293c:	d100      	bne.n	8012940 <UART_SetConfig+0x7c>
 801293e:	e07e      	b.n	8012a3e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012940:	2380      	movs	r3, #128	; 0x80
 8012942:	021b      	lsls	r3, r3, #8
 8012944:	69e2      	ldr	r2, [r4, #28]
 8012946:	429a      	cmp	r2, r3
 8012948:	d100      	bne.n	801294c <UART_SetConfig+0x88>
 801294a:	e072      	b.n	8012a32 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 801294c:	2001      	movs	r0, #1
 801294e:	e04e      	b.n	80129ee <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012950:	4b6b      	ldr	r3, [pc, #428]	; (8012b00 <UART_SetConfig+0x23c>)
 8012952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012954:	2303      	movs	r3, #3
 8012956:	4013      	ands	r3, r2
 8012958:	2b01      	cmp	r3, #1
 801295a:	d100      	bne.n	801295e <UART_SetConfig+0x9a>
 801295c:	e09a      	b.n	8012a94 <UART_SetConfig+0x1d0>
 801295e:	2b00      	cmp	r3, #0
 8012960:	d02f      	beq.n	80129c2 <UART_SetConfig+0xfe>
 8012962:	2b02      	cmp	r3, #2
 8012964:	d100      	bne.n	8012968 <UART_SetConfig+0xa4>
 8012966:	e0a5      	b.n	8012ab4 <UART_SetConfig+0x1f0>
 8012968:	2b03      	cmp	r3, #3
 801296a:	d01a      	beq.n	80129a2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801296c:	2380      	movs	r3, #128	; 0x80
 801296e:	021b      	lsls	r3, r3, #8
 8012970:	69e2      	ldr	r2, [r4, #28]
 8012972:	429a      	cmp	r2, r3
 8012974:	d060      	beq.n	8012a38 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8012976:	2001      	movs	r0, #1
 8012978:	e039      	b.n	80129ee <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801297a:	4b61      	ldr	r3, [pc, #388]	; (8012b00 <UART_SetConfig+0x23c>)
 801297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801297e:	22c0      	movs	r2, #192	; 0xc0
 8012980:	0292      	lsls	r2, r2, #10
 8012982:	4013      	ands	r3, r2
 8012984:	2280      	movs	r2, #128	; 0x80
 8012986:	0252      	lsls	r2, r2, #9
 8012988:	4293      	cmp	r3, r2
 801298a:	d100      	bne.n	801298e <UART_SetConfig+0xca>
 801298c:	e082      	b.n	8012a94 <UART_SetConfig+0x1d0>
 801298e:	d916      	bls.n	80129be <UART_SetConfig+0xfa>
 8012990:	2280      	movs	r2, #128	; 0x80
 8012992:	0292      	lsls	r2, r2, #10
 8012994:	4293      	cmp	r3, r2
 8012996:	d100      	bne.n	801299a <UART_SetConfig+0xd6>
 8012998:	e08c      	b.n	8012ab4 <UART_SetConfig+0x1f0>
 801299a:	22c0      	movs	r2, #192	; 0xc0
 801299c:	0292      	lsls	r2, r2, #10
 801299e:	4293      	cmp	r3, r2
 80129a0:	d1e4      	bne.n	801296c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80129a2:	2380      	movs	r3, #128	; 0x80
 80129a4:	021b      	lsls	r3, r3, #8
 80129a6:	69e2      	ldr	r2, [r4, #28]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d038      	beq.n	8012a1e <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80129ac:	6861      	ldr	r1, [r4, #4]
 80129ae:	4855      	ldr	r0, [pc, #340]	; (8012b04 <UART_SetConfig+0x240>)
 80129b0:	f7ed fbc4 	bl	800013c <__udivsi3>
 80129b4:	0400      	lsls	r0, r0, #16
 80129b6:	0c00      	lsrs	r0, r0, #16
 80129b8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80129ba:	2000      	movs	r0, #0
        break;
 80129bc:	e017      	b.n	80129ee <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d1d4      	bne.n	801296c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80129c2:	2380      	movs	r3, #128	; 0x80
 80129c4:	021b      	lsls	r3, r3, #8
 80129c6:	69e2      	ldr	r2, [r4, #28]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d13d      	bne.n	8012a48 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80129cc:	f7ff fa5c 	bl	8011e88 <HAL_RCC_GetPCLK1Freq>
 80129d0:	0040      	lsls	r0, r0, #1
 80129d2:	6861      	ldr	r1, [r4, #4]
 80129d4:	f7ed fbb2 	bl	800013c <__udivsi3>
 80129d8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80129da:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80129dc:	220f      	movs	r2, #15
 80129de:	0019      	movs	r1, r3
 80129e0:	4391      	bics	r1, r2
 80129e2:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80129e4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80129e6:	071b      	lsls	r3, r3, #28
 80129e8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80129ea:	4313      	orrs	r3, r2
 80129ec:	60cb      	str	r3, [r1, #12]
}
 80129ee:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129f0:	4b43      	ldr	r3, [pc, #268]	; (8012b00 <UART_SetConfig+0x23c>)
 80129f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129f4:	22c0      	movs	r2, #192	; 0xc0
 80129f6:	0312      	lsls	r2, r2, #12
 80129f8:	4013      	ands	r3, r2
 80129fa:	2280      	movs	r2, #128	; 0x80
 80129fc:	02d2      	lsls	r2, r2, #11
 80129fe:	4293      	cmp	r3, r2
 8012a00:	d02d      	beq.n	8012a5e <UART_SetConfig+0x19a>
 8012a02:	d913      	bls.n	8012a2c <UART_SetConfig+0x168>
 8012a04:	2280      	movs	r2, #128	; 0x80
 8012a06:	0312      	lsls	r2, r2, #12
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d036      	beq.n	8012a7a <UART_SetConfig+0x1b6>
 8012a0c:	22c0      	movs	r2, #192	; 0xc0
 8012a0e:	0312      	lsls	r2, r2, #12
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d1ab      	bne.n	801296c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a14:	2380      	movs	r3, #128	; 0x80
 8012a16:	021b      	lsls	r3, r3, #8
 8012a18:	69e2      	ldr	r2, [r4, #28]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d1c6      	bne.n	80129ac <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012a1e:	6861      	ldr	r1, [r4, #4]
 8012a20:	4839      	ldr	r0, [pc, #228]	; (8012b08 <UART_SetConfig+0x244>)
 8012a22:	f7ed fb8b 	bl	800013c <__udivsi3>
 8012a26:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a28:	2000      	movs	r0, #0
        break;
 8012a2a:	e7d7      	b.n	80129dc <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d0c8      	beq.n	80129c2 <UART_SetConfig+0xfe>
 8012a30:	e79c      	b.n	801296c <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8012a32:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012a34:	2300      	movs	r3, #0
 8012a36:	e7d1      	b.n	80129dc <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8012a38:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	e7ce      	b.n	80129dc <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a3e:	2380      	movs	r3, #128	; 0x80
 8012a40:	021b      	lsls	r3, r3, #8
 8012a42:	69e2      	ldr	r2, [r4, #28]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d0c1      	beq.n	80129cc <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012a48:	f7ff fa1e 	bl	8011e88 <HAL_RCC_GetPCLK1Freq>
 8012a4c:	6825      	ldr	r5, [r4, #0]
 8012a4e:	6861      	ldr	r1, [r4, #4]
 8012a50:	f7ed fb74 	bl	800013c <__udivsi3>
 8012a54:	0400      	lsls	r0, r0, #16
 8012a56:	0c00      	lsrs	r0, r0, #16
 8012a58:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a5a:	2000      	movs	r0, #0
  return ret;
 8012a5c:	e7c7      	b.n	80129ee <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a5e:	2380      	movs	r3, #128	; 0x80
 8012a60:	021b      	lsls	r3, r3, #8
 8012a62:	69e2      	ldr	r2, [r4, #28]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d11a      	bne.n	8012a9e <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012a68:	f7ff f9aa 	bl	8011dc0 <HAL_RCC_GetSysClockFreq>
 8012a6c:	0040      	lsls	r0, r0, #1
 8012a6e:	6861      	ldr	r1, [r4, #4]
 8012a70:	f7ed fb64 	bl	800013c <__udivsi3>
 8012a74:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a76:	2000      	movs	r0, #0
        break;
 8012a78:	e7b0      	b.n	80129dc <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a7a:	2380      	movs	r3, #128	; 0x80
 8012a7c:	021b      	lsls	r3, r3, #8
 8012a7e:	69e2      	ldr	r2, [r4, #28]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d11c      	bne.n	8012abe <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012a84:	6861      	ldr	r1, [r4, #4]
 8012a86:	2080      	movs	r0, #128	; 0x80
 8012a88:	0240      	lsls	r0, r0, #9
 8012a8a:	f7ed fb57 	bl	800013c <__udivsi3>
 8012a8e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a90:	2000      	movs	r0, #0
        break;
 8012a92:	e7a3      	b.n	80129dc <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a94:	2380      	movs	r3, #128	; 0x80
 8012a96:	021b      	lsls	r3, r3, #8
 8012a98:	69e2      	ldr	r2, [r4, #28]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d0e4      	beq.n	8012a68 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012a9e:	f7ff f98f 	bl	8011dc0 <HAL_RCC_GetSysClockFreq>
 8012aa2:	6825      	ldr	r5, [r4, #0]
 8012aa4:	6861      	ldr	r1, [r4, #4]
 8012aa6:	f7ed fb49 	bl	800013c <__udivsi3>
 8012aaa:	0400      	lsls	r0, r0, #16
 8012aac:	0c00      	lsrs	r0, r0, #16
 8012aae:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ab0:	2000      	movs	r0, #0
        break;
 8012ab2:	e79c      	b.n	80129ee <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012ab4:	2380      	movs	r3, #128	; 0x80
 8012ab6:	021b      	lsls	r3, r3, #8
 8012ab8:	69e2      	ldr	r2, [r4, #28]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d0e2      	beq.n	8012a84 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012abe:	6861      	ldr	r1, [r4, #4]
 8012ac0:	2080      	movs	r0, #128	; 0x80
 8012ac2:	0200      	lsls	r0, r0, #8
 8012ac4:	f7ed fb3a 	bl	800013c <__udivsi3>
 8012ac8:	0400      	lsls	r0, r0, #16
 8012aca:	0c00      	lsrs	r0, r0, #16
 8012acc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ace:	2000      	movs	r0, #0
        break;
 8012ad0:	e78d      	b.n	80129ee <UART_SetConfig+0x12a>
 8012ad2:	46c0      	nop			; (mov r8, r8)
 8012ad4:	efff69f3 	.word	0xefff69f3
 8012ad8:	ffffcfff 	.word	0xffffcfff
 8012adc:	fffff4ff 	.word	0xfffff4ff
 8012ae0:	40013800 	.word	0x40013800
 8012ae4:	40004400 	.word	0x40004400
 8012ae8:	40004800 	.word	0x40004800
 8012aec:	40004c00 	.word	0x40004c00
 8012af0:	40005000 	.word	0x40005000
 8012af4:	40011400 	.word	0x40011400
 8012af8:	40011800 	.word	0x40011800
 8012afc:	40011c00 	.word	0x40011c00
 8012b00:	40021000 	.word	0x40021000
 8012b04:	007a1200 	.word	0x007a1200
 8012b08:	00f42400 	.word	0x00f42400

08012b0c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012b0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b0e:	07db      	lsls	r3, r3, #31
 8012b10:	d506      	bpl.n	8012b20 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012b12:	6802      	ldr	r2, [r0, #0]
 8012b14:	6853      	ldr	r3, [r2, #4]
 8012b16:	492c      	ldr	r1, [pc, #176]	; (8012bc8 <UART_AdvFeatureConfig+0xbc>)
 8012b18:	400b      	ands	r3, r1
 8012b1a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012b1c:	430b      	orrs	r3, r1
 8012b1e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b22:	079b      	lsls	r3, r3, #30
 8012b24:	d506      	bpl.n	8012b34 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012b26:	6802      	ldr	r2, [r0, #0]
 8012b28:	6853      	ldr	r3, [r2, #4]
 8012b2a:	4928      	ldr	r1, [pc, #160]	; (8012bcc <UART_AdvFeatureConfig+0xc0>)
 8012b2c:	400b      	ands	r3, r1
 8012b2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012b30:	430b      	orrs	r3, r1
 8012b32:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012b34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b36:	075b      	lsls	r3, r3, #29
 8012b38:	d506      	bpl.n	8012b48 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012b3a:	6802      	ldr	r2, [r0, #0]
 8012b3c:	6853      	ldr	r3, [r2, #4]
 8012b3e:	4924      	ldr	r1, [pc, #144]	; (8012bd0 <UART_AdvFeatureConfig+0xc4>)
 8012b40:	400b      	ands	r3, r1
 8012b42:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012b44:	430b      	orrs	r3, r1
 8012b46:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012b48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b4a:	071b      	lsls	r3, r3, #28
 8012b4c:	d506      	bpl.n	8012b5c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012b4e:	6802      	ldr	r2, [r0, #0]
 8012b50:	6853      	ldr	r3, [r2, #4]
 8012b52:	4920      	ldr	r1, [pc, #128]	; (8012bd4 <UART_AdvFeatureConfig+0xc8>)
 8012b54:	400b      	ands	r3, r1
 8012b56:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012b58:	430b      	orrs	r3, r1
 8012b5a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012b5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b5e:	06db      	lsls	r3, r3, #27
 8012b60:	d506      	bpl.n	8012b70 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012b62:	6802      	ldr	r2, [r0, #0]
 8012b64:	6893      	ldr	r3, [r2, #8]
 8012b66:	491c      	ldr	r1, [pc, #112]	; (8012bd8 <UART_AdvFeatureConfig+0xcc>)
 8012b68:	400b      	ands	r3, r1
 8012b6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012b6c:	430b      	orrs	r3, r1
 8012b6e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b72:	069b      	lsls	r3, r3, #26
 8012b74:	d506      	bpl.n	8012b84 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012b76:	6802      	ldr	r2, [r0, #0]
 8012b78:	6893      	ldr	r3, [r2, #8]
 8012b7a:	4918      	ldr	r1, [pc, #96]	; (8012bdc <UART_AdvFeatureConfig+0xd0>)
 8012b7c:	400b      	ands	r3, r1
 8012b7e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012b80:	430b      	orrs	r3, r1
 8012b82:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012b84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b86:	065b      	lsls	r3, r3, #25
 8012b88:	d50b      	bpl.n	8012ba2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012b8a:	6802      	ldr	r2, [r0, #0]
 8012b8c:	6853      	ldr	r3, [r2, #4]
 8012b8e:	4914      	ldr	r1, [pc, #80]	; (8012be0 <UART_AdvFeatureConfig+0xd4>)
 8012b90:	400b      	ands	r3, r1
 8012b92:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012b94:	430b      	orrs	r3, r1
 8012b96:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012b98:	2380      	movs	r3, #128	; 0x80
 8012b9a:	035b      	lsls	r3, r3, #13
 8012b9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d00a      	beq.n	8012bb8 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012ba2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012ba4:	061b      	lsls	r3, r3, #24
 8012ba6:	d506      	bpl.n	8012bb6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012ba8:	6802      	ldr	r2, [r0, #0]
 8012baa:	6853      	ldr	r3, [r2, #4]
 8012bac:	490d      	ldr	r1, [pc, #52]	; (8012be4 <UART_AdvFeatureConfig+0xd8>)
 8012bae:	400b      	ands	r3, r1
 8012bb0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012bb2:	430b      	orrs	r3, r1
 8012bb4:	6053      	str	r3, [r2, #4]
}
 8012bb6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012bb8:	6802      	ldr	r2, [r0, #0]
 8012bba:	6853      	ldr	r3, [r2, #4]
 8012bbc:	490a      	ldr	r1, [pc, #40]	; (8012be8 <UART_AdvFeatureConfig+0xdc>)
 8012bbe:	400b      	ands	r3, r1
 8012bc0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012bc2:	430b      	orrs	r3, r1
 8012bc4:	6053      	str	r3, [r2, #4]
 8012bc6:	e7ec      	b.n	8012ba2 <UART_AdvFeatureConfig+0x96>
 8012bc8:	fffdffff 	.word	0xfffdffff
 8012bcc:	fffeffff 	.word	0xfffeffff
 8012bd0:	fffbffff 	.word	0xfffbffff
 8012bd4:	ffff7fff 	.word	0xffff7fff
 8012bd8:	ffffefff 	.word	0xffffefff
 8012bdc:	ffffdfff 	.word	0xffffdfff
 8012be0:	ffefffff 	.word	0xffefffff
 8012be4:	fff7ffff 	.word	0xfff7ffff
 8012be8:	ff9fffff 	.word	0xff9fffff

08012bec <UART_WaitOnFlagUntilTimeout>:
{
 8012bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bee:	46c6      	mov	lr, r8
 8012bf0:	b500      	push	{lr}
 8012bf2:	0006      	movs	r6, r0
 8012bf4:	000c      	movs	r4, r1
 8012bf6:	0017      	movs	r7, r2
 8012bf8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012bfa:	f7fd f835 	bl	800fc68 <HAL_GetTick>
 8012bfe:	4680      	mov	r8, r0
  if(Status == RESET)
 8012c00:	2f00      	cmp	r7, #0
 8012c02:	d029      	beq.n	8012c58 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012c04:	6832      	ldr	r2, [r6, #0]
 8012c06:	69d3      	ldr	r3, [r2, #28]
 8012c08:	4023      	ands	r3, r4
 8012c0a:	42a3      	cmp	r3, r4
 8012c0c:	d152      	bne.n	8012cb4 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012c0e:	1c6b      	adds	r3, r5, #1
 8012c10:	d0f9      	beq.n	8012c06 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012c12:	2d00      	cmp	r5, #0
 8012c14:	d005      	beq.n	8012c22 <UART_WaitOnFlagUntilTimeout+0x36>
 8012c16:	f7fd f827 	bl	800fc68 <HAL_GetTick>
 8012c1a:	4643      	mov	r3, r8
 8012c1c:	1ac0      	subs	r0, r0, r3
 8012c1e:	42a8      	cmp	r0, r5
 8012c20:	d9f0      	bls.n	8012c04 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012c22:	6832      	ldr	r2, [r6, #0]
 8012c24:	6813      	ldr	r3, [r2, #0]
 8012c26:	2180      	movs	r1, #128	; 0x80
 8012c28:	438b      	bics	r3, r1
 8012c2a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012c2c:	6832      	ldr	r2, [r6, #0]
 8012c2e:	6813      	ldr	r3, [r2, #0]
 8012c30:	3960      	subs	r1, #96	; 0x60
 8012c32:	438b      	bics	r3, r1
 8012c34:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012c36:	6832      	ldr	r2, [r6, #0]
 8012c38:	6813      	ldr	r3, [r2, #0]
 8012c3a:	491f      	ldr	r1, [pc, #124]	; (8012cb8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012c3c:	400b      	ands	r3, r1
 8012c3e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012c40:	6831      	ldr	r1, [r6, #0]
 8012c42:	688b      	ldr	r3, [r1, #8]
 8012c44:	2201      	movs	r2, #1
 8012c46:	4393      	bics	r3, r2
 8012c48:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012c4a:	2369      	movs	r3, #105	; 0x69
 8012c4c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012c4e:	3b01      	subs	r3, #1
 8012c50:	2200      	movs	r2, #0
 8012c52:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012c54:	2003      	movs	r0, #3
 8012c56:	e02a      	b.n	8012cae <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012c58:	6832      	ldr	r2, [r6, #0]
 8012c5a:	69d3      	ldr	r3, [r2, #28]
 8012c5c:	4023      	ands	r3, r4
 8012c5e:	42a3      	cmp	r3, r4
 8012c60:	d024      	beq.n	8012cac <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012c62:	1c6b      	adds	r3, r5, #1
 8012c64:	d0f9      	beq.n	8012c5a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012c66:	2d00      	cmp	r5, #0
 8012c68:	d005      	beq.n	8012c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8012c6a:	f7fc fffd 	bl	800fc68 <HAL_GetTick>
 8012c6e:	4643      	mov	r3, r8
 8012c70:	1ac0      	subs	r0, r0, r3
 8012c72:	42a8      	cmp	r0, r5
 8012c74:	d9f0      	bls.n	8012c58 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012c76:	6832      	ldr	r2, [r6, #0]
 8012c78:	6813      	ldr	r3, [r2, #0]
 8012c7a:	2180      	movs	r1, #128	; 0x80
 8012c7c:	438b      	bics	r3, r1
 8012c7e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012c80:	6832      	ldr	r2, [r6, #0]
 8012c82:	6813      	ldr	r3, [r2, #0]
 8012c84:	3960      	subs	r1, #96	; 0x60
 8012c86:	438b      	bics	r3, r1
 8012c88:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012c8a:	6832      	ldr	r2, [r6, #0]
 8012c8c:	6813      	ldr	r3, [r2, #0]
 8012c8e:	490a      	ldr	r1, [pc, #40]	; (8012cb8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012c90:	400b      	ands	r3, r1
 8012c92:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012c94:	6831      	ldr	r1, [r6, #0]
 8012c96:	688b      	ldr	r3, [r1, #8]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	4393      	bics	r3, r2
 8012c9c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012c9e:	2369      	movs	r3, #105	; 0x69
 8012ca0:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012ca8:	2003      	movs	r0, #3
 8012caa:	e000      	b.n	8012cae <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012cac:	2000      	movs	r0, #0
}
 8012cae:	bc04      	pop	{r2}
 8012cb0:	4690      	mov	r8, r2
 8012cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	e7fa      	b.n	8012cae <UART_WaitOnFlagUntilTimeout+0xc2>
 8012cb8:	fffffeff 	.word	0xfffffeff

08012cbc <HAL_UART_Transmit>:
{
 8012cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	0004      	movs	r4, r0
 8012cc2:	000e      	movs	r6, r1
 8012cc4:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012cc6:	2369      	movs	r3, #105	; 0x69
 8012cc8:	5cc3      	ldrb	r3, [r0, r3]
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d004      	beq.n	8012cd8 <HAL_UART_Transmit+0x1c>
 8012cce:	2369      	movs	r3, #105	; 0x69
 8012cd0:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8012cd2:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012cd4:	2b22      	cmp	r3, #34	; 0x22
 8012cd6:	d153      	bne.n	8012d80 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8012cd8:	2e00      	cmp	r6, #0
 8012cda:	d050      	beq.n	8012d7e <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8012cdc:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012cde:	2a00      	cmp	r2, #0
 8012ce0:	d04e      	beq.n	8012d80 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8012ce2:	2368      	movs	r3, #104	; 0x68
 8012ce4:	5ce3      	ldrb	r3, [r4, r3]
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d04c      	beq.n	8012d84 <HAL_UART_Transmit+0xc8>
 8012cea:	2368      	movs	r3, #104	; 0x68
 8012cec:	2101      	movs	r1, #1
 8012cee:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012cf4:	3369      	adds	r3, #105	; 0x69
 8012cf6:	5ce3      	ldrb	r3, [r4, r3]
 8012cf8:	2b22      	cmp	r3, #34	; 0x22
 8012cfa:	d008      	beq.n	8012d0e <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012cfc:	2369      	movs	r3, #105	; 0x69
 8012cfe:	2112      	movs	r1, #18
 8012d00:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012d02:	2350      	movs	r3, #80	; 0x50
 8012d04:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8012d06:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d08:	2580      	movs	r5, #128	; 0x80
 8012d0a:	016d      	lsls	r5, r5, #5
 8012d0c:	e00a      	b.n	8012d24 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012d0e:	3347      	adds	r3, #71	; 0x47
 8012d10:	3131      	adds	r1, #49	; 0x31
 8012d12:	54e1      	strb	r1, [r4, r3]
 8012d14:	e7f5      	b.n	8012d02 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012d16:	7833      	ldrb	r3, [r6, #0]
 8012d18:	6822      	ldr	r2, [r4, #0]
 8012d1a:	8513      	strh	r3, [r2, #40]	; 0x28
 8012d1c:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8012d1e:	5be2      	ldrh	r2, [r4, r7]
 8012d20:	2a00      	cmp	r2, #0
 8012d22:	d016      	beq.n	8012d52 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8012d24:	3a01      	subs	r2, #1
 8012d26:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012d28:	9b01      	ldr	r3, [sp, #4]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	2180      	movs	r1, #128	; 0x80
 8012d2e:	0020      	movs	r0, r4
 8012d30:	f7ff ff5c 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d127      	bne.n	8012d88 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d38:	68a3      	ldr	r3, [r4, #8]
 8012d3a:	42ab      	cmp	r3, r5
 8012d3c:	d1eb      	bne.n	8012d16 <HAL_UART_Transmit+0x5a>
 8012d3e:	6923      	ldr	r3, [r4, #16]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d1e8      	bne.n	8012d16 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012d44:	8833      	ldrh	r3, [r6, #0]
 8012d46:	05db      	lsls	r3, r3, #23
 8012d48:	0ddb      	lsrs	r3, r3, #23
 8012d4a:	6822      	ldr	r2, [r4, #0]
 8012d4c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012d4e:	3602      	adds	r6, #2
 8012d50:	e7e5      	b.n	8012d1e <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012d52:	9b01      	ldr	r3, [sp, #4]
 8012d54:	2140      	movs	r1, #64	; 0x40
 8012d56:	0020      	movs	r0, r4
 8012d58:	f7ff ff48 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d115      	bne.n	8012d8c <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012d60:	2369      	movs	r3, #105	; 0x69
 8012d62:	5ce3      	ldrb	r3, [r4, r3]
 8012d64:	2b32      	cmp	r3, #50	; 0x32
 8012d66:	d006      	beq.n	8012d76 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012d68:	2369      	movs	r3, #105	; 0x69
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012d6e:	2368      	movs	r3, #104	; 0x68
 8012d70:	2200      	movs	r2, #0
 8012d72:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012d74:	e004      	b.n	8012d80 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012d76:	3337      	adds	r3, #55	; 0x37
 8012d78:	2222      	movs	r2, #34	; 0x22
 8012d7a:	54e2      	strb	r2, [r4, r3]
 8012d7c:	e7f7      	b.n	8012d6e <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8012d7e:	2001      	movs	r0, #1
}
 8012d80:	b003      	add	sp, #12
 8012d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8012d84:	2002      	movs	r0, #2
 8012d86:	e7fb      	b.n	8012d80 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012d88:	2003      	movs	r0, #3
 8012d8a:	e7f9      	b.n	8012d80 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012d8c:	2003      	movs	r0, #3
 8012d8e:	e7f7      	b.n	8012d80 <HAL_UART_Transmit+0xc4>

08012d90 <UART_CheckIdleState>:
{
 8012d90:	b510      	push	{r4, lr}
 8012d92:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d94:	2300      	movs	r3, #0
 8012d96:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012d98:	6803      	ldr	r3, [r0, #0]
 8012d9a:	4a18      	ldr	r2, [pc, #96]	; (8012dfc <UART_CheckIdleState+0x6c>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d005      	beq.n	8012dac <UART_CheckIdleState+0x1c>
 8012da0:	4a17      	ldr	r2, [pc, #92]	; (8012e00 <UART_CheckIdleState+0x70>)
 8012da2:	4293      	cmp	r3, r2
 8012da4:	d002      	beq.n	8012dac <UART_CheckIdleState+0x1c>
 8012da6:	4a17      	ldr	r2, [pc, #92]	; (8012e04 <UART_CheckIdleState+0x74>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d106      	bne.n	8012dba <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	071b      	lsls	r3, r3, #28
 8012db0:	d40b      	bmi.n	8012dca <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012db2:	6823      	ldr	r3, [r4, #0]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	075b      	lsls	r3, r3, #29
 8012db8:	d413      	bmi.n	8012de2 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012dba:	2369      	movs	r3, #105	; 0x69
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012dc0:	3b01      	subs	r3, #1
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012dc6:	2000      	movs	r0, #0
}
 8012dc8:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012dca:	23fa      	movs	r3, #250	; 0xfa
 8012dcc:	2180      	movs	r1, #128	; 0x80
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	0389      	lsls	r1, r1, #14
 8012dd4:	0020      	movs	r0, r4
 8012dd6:	f7ff ff09 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d0e9      	beq.n	8012db2 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012dde:	2003      	movs	r0, #3
 8012de0:	e7f2      	b.n	8012dc8 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012de2:	23fa      	movs	r3, #250	; 0xfa
 8012de4:	2180      	movs	r1, #128	; 0x80
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	2200      	movs	r2, #0
 8012dea:	03c9      	lsls	r1, r1, #15
 8012dec:	0020      	movs	r0, r4
 8012dee:	f7ff fefd 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d0e1      	beq.n	8012dba <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8012df6:	2003      	movs	r0, #3
 8012df8:	e7e6      	b.n	8012dc8 <UART_CheckIdleState+0x38>
 8012dfa:	46c0      	nop			; (mov r8, r8)
 8012dfc:	40013800 	.word	0x40013800
 8012e00:	40004400 	.word	0x40004400
 8012e04:	40004800 	.word	0x40004800

08012e08 <HAL_UART_Init>:
{
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012e0c:	d030      	beq.n	8012e70 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012e0e:	2369      	movs	r3, #105	; 0x69
 8012e10:	5cc3      	ldrb	r3, [r0, r3]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d022      	beq.n	8012e5c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8012e16:	2369      	movs	r3, #105	; 0x69
 8012e18:	2202      	movs	r2, #2
 8012e1a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012e1c:	6822      	ldr	r2, [r4, #0]
 8012e1e:	6813      	ldr	r3, [r2, #0]
 8012e20:	2101      	movs	r1, #1
 8012e22:	438b      	bics	r3, r1
 8012e24:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012e26:	0020      	movs	r0, r4
 8012e28:	f7ff fd4c 	bl	80128c4 <UART_SetConfig>
 8012e2c:	2801      	cmp	r0, #1
 8012e2e:	d014      	beq.n	8012e5a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d118      	bne.n	8012e68 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012e36:	6822      	ldr	r2, [r4, #0]
 8012e38:	6853      	ldr	r3, [r2, #4]
 8012e3a:	490e      	ldr	r1, [pc, #56]	; (8012e74 <HAL_UART_Init+0x6c>)
 8012e3c:	400b      	ands	r3, r1
 8012e3e:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012e40:	6822      	ldr	r2, [r4, #0]
 8012e42:	6893      	ldr	r3, [r2, #8]
 8012e44:	212a      	movs	r1, #42	; 0x2a
 8012e46:	438b      	bics	r3, r1
 8012e48:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012e4a:	6822      	ldr	r2, [r4, #0]
 8012e4c:	6813      	ldr	r3, [r2, #0]
 8012e4e:	3929      	subs	r1, #41	; 0x29
 8012e50:	430b      	orrs	r3, r1
 8012e52:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012e54:	0020      	movs	r0, r4
 8012e56:	f7ff ff9b 	bl	8012d90 <UART_CheckIdleState>
}
 8012e5a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012e5c:	3368      	adds	r3, #104	; 0x68
 8012e5e:	2200      	movs	r2, #0
 8012e60:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012e62:	f7fa fc89 	bl	800d778 <HAL_UART_MspInit>
 8012e66:	e7d6      	b.n	8012e16 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012e68:	0020      	movs	r0, r4
 8012e6a:	f7ff fe4f 	bl	8012b0c <UART_AdvFeatureConfig>
 8012e6e:	e7e2      	b.n	8012e36 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012e70:	2001      	movs	r0, #1
 8012e72:	e7f2      	b.n	8012e5a <HAL_UART_Init+0x52>
 8012e74:	ffffb7ff 	.word	0xffffb7ff

08012e78 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012e78:	2369      	movs	r3, #105	; 0x69
 8012e7a:	5cc3      	ldrb	r3, [r0, r3]
 8012e7c:	2b12      	cmp	r3, #18
 8012e7e:	d004      	beq.n	8012e8a <UART_Transmit_IT+0x12>
 8012e80:	2369      	movs	r3, #105	; 0x69
 8012e82:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8012e84:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012e86:	2a32      	cmp	r2, #50	; 0x32
 8012e88:	d113      	bne.n	8012eb2 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012e8a:	2352      	movs	r3, #82	; 0x52
 8012e8c:	5ac3      	ldrh	r3, [r0, r3]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d011      	beq.n	8012eb6 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e92:	2380      	movs	r3, #128	; 0x80
 8012e94:	015b      	lsls	r3, r3, #5
 8012e96:	6882      	ldr	r2, [r0, #8]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d018      	beq.n	8012ece <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012e9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012e9e:	1c5a      	adds	r2, r3, #1
 8012ea0:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	6802      	ldr	r2, [r0, #0]
 8012ea6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8012ea8:	2252      	movs	r2, #82	; 0x52
 8012eaa:	5a83      	ldrh	r3, [r0, r2]
 8012eac:	3b01      	subs	r3, #1
 8012eae:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012eb0:	2300      	movs	r3, #0
  }
}
 8012eb2:	0018      	movs	r0, r3
 8012eb4:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012eb6:	6802      	ldr	r2, [r0, #0]
 8012eb8:	6813      	ldr	r3, [r2, #0]
 8012eba:	2180      	movs	r1, #128	; 0x80
 8012ebc:	438b      	bics	r3, r1
 8012ebe:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012ec0:	6802      	ldr	r2, [r0, #0]
 8012ec2:	6813      	ldr	r3, [r2, #0]
 8012ec4:	3940      	subs	r1, #64	; 0x40
 8012ec6:	430b      	orrs	r3, r1
 8012ec8:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	e7f1      	b.n	8012eb2 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ece:	6903      	ldr	r3, [r0, #16]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1e3      	bne.n	8012e9c <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012ed4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	05db      	lsls	r3, r3, #23
 8012eda:	0ddb      	lsrs	r3, r3, #23
 8012edc:	6802      	ldr	r2, [r0, #0]
 8012ede:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012ee0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012ee2:	3302      	adds	r3, #2
 8012ee4:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012ee6:	e7df      	b.n	8012ea8 <UART_Transmit_IT+0x30>

08012ee8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012ee8:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012eea:	6802      	ldr	r2, [r0, #0]
 8012eec:	6813      	ldr	r3, [r2, #0]
 8012eee:	2140      	movs	r1, #64	; 0x40
 8012ef0:	438b      	bics	r3, r1
 8012ef2:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012ef4:	2369      	movs	r3, #105	; 0x69
 8012ef6:	5cc3      	ldrb	r3, [r0, r3]
 8012ef8:	2b32      	cmp	r3, #50	; 0x32
 8012efa:	d00a      	beq.n	8012f12 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012efc:	6801      	ldr	r1, [r0, #0]
 8012efe:	688b      	ldr	r3, [r1, #8]
 8012f00:	2201      	movs	r2, #1
 8012f02:	4393      	bics	r3, r2
 8012f04:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8012f06:	2369      	movs	r3, #105	; 0x69
 8012f08:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012f0a:	f7fa f96b 	bl	800d1e4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012f0e:	2000      	movs	r0, #0
 8012f10:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012f12:	3337      	adds	r3, #55	; 0x37
 8012f14:	2222      	movs	r2, #34	; 0x22
 8012f16:	54c2      	strb	r2, [r0, r3]
 8012f18:	e7f7      	b.n	8012f0a <UART_EndTransmit_IT+0x22>
	...

08012f1c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012f1c:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012f1e:	2369      	movs	r3, #105	; 0x69
 8012f20:	5cc3      	ldrb	r3, [r0, r3]
 8012f22:	2b22      	cmp	r3, #34	; 0x22
 8012f24:	d004      	beq.n	8012f30 <UART_Receive_IT+0x14>
 8012f26:	2369      	movs	r3, #105	; 0x69
 8012f28:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012f2a:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012f2c:	2b32      	cmp	r3, #50	; 0x32
 8012f2e:	d12d      	bne.n	8012f8c <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8012f30:	235c      	movs	r3, #92	; 0x5c
 8012f32:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f34:	2280      	movs	r2, #128	; 0x80
 8012f36:	0152      	lsls	r2, r2, #5
 8012f38:	6883      	ldr	r3, [r0, #8]
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d028      	beq.n	8012f90 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012f3e:	6803      	ldr	r3, [r0, #0]
 8012f40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f42:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012f44:	1c54      	adds	r4, r2, #1
 8012f46:	6544      	str	r4, [r0, #84]	; 0x54
 8012f48:	400b      	ands	r3, r1
 8012f4a:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012f4c:	225a      	movs	r2, #90	; 0x5a
 8012f4e:	5a83      	ldrh	r3, [r0, r2]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8012f56:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d117      	bne.n	8012f8c <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012f5c:	6802      	ldr	r2, [r0, #0]
 8012f5e:	6813      	ldr	r3, [r2, #0]
 8012f60:	2120      	movs	r1, #32
 8012f62:	438b      	bics	r3, r1
 8012f64:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012f66:	2369      	movs	r3, #105	; 0x69
 8012f68:	5cc3      	ldrb	r3, [r0, r3]
 8012f6a:	2b32      	cmp	r3, #50	; 0x32
 8012f6c:	d01c      	beq.n	8012fa8 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012f6e:	6802      	ldr	r2, [r0, #0]
 8012f70:	6813      	ldr	r3, [r2, #0]
 8012f72:	490f      	ldr	r1, [pc, #60]	; (8012fb0 <UART_Receive_IT+0x94>)
 8012f74:	400b      	ands	r3, r1
 8012f76:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012f78:	6801      	ldr	r1, [r0, #0]
 8012f7a:	688b      	ldr	r3, [r1, #8]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	4393      	bics	r3, r2
 8012f80:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8012f82:	2369      	movs	r3, #105	; 0x69
 8012f84:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8012f86:	f7fa f96b 	bl	800d260 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012f8a:	2200      	movs	r2, #0
  }
}
 8012f8c:	0010      	movs	r0, r2
 8012f8e:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f90:	6903      	ldr	r3, [r0, #16]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d1d3      	bne.n	8012f3e <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012f96:	6803      	ldr	r3, [r0, #0]
 8012f98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f9a:	400b      	ands	r3, r1
 8012f9c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012f9e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012fa0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012fa2:	3302      	adds	r3, #2
 8012fa4:	6543      	str	r3, [r0, #84]	; 0x54
 8012fa6:	e7d1      	b.n	8012f4c <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012fa8:	3337      	adds	r3, #55	; 0x37
 8012faa:	2212      	movs	r2, #18
 8012fac:	54c2      	strb	r2, [r0, r3]
 8012fae:	e7ea      	b.n	8012f86 <UART_Receive_IT+0x6a>
 8012fb0:	fffffeff 	.word	0xfffffeff

08012fb4 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012fb4:	4770      	bx	lr

08012fb6 <HAL_UART_IRQHandler>:
{
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012fba:	6803      	ldr	r3, [r0, #0]
 8012fbc:	69da      	ldr	r2, [r3, #28]
 8012fbe:	07d2      	lsls	r2, r2, #31
 8012fc0:	d509      	bpl.n	8012fd6 <HAL_UART_IRQHandler+0x20>
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	05d2      	lsls	r2, r2, #23
 8012fc6:	d506      	bpl.n	8012fd6 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012fc8:	2201      	movs	r2, #1
 8012fca:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012fcc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012fce:	4313      	orrs	r3, r2
 8012fd0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012fd2:	2369      	movs	r3, #105	; 0x69
 8012fd4:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	69da      	ldr	r2, [r3, #28]
 8012fda:	0792      	lsls	r2, r2, #30
 8012fdc:	d50b      	bpl.n	8012ff6 <HAL_UART_IRQHandler+0x40>
 8012fde:	689a      	ldr	r2, [r3, #8]
 8012fe0:	07d2      	lsls	r2, r2, #31
 8012fe2:	d508      	bpl.n	8012ff6 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012fe4:	2202      	movs	r2, #2
 8012fe6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012fe8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012fea:	3202      	adds	r2, #2
 8012fec:	4313      	orrs	r3, r2
 8012fee:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012ff0:	2369      	movs	r3, #105	; 0x69
 8012ff2:	3a03      	subs	r2, #3
 8012ff4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	69da      	ldr	r2, [r3, #28]
 8012ffa:	0752      	lsls	r2, r2, #29
 8012ffc:	d50b      	bpl.n	8013016 <HAL_UART_IRQHandler+0x60>
 8012ffe:	689a      	ldr	r2, [r3, #8]
 8013000:	07d2      	lsls	r2, r2, #31
 8013002:	d508      	bpl.n	8013016 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013004:	2204      	movs	r2, #4
 8013006:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013008:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801300a:	3a02      	subs	r2, #2
 801300c:	4313      	orrs	r3, r2
 801300e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013010:	2369      	movs	r3, #105	; 0x69
 8013012:	3a01      	subs	r2, #1
 8013014:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	69da      	ldr	r2, [r3, #28]
 801301a:	0712      	lsls	r2, r2, #28
 801301c:	d50a      	bpl.n	8013034 <HAL_UART_IRQHandler+0x7e>
 801301e:	689a      	ldr	r2, [r3, #8]
 8013020:	07d2      	lsls	r2, r2, #31
 8013022:	d507      	bpl.n	8013034 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013024:	2208      	movs	r2, #8
 8013026:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013028:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801302a:	4313      	orrs	r3, r2
 801302c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801302e:	2369      	movs	r3, #105	; 0x69
 8013030:	3a07      	subs	r2, #7
 8013032:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013034:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013036:	2b00      	cmp	r3, #0
 8013038:	d11c      	bne.n	8013074 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	69da      	ldr	r2, [r3, #28]
 801303e:	02d2      	lsls	r2, r2, #11
 8013040:	d502      	bpl.n	8013048 <HAL_UART_IRQHandler+0x92>
 8013042:	689a      	ldr	r2, [r3, #8]
 8013044:	0252      	lsls	r2, r2, #9
 8013046:	d419      	bmi.n	801307c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013048:	6823      	ldr	r3, [r4, #0]
 801304a:	69da      	ldr	r2, [r3, #28]
 801304c:	0692      	lsls	r2, r2, #26
 801304e:	d502      	bpl.n	8013056 <HAL_UART_IRQHandler+0xa0>
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	069b      	lsls	r3, r3, #26
 8013054:	d41c      	bmi.n	8013090 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013056:	6823      	ldr	r3, [r4, #0]
 8013058:	69da      	ldr	r2, [r3, #28]
 801305a:	0612      	lsls	r2, r2, #24
 801305c:	d502      	bpl.n	8013064 <HAL_UART_IRQHandler+0xae>
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	061b      	lsls	r3, r3, #24
 8013062:	d41e      	bmi.n	80130a2 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	69da      	ldr	r2, [r3, #28]
 8013068:	0652      	lsls	r2, r2, #25
 801306a:	d502      	bpl.n	8013072 <HAL_UART_IRQHandler+0xbc>
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	065b      	lsls	r3, r3, #25
 8013070:	d41b      	bmi.n	80130aa <HAL_UART_IRQHandler+0xf4>
}
 8013072:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013074:	0020      	movs	r0, r4
 8013076:	f7fa f8cd 	bl	800d214 <HAL_UART_ErrorCallback>
 801307a:	e7de      	b.n	801303a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 801307c:	2280      	movs	r2, #128	; 0x80
 801307e:	0352      	lsls	r2, r2, #13
 8013080:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013082:	2369      	movs	r3, #105	; 0x69
 8013084:	2201      	movs	r2, #1
 8013086:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013088:	0020      	movs	r0, r4
 801308a:	f7ff ff93 	bl	8012fb4 <HAL_UARTEx_WakeupCallback>
 801308e:	e7db      	b.n	8013048 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013090:	0020      	movs	r0, r4
 8013092:	f7ff ff43 	bl	8012f1c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013096:	6822      	ldr	r2, [r4, #0]
 8013098:	6993      	ldr	r3, [r2, #24]
 801309a:	2108      	movs	r1, #8
 801309c:	430b      	orrs	r3, r1
 801309e:	6193      	str	r3, [r2, #24]
 80130a0:	e7d9      	b.n	8013056 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 80130a2:	0020      	movs	r0, r4
 80130a4:	f7ff fee8 	bl	8012e78 <UART_Transmit_IT>
 80130a8:	e7dc      	b.n	8013064 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 80130aa:	0020      	movs	r0, r4
 80130ac:	f7ff ff1c 	bl	8012ee8 <UART_EndTransmit_IT>
}
 80130b0:	e7df      	b.n	8013072 <HAL_UART_IRQHandler+0xbc>

080130b2 <main>:
float temp3;
/* Private function prototypes -----------------------------------------------*/

/* Main functions ------------------------------------------------------------*/

int main(void) {
 80130b2:	b510      	push	{r4, lr}

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80130b4:	f7fc fdc0 	bl	800fc38 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80130b8:	f7f8 f87c 	bl	800b1b4 <SystemClock_Config>

	/* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 80130bc:	f7f1 f92e 	bl	800431c <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80130c0:	f7f4 fdae 	bl	8007c20 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80130c4:	f7fa fda6 	bl	800dc14 <osKernelStart>
 80130c8:	e7fe      	b.n	80130c8 <main+0x16>

080130ca <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument) {
 80130ca:	e7fe      	b.n	80130ca <UserTask>

080130cc <atof>:
 80130cc:	b510      	push	{r4, lr}
 80130ce:	2100      	movs	r1, #0
 80130d0:	f001 f82a 	bl	8014128 <strtod>
 80130d4:	bd10      	pop	{r4, pc}

080130d6 <atoi>:
 80130d6:	b510      	push	{r4, lr}
 80130d8:	220a      	movs	r2, #10
 80130da:	2100      	movs	r1, #0
 80130dc:	f001 f90e 	bl	80142fc <strtol>
 80130e0:	bd10      	pop	{r4, pc}

080130e2 <atol>:
 80130e2:	b510      	push	{r4, lr}
 80130e4:	220a      	movs	r2, #10
 80130e6:	2100      	movs	r1, #0
 80130e8:	f001 f908 	bl	80142fc <strtol>
 80130ec:	bd10      	pop	{r4, pc}
	...

080130f0 <__libc_init_array>:
 80130f0:	b570      	push	{r4, r5, r6, lr}
 80130f2:	2600      	movs	r6, #0
 80130f4:	4d0c      	ldr	r5, [pc, #48]	; (8013128 <__libc_init_array+0x38>)
 80130f6:	4c0d      	ldr	r4, [pc, #52]	; (801312c <__libc_init_array+0x3c>)
 80130f8:	1b64      	subs	r4, r4, r5
 80130fa:	10a4      	asrs	r4, r4, #2
 80130fc:	42a6      	cmp	r6, r4
 80130fe:	d109      	bne.n	8013114 <__libc_init_array+0x24>
 8013100:	2600      	movs	r6, #0
 8013102:	f002 fb87 	bl	8015814 <_init>
 8013106:	4d0a      	ldr	r5, [pc, #40]	; (8013130 <__libc_init_array+0x40>)
 8013108:	4c0a      	ldr	r4, [pc, #40]	; (8013134 <__libc_init_array+0x44>)
 801310a:	1b64      	subs	r4, r4, r5
 801310c:	10a4      	asrs	r4, r4, #2
 801310e:	42a6      	cmp	r6, r4
 8013110:	d105      	bne.n	801311e <__libc_init_array+0x2e>
 8013112:	bd70      	pop	{r4, r5, r6, pc}
 8013114:	00b3      	lsls	r3, r6, #2
 8013116:	58eb      	ldr	r3, [r5, r3]
 8013118:	4798      	blx	r3
 801311a:	3601      	adds	r6, #1
 801311c:	e7ee      	b.n	80130fc <__libc_init_array+0xc>
 801311e:	00b3      	lsls	r3, r6, #2
 8013120:	58eb      	ldr	r3, [r5, r3]
 8013122:	4798      	blx	r3
 8013124:	3601      	adds	r6, #1
 8013126:	e7f2      	b.n	801310e <__libc_init_array+0x1e>
 8013128:	08018c80 	.word	0x08018c80
 801312c:	08018c80 	.word	0x08018c80
 8013130:	08018c80 	.word	0x08018c80
 8013134:	08018c84 	.word	0x08018c84

08013138 <__locale_ctype_ptr_l>:
 8013138:	30ec      	adds	r0, #236	; 0xec
 801313a:	6800      	ldr	r0, [r0, #0]
 801313c:	4770      	bx	lr
	...

08013140 <__locale_ctype_ptr>:
 8013140:	4b04      	ldr	r3, [pc, #16]	; (8013154 <__locale_ctype_ptr+0x14>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	6a1b      	ldr	r3, [r3, #32]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d100      	bne.n	801314c <__locale_ctype_ptr+0xc>
 801314a:	4b03      	ldr	r3, [pc, #12]	; (8013158 <__locale_ctype_ptr+0x18>)
 801314c:	33ec      	adds	r3, #236	; 0xec
 801314e:	6818      	ldr	r0, [r3, #0]
 8013150:	4770      	bx	lr
 8013152:	46c0      	nop			; (mov r8, r8)
 8013154:	200000ac 	.word	0x200000ac
 8013158:	20000110 	.word	0x20000110

0801315c <malloc>:
 801315c:	b510      	push	{r4, lr}
 801315e:	4b03      	ldr	r3, [pc, #12]	; (801316c <malloc+0x10>)
 8013160:	0001      	movs	r1, r0
 8013162:	6818      	ldr	r0, [r3, #0]
 8013164:	f000 f88a 	bl	801327c <_malloc_r>
 8013168:	bd10      	pop	{r4, pc}
 801316a:	46c0      	nop			; (mov r8, r8)
 801316c:	200000ac 	.word	0x200000ac

08013170 <free>:
 8013170:	b510      	push	{r4, lr}
 8013172:	4b03      	ldr	r3, [pc, #12]	; (8013180 <free+0x10>)
 8013174:	0001      	movs	r1, r0
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	f000 f836 	bl	80131e8 <_free_r>
 801317c:	bd10      	pop	{r4, pc}
 801317e:	46c0      	nop			; (mov r8, r8)
 8013180:	200000ac 	.word	0x200000ac

08013184 <__ascii_mbtowc>:
 8013184:	b082      	sub	sp, #8
 8013186:	2900      	cmp	r1, #0
 8013188:	d100      	bne.n	801318c <__ascii_mbtowc+0x8>
 801318a:	a901      	add	r1, sp, #4
 801318c:	1e10      	subs	r0, r2, #0
 801318e:	d006      	beq.n	801319e <__ascii_mbtowc+0x1a>
 8013190:	2b00      	cmp	r3, #0
 8013192:	d006      	beq.n	80131a2 <__ascii_mbtowc+0x1e>
 8013194:	7813      	ldrb	r3, [r2, #0]
 8013196:	600b      	str	r3, [r1, #0]
 8013198:	7810      	ldrb	r0, [r2, #0]
 801319a:	1e43      	subs	r3, r0, #1
 801319c:	4198      	sbcs	r0, r3
 801319e:	b002      	add	sp, #8
 80131a0:	4770      	bx	lr
 80131a2:	2002      	movs	r0, #2
 80131a4:	4240      	negs	r0, r0
 80131a6:	e7fa      	b.n	801319e <__ascii_mbtowc+0x1a>

080131a8 <memcmp>:
 80131a8:	b530      	push	{r4, r5, lr}
 80131aa:	2400      	movs	r4, #0
 80131ac:	42a2      	cmp	r2, r4
 80131ae:	d101      	bne.n	80131b4 <memcmp+0xc>
 80131b0:	2000      	movs	r0, #0
 80131b2:	e005      	b.n	80131c0 <memcmp+0x18>
 80131b4:	5d03      	ldrb	r3, [r0, r4]
 80131b6:	1c65      	adds	r5, r4, #1
 80131b8:	5d0c      	ldrb	r4, [r1, r4]
 80131ba:	42a3      	cmp	r3, r4
 80131bc:	d001      	beq.n	80131c2 <memcmp+0x1a>
 80131be:	1b18      	subs	r0, r3, r4
 80131c0:	bd30      	pop	{r4, r5, pc}
 80131c2:	002c      	movs	r4, r5
 80131c4:	e7f2      	b.n	80131ac <memcmp+0x4>

080131c6 <memcpy>:
 80131c6:	2300      	movs	r3, #0
 80131c8:	b510      	push	{r4, lr}
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d100      	bne.n	80131d0 <memcpy+0xa>
 80131ce:	bd10      	pop	{r4, pc}
 80131d0:	5ccc      	ldrb	r4, [r1, r3]
 80131d2:	54c4      	strb	r4, [r0, r3]
 80131d4:	3301      	adds	r3, #1
 80131d6:	e7f8      	b.n	80131ca <memcpy+0x4>

080131d8 <memset>:
 80131d8:	0003      	movs	r3, r0
 80131da:	1812      	adds	r2, r2, r0
 80131dc:	4293      	cmp	r3, r2
 80131de:	d100      	bne.n	80131e2 <memset+0xa>
 80131e0:	4770      	bx	lr
 80131e2:	7019      	strb	r1, [r3, #0]
 80131e4:	3301      	adds	r3, #1
 80131e6:	e7f9      	b.n	80131dc <memset+0x4>

080131e8 <_free_r>:
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	0005      	movs	r5, r0
 80131ec:	2900      	cmp	r1, #0
 80131ee:	d010      	beq.n	8013212 <_free_r+0x2a>
 80131f0:	1f0c      	subs	r4, r1, #4
 80131f2:	6823      	ldr	r3, [r4, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	da00      	bge.n	80131fa <_free_r+0x12>
 80131f8:	18e4      	adds	r4, r4, r3
 80131fa:	0028      	movs	r0, r5
 80131fc:	f001 fbd1 	bl	80149a2 <__malloc_lock>
 8013200:	4a1d      	ldr	r2, [pc, #116]	; (8013278 <_free_r+0x90>)
 8013202:	6813      	ldr	r3, [r2, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d105      	bne.n	8013214 <_free_r+0x2c>
 8013208:	6063      	str	r3, [r4, #4]
 801320a:	6014      	str	r4, [r2, #0]
 801320c:	0028      	movs	r0, r5
 801320e:	f001 fbc9 	bl	80149a4 <__malloc_unlock>
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	42a3      	cmp	r3, r4
 8013216:	d909      	bls.n	801322c <_free_r+0x44>
 8013218:	6821      	ldr	r1, [r4, #0]
 801321a:	1860      	adds	r0, r4, r1
 801321c:	4283      	cmp	r3, r0
 801321e:	d1f3      	bne.n	8013208 <_free_r+0x20>
 8013220:	6818      	ldr	r0, [r3, #0]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	1841      	adds	r1, r0, r1
 8013226:	6021      	str	r1, [r4, #0]
 8013228:	e7ee      	b.n	8013208 <_free_r+0x20>
 801322a:	0013      	movs	r3, r2
 801322c:	685a      	ldr	r2, [r3, #4]
 801322e:	2a00      	cmp	r2, #0
 8013230:	d001      	beq.n	8013236 <_free_r+0x4e>
 8013232:	42a2      	cmp	r2, r4
 8013234:	d9f9      	bls.n	801322a <_free_r+0x42>
 8013236:	6819      	ldr	r1, [r3, #0]
 8013238:	1858      	adds	r0, r3, r1
 801323a:	42a0      	cmp	r0, r4
 801323c:	d10b      	bne.n	8013256 <_free_r+0x6e>
 801323e:	6820      	ldr	r0, [r4, #0]
 8013240:	1809      	adds	r1, r1, r0
 8013242:	1858      	adds	r0, r3, r1
 8013244:	6019      	str	r1, [r3, #0]
 8013246:	4282      	cmp	r2, r0
 8013248:	d1e0      	bne.n	801320c <_free_r+0x24>
 801324a:	6810      	ldr	r0, [r2, #0]
 801324c:	6852      	ldr	r2, [r2, #4]
 801324e:	1841      	adds	r1, r0, r1
 8013250:	6019      	str	r1, [r3, #0]
 8013252:	605a      	str	r2, [r3, #4]
 8013254:	e7da      	b.n	801320c <_free_r+0x24>
 8013256:	42a0      	cmp	r0, r4
 8013258:	d902      	bls.n	8013260 <_free_r+0x78>
 801325a:	230c      	movs	r3, #12
 801325c:	602b      	str	r3, [r5, #0]
 801325e:	e7d5      	b.n	801320c <_free_r+0x24>
 8013260:	6821      	ldr	r1, [r4, #0]
 8013262:	1860      	adds	r0, r4, r1
 8013264:	4282      	cmp	r2, r0
 8013266:	d103      	bne.n	8013270 <_free_r+0x88>
 8013268:	6810      	ldr	r0, [r2, #0]
 801326a:	6852      	ldr	r2, [r2, #4]
 801326c:	1841      	adds	r1, r0, r1
 801326e:	6021      	str	r1, [r4, #0]
 8013270:	6062      	str	r2, [r4, #4]
 8013272:	605c      	str	r4, [r3, #4]
 8013274:	e7ca      	b.n	801320c <_free_r+0x24>
 8013276:	46c0      	nop			; (mov r8, r8)
 8013278:	200060a8 	.word	0x200060a8

0801327c <_malloc_r>:
 801327c:	2303      	movs	r3, #3
 801327e:	b570      	push	{r4, r5, r6, lr}
 8013280:	1ccd      	adds	r5, r1, #3
 8013282:	439d      	bics	r5, r3
 8013284:	3508      	adds	r5, #8
 8013286:	0006      	movs	r6, r0
 8013288:	2d0c      	cmp	r5, #12
 801328a:	d21e      	bcs.n	80132ca <_malloc_r+0x4e>
 801328c:	250c      	movs	r5, #12
 801328e:	42a9      	cmp	r1, r5
 8013290:	d81d      	bhi.n	80132ce <_malloc_r+0x52>
 8013292:	0030      	movs	r0, r6
 8013294:	f001 fb85 	bl	80149a2 <__malloc_lock>
 8013298:	4a25      	ldr	r2, [pc, #148]	; (8013330 <_malloc_r+0xb4>)
 801329a:	6814      	ldr	r4, [r2, #0]
 801329c:	0021      	movs	r1, r4
 801329e:	2900      	cmp	r1, #0
 80132a0:	d119      	bne.n	80132d6 <_malloc_r+0x5a>
 80132a2:	4c24      	ldr	r4, [pc, #144]	; (8013334 <_malloc_r+0xb8>)
 80132a4:	6823      	ldr	r3, [r4, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d103      	bne.n	80132b2 <_malloc_r+0x36>
 80132aa:	0030      	movs	r0, r6
 80132ac:	f000 f880 	bl	80133b0 <_sbrk_r>
 80132b0:	6020      	str	r0, [r4, #0]
 80132b2:	0029      	movs	r1, r5
 80132b4:	0030      	movs	r0, r6
 80132b6:	f000 f87b 	bl	80133b0 <_sbrk_r>
 80132ba:	1c43      	adds	r3, r0, #1
 80132bc:	d12b      	bne.n	8013316 <_malloc_r+0x9a>
 80132be:	230c      	movs	r3, #12
 80132c0:	0030      	movs	r0, r6
 80132c2:	6033      	str	r3, [r6, #0]
 80132c4:	f001 fb6e 	bl	80149a4 <__malloc_unlock>
 80132c8:	e003      	b.n	80132d2 <_malloc_r+0x56>
 80132ca:	2d00      	cmp	r5, #0
 80132cc:	dadf      	bge.n	801328e <_malloc_r+0x12>
 80132ce:	230c      	movs	r3, #12
 80132d0:	6033      	str	r3, [r6, #0]
 80132d2:	2000      	movs	r0, #0
 80132d4:	bd70      	pop	{r4, r5, r6, pc}
 80132d6:	680b      	ldr	r3, [r1, #0]
 80132d8:	1b5b      	subs	r3, r3, r5
 80132da:	d419      	bmi.n	8013310 <_malloc_r+0x94>
 80132dc:	2b0b      	cmp	r3, #11
 80132de:	d903      	bls.n	80132e8 <_malloc_r+0x6c>
 80132e0:	600b      	str	r3, [r1, #0]
 80132e2:	18cc      	adds	r4, r1, r3
 80132e4:	6025      	str	r5, [r4, #0]
 80132e6:	e003      	b.n	80132f0 <_malloc_r+0x74>
 80132e8:	684b      	ldr	r3, [r1, #4]
 80132ea:	428c      	cmp	r4, r1
 80132ec:	d10d      	bne.n	801330a <_malloc_r+0x8e>
 80132ee:	6013      	str	r3, [r2, #0]
 80132f0:	0030      	movs	r0, r6
 80132f2:	f001 fb57 	bl	80149a4 <__malloc_unlock>
 80132f6:	0020      	movs	r0, r4
 80132f8:	2207      	movs	r2, #7
 80132fa:	300b      	adds	r0, #11
 80132fc:	1d23      	adds	r3, r4, #4
 80132fe:	4390      	bics	r0, r2
 8013300:	1ac3      	subs	r3, r0, r3
 8013302:	d0e7      	beq.n	80132d4 <_malloc_r+0x58>
 8013304:	425a      	negs	r2, r3
 8013306:	50e2      	str	r2, [r4, r3]
 8013308:	e7e4      	b.n	80132d4 <_malloc_r+0x58>
 801330a:	6063      	str	r3, [r4, #4]
 801330c:	000c      	movs	r4, r1
 801330e:	e7ef      	b.n	80132f0 <_malloc_r+0x74>
 8013310:	000c      	movs	r4, r1
 8013312:	6849      	ldr	r1, [r1, #4]
 8013314:	e7c3      	b.n	801329e <_malloc_r+0x22>
 8013316:	2303      	movs	r3, #3
 8013318:	1cc4      	adds	r4, r0, #3
 801331a:	439c      	bics	r4, r3
 801331c:	42a0      	cmp	r0, r4
 801331e:	d0e1      	beq.n	80132e4 <_malloc_r+0x68>
 8013320:	1a21      	subs	r1, r4, r0
 8013322:	0030      	movs	r0, r6
 8013324:	f000 f844 	bl	80133b0 <_sbrk_r>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d1db      	bne.n	80132e4 <_malloc_r+0x68>
 801332c:	e7c7      	b.n	80132be <_malloc_r+0x42>
 801332e:	46c0      	nop			; (mov r8, r8)
 8013330:	200060a8 	.word	0x200060a8
 8013334:	200060ac 	.word	0x200060ac

08013338 <rand>:
 8013338:	4b12      	ldr	r3, [pc, #72]	; (8013384 <rand+0x4c>)
 801333a:	b510      	push	{r4, lr}
 801333c:	681c      	ldr	r4, [r3, #0]
 801333e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013340:	2b00      	cmp	r3, #0
 8013342:	d10f      	bne.n	8013364 <rand+0x2c>
 8013344:	2018      	movs	r0, #24
 8013346:	f7ff ff09 	bl	801315c <malloc>
 801334a:	4b0f      	ldr	r3, [pc, #60]	; (8013388 <rand+0x50>)
 801334c:	63a0      	str	r0, [r4, #56]	; 0x38
 801334e:	6003      	str	r3, [r0, #0]
 8013350:	4b0e      	ldr	r3, [pc, #56]	; (801338c <rand+0x54>)
 8013352:	2201      	movs	r2, #1
 8013354:	6043      	str	r3, [r0, #4]
 8013356:	4b0e      	ldr	r3, [pc, #56]	; (8013390 <rand+0x58>)
 8013358:	6083      	str	r3, [r0, #8]
 801335a:	230b      	movs	r3, #11
 801335c:	8183      	strh	r3, [r0, #12]
 801335e:	2300      	movs	r3, #0
 8013360:	6102      	str	r2, [r0, #16]
 8013362:	6143      	str	r3, [r0, #20]
 8013364:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013366:	4a0b      	ldr	r2, [pc, #44]	; (8013394 <rand+0x5c>)
 8013368:	6920      	ldr	r0, [r4, #16]
 801336a:	6961      	ldr	r1, [r4, #20]
 801336c:	4b0a      	ldr	r3, [pc, #40]	; (8013398 <rand+0x60>)
 801336e:	f7ed f8d3 	bl	8000518 <__aeabi_lmul>
 8013372:	2201      	movs	r2, #1
 8013374:	2300      	movs	r3, #0
 8013376:	1880      	adds	r0, r0, r2
 8013378:	4159      	adcs	r1, r3
 801337a:	6120      	str	r0, [r4, #16]
 801337c:	6161      	str	r1, [r4, #20]
 801337e:	0048      	lsls	r0, r1, #1
 8013380:	0840      	lsrs	r0, r0, #1
 8013382:	bd10      	pop	{r4, pc}
 8013384:	200000ac 	.word	0x200000ac
 8013388:	abcd330e 	.word	0xabcd330e
 801338c:	e66d1234 	.word	0xe66d1234
 8013390:	0005deec 	.word	0x0005deec
 8013394:	4c957f2d 	.word	0x4c957f2d
 8013398:	5851f42d 	.word	0x5851f42d

0801339c <realloc>:
 801339c:	b510      	push	{r4, lr}
 801339e:	4b03      	ldr	r3, [pc, #12]	; (80133ac <realloc+0x10>)
 80133a0:	000a      	movs	r2, r1
 80133a2:	0001      	movs	r1, r0
 80133a4:	6818      	ldr	r0, [r3, #0]
 80133a6:	f001 ff02 	bl	80151ae <_realloc_r>
 80133aa:	bd10      	pop	{r4, pc}
 80133ac:	200000ac 	.word	0x200000ac

080133b0 <_sbrk_r>:
 80133b0:	2300      	movs	r3, #0
 80133b2:	b570      	push	{r4, r5, r6, lr}
 80133b4:	4c06      	ldr	r4, [pc, #24]	; (80133d0 <_sbrk_r+0x20>)
 80133b6:	0005      	movs	r5, r0
 80133b8:	0008      	movs	r0, r1
 80133ba:	6023      	str	r3, [r4, #0]
 80133bc:	f002 fa1a 	bl	80157f4 <_sbrk>
 80133c0:	1c43      	adds	r3, r0, #1
 80133c2:	d103      	bne.n	80133cc <_sbrk_r+0x1c>
 80133c4:	6823      	ldr	r3, [r4, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d000      	beq.n	80133cc <_sbrk_r+0x1c>
 80133ca:	602b      	str	r3, [r5, #0]
 80133cc:	bd70      	pop	{r4, r5, r6, pc}
 80133ce:	46c0      	nop			; (mov r8, r8)
 80133d0:	20006670 	.word	0x20006670

080133d4 <siprintf>:
 80133d4:	b40e      	push	{r1, r2, r3}
 80133d6:	b500      	push	{lr}
 80133d8:	490b      	ldr	r1, [pc, #44]	; (8013408 <siprintf+0x34>)
 80133da:	b09c      	sub	sp, #112	; 0x70
 80133dc:	ab1d      	add	r3, sp, #116	; 0x74
 80133de:	9002      	str	r0, [sp, #8]
 80133e0:	9006      	str	r0, [sp, #24]
 80133e2:	9107      	str	r1, [sp, #28]
 80133e4:	9104      	str	r1, [sp, #16]
 80133e6:	4809      	ldr	r0, [pc, #36]	; (801340c <siprintf+0x38>)
 80133e8:	4909      	ldr	r1, [pc, #36]	; (8013410 <siprintf+0x3c>)
 80133ea:	cb04      	ldmia	r3!, {r2}
 80133ec:	9105      	str	r1, [sp, #20]
 80133ee:	6800      	ldr	r0, [r0, #0]
 80133f0:	a902      	add	r1, sp, #8
 80133f2:	9301      	str	r3, [sp, #4]
 80133f4:	f001 ff64 	bl	80152c0 <_svfiprintf_r>
 80133f8:	2300      	movs	r3, #0
 80133fa:	9a02      	ldr	r2, [sp, #8]
 80133fc:	7013      	strb	r3, [r2, #0]
 80133fe:	b01c      	add	sp, #112	; 0x70
 8013400:	bc08      	pop	{r3}
 8013402:	b003      	add	sp, #12
 8013404:	4718      	bx	r3
 8013406:	46c0      	nop			; (mov r8, r8)
 8013408:	7fffffff 	.word	0x7fffffff
 801340c:	200000ac 	.word	0x200000ac
 8013410:	ffff0208 	.word	0xffff0208

08013414 <strcat>:
 8013414:	0002      	movs	r2, r0
 8013416:	b510      	push	{r4, lr}
 8013418:	7813      	ldrb	r3, [r2, #0]
 801341a:	1c54      	adds	r4, r2, #1
 801341c:	2b00      	cmp	r3, #0
 801341e:	d105      	bne.n	801342c <strcat+0x18>
 8013420:	5ccc      	ldrb	r4, [r1, r3]
 8013422:	54d4      	strb	r4, [r2, r3]
 8013424:	3301      	adds	r3, #1
 8013426:	2c00      	cmp	r4, #0
 8013428:	d1fa      	bne.n	8013420 <strcat+0xc>
 801342a:	bd10      	pop	{r4, pc}
 801342c:	0022      	movs	r2, r4
 801342e:	e7f3      	b.n	8013418 <strcat+0x4>

08013430 <strchr>:
 8013430:	b2c9      	uxtb	r1, r1
 8013432:	7803      	ldrb	r3, [r0, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d004      	beq.n	8013442 <strchr+0x12>
 8013438:	428b      	cmp	r3, r1
 801343a:	d100      	bne.n	801343e <strchr+0xe>
 801343c:	4770      	bx	lr
 801343e:	3001      	adds	r0, #1
 8013440:	e7f7      	b.n	8013432 <strchr+0x2>
 8013442:	424b      	negs	r3, r1
 8013444:	4159      	adcs	r1, r3
 8013446:	4249      	negs	r1, r1
 8013448:	4008      	ands	r0, r1
 801344a:	e7f7      	b.n	801343c <strchr+0xc>

0801344c <strcpy>:
 801344c:	0003      	movs	r3, r0
 801344e:	780a      	ldrb	r2, [r1, #0]
 8013450:	3101      	adds	r1, #1
 8013452:	701a      	strb	r2, [r3, #0]
 8013454:	3301      	adds	r3, #1
 8013456:	2a00      	cmp	r2, #0
 8013458:	d1f9      	bne.n	801344e <strcpy+0x2>
 801345a:	4770      	bx	lr

0801345c <strncmp>:
 801345c:	2300      	movs	r3, #0
 801345e:	b530      	push	{r4, r5, lr}
 8013460:	429a      	cmp	r2, r3
 8013462:	d00a      	beq.n	801347a <strncmp+0x1e>
 8013464:	3a01      	subs	r2, #1
 8013466:	5cc4      	ldrb	r4, [r0, r3]
 8013468:	5ccd      	ldrb	r5, [r1, r3]
 801346a:	42ac      	cmp	r4, r5
 801346c:	d104      	bne.n	8013478 <strncmp+0x1c>
 801346e:	4293      	cmp	r3, r2
 8013470:	d002      	beq.n	8013478 <strncmp+0x1c>
 8013472:	3301      	adds	r3, #1
 8013474:	2c00      	cmp	r4, #0
 8013476:	d1f6      	bne.n	8013466 <strncmp+0xa>
 8013478:	1b63      	subs	r3, r4, r5
 801347a:	0018      	movs	r0, r3
 801347c:	bd30      	pop	{r4, r5, pc}

0801347e <strncpy>:
 801347e:	b530      	push	{r4, r5, lr}
 8013480:	0005      	movs	r5, r0
 8013482:	2a00      	cmp	r2, #0
 8013484:	d100      	bne.n	8013488 <strncpy+0xa>
 8013486:	bd30      	pop	{r4, r5, pc}
 8013488:	780c      	ldrb	r4, [r1, #0]
 801348a:	3a01      	subs	r2, #1
 801348c:	1c6b      	adds	r3, r5, #1
 801348e:	702c      	strb	r4, [r5, #0]
 8013490:	3101      	adds	r1, #1
 8013492:	2c00      	cmp	r4, #0
 8013494:	d105      	bne.n	80134a2 <strncpy+0x24>
 8013496:	189a      	adds	r2, r3, r2
 8013498:	429a      	cmp	r2, r3
 801349a:	d0f4      	beq.n	8013486 <strncpy+0x8>
 801349c:	701c      	strb	r4, [r3, #0]
 801349e:	3301      	adds	r3, #1
 80134a0:	e7fa      	b.n	8013498 <strncpy+0x1a>
 80134a2:	001d      	movs	r5, r3
 80134a4:	e7ed      	b.n	8013482 <strncpy+0x4>
	...

080134a8 <sulp>:
 80134a8:	b570      	push	{r4, r5, r6, lr}
 80134aa:	0016      	movs	r6, r2
 80134ac:	000d      	movs	r5, r1
 80134ae:	f001 fd4b 	bl	8014f48 <__ulp>
 80134b2:	2e00      	cmp	r6, #0
 80134b4:	d00d      	beq.n	80134d2 <sulp+0x2a>
 80134b6:	236b      	movs	r3, #107	; 0x6b
 80134b8:	006a      	lsls	r2, r5, #1
 80134ba:	0d52      	lsrs	r2, r2, #21
 80134bc:	1a9b      	subs	r3, r3, r2
 80134be:	2b00      	cmp	r3, #0
 80134c0:	dd07      	ble.n	80134d2 <sulp+0x2a>
 80134c2:	2400      	movs	r4, #0
 80134c4:	4a03      	ldr	r2, [pc, #12]	; (80134d4 <sulp+0x2c>)
 80134c6:	051b      	lsls	r3, r3, #20
 80134c8:	189d      	adds	r5, r3, r2
 80134ca:	002b      	movs	r3, r5
 80134cc:	0022      	movs	r2, r4
 80134ce:	f7ee fbc5 	bl	8001c5c <__aeabi_dmul>
 80134d2:	bd70      	pop	{r4, r5, r6, pc}
 80134d4:	3ff00000 	.word	0x3ff00000

080134d8 <_strtod_l>:
 80134d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134da:	b0a7      	sub	sp, #156	; 0x9c
 80134dc:	9307      	str	r3, [sp, #28]
 80134de:	2300      	movs	r3, #0
 80134e0:	9004      	str	r0, [sp, #16]
 80134e2:	9807      	ldr	r0, [sp, #28]
 80134e4:	9322      	str	r3, [sp, #136]	; 0x88
 80134e6:	9106      	str	r1, [sp, #24]
 80134e8:	921d      	str	r2, [sp, #116]	; 0x74
 80134ea:	f001 fa58 	bl	801499e <__localeconv_l>
 80134ee:	0005      	movs	r5, r0
 80134f0:	6800      	ldr	r0, [r0, #0]
 80134f2:	f7ec fe11 	bl	8000118 <strlen>
 80134f6:	2600      	movs	r6, #0
 80134f8:	2700      	movs	r7, #0
 80134fa:	9b06      	ldr	r3, [sp, #24]
 80134fc:	9005      	str	r0, [sp, #20]
 80134fe:	9321      	str	r3, [sp, #132]	; 0x84
 8013500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013502:	781a      	ldrb	r2, [r3, #0]
 8013504:	2a0d      	cmp	r2, #13
 8013506:	d839      	bhi.n	801357c <_strtod_l+0xa4>
 8013508:	2a09      	cmp	r2, #9
 801350a:	d23d      	bcs.n	8013588 <_strtod_l+0xb0>
 801350c:	2a00      	cmp	r2, #0
 801350e:	d044      	beq.n	801359a <_strtod_l+0xc2>
 8013510:	2300      	movs	r3, #0
 8013512:	9313      	str	r3, [sp, #76]	; 0x4c
 8013514:	2200      	movs	r2, #0
 8013516:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013518:	920c      	str	r2, [sp, #48]	; 0x30
 801351a:	7823      	ldrb	r3, [r4, #0]
 801351c:	2b30      	cmp	r3, #48	; 0x30
 801351e:	d000      	beq.n	8013522 <_strtod_l+0x4a>
 8013520:	e07e      	b.n	8013620 <_strtod_l+0x148>
 8013522:	7863      	ldrb	r3, [r4, #1]
 8013524:	2b58      	cmp	r3, #88	; 0x58
 8013526:	d002      	beq.n	801352e <_strtod_l+0x56>
 8013528:	2b78      	cmp	r3, #120	; 0x78
 801352a:	d000      	beq.n	801352e <_strtod_l+0x56>
 801352c:	e06e      	b.n	801360c <_strtod_l+0x134>
 801352e:	9b07      	ldr	r3, [sp, #28]
 8013530:	4a96      	ldr	r2, [pc, #600]	; (801378c <_strtod_l+0x2b4>)
 8013532:	9302      	str	r3, [sp, #8]
 8013534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013536:	a921      	add	r1, sp, #132	; 0x84
 8013538:	9301      	str	r3, [sp, #4]
 801353a:	ab22      	add	r3, sp, #136	; 0x88
 801353c:	9300      	str	r3, [sp, #0]
 801353e:	9804      	ldr	r0, [sp, #16]
 8013540:	ab23      	add	r3, sp, #140	; 0x8c
 8013542:	f000 ff44 	bl	80143ce <__gethex>
 8013546:	2507      	movs	r5, #7
 8013548:	9005      	str	r0, [sp, #20]
 801354a:	4005      	ands	r5, r0
 801354c:	d005      	beq.n	801355a <_strtod_l+0x82>
 801354e:	2d06      	cmp	r5, #6
 8013550:	d12f      	bne.n	80135b2 <_strtod_l+0xda>
 8013552:	2300      	movs	r3, #0
 8013554:	3401      	adds	r4, #1
 8013556:	9421      	str	r4, [sp, #132]	; 0x84
 8013558:	9313      	str	r3, [sp, #76]	; 0x4c
 801355a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801355c:	2b00      	cmp	r3, #0
 801355e:	d002      	beq.n	8013566 <_strtod_l+0x8e>
 8013560:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013562:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013564:	601a      	str	r2, [r3, #0]
 8013566:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013568:	2b00      	cmp	r3, #0
 801356a:	d01d      	beq.n	80135a8 <_strtod_l+0xd0>
 801356c:	2380      	movs	r3, #128	; 0x80
 801356e:	0032      	movs	r2, r6
 8013570:	061b      	lsls	r3, r3, #24
 8013572:	18fb      	adds	r3, r7, r3
 8013574:	0010      	movs	r0, r2
 8013576:	0019      	movs	r1, r3
 8013578:	b027      	add	sp, #156	; 0x9c
 801357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801357c:	2a2b      	cmp	r2, #43	; 0x2b
 801357e:	d016      	beq.n	80135ae <_strtod_l+0xd6>
 8013580:	2a2d      	cmp	r2, #45	; 0x2d
 8013582:	d003      	beq.n	801358c <_strtod_l+0xb4>
 8013584:	2a20      	cmp	r2, #32
 8013586:	d1c3      	bne.n	8013510 <_strtod_l+0x38>
 8013588:	3301      	adds	r3, #1
 801358a:	e7b8      	b.n	80134fe <_strtod_l+0x26>
 801358c:	2201      	movs	r2, #1
 801358e:	9213      	str	r2, [sp, #76]	; 0x4c
 8013590:	1c5a      	adds	r2, r3, #1
 8013592:	9221      	str	r2, [sp, #132]	; 0x84
 8013594:	785b      	ldrb	r3, [r3, #1]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1bc      	bne.n	8013514 <_strtod_l+0x3c>
 801359a:	9b06      	ldr	r3, [sp, #24]
 801359c:	9321      	str	r3, [sp, #132]	; 0x84
 801359e:	2300      	movs	r3, #0
 80135a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80135a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d1db      	bne.n	8013560 <_strtod_l+0x88>
 80135a8:	0032      	movs	r2, r6
 80135aa:	003b      	movs	r3, r7
 80135ac:	e7e2      	b.n	8013574 <_strtod_l+0x9c>
 80135ae:	2200      	movs	r2, #0
 80135b0:	e7ed      	b.n	801358e <_strtod_l+0xb6>
 80135b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80135b4:	2a00      	cmp	r2, #0
 80135b6:	d007      	beq.n	80135c8 <_strtod_l+0xf0>
 80135b8:	2135      	movs	r1, #53	; 0x35
 80135ba:	a824      	add	r0, sp, #144	; 0x90
 80135bc:	f001 fdb1 	bl	8015122 <__copybits>
 80135c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80135c2:	9804      	ldr	r0, [sp, #16]
 80135c4:	f001 fa27 	bl	8014a16 <_Bfree>
 80135c8:	1e68      	subs	r0, r5, #1
 80135ca:	2804      	cmp	r0, #4
 80135cc:	d806      	bhi.n	80135dc <_strtod_l+0x104>
 80135ce:	f7ec fdab 	bl	8000128 <__gnu_thumb1_case_uqi>
 80135d2:	030c      	.short	0x030c
 80135d4:	1917      	.short	0x1917
 80135d6:	0c          	.byte	0x0c
 80135d7:	00          	.byte	0x00
 80135d8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135da:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80135dc:	9b05      	ldr	r3, [sp, #20]
 80135de:	071b      	lsls	r3, r3, #28
 80135e0:	d5bb      	bpl.n	801355a <_strtod_l+0x82>
 80135e2:	2380      	movs	r3, #128	; 0x80
 80135e4:	061b      	lsls	r3, r3, #24
 80135e6:	431f      	orrs	r7, r3
 80135e8:	e7b7      	b.n	801355a <_strtod_l+0x82>
 80135ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135ec:	4a68      	ldr	r2, [pc, #416]	; (8013790 <_strtod_l+0x2b8>)
 80135ee:	4969      	ldr	r1, [pc, #420]	; (8013794 <_strtod_l+0x2bc>)
 80135f0:	401a      	ands	r2, r3
 80135f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80135f4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135f6:	185b      	adds	r3, r3, r1
 80135f8:	051b      	lsls	r3, r3, #20
 80135fa:	431a      	orrs	r2, r3
 80135fc:	0017      	movs	r7, r2
 80135fe:	e7ed      	b.n	80135dc <_strtod_l+0x104>
 8013600:	4f65      	ldr	r7, [pc, #404]	; (8013798 <_strtod_l+0x2c0>)
 8013602:	e7eb      	b.n	80135dc <_strtod_l+0x104>
 8013604:	2601      	movs	r6, #1
 8013606:	4f65      	ldr	r7, [pc, #404]	; (801379c <_strtod_l+0x2c4>)
 8013608:	4276      	negs	r6, r6
 801360a:	e7e7      	b.n	80135dc <_strtod_l+0x104>
 801360c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801360e:	1c5a      	adds	r2, r3, #1
 8013610:	9221      	str	r2, [sp, #132]	; 0x84
 8013612:	785b      	ldrb	r3, [r3, #1]
 8013614:	2b30      	cmp	r3, #48	; 0x30
 8013616:	d0f9      	beq.n	801360c <_strtod_l+0x134>
 8013618:	2b00      	cmp	r3, #0
 801361a:	d09e      	beq.n	801355a <_strtod_l+0x82>
 801361c:	2301      	movs	r3, #1
 801361e:	930c      	str	r3, [sp, #48]	; 0x30
 8013620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013622:	220a      	movs	r2, #10
 8013624:	9312      	str	r3, [sp, #72]	; 0x48
 8013626:	2300      	movs	r3, #0
 8013628:	930b      	str	r3, [sp, #44]	; 0x2c
 801362a:	9308      	str	r3, [sp, #32]
 801362c:	930a      	str	r3, [sp, #40]	; 0x28
 801362e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013630:	7804      	ldrb	r4, [r0, #0]
 8013632:	0023      	movs	r3, r4
 8013634:	3b30      	subs	r3, #48	; 0x30
 8013636:	b2d9      	uxtb	r1, r3
 8013638:	2909      	cmp	r1, #9
 801363a:	d934      	bls.n	80136a6 <_strtod_l+0x1ce>
 801363c:	9a05      	ldr	r2, [sp, #20]
 801363e:	6829      	ldr	r1, [r5, #0]
 8013640:	f7ff ff0c 	bl	801345c <strncmp>
 8013644:	2800      	cmp	r0, #0
 8013646:	d040      	beq.n	80136ca <_strtod_l+0x1f2>
 8013648:	2000      	movs	r0, #0
 801364a:	0023      	movs	r3, r4
 801364c:	4684      	mov	ip, r0
 801364e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013650:	9007      	str	r0, [sp, #28]
 8013652:	9205      	str	r2, [sp, #20]
 8013654:	2220      	movs	r2, #32
 8013656:	0019      	movs	r1, r3
 8013658:	4391      	bics	r1, r2
 801365a:	000a      	movs	r2, r1
 801365c:	2100      	movs	r1, #0
 801365e:	2a45      	cmp	r2, #69	; 0x45
 8013660:	d000      	beq.n	8013664 <_strtod_l+0x18c>
 8013662:	e0bf      	b.n	80137e4 <_strtod_l+0x30c>
 8013664:	9b05      	ldr	r3, [sp, #20]
 8013666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013668:	4303      	orrs	r3, r0
 801366a:	4313      	orrs	r3, r2
 801366c:	428b      	cmp	r3, r1
 801366e:	d094      	beq.n	801359a <_strtod_l+0xc2>
 8013670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013672:	9306      	str	r3, [sp, #24]
 8013674:	3301      	adds	r3, #1
 8013676:	9321      	str	r3, [sp, #132]	; 0x84
 8013678:	9b06      	ldr	r3, [sp, #24]
 801367a:	785b      	ldrb	r3, [r3, #1]
 801367c:	2b2b      	cmp	r3, #43	; 0x2b
 801367e:	d100      	bne.n	8013682 <_strtod_l+0x1aa>
 8013680:	e082      	b.n	8013788 <_strtod_l+0x2b0>
 8013682:	000c      	movs	r4, r1
 8013684:	2b2d      	cmp	r3, #45	; 0x2d
 8013686:	d105      	bne.n	8013694 <_strtod_l+0x1bc>
 8013688:	2401      	movs	r4, #1
 801368a:	9b06      	ldr	r3, [sp, #24]
 801368c:	3302      	adds	r3, #2
 801368e:	9321      	str	r3, [sp, #132]	; 0x84
 8013690:	9b06      	ldr	r3, [sp, #24]
 8013692:	789b      	ldrb	r3, [r3, #2]
 8013694:	001a      	movs	r2, r3
 8013696:	3a30      	subs	r2, #48	; 0x30
 8013698:	2a09      	cmp	r2, #9
 801369a:	d800      	bhi.n	801369e <_strtod_l+0x1c6>
 801369c:	e084      	b.n	80137a8 <_strtod_l+0x2d0>
 801369e:	9a06      	ldr	r2, [sp, #24]
 80136a0:	2100      	movs	r1, #0
 80136a2:	9221      	str	r2, [sp, #132]	; 0x84
 80136a4:	e09e      	b.n	80137e4 <_strtod_l+0x30c>
 80136a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80136a8:	2908      	cmp	r1, #8
 80136aa:	dc09      	bgt.n	80136c0 <_strtod_l+0x1e8>
 80136ac:	9908      	ldr	r1, [sp, #32]
 80136ae:	4351      	muls	r1, r2
 80136b0:	18cb      	adds	r3, r1, r3
 80136b2:	9308      	str	r3, [sp, #32]
 80136b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136b6:	3001      	adds	r0, #1
 80136b8:	3301      	adds	r3, #1
 80136ba:	930a      	str	r3, [sp, #40]	; 0x28
 80136bc:	9021      	str	r0, [sp, #132]	; 0x84
 80136be:	e7b6      	b.n	801362e <_strtod_l+0x156>
 80136c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136c2:	4351      	muls	r1, r2
 80136c4:	18cb      	adds	r3, r1, r3
 80136c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80136c8:	e7f4      	b.n	80136b4 <_strtod_l+0x1dc>
 80136ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136cc:	9b05      	ldr	r3, [sp, #20]
 80136ce:	4694      	mov	ip, r2
 80136d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136d2:	4463      	add	r3, ip
 80136d4:	9321      	str	r3, [sp, #132]	; 0x84
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	2a00      	cmp	r2, #0
 80136da:	d036      	beq.n	801374a <_strtod_l+0x272>
 80136dc:	4684      	mov	ip, r0
 80136de:	9205      	str	r2, [sp, #20]
 80136e0:	001a      	movs	r2, r3
 80136e2:	3a30      	subs	r2, #48	; 0x30
 80136e4:	2a09      	cmp	r2, #9
 80136e6:	d912      	bls.n	801370e <_strtod_l+0x236>
 80136e8:	2201      	movs	r2, #1
 80136ea:	9207      	str	r2, [sp, #28]
 80136ec:	e7b2      	b.n	8013654 <_strtod_l+0x17c>
 80136ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136f0:	3001      	adds	r0, #1
 80136f2:	1c5a      	adds	r2, r3, #1
 80136f4:	9221      	str	r2, [sp, #132]	; 0x84
 80136f6:	785b      	ldrb	r3, [r3, #1]
 80136f8:	2b30      	cmp	r3, #48	; 0x30
 80136fa:	d0f8      	beq.n	80136ee <_strtod_l+0x216>
 80136fc:	001a      	movs	r2, r3
 80136fe:	3a31      	subs	r2, #49	; 0x31
 8013700:	2a08      	cmp	r2, #8
 8013702:	d83c      	bhi.n	801377e <_strtod_l+0x2a6>
 8013704:	4684      	mov	ip, r0
 8013706:	2000      	movs	r0, #0
 8013708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801370a:	9005      	str	r0, [sp, #20]
 801370c:	9212      	str	r2, [sp, #72]	; 0x48
 801370e:	3b30      	subs	r3, #48	; 0x30
 8013710:	1c42      	adds	r2, r0, #1
 8013712:	2b00      	cmp	r3, #0
 8013714:	d013      	beq.n	801373e <_strtod_l+0x266>
 8013716:	210a      	movs	r1, #10
 8013718:	4494      	add	ip, r2
 801371a:	9a05      	ldr	r2, [sp, #20]
 801371c:	1885      	adds	r5, r0, r2
 801371e:	42aa      	cmp	r2, r5
 8013720:	d115      	bne.n	801374e <_strtod_l+0x276>
 8013722:	9905      	ldr	r1, [sp, #20]
 8013724:	9a05      	ldr	r2, [sp, #20]
 8013726:	3101      	adds	r1, #1
 8013728:	1809      	adds	r1, r1, r0
 801372a:	1812      	adds	r2, r2, r0
 801372c:	9105      	str	r1, [sp, #20]
 801372e:	2a08      	cmp	r2, #8
 8013730:	dc1b      	bgt.n	801376a <_strtod_l+0x292>
 8013732:	220a      	movs	r2, #10
 8013734:	9908      	ldr	r1, [sp, #32]
 8013736:	434a      	muls	r2, r1
 8013738:	189b      	adds	r3, r3, r2
 801373a:	2200      	movs	r2, #0
 801373c:	9308      	str	r3, [sp, #32]
 801373e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013740:	0010      	movs	r0, r2
 8013742:	1c59      	adds	r1, r3, #1
 8013744:	9121      	str	r1, [sp, #132]	; 0x84
 8013746:	785b      	ldrb	r3, [r3, #1]
 8013748:	e7ca      	b.n	80136e0 <_strtod_l+0x208>
 801374a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801374c:	e7d4      	b.n	80136f8 <_strtod_l+0x220>
 801374e:	1c54      	adds	r4, r2, #1
 8013750:	2a08      	cmp	r2, #8
 8013752:	dc04      	bgt.n	801375e <_strtod_l+0x286>
 8013754:	9a08      	ldr	r2, [sp, #32]
 8013756:	434a      	muls	r2, r1
 8013758:	9208      	str	r2, [sp, #32]
 801375a:	0022      	movs	r2, r4
 801375c:	e7df      	b.n	801371e <_strtod_l+0x246>
 801375e:	2c10      	cmp	r4, #16
 8013760:	dcfb      	bgt.n	801375a <_strtod_l+0x282>
 8013762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013764:	434a      	muls	r2, r1
 8013766:	920b      	str	r2, [sp, #44]	; 0x2c
 8013768:	e7f7      	b.n	801375a <_strtod_l+0x282>
 801376a:	9905      	ldr	r1, [sp, #20]
 801376c:	2200      	movs	r2, #0
 801376e:	2910      	cmp	r1, #16
 8013770:	dce5      	bgt.n	801373e <_strtod_l+0x266>
 8013772:	210a      	movs	r1, #10
 8013774:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013776:	4341      	muls	r1, r0
 8013778:	185b      	adds	r3, r3, r1
 801377a:	930b      	str	r3, [sp, #44]	; 0x2c
 801377c:	e7df      	b.n	801373e <_strtod_l+0x266>
 801377e:	2200      	movs	r2, #0
 8013780:	4694      	mov	ip, r2
 8013782:	9205      	str	r2, [sp, #20]
 8013784:	3201      	adds	r2, #1
 8013786:	e7b0      	b.n	80136ea <_strtod_l+0x212>
 8013788:	000c      	movs	r4, r1
 801378a:	e77e      	b.n	801368a <_strtod_l+0x1b2>
 801378c:	080189f4 	.word	0x080189f4
 8013790:	ffefffff 	.word	0xffefffff
 8013794:	00000433 	.word	0x00000433
 8013798:	7ff00000 	.word	0x7ff00000
 801379c:	7fffffff 	.word	0x7fffffff
 80137a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137a2:	1c5a      	adds	r2, r3, #1
 80137a4:	9221      	str	r2, [sp, #132]	; 0x84
 80137a6:	785b      	ldrb	r3, [r3, #1]
 80137a8:	2b30      	cmp	r3, #48	; 0x30
 80137aa:	d0f9      	beq.n	80137a0 <_strtod_l+0x2c8>
 80137ac:	001a      	movs	r2, r3
 80137ae:	3a31      	subs	r2, #49	; 0x31
 80137b0:	2100      	movs	r1, #0
 80137b2:	2a08      	cmp	r2, #8
 80137b4:	d816      	bhi.n	80137e4 <_strtod_l+0x30c>
 80137b6:	3b30      	subs	r3, #48	; 0x30
 80137b8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80137ba:	930e      	str	r3, [sp, #56]	; 0x38
 80137bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137be:	1c59      	adds	r1, r3, #1
 80137c0:	9121      	str	r1, [sp, #132]	; 0x84
 80137c2:	785b      	ldrb	r3, [r3, #1]
 80137c4:	001a      	movs	r2, r3
 80137c6:	3a30      	subs	r2, #48	; 0x30
 80137c8:	2a09      	cmp	r2, #9
 80137ca:	d932      	bls.n	8013832 <_strtod_l+0x35a>
 80137cc:	1b4a      	subs	r2, r1, r5
 80137ce:	4dad      	ldr	r5, [pc, #692]	; (8013a84 <_strtod_l+0x5ac>)
 80137d0:	0029      	movs	r1, r5
 80137d2:	2a08      	cmp	r2, #8
 80137d4:	dc03      	bgt.n	80137de <_strtod_l+0x306>
 80137d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80137d8:	42a9      	cmp	r1, r5
 80137da:	dd00      	ble.n	80137de <_strtod_l+0x306>
 80137dc:	0029      	movs	r1, r5
 80137de:	2c00      	cmp	r4, #0
 80137e0:	d000      	beq.n	80137e4 <_strtod_l+0x30c>
 80137e2:	4249      	negs	r1, r1
 80137e4:	9a05      	ldr	r2, [sp, #20]
 80137e6:	2a00      	cmp	r2, #0
 80137e8:	d149      	bne.n	801387e <_strtod_l+0x3a6>
 80137ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137ec:	4310      	orrs	r0, r2
 80137ee:	d000      	beq.n	80137f2 <_strtod_l+0x31a>
 80137f0:	e6b3      	b.n	801355a <_strtod_l+0x82>
 80137f2:	9a07      	ldr	r2, [sp, #28]
 80137f4:	2a00      	cmp	r2, #0
 80137f6:	d000      	beq.n	80137fa <_strtod_l+0x322>
 80137f8:	e6cf      	b.n	801359a <_strtod_l+0xc2>
 80137fa:	2b4e      	cmp	r3, #78	; 0x4e
 80137fc:	d025      	beq.n	801384a <_strtod_l+0x372>
 80137fe:	dc1f      	bgt.n	8013840 <_strtod_l+0x368>
 8013800:	2b49      	cmp	r3, #73	; 0x49
 8013802:	d000      	beq.n	8013806 <_strtod_l+0x32e>
 8013804:	e6c9      	b.n	801359a <_strtod_l+0xc2>
 8013806:	49a0      	ldr	r1, [pc, #640]	; (8013a88 <_strtod_l+0x5b0>)
 8013808:	a821      	add	r0, sp, #132	; 0x84
 801380a:	f001 f81d 	bl	8014848 <__match>
 801380e:	2800      	cmp	r0, #0
 8013810:	d100      	bne.n	8013814 <_strtod_l+0x33c>
 8013812:	e6c2      	b.n	801359a <_strtod_l+0xc2>
 8013814:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013816:	499d      	ldr	r1, [pc, #628]	; (8013a8c <_strtod_l+0x5b4>)
 8013818:	3b01      	subs	r3, #1
 801381a:	a821      	add	r0, sp, #132	; 0x84
 801381c:	9321      	str	r3, [sp, #132]	; 0x84
 801381e:	f001 f813 	bl	8014848 <__match>
 8013822:	2800      	cmp	r0, #0
 8013824:	d102      	bne.n	801382c <_strtod_l+0x354>
 8013826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013828:	3301      	adds	r3, #1
 801382a:	9321      	str	r3, [sp, #132]	; 0x84
 801382c:	4f98      	ldr	r7, [pc, #608]	; (8013a90 <_strtod_l+0x5b8>)
 801382e:	2600      	movs	r6, #0
 8013830:	e693      	b.n	801355a <_strtod_l+0x82>
 8013832:	220a      	movs	r2, #10
 8013834:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013836:	434a      	muls	r2, r1
 8013838:	18d2      	adds	r2, r2, r3
 801383a:	3a30      	subs	r2, #48	; 0x30
 801383c:	920e      	str	r2, [sp, #56]	; 0x38
 801383e:	e7bd      	b.n	80137bc <_strtod_l+0x2e4>
 8013840:	2b69      	cmp	r3, #105	; 0x69
 8013842:	d0e0      	beq.n	8013806 <_strtod_l+0x32e>
 8013844:	2b6e      	cmp	r3, #110	; 0x6e
 8013846:	d000      	beq.n	801384a <_strtod_l+0x372>
 8013848:	e6a7      	b.n	801359a <_strtod_l+0xc2>
 801384a:	4992      	ldr	r1, [pc, #584]	; (8013a94 <_strtod_l+0x5bc>)
 801384c:	a821      	add	r0, sp, #132	; 0x84
 801384e:	f000 fffb 	bl	8014848 <__match>
 8013852:	2800      	cmp	r0, #0
 8013854:	d100      	bne.n	8013858 <_strtod_l+0x380>
 8013856:	e6a0      	b.n	801359a <_strtod_l+0xc2>
 8013858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b28      	cmp	r3, #40	; 0x28
 801385e:	d10c      	bne.n	801387a <_strtod_l+0x3a2>
 8013860:	aa24      	add	r2, sp, #144	; 0x90
 8013862:	498d      	ldr	r1, [pc, #564]	; (8013a98 <_strtod_l+0x5c0>)
 8013864:	a821      	add	r0, sp, #132	; 0x84
 8013866:	f001 f803 	bl	8014870 <__hexnan>
 801386a:	2805      	cmp	r0, #5
 801386c:	d105      	bne.n	801387a <_strtod_l+0x3a2>
 801386e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013870:	4a87      	ldr	r2, [pc, #540]	; (8013a90 <_strtod_l+0x5b8>)
 8013872:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013874:	431a      	orrs	r2, r3
 8013876:	0017      	movs	r7, r2
 8013878:	e66f      	b.n	801355a <_strtod_l+0x82>
 801387a:	4f88      	ldr	r7, [pc, #544]	; (8013a9c <_strtod_l+0x5c4>)
 801387c:	e7d7      	b.n	801382e <_strtod_l+0x356>
 801387e:	4663      	mov	r3, ip
 8013880:	1acb      	subs	r3, r1, r3
 8013882:	9307      	str	r3, [sp, #28]
 8013884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013886:	2b00      	cmp	r3, #0
 8013888:	d101      	bne.n	801388e <_strtod_l+0x3b6>
 801388a:	9b05      	ldr	r3, [sp, #20]
 801388c:	930a      	str	r3, [sp, #40]	; 0x28
 801388e:	9c05      	ldr	r4, [sp, #20]
 8013890:	2c10      	cmp	r4, #16
 8013892:	dd00      	ble.n	8013896 <_strtod_l+0x3be>
 8013894:	2410      	movs	r4, #16
 8013896:	9808      	ldr	r0, [sp, #32]
 8013898:	f7ef f80a 	bl	80028b0 <__aeabi_ui2d>
 801389c:	9b05      	ldr	r3, [sp, #20]
 801389e:	0006      	movs	r6, r0
 80138a0:	000f      	movs	r7, r1
 80138a2:	2b09      	cmp	r3, #9
 80138a4:	dc15      	bgt.n	80138d2 <_strtod_l+0x3fa>
 80138a6:	9b07      	ldr	r3, [sp, #28]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d100      	bne.n	80138ae <_strtod_l+0x3d6>
 80138ac:	e655      	b.n	801355a <_strtod_l+0x82>
 80138ae:	9b07      	ldr	r3, [sp, #28]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	dc00      	bgt.n	80138b6 <_strtod_l+0x3de>
 80138b4:	e07d      	b.n	80139b2 <_strtod_l+0x4da>
 80138b6:	2b16      	cmp	r3, #22
 80138b8:	dc62      	bgt.n	8013980 <_strtod_l+0x4a8>
 80138ba:	00dc      	lsls	r4, r3, #3
 80138bc:	4b78      	ldr	r3, [pc, #480]	; (8013aa0 <_strtod_l+0x5c8>)
 80138be:	0032      	movs	r2, r6
 80138c0:	1919      	adds	r1, r3, r4
 80138c2:	003b      	movs	r3, r7
 80138c4:	6808      	ldr	r0, [r1, #0]
 80138c6:	6849      	ldr	r1, [r1, #4]
 80138c8:	f7ee f9c8 	bl	8001c5c <__aeabi_dmul>
 80138cc:	0006      	movs	r6, r0
 80138ce:	000f      	movs	r7, r1
 80138d0:	e643      	b.n	801355a <_strtod_l+0x82>
 80138d2:	0022      	movs	r2, r4
 80138d4:	4b72      	ldr	r3, [pc, #456]	; (8013aa0 <_strtod_l+0x5c8>)
 80138d6:	3a09      	subs	r2, #9
 80138d8:	00d2      	lsls	r2, r2, #3
 80138da:	189b      	adds	r3, r3, r2
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	f7ee f9bc 	bl	8001c5c <__aeabi_dmul>
 80138e4:	0006      	movs	r6, r0
 80138e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80138e8:	000f      	movs	r7, r1
 80138ea:	f7ee ffe1 	bl	80028b0 <__aeabi_ui2d>
 80138ee:	000b      	movs	r3, r1
 80138f0:	0002      	movs	r2, r0
 80138f2:	0039      	movs	r1, r7
 80138f4:	0030      	movs	r0, r6
 80138f6:	f7ed fa8b 	bl	8000e10 <__aeabi_dadd>
 80138fa:	9b05      	ldr	r3, [sp, #20]
 80138fc:	0006      	movs	r6, r0
 80138fe:	000f      	movs	r7, r1
 8013900:	2b0f      	cmp	r3, #15
 8013902:	ddd0      	ble.n	80138a6 <_strtod_l+0x3ce>
 8013904:	9b05      	ldr	r3, [sp, #20]
 8013906:	1b1c      	subs	r4, r3, r4
 8013908:	9b07      	ldr	r3, [sp, #28]
 801390a:	18e4      	adds	r4, r4, r3
 801390c:	2c00      	cmp	r4, #0
 801390e:	dc00      	bgt.n	8013912 <_strtod_l+0x43a>
 8013910:	e094      	b.n	8013a3c <_strtod_l+0x564>
 8013912:	230f      	movs	r3, #15
 8013914:	4023      	ands	r3, r4
 8013916:	d00a      	beq.n	801392e <_strtod_l+0x456>
 8013918:	4961      	ldr	r1, [pc, #388]	; (8013aa0 <_strtod_l+0x5c8>)
 801391a:	00db      	lsls	r3, r3, #3
 801391c:	18c9      	adds	r1, r1, r3
 801391e:	0032      	movs	r2, r6
 8013920:	6808      	ldr	r0, [r1, #0]
 8013922:	6849      	ldr	r1, [r1, #4]
 8013924:	003b      	movs	r3, r7
 8013926:	f7ee f999 	bl	8001c5c <__aeabi_dmul>
 801392a:	0006      	movs	r6, r0
 801392c:	000f      	movs	r7, r1
 801392e:	230f      	movs	r3, #15
 8013930:	439c      	bics	r4, r3
 8013932:	d06e      	beq.n	8013a12 <_strtod_l+0x53a>
 8013934:	3326      	adds	r3, #38	; 0x26
 8013936:	33ff      	adds	r3, #255	; 0xff
 8013938:	429c      	cmp	r4, r3
 801393a:	dd48      	ble.n	80139ce <_strtod_l+0x4f6>
 801393c:	2400      	movs	r4, #0
 801393e:	9405      	str	r4, [sp, #20]
 8013940:	940b      	str	r4, [sp, #44]	; 0x2c
 8013942:	940a      	str	r4, [sp, #40]	; 0x28
 8013944:	2322      	movs	r3, #34	; 0x22
 8013946:	2600      	movs	r6, #0
 8013948:	9a04      	ldr	r2, [sp, #16]
 801394a:	4f51      	ldr	r7, [pc, #324]	; (8013a90 <_strtod_l+0x5b8>)
 801394c:	6013      	str	r3, [r2, #0]
 801394e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013950:	42b3      	cmp	r3, r6
 8013952:	d100      	bne.n	8013956 <_strtod_l+0x47e>
 8013954:	e601      	b.n	801355a <_strtod_l+0x82>
 8013956:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013958:	9804      	ldr	r0, [sp, #16]
 801395a:	f001 f85c 	bl	8014a16 <_Bfree>
 801395e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013960:	9804      	ldr	r0, [sp, #16]
 8013962:	f001 f858 	bl	8014a16 <_Bfree>
 8013966:	9905      	ldr	r1, [sp, #20]
 8013968:	9804      	ldr	r0, [sp, #16]
 801396a:	f001 f854 	bl	8014a16 <_Bfree>
 801396e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013970:	9804      	ldr	r0, [sp, #16]
 8013972:	f001 f850 	bl	8014a16 <_Bfree>
 8013976:	0021      	movs	r1, r4
 8013978:	9804      	ldr	r0, [sp, #16]
 801397a:	f001 f84c 	bl	8014a16 <_Bfree>
 801397e:	e5ec      	b.n	801355a <_strtod_l+0x82>
 8013980:	2325      	movs	r3, #37	; 0x25
 8013982:	9a05      	ldr	r2, [sp, #20]
 8013984:	1a9b      	subs	r3, r3, r2
 8013986:	9a07      	ldr	r2, [sp, #28]
 8013988:	4293      	cmp	r3, r2
 801398a:	dbbb      	blt.n	8013904 <_strtod_l+0x42c>
 801398c:	230f      	movs	r3, #15
 801398e:	9a05      	ldr	r2, [sp, #20]
 8013990:	4c43      	ldr	r4, [pc, #268]	; (8013aa0 <_strtod_l+0x5c8>)
 8013992:	1a9d      	subs	r5, r3, r2
 8013994:	00e9      	lsls	r1, r5, #3
 8013996:	1861      	adds	r1, r4, r1
 8013998:	0032      	movs	r2, r6
 801399a:	6808      	ldr	r0, [r1, #0]
 801399c:	6849      	ldr	r1, [r1, #4]
 801399e:	003b      	movs	r3, r7
 80139a0:	f7ee f95c 	bl	8001c5c <__aeabi_dmul>
 80139a4:	9b07      	ldr	r3, [sp, #28]
 80139a6:	1b5e      	subs	r6, r3, r5
 80139a8:	00f6      	lsls	r6, r6, #3
 80139aa:	19a6      	adds	r6, r4, r6
 80139ac:	6832      	ldr	r2, [r6, #0]
 80139ae:	6873      	ldr	r3, [r6, #4]
 80139b0:	e78a      	b.n	80138c8 <_strtod_l+0x3f0>
 80139b2:	9b07      	ldr	r3, [sp, #28]
 80139b4:	3316      	adds	r3, #22
 80139b6:	dba5      	blt.n	8013904 <_strtod_l+0x42c>
 80139b8:	9b07      	ldr	r3, [sp, #28]
 80139ba:	0030      	movs	r0, r6
 80139bc:	00da      	lsls	r2, r3, #3
 80139be:	4b38      	ldr	r3, [pc, #224]	; (8013aa0 <_strtod_l+0x5c8>)
 80139c0:	0039      	movs	r1, r7
 80139c2:	1a9b      	subs	r3, r3, r2
 80139c4:	681a      	ldr	r2, [r3, #0]
 80139c6:	685b      	ldr	r3, [r3, #4]
 80139c8:	f7ed fd3e 	bl	8001448 <__aeabi_ddiv>
 80139cc:	e77e      	b.n	80138cc <_strtod_l+0x3f4>
 80139ce:	2300      	movs	r3, #0
 80139d0:	0030      	movs	r0, r6
 80139d2:	0039      	movs	r1, r7
 80139d4:	001d      	movs	r5, r3
 80139d6:	1124      	asrs	r4, r4, #4
 80139d8:	2c01      	cmp	r4, #1
 80139da:	dc1d      	bgt.n	8013a18 <_strtod_l+0x540>
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d001      	beq.n	80139e4 <_strtod_l+0x50c>
 80139e0:	0006      	movs	r6, r0
 80139e2:	000f      	movs	r7, r1
 80139e4:	4b2f      	ldr	r3, [pc, #188]	; (8013aa4 <_strtod_l+0x5cc>)
 80139e6:	00ed      	lsls	r5, r5, #3
 80139e8:	18ff      	adds	r7, r7, r3
 80139ea:	4b2f      	ldr	r3, [pc, #188]	; (8013aa8 <_strtod_l+0x5d0>)
 80139ec:	0032      	movs	r2, r6
 80139ee:	195d      	adds	r5, r3, r5
 80139f0:	6828      	ldr	r0, [r5, #0]
 80139f2:	6869      	ldr	r1, [r5, #4]
 80139f4:	003b      	movs	r3, r7
 80139f6:	f7ee f931 	bl	8001c5c <__aeabi_dmul>
 80139fa:	4b25      	ldr	r3, [pc, #148]	; (8013a90 <_strtod_l+0x5b8>)
 80139fc:	4a2b      	ldr	r2, [pc, #172]	; (8013aac <_strtod_l+0x5d4>)
 80139fe:	0006      	movs	r6, r0
 8013a00:	400b      	ands	r3, r1
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d89a      	bhi.n	801393c <_strtod_l+0x464>
 8013a06:	4a2a      	ldr	r2, [pc, #168]	; (8013ab0 <_strtod_l+0x5d8>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d913      	bls.n	8013a34 <_strtod_l+0x55c>
 8013a0c:	2601      	movs	r6, #1
 8013a0e:	4f29      	ldr	r7, [pc, #164]	; (8013ab4 <_strtod_l+0x5dc>)
 8013a10:	4276      	negs	r6, r6
 8013a12:	2300      	movs	r3, #0
 8013a14:	9306      	str	r3, [sp, #24]
 8013a16:	e07b      	b.n	8013b10 <_strtod_l+0x638>
 8013a18:	2201      	movs	r2, #1
 8013a1a:	4214      	tst	r4, r2
 8013a1c:	d007      	beq.n	8013a2e <_strtod_l+0x556>
 8013a1e:	4a22      	ldr	r2, [pc, #136]	; (8013aa8 <_strtod_l+0x5d0>)
 8013a20:	00eb      	lsls	r3, r5, #3
 8013a22:	189b      	adds	r3, r3, r2
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	f7ee f918 	bl	8001c5c <__aeabi_dmul>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	3501      	adds	r5, #1
 8013a30:	1064      	asrs	r4, r4, #1
 8013a32:	e7d1      	b.n	80139d8 <_strtod_l+0x500>
 8013a34:	23d4      	movs	r3, #212	; 0xd4
 8013a36:	049b      	lsls	r3, r3, #18
 8013a38:	18cf      	adds	r7, r1, r3
 8013a3a:	e7ea      	b.n	8013a12 <_strtod_l+0x53a>
 8013a3c:	2c00      	cmp	r4, #0
 8013a3e:	d0e8      	beq.n	8013a12 <_strtod_l+0x53a>
 8013a40:	230f      	movs	r3, #15
 8013a42:	4264      	negs	r4, r4
 8013a44:	4023      	ands	r3, r4
 8013a46:	d00a      	beq.n	8013a5e <_strtod_l+0x586>
 8013a48:	4a15      	ldr	r2, [pc, #84]	; (8013aa0 <_strtod_l+0x5c8>)
 8013a4a:	00db      	lsls	r3, r3, #3
 8013a4c:	18d3      	adds	r3, r2, r3
 8013a4e:	0030      	movs	r0, r6
 8013a50:	681a      	ldr	r2, [r3, #0]
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	0039      	movs	r1, r7
 8013a56:	f7ed fcf7 	bl	8001448 <__aeabi_ddiv>
 8013a5a:	0006      	movs	r6, r0
 8013a5c:	000f      	movs	r7, r1
 8013a5e:	1124      	asrs	r4, r4, #4
 8013a60:	d0d7      	beq.n	8013a12 <_strtod_l+0x53a>
 8013a62:	2c1f      	cmp	r4, #31
 8013a64:	dd28      	ble.n	8013ab8 <_strtod_l+0x5e0>
 8013a66:	2400      	movs	r4, #0
 8013a68:	9405      	str	r4, [sp, #20]
 8013a6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8013a6c:	940a      	str	r4, [sp, #40]	; 0x28
 8013a6e:	2322      	movs	r3, #34	; 0x22
 8013a70:	9a04      	ldr	r2, [sp, #16]
 8013a72:	2600      	movs	r6, #0
 8013a74:	6013      	str	r3, [r2, #0]
 8013a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a78:	2700      	movs	r7, #0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d000      	beq.n	8013a80 <_strtod_l+0x5a8>
 8013a7e:	e76a      	b.n	8013956 <_strtod_l+0x47e>
 8013a80:	e56b      	b.n	801355a <_strtod_l+0x82>
 8013a82:	46c0      	nop			; (mov r8, r8)
 8013a84:	00004e1f 	.word	0x00004e1f
 8013a88:	080189e6 	.word	0x080189e6
 8013a8c:	080189e9 	.word	0x080189e9
 8013a90:	7ff00000 	.word	0x7ff00000
 8013a94:	080189ef 	.word	0x080189ef
 8013a98:	08018a08 	.word	0x08018a08
 8013a9c:	fff80000 	.word	0xfff80000
 8013aa0:	08018b78 	.word	0x08018b78
 8013aa4:	fcb00000 	.word	0xfcb00000
 8013aa8:	08018b50 	.word	0x08018b50
 8013aac:	7ca00000 	.word	0x7ca00000
 8013ab0:	7c900000 	.word	0x7c900000
 8013ab4:	7fefffff 	.word	0x7fefffff
 8013ab8:	2310      	movs	r3, #16
 8013aba:	4023      	ands	r3, r4
 8013abc:	9306      	str	r3, [sp, #24]
 8013abe:	d001      	beq.n	8013ac4 <_strtod_l+0x5ec>
 8013ac0:	236a      	movs	r3, #106	; 0x6a
 8013ac2:	9306      	str	r3, [sp, #24]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	0030      	movs	r0, r6
 8013ac8:	0039      	movs	r1, r7
 8013aca:	001d      	movs	r5, r3
 8013acc:	2c00      	cmp	r4, #0
 8013ace:	dd00      	ble.n	8013ad2 <_strtod_l+0x5fa>
 8013ad0:	e10e      	b.n	8013cf0 <_strtod_l+0x818>
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d001      	beq.n	8013ada <_strtod_l+0x602>
 8013ad6:	0006      	movs	r6, r0
 8013ad8:	000f      	movs	r7, r1
 8013ada:	9b06      	ldr	r3, [sp, #24]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00f      	beq.n	8013b00 <_strtod_l+0x628>
 8013ae0:	236b      	movs	r3, #107	; 0x6b
 8013ae2:	0079      	lsls	r1, r7, #1
 8013ae4:	0d49      	lsrs	r1, r1, #21
 8013ae6:	003a      	movs	r2, r7
 8013ae8:	1a5b      	subs	r3, r3, r1
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	dd08      	ble.n	8013b00 <_strtod_l+0x628>
 8013aee:	2b1f      	cmp	r3, #31
 8013af0:	dc00      	bgt.n	8013af4 <_strtod_l+0x61c>
 8013af2:	e112      	b.n	8013d1a <_strtod_l+0x842>
 8013af4:	2600      	movs	r6, #0
 8013af6:	2b34      	cmp	r3, #52	; 0x34
 8013af8:	dc00      	bgt.n	8013afc <_strtod_l+0x624>
 8013afa:	e107      	b.n	8013d0c <_strtod_l+0x834>
 8013afc:	27dc      	movs	r7, #220	; 0xdc
 8013afe:	04bf      	lsls	r7, r7, #18
 8013b00:	2200      	movs	r2, #0
 8013b02:	2300      	movs	r3, #0
 8013b04:	0030      	movs	r0, r6
 8013b06:	0039      	movs	r1, r7
 8013b08:	f7ec fc9e 	bl	8000448 <__aeabi_dcmpeq>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d1aa      	bne.n	8013a66 <_strtod_l+0x58e>
 8013b10:	9b08      	ldr	r3, [sp, #32]
 8013b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b14:	9300      	str	r3, [sp, #0]
 8013b16:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013b18:	9b05      	ldr	r3, [sp, #20]
 8013b1a:	9804      	ldr	r0, [sp, #16]
 8013b1c:	f000 ffd2 	bl	8014ac4 <__s2b>
 8013b20:	900b      	str	r0, [sp, #44]	; 0x2c
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d100      	bne.n	8013b28 <_strtod_l+0x650>
 8013b26:	e709      	b.n	801393c <_strtod_l+0x464>
 8013b28:	9b07      	ldr	r3, [sp, #28]
 8013b2a:	9a07      	ldr	r2, [sp, #28]
 8013b2c:	17db      	asrs	r3, r3, #31
 8013b2e:	4252      	negs	r2, r2
 8013b30:	4013      	ands	r3, r2
 8013b32:	9315      	str	r3, [sp, #84]	; 0x54
 8013b34:	9b07      	ldr	r3, [sp, #28]
 8013b36:	2400      	movs	r4, #0
 8013b38:	43db      	mvns	r3, r3
 8013b3a:	9a07      	ldr	r2, [sp, #28]
 8013b3c:	17db      	asrs	r3, r3, #31
 8013b3e:	401a      	ands	r2, r3
 8013b40:	921c      	str	r2, [sp, #112]	; 0x70
 8013b42:	9405      	str	r4, [sp, #20]
 8013b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b46:	9804      	ldr	r0, [sp, #16]
 8013b48:	6859      	ldr	r1, [r3, #4]
 8013b4a:	f000 ff2c 	bl	80149a6 <_Balloc>
 8013b4e:	900a      	str	r0, [sp, #40]	; 0x28
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d100      	bne.n	8013b56 <_strtod_l+0x67e>
 8013b54:	e6f6      	b.n	8013944 <_strtod_l+0x46c>
 8013b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b5a:	691b      	ldr	r3, [r3, #16]
 8013b5c:	310c      	adds	r1, #12
 8013b5e:	1c9a      	adds	r2, r3, #2
 8013b60:	0092      	lsls	r2, r2, #2
 8013b62:	300c      	adds	r0, #12
 8013b64:	9308      	str	r3, [sp, #32]
 8013b66:	f7ff fb2e 	bl	80131c6 <memcpy>
 8013b6a:	ab24      	add	r3, sp, #144	; 0x90
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	ab23      	add	r3, sp, #140	; 0x8c
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	0032      	movs	r2, r6
 8013b74:	003b      	movs	r3, r7
 8013b76:	9804      	ldr	r0, [sp, #16]
 8013b78:	960e      	str	r6, [sp, #56]	; 0x38
 8013b7a:	970f      	str	r7, [sp, #60]	; 0x3c
 8013b7c:	f001 fa56 	bl	801502c <__d2b>
 8013b80:	9022      	str	r0, [sp, #136]	; 0x88
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d100      	bne.n	8013b88 <_strtod_l+0x6b0>
 8013b86:	e6dd      	b.n	8013944 <_strtod_l+0x46c>
 8013b88:	2101      	movs	r1, #1
 8013b8a:	9804      	ldr	r0, [sp, #16]
 8013b8c:	f001 f821 	bl	8014bd2 <__i2b>
 8013b90:	9005      	str	r0, [sp, #20]
 8013b92:	2800      	cmp	r0, #0
 8013b94:	d100      	bne.n	8013b98 <_strtod_l+0x6c0>
 8013b96:	e6d5      	b.n	8013944 <_strtod_l+0x46c>
 8013b98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	da00      	bge.n	8013ba0 <_strtod_l+0x6c8>
 8013b9e:	e0c1      	b.n	8013d24 <_strtod_l+0x84c>
 8013ba0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013ba2:	189d      	adds	r5, r3, r2
 8013ba4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013ba6:	4694      	mov	ip, r2
 8013ba8:	9906      	ldr	r1, [sp, #24]
 8013baa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013bac:	1a5b      	subs	r3, r3, r1
 8013bae:	2136      	movs	r1, #54	; 0x36
 8013bb0:	189b      	adds	r3, r3, r2
 8013bb2:	1a8a      	subs	r2, r1, r2
 8013bb4:	49b2      	ldr	r1, [pc, #712]	; (8013e80 <_strtod_l+0x9a8>)
 8013bb6:	3b01      	subs	r3, #1
 8013bb8:	2001      	movs	r0, #1
 8013bba:	428b      	cmp	r3, r1
 8013bbc:	db00      	blt.n	8013bc0 <_strtod_l+0x6e8>
 8013bbe:	e0bd      	b.n	8013d3c <_strtod_l+0x864>
 8013bc0:	1ac9      	subs	r1, r1, r3
 8013bc2:	1a52      	subs	r2, r2, r1
 8013bc4:	291f      	cmp	r1, #31
 8013bc6:	dd00      	ble.n	8013bca <_strtod_l+0x6f2>
 8013bc8:	e0b1      	b.n	8013d2e <_strtod_l+0x856>
 8013bca:	4088      	lsls	r0, r1
 8013bcc:	2300      	movs	r3, #0
 8013bce:	9014      	str	r0, [sp, #80]	; 0x50
 8013bd0:	9310      	str	r3, [sp, #64]	; 0x40
 8013bd2:	18ab      	adds	r3, r5, r2
 8013bd4:	9308      	str	r3, [sp, #32]
 8013bd6:	0013      	movs	r3, r2
 8013bd8:	9a06      	ldr	r2, [sp, #24]
 8013bda:	4463      	add	r3, ip
 8013bdc:	18d3      	adds	r3, r2, r3
 8013bde:	9a08      	ldr	r2, [sp, #32]
 8013be0:	930c      	str	r3, [sp, #48]	; 0x30
 8013be2:	002b      	movs	r3, r5
 8013be4:	4295      	cmp	r5, r2
 8013be6:	dd00      	ble.n	8013bea <_strtod_l+0x712>
 8013be8:	0013      	movs	r3, r2
 8013bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bec:	4293      	cmp	r3, r2
 8013bee:	dd00      	ble.n	8013bf2 <_strtod_l+0x71a>
 8013bf0:	0013      	movs	r3, r2
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	dd06      	ble.n	8013c04 <_strtod_l+0x72c>
 8013bf6:	9a08      	ldr	r2, [sp, #32]
 8013bf8:	1aed      	subs	r5, r5, r3
 8013bfa:	1ad2      	subs	r2, r2, r3
 8013bfc:	9208      	str	r2, [sp, #32]
 8013bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c00:	1ad2      	subs	r2, r2, r3
 8013c02:	920c      	str	r2, [sp, #48]	; 0x30
 8013c04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d017      	beq.n	8013c3a <_strtod_l+0x762>
 8013c0a:	001a      	movs	r2, r3
 8013c0c:	9905      	ldr	r1, [sp, #20]
 8013c0e:	9804      	ldr	r0, [sp, #16]
 8013c10:	f001 f878 	bl	8014d04 <__pow5mult>
 8013c14:	9005      	str	r0, [sp, #20]
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d100      	bne.n	8013c1c <_strtod_l+0x744>
 8013c1a:	e693      	b.n	8013944 <_strtod_l+0x46c>
 8013c1c:	0001      	movs	r1, r0
 8013c1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013c20:	9804      	ldr	r0, [sp, #16]
 8013c22:	f000 ffdf 	bl	8014be4 <__multiply>
 8013c26:	9012      	str	r0, [sp, #72]	; 0x48
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	d100      	bne.n	8013c2e <_strtod_l+0x756>
 8013c2c:	e68a      	b.n	8013944 <_strtod_l+0x46c>
 8013c2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c30:	9804      	ldr	r0, [sp, #16]
 8013c32:	f000 fef0 	bl	8014a16 <_Bfree>
 8013c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c38:	9322      	str	r3, [sp, #136]	; 0x88
 8013c3a:	9b08      	ldr	r3, [sp, #32]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	dd00      	ble.n	8013c42 <_strtod_l+0x76a>
 8013c40:	e07f      	b.n	8013d42 <_strtod_l+0x86a>
 8013c42:	9b07      	ldr	r3, [sp, #28]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	dd08      	ble.n	8013c5a <_strtod_l+0x782>
 8013c48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c4c:	9804      	ldr	r0, [sp, #16]
 8013c4e:	f001 f859 	bl	8014d04 <__pow5mult>
 8013c52:	900a      	str	r0, [sp, #40]	; 0x28
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d100      	bne.n	8013c5a <_strtod_l+0x782>
 8013c58:	e674      	b.n	8013944 <_strtod_l+0x46c>
 8013c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	dd08      	ble.n	8013c72 <_strtod_l+0x79a>
 8013c60:	001a      	movs	r2, r3
 8013c62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c64:	9804      	ldr	r0, [sp, #16]
 8013c66:	f001 f89f 	bl	8014da8 <__lshift>
 8013c6a:	900a      	str	r0, [sp, #40]	; 0x28
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	d100      	bne.n	8013c72 <_strtod_l+0x79a>
 8013c70:	e668      	b.n	8013944 <_strtod_l+0x46c>
 8013c72:	2d00      	cmp	r5, #0
 8013c74:	dd08      	ble.n	8013c88 <_strtod_l+0x7b0>
 8013c76:	002a      	movs	r2, r5
 8013c78:	9905      	ldr	r1, [sp, #20]
 8013c7a:	9804      	ldr	r0, [sp, #16]
 8013c7c:	f001 f894 	bl	8014da8 <__lshift>
 8013c80:	9005      	str	r0, [sp, #20]
 8013c82:	2800      	cmp	r0, #0
 8013c84:	d100      	bne.n	8013c88 <_strtod_l+0x7b0>
 8013c86:	e65d      	b.n	8013944 <_strtod_l+0x46c>
 8013c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c8a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c8c:	9804      	ldr	r0, [sp, #16]
 8013c8e:	f001 f8f7 	bl	8014e80 <__mdiff>
 8013c92:	1e04      	subs	r4, r0, #0
 8013c94:	d100      	bne.n	8013c98 <_strtod_l+0x7c0>
 8013c96:	e655      	b.n	8013944 <_strtod_l+0x46c>
 8013c98:	2500      	movs	r5, #0
 8013c9a:	68c3      	ldr	r3, [r0, #12]
 8013c9c:	9905      	ldr	r1, [sp, #20]
 8013c9e:	60c5      	str	r5, [r0, #12]
 8013ca0:	9312      	str	r3, [sp, #72]	; 0x48
 8013ca2:	f001 f8d3 	bl	8014e4c <__mcmp>
 8013ca6:	42a8      	cmp	r0, r5
 8013ca8:	da55      	bge.n	8013d56 <_strtod_l+0x87e>
 8013caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cac:	42ab      	cmp	r3, r5
 8013cae:	d11b      	bne.n	8013ce8 <_strtod_l+0x810>
 8013cb0:	42ae      	cmp	r6, r5
 8013cb2:	d119      	bne.n	8013ce8 <_strtod_l+0x810>
 8013cb4:	033b      	lsls	r3, r7, #12
 8013cb6:	42ab      	cmp	r3, r5
 8013cb8:	d116      	bne.n	8013ce8 <_strtod_l+0x810>
 8013cba:	22d6      	movs	r2, #214	; 0xd6
 8013cbc:	4b71      	ldr	r3, [pc, #452]	; (8013e84 <_strtod_l+0x9ac>)
 8013cbe:	04d2      	lsls	r2, r2, #19
 8013cc0:	403b      	ands	r3, r7
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d910      	bls.n	8013ce8 <_strtod_l+0x810>
 8013cc6:	6963      	ldr	r3, [r4, #20]
 8013cc8:	42ab      	cmp	r3, r5
 8013cca:	d102      	bne.n	8013cd2 <_strtod_l+0x7fa>
 8013ccc:	6923      	ldr	r3, [r4, #16]
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	dd0a      	ble.n	8013ce8 <_strtod_l+0x810>
 8013cd2:	0021      	movs	r1, r4
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	9804      	ldr	r0, [sp, #16]
 8013cd8:	f001 f866 	bl	8014da8 <__lshift>
 8013cdc:	9905      	ldr	r1, [sp, #20]
 8013cde:	0004      	movs	r4, r0
 8013ce0:	f001 f8b4 	bl	8014e4c <__mcmp>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	dc6b      	bgt.n	8013dc0 <_strtod_l+0x8e8>
 8013ce8:	9b06      	ldr	r3, [sp, #24]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d178      	bne.n	8013de0 <_strtod_l+0x908>
 8013cee:	e632      	b.n	8013956 <_strtod_l+0x47e>
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	4214      	tst	r4, r2
 8013cf4:	d007      	beq.n	8013d06 <_strtod_l+0x82e>
 8013cf6:	4a64      	ldr	r2, [pc, #400]	; (8013e88 <_strtod_l+0x9b0>)
 8013cf8:	00eb      	lsls	r3, r5, #3
 8013cfa:	18d3      	adds	r3, r2, r3
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	f7ed ffac 	bl	8001c5c <__aeabi_dmul>
 8013d04:	2301      	movs	r3, #1
 8013d06:	3501      	adds	r5, #1
 8013d08:	1064      	asrs	r4, r4, #1
 8013d0a:	e6df      	b.n	8013acc <_strtod_l+0x5f4>
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	3b20      	subs	r3, #32
 8013d10:	4249      	negs	r1, r1
 8013d12:	4099      	lsls	r1, r3
 8013d14:	400a      	ands	r2, r1
 8013d16:	0017      	movs	r7, r2
 8013d18:	e6f2      	b.n	8013b00 <_strtod_l+0x628>
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	4252      	negs	r2, r2
 8013d1e:	409a      	lsls	r2, r3
 8013d20:	4016      	ands	r6, r2
 8013d22:	e6ed      	b.n	8013b00 <_strtod_l+0x628>
 8013d24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d26:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d28:	1ad2      	subs	r2, r2, r3
 8013d2a:	4694      	mov	ip, r2
 8013d2c:	e73c      	b.n	8013ba8 <_strtod_l+0x6d0>
 8013d2e:	4957      	ldr	r1, [pc, #348]	; (8013e8c <_strtod_l+0x9b4>)
 8013d30:	1acb      	subs	r3, r1, r3
 8013d32:	0001      	movs	r1, r0
 8013d34:	4099      	lsls	r1, r3
 8013d36:	9110      	str	r1, [sp, #64]	; 0x40
 8013d38:	9014      	str	r0, [sp, #80]	; 0x50
 8013d3a:	e74a      	b.n	8013bd2 <_strtod_l+0x6fa>
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	9310      	str	r3, [sp, #64]	; 0x40
 8013d40:	e7fa      	b.n	8013d38 <_strtod_l+0x860>
 8013d42:	9a08      	ldr	r2, [sp, #32]
 8013d44:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d46:	9804      	ldr	r0, [sp, #16]
 8013d48:	f001 f82e 	bl	8014da8 <__lshift>
 8013d4c:	9022      	str	r0, [sp, #136]	; 0x88
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d000      	beq.n	8013d54 <_strtod_l+0x87c>
 8013d52:	e776      	b.n	8013c42 <_strtod_l+0x76a>
 8013d54:	e5f6      	b.n	8013944 <_strtod_l+0x46c>
 8013d56:	970c      	str	r7, [sp, #48]	; 0x30
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d000      	beq.n	8013d5e <_strtod_l+0x886>
 8013d5c:	e0a0      	b.n	8013ea0 <_strtod_l+0x9c8>
 8013d5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d60:	033b      	lsls	r3, r7, #12
 8013d62:	0b1b      	lsrs	r3, r3, #12
 8013d64:	2a00      	cmp	r2, #0
 8013d66:	d027      	beq.n	8013db8 <_strtod_l+0x8e0>
 8013d68:	4a49      	ldr	r2, [pc, #292]	; (8013e90 <_strtod_l+0x9b8>)
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d157      	bne.n	8013e1e <_strtod_l+0x946>
 8013d6e:	2201      	movs	r2, #1
 8013d70:	9b06      	ldr	r3, [sp, #24]
 8013d72:	4252      	negs	r2, r2
 8013d74:	0031      	movs	r1, r6
 8013d76:	0010      	movs	r0, r2
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d00b      	beq.n	8013d94 <_strtod_l+0x8bc>
 8013d7c:	25d4      	movs	r5, #212	; 0xd4
 8013d7e:	4b41      	ldr	r3, [pc, #260]	; (8013e84 <_strtod_l+0x9ac>)
 8013d80:	04ed      	lsls	r5, r5, #19
 8013d82:	403b      	ands	r3, r7
 8013d84:	0010      	movs	r0, r2
 8013d86:	42ab      	cmp	r3, r5
 8013d88:	d804      	bhi.n	8013d94 <_strtod_l+0x8bc>
 8013d8a:	306c      	adds	r0, #108	; 0x6c
 8013d8c:	0d1b      	lsrs	r3, r3, #20
 8013d8e:	1ac3      	subs	r3, r0, r3
 8013d90:	409a      	lsls	r2, r3
 8013d92:	0010      	movs	r0, r2
 8013d94:	4281      	cmp	r1, r0
 8013d96:	d142      	bne.n	8013e1e <_strtod_l+0x946>
 8013d98:	4b3e      	ldr	r3, [pc, #248]	; (8013e94 <_strtod_l+0x9bc>)
 8013d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d102      	bne.n	8013da6 <_strtod_l+0x8ce>
 8013da0:	1c4b      	adds	r3, r1, #1
 8013da2:	d100      	bne.n	8013da6 <_strtod_l+0x8ce>
 8013da4:	e5ce      	b.n	8013944 <_strtod_l+0x46c>
 8013da6:	4b37      	ldr	r3, [pc, #220]	; (8013e84 <_strtod_l+0x9ac>)
 8013da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013daa:	2600      	movs	r6, #0
 8013dac:	401a      	ands	r2, r3
 8013dae:	0013      	movs	r3, r2
 8013db0:	2280      	movs	r2, #128	; 0x80
 8013db2:	0352      	lsls	r2, r2, #13
 8013db4:	189f      	adds	r7, r3, r2
 8013db6:	e797      	b.n	8013ce8 <_strtod_l+0x810>
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d130      	bne.n	8013e1e <_strtod_l+0x946>
 8013dbc:	2e00      	cmp	r6, #0
 8013dbe:	d12e      	bne.n	8013e1e <_strtod_l+0x946>
 8013dc0:	9906      	ldr	r1, [sp, #24]
 8013dc2:	003b      	movs	r3, r7
 8013dc4:	4a2f      	ldr	r2, [pc, #188]	; (8013e84 <_strtod_l+0x9ac>)
 8013dc6:	2900      	cmp	r1, #0
 8013dc8:	d020      	beq.n	8013e0c <_strtod_l+0x934>
 8013dca:	0011      	movs	r1, r2
 8013dcc:	20d6      	movs	r0, #214	; 0xd6
 8013dce:	4039      	ands	r1, r7
 8013dd0:	04c0      	lsls	r0, r0, #19
 8013dd2:	4281      	cmp	r1, r0
 8013dd4:	dc1a      	bgt.n	8013e0c <_strtod_l+0x934>
 8013dd6:	23dc      	movs	r3, #220	; 0xdc
 8013dd8:	049b      	lsls	r3, r3, #18
 8013dda:	4299      	cmp	r1, r3
 8013ddc:	dc00      	bgt.n	8013de0 <_strtod_l+0x908>
 8013dde:	e646      	b.n	8013a6e <_strtod_l+0x596>
 8013de0:	4b2d      	ldr	r3, [pc, #180]	; (8013e98 <_strtod_l+0x9c0>)
 8013de2:	0030      	movs	r0, r6
 8013de4:	931b      	str	r3, [sp, #108]	; 0x6c
 8013de6:	2300      	movs	r3, #0
 8013de8:	931a      	str	r3, [sp, #104]	; 0x68
 8013dea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dee:	0039      	movs	r1, r7
 8013df0:	f7ed ff34 	bl	8001c5c <__aeabi_dmul>
 8013df4:	0006      	movs	r6, r0
 8013df6:	000f      	movs	r7, r1
 8013df8:	1e0b      	subs	r3, r1, #0
 8013dfa:	d000      	beq.n	8013dfe <_strtod_l+0x926>
 8013dfc:	e5ab      	b.n	8013956 <_strtod_l+0x47e>
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	d000      	beq.n	8013e04 <_strtod_l+0x92c>
 8013e02:	e5a8      	b.n	8013956 <_strtod_l+0x47e>
 8013e04:	9a04      	ldr	r2, [sp, #16]
 8013e06:	3322      	adds	r3, #34	; 0x22
 8013e08:	6013      	str	r3, [r2, #0]
 8013e0a:	e5a4      	b.n	8013956 <_strtod_l+0x47e>
 8013e0c:	2601      	movs	r6, #1
 8013e0e:	4013      	ands	r3, r2
 8013e10:	4a22      	ldr	r2, [pc, #136]	; (8013e9c <_strtod_l+0x9c4>)
 8013e12:	4276      	negs	r6, r6
 8013e14:	189b      	adds	r3, r3, r2
 8013e16:	4a1e      	ldr	r2, [pc, #120]	; (8013e90 <_strtod_l+0x9b8>)
 8013e18:	431a      	orrs	r2, r3
 8013e1a:	0017      	movs	r7, r2
 8013e1c:	e764      	b.n	8013ce8 <_strtod_l+0x810>
 8013e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d015      	beq.n	8013e50 <_strtod_l+0x978>
 8013e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e28:	4213      	tst	r3, r2
 8013e2a:	d100      	bne.n	8013e2e <_strtod_l+0x956>
 8013e2c:	e75c      	b.n	8013ce8 <_strtod_l+0x810>
 8013e2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e30:	9a06      	ldr	r2, [sp, #24]
 8013e32:	0030      	movs	r0, r6
 8013e34:	0039      	movs	r1, r7
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d00f      	beq.n	8013e5a <_strtod_l+0x982>
 8013e3a:	f7ff fb35 	bl	80134a8 <sulp>
 8013e3e:	0002      	movs	r2, r0
 8013e40:	000b      	movs	r3, r1
 8013e42:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e46:	f7ec ffe3 	bl	8000e10 <__aeabi_dadd>
 8013e4a:	0006      	movs	r6, r0
 8013e4c:	000f      	movs	r7, r1
 8013e4e:	e74b      	b.n	8013ce8 <_strtod_l+0x810>
 8013e50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e52:	4233      	tst	r3, r6
 8013e54:	d100      	bne.n	8013e58 <_strtod_l+0x980>
 8013e56:	e747      	b.n	8013ce8 <_strtod_l+0x810>
 8013e58:	e7e9      	b.n	8013e2e <_strtod_l+0x956>
 8013e5a:	f7ff fb25 	bl	80134a8 <sulp>
 8013e5e:	0002      	movs	r2, r0
 8013e60:	000b      	movs	r3, r1
 8013e62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e66:	f7ee f96b 	bl	8002140 <__aeabi_dsub>
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	0006      	movs	r6, r0
 8013e70:	000f      	movs	r7, r1
 8013e72:	f7ec fae9 	bl	8000448 <__aeabi_dcmpeq>
 8013e76:	2800      	cmp	r0, #0
 8013e78:	d000      	beq.n	8013e7c <_strtod_l+0x9a4>
 8013e7a:	e5f8      	b.n	8013a6e <_strtod_l+0x596>
 8013e7c:	e734      	b.n	8013ce8 <_strtod_l+0x810>
 8013e7e:	46c0      	nop			; (mov r8, r8)
 8013e80:	fffffc02 	.word	0xfffffc02
 8013e84:	7ff00000 	.word	0x7ff00000
 8013e88:	08018a20 	.word	0x08018a20
 8013e8c:	fffffbe2 	.word	0xfffffbe2
 8013e90:	000fffff 	.word	0x000fffff
 8013e94:	7fefffff 	.word	0x7fefffff
 8013e98:	39500000 	.word	0x39500000
 8013e9c:	fff00000 	.word	0xfff00000
 8013ea0:	9905      	ldr	r1, [sp, #20]
 8013ea2:	0020      	movs	r0, r4
 8013ea4:	f001 f916 	bl	80150d4 <__ratio>
 8013ea8:	2380      	movs	r3, #128	; 0x80
 8013eaa:	2200      	movs	r2, #0
 8013eac:	05db      	lsls	r3, r3, #23
 8013eae:	9008      	str	r0, [sp, #32]
 8013eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8013eb2:	f7ec fad9 	bl	8000468 <__aeabi_dcmple>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d100      	bne.n	8013ebc <_strtod_l+0x9e4>
 8013eba:	e07f      	b.n	8013fbc <_strtod_l+0xae4>
 8013ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d04b      	beq.n	8013f5a <_strtod_l+0xa82>
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	4b8a      	ldr	r3, [pc, #552]	; (80140f0 <_strtod_l+0xc18>)
 8013ec6:	9210      	str	r2, [sp, #64]	; 0x40
 8013ec8:	9311      	str	r3, [sp, #68]	; 0x44
 8013eca:	4b89      	ldr	r3, [pc, #548]	; (80140f0 <_strtod_l+0xc18>)
 8013ecc:	9308      	str	r3, [sp, #32]
 8013ece:	4a89      	ldr	r2, [pc, #548]	; (80140f4 <_strtod_l+0xc1c>)
 8013ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ed2:	4013      	ands	r3, r2
 8013ed4:	9314      	str	r3, [sp, #80]	; 0x50
 8013ed6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ed8:	4b87      	ldr	r3, [pc, #540]	; (80140f8 <_strtod_l+0xc20>)
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d000      	beq.n	8013ee0 <_strtod_l+0xa08>
 8013ede:	e0ba      	b.n	8014056 <_strtod_l+0xb7e>
 8013ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ee4:	921a      	str	r2, [sp, #104]	; 0x68
 8013ee6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ee8:	4a84      	ldr	r2, [pc, #528]	; (80140fc <_strtod_l+0xc24>)
 8013eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eec:	4694      	mov	ip, r2
 8013eee:	4463      	add	r3, ip
 8013ef0:	001f      	movs	r7, r3
 8013ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ef6:	0030      	movs	r0, r6
 8013ef8:	0039      	movs	r1, r7
 8013efa:	920c      	str	r2, [sp, #48]	; 0x30
 8013efc:	930d      	str	r3, [sp, #52]	; 0x34
 8013efe:	f001 f823 	bl	8014f48 <__ulp>
 8013f02:	0002      	movs	r2, r0
 8013f04:	000b      	movs	r3, r1
 8013f06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013f08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f0a:	f7ed fea7 	bl	8001c5c <__aeabi_dmul>
 8013f0e:	0032      	movs	r2, r6
 8013f10:	003b      	movs	r3, r7
 8013f12:	f7ec ff7d 	bl	8000e10 <__aeabi_dadd>
 8013f16:	4a77      	ldr	r2, [pc, #476]	; (80140f4 <_strtod_l+0xc1c>)
 8013f18:	4b79      	ldr	r3, [pc, #484]	; (8014100 <_strtod_l+0xc28>)
 8013f1a:	0006      	movs	r6, r0
 8013f1c:	400a      	ands	r2, r1
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d964      	bls.n	8013fec <_strtod_l+0xb14>
 8013f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f24:	4a77      	ldr	r2, [pc, #476]	; (8014104 <_strtod_l+0xc2c>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d103      	bne.n	8013f32 <_strtod_l+0xa5a>
 8013f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	d100      	bne.n	8013f32 <_strtod_l+0xa5a>
 8013f30:	e508      	b.n	8013944 <_strtod_l+0x46c>
 8013f32:	2601      	movs	r6, #1
 8013f34:	4f73      	ldr	r7, [pc, #460]	; (8014104 <_strtod_l+0xc2c>)
 8013f36:	4276      	negs	r6, r6
 8013f38:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f3a:	9804      	ldr	r0, [sp, #16]
 8013f3c:	f000 fd6b 	bl	8014a16 <_Bfree>
 8013f40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f42:	9804      	ldr	r0, [sp, #16]
 8013f44:	f000 fd67 	bl	8014a16 <_Bfree>
 8013f48:	9905      	ldr	r1, [sp, #20]
 8013f4a:	9804      	ldr	r0, [sp, #16]
 8013f4c:	f000 fd63 	bl	8014a16 <_Bfree>
 8013f50:	0021      	movs	r1, r4
 8013f52:	9804      	ldr	r0, [sp, #16]
 8013f54:	f000 fd5f 	bl	8014a16 <_Bfree>
 8013f58:	e5f4      	b.n	8013b44 <_strtod_l+0x66c>
 8013f5a:	2e00      	cmp	r6, #0
 8013f5c:	d11e      	bne.n	8013f9c <_strtod_l+0xac4>
 8013f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f60:	031b      	lsls	r3, r3, #12
 8013f62:	d121      	bne.n	8013fa8 <_strtod_l+0xad0>
 8013f64:	9808      	ldr	r0, [sp, #32]
 8013f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f68:	2200      	movs	r2, #0
 8013f6a:	4b61      	ldr	r3, [pc, #388]	; (80140f0 <_strtod_l+0xc18>)
 8013f6c:	f7ec fa72 	bl	8000454 <__aeabi_dcmplt>
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d11f      	bne.n	8013fb4 <_strtod_l+0xadc>
 8013f74:	9808      	ldr	r0, [sp, #32]
 8013f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f78:	2200      	movs	r2, #0
 8013f7a:	4b63      	ldr	r3, [pc, #396]	; (8014108 <_strtod_l+0xc30>)
 8013f7c:	f7ed fe6e 	bl	8001c5c <__aeabi_dmul>
 8013f80:	0005      	movs	r5, r0
 8013f82:	9108      	str	r1, [sp, #32]
 8013f84:	2280      	movs	r2, #128	; 0x80
 8013f86:	0612      	lsls	r2, r2, #24
 8013f88:	4694      	mov	ip, r2
 8013f8a:	9b08      	ldr	r3, [sp, #32]
 8013f8c:	951e      	str	r5, [sp, #120]	; 0x78
 8013f8e:	4463      	add	r3, ip
 8013f90:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f96:	9210      	str	r2, [sp, #64]	; 0x40
 8013f98:	9311      	str	r3, [sp, #68]	; 0x44
 8013f9a:	e798      	b.n	8013ece <_strtod_l+0x9f6>
 8013f9c:	2e01      	cmp	r6, #1
 8013f9e:	d103      	bne.n	8013fa8 <_strtod_l+0xad0>
 8013fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d100      	bne.n	8013fa8 <_strtod_l+0xad0>
 8013fa6:	e562      	b.n	8013a6e <_strtod_l+0x596>
 8013fa8:	2200      	movs	r2, #0
 8013faa:	4b58      	ldr	r3, [pc, #352]	; (801410c <_strtod_l+0xc34>)
 8013fac:	2500      	movs	r5, #0
 8013fae:	9210      	str	r2, [sp, #64]	; 0x40
 8013fb0:	9311      	str	r3, [sp, #68]	; 0x44
 8013fb2:	e78a      	b.n	8013eca <_strtod_l+0x9f2>
 8013fb4:	4b54      	ldr	r3, [pc, #336]	; (8014108 <_strtod_l+0xc30>)
 8013fb6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013fb8:	9308      	str	r3, [sp, #32]
 8013fba:	e7e3      	b.n	8013f84 <_strtod_l+0xaac>
 8013fbc:	4b52      	ldr	r3, [pc, #328]	; (8014108 <_strtod_l+0xc30>)
 8013fbe:	9808      	ldr	r0, [sp, #32]
 8013fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f7ed fe4a 	bl	8001c5c <__aeabi_dmul>
 8013fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fca:	0005      	movs	r5, r0
 8013fcc:	9108      	str	r1, [sp, #32]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d107      	bne.n	8013fe2 <_strtod_l+0xb0a>
 8013fd2:	2380      	movs	r3, #128	; 0x80
 8013fd4:	061b      	lsls	r3, r3, #24
 8013fd6:	18cb      	adds	r3, r1, r3
 8013fd8:	9016      	str	r0, [sp, #88]	; 0x58
 8013fda:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013fde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fe0:	e7d9      	b.n	8013f96 <_strtod_l+0xabe>
 8013fe2:	0002      	movs	r2, r0
 8013fe4:	9b08      	ldr	r3, [sp, #32]
 8013fe6:	9216      	str	r2, [sp, #88]	; 0x58
 8013fe8:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fea:	e7f7      	b.n	8013fdc <_strtod_l+0xb04>
 8013fec:	23d4      	movs	r3, #212	; 0xd4
 8013fee:	049b      	lsls	r3, r3, #18
 8013ff0:	18cf      	adds	r7, r1, r3
 8013ff2:	9b06      	ldr	r3, [sp, #24]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d19f      	bne.n	8013f38 <_strtod_l+0xa60>
 8013ff8:	4b3e      	ldr	r3, [pc, #248]	; (80140f4 <_strtod_l+0xc1c>)
 8013ffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ffc:	970c      	str	r7, [sp, #48]	; 0x30
 8013ffe:	403b      	ands	r3, r7
 8014000:	429a      	cmp	r2, r3
 8014002:	d199      	bne.n	8013f38 <_strtod_l+0xa60>
 8014004:	9908      	ldr	r1, [sp, #32]
 8014006:	0028      	movs	r0, r5
 8014008:	f7ee fbe2 	bl	80027d0 <__aeabi_d2iz>
 801400c:	f7ee fc16 	bl	800283c <__aeabi_i2d>
 8014010:	000b      	movs	r3, r1
 8014012:	0002      	movs	r2, r0
 8014014:	9908      	ldr	r1, [sp, #32]
 8014016:	0028      	movs	r0, r5
 8014018:	f7ee f892 	bl	8002140 <__aeabi_dsub>
 801401c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801401e:	9008      	str	r0, [sp, #32]
 8014020:	9109      	str	r1, [sp, #36]	; 0x24
 8014022:	2b00      	cmp	r3, #0
 8014024:	d104      	bne.n	8014030 <_strtod_l+0xb58>
 8014026:	2e00      	cmp	r6, #0
 8014028:	d102      	bne.n	8014030 <_strtod_l+0xb58>
 801402a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801402c:	031b      	lsls	r3, r3, #12
 801402e:	d058      	beq.n	80140e2 <_strtod_l+0xc0a>
 8014030:	9808      	ldr	r0, [sp, #32]
 8014032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014034:	4a36      	ldr	r2, [pc, #216]	; (8014110 <_strtod_l+0xc38>)
 8014036:	4b37      	ldr	r3, [pc, #220]	; (8014114 <_strtod_l+0xc3c>)
 8014038:	f7ec fa0c 	bl	8000454 <__aeabi_dcmplt>
 801403c:	2800      	cmp	r0, #0
 801403e:	d000      	beq.n	8014042 <_strtod_l+0xb6a>
 8014040:	e489      	b.n	8013956 <_strtod_l+0x47e>
 8014042:	9808      	ldr	r0, [sp, #32]
 8014044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014046:	4a34      	ldr	r2, [pc, #208]	; (8014118 <_strtod_l+0xc40>)
 8014048:	4b2f      	ldr	r3, [pc, #188]	; (8014108 <_strtod_l+0xc30>)
 801404a:	f7ec fa17 	bl	800047c <__aeabi_dcmpgt>
 801404e:	2800      	cmp	r0, #0
 8014050:	d100      	bne.n	8014054 <_strtod_l+0xb7c>
 8014052:	e771      	b.n	8013f38 <_strtod_l+0xa60>
 8014054:	e47f      	b.n	8013956 <_strtod_l+0x47e>
 8014056:	9b06      	ldr	r3, [sp, #24]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d02a      	beq.n	80140b2 <_strtod_l+0xbda>
 801405c:	23d4      	movs	r3, #212	; 0xd4
 801405e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014060:	04db      	lsls	r3, r3, #19
 8014062:	429a      	cmp	r2, r3
 8014064:	d825      	bhi.n	80140b2 <_strtod_l+0xbda>
 8014066:	4a2d      	ldr	r2, [pc, #180]	; (801411c <_strtod_l+0xc44>)
 8014068:	4b2d      	ldr	r3, [pc, #180]	; (8014120 <_strtod_l+0xc48>)
 801406a:	0028      	movs	r0, r5
 801406c:	9908      	ldr	r1, [sp, #32]
 801406e:	f7ec f9fb 	bl	8000468 <__aeabi_dcmple>
 8014072:	2800      	cmp	r0, #0
 8014074:	d016      	beq.n	80140a4 <_strtod_l+0xbcc>
 8014076:	0028      	movs	r0, r5
 8014078:	9908      	ldr	r1, [sp, #32]
 801407a:	f7ec fa8f 	bl	800059c <__aeabi_d2uiz>
 801407e:	2800      	cmp	r0, #0
 8014080:	d100      	bne.n	8014084 <_strtod_l+0xbac>
 8014082:	3001      	adds	r0, #1
 8014084:	f7ee fc14 	bl	80028b0 <__aeabi_ui2d>
 8014088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801408a:	0005      	movs	r5, r0
 801408c:	9108      	str	r1, [sp, #32]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d122      	bne.n	80140d8 <_strtod_l+0xc00>
 8014092:	2380      	movs	r3, #128	; 0x80
 8014094:	061b      	lsls	r3, r3, #24
 8014096:	18cb      	adds	r3, r1, r3
 8014098:	9018      	str	r0, [sp, #96]	; 0x60
 801409a:	9319      	str	r3, [sp, #100]	; 0x64
 801409c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801409e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80140a0:	9210      	str	r2, [sp, #64]	; 0x40
 80140a2:	9311      	str	r3, [sp, #68]	; 0x44
 80140a4:	22d6      	movs	r2, #214	; 0xd6
 80140a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140a8:	04d2      	lsls	r2, r2, #19
 80140aa:	189b      	adds	r3, r3, r2
 80140ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80140ae:	1a9b      	subs	r3, r3, r2
 80140b0:	9311      	str	r3, [sp, #68]	; 0x44
 80140b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80140b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80140b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80140b8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80140ba:	f000 ff45 	bl	8014f48 <__ulp>
 80140be:	0002      	movs	r2, r0
 80140c0:	000b      	movs	r3, r1
 80140c2:	0030      	movs	r0, r6
 80140c4:	0039      	movs	r1, r7
 80140c6:	f7ed fdc9 	bl	8001c5c <__aeabi_dmul>
 80140ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140ce:	f7ec fe9f 	bl	8000e10 <__aeabi_dadd>
 80140d2:	0006      	movs	r6, r0
 80140d4:	000f      	movs	r7, r1
 80140d6:	e78c      	b.n	8013ff2 <_strtod_l+0xb1a>
 80140d8:	0002      	movs	r2, r0
 80140da:	9b08      	ldr	r3, [sp, #32]
 80140dc:	9218      	str	r2, [sp, #96]	; 0x60
 80140de:	9319      	str	r3, [sp, #100]	; 0x64
 80140e0:	e7dc      	b.n	801409c <_strtod_l+0xbc4>
 80140e2:	4a0b      	ldr	r2, [pc, #44]	; (8014110 <_strtod_l+0xc38>)
 80140e4:	4b0f      	ldr	r3, [pc, #60]	; (8014124 <_strtod_l+0xc4c>)
 80140e6:	9808      	ldr	r0, [sp, #32]
 80140e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140ea:	f7ec f9b3 	bl	8000454 <__aeabi_dcmplt>
 80140ee:	e7ae      	b.n	801404e <_strtod_l+0xb76>
 80140f0:	3ff00000 	.word	0x3ff00000
 80140f4:	7ff00000 	.word	0x7ff00000
 80140f8:	7fe00000 	.word	0x7fe00000
 80140fc:	fcb00000 	.word	0xfcb00000
 8014100:	7c9fffff 	.word	0x7c9fffff
 8014104:	7fefffff 	.word	0x7fefffff
 8014108:	3fe00000 	.word	0x3fe00000
 801410c:	bff00000 	.word	0xbff00000
 8014110:	94a03595 	.word	0x94a03595
 8014114:	3fdfffff 	.word	0x3fdfffff
 8014118:	35afe535 	.word	0x35afe535
 801411c:	ffc00000 	.word	0xffc00000
 8014120:	41dfffff 	.word	0x41dfffff
 8014124:	3fcfffff 	.word	0x3fcfffff

08014128 <strtod>:
 8014128:	4b06      	ldr	r3, [pc, #24]	; (8014144 <strtod+0x1c>)
 801412a:	b510      	push	{r4, lr}
 801412c:	0004      	movs	r4, r0
 801412e:	6818      	ldr	r0, [r3, #0]
 8014130:	000a      	movs	r2, r1
 8014132:	6a03      	ldr	r3, [r0, #32]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d100      	bne.n	801413a <strtod+0x12>
 8014138:	4b03      	ldr	r3, [pc, #12]	; (8014148 <strtod+0x20>)
 801413a:	0021      	movs	r1, r4
 801413c:	f7ff f9cc 	bl	80134d8 <_strtod_l>
 8014140:	bd10      	pop	{r4, pc}
 8014142:	46c0      	nop			; (mov r8, r8)
 8014144:	200000ac 	.word	0x200000ac
 8014148:	20000110 	.word	0x20000110

0801414c <strtok>:
 801414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414e:	4b12      	ldr	r3, [pc, #72]	; (8014198 <strtok+0x4c>)
 8014150:	0006      	movs	r6, r0
 8014152:	681d      	ldr	r5, [r3, #0]
 8014154:	000f      	movs	r7, r1
 8014156:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8014158:	2c00      	cmp	r4, #0
 801415a:	d116      	bne.n	801418a <strtok+0x3e>
 801415c:	2050      	movs	r0, #80	; 0x50
 801415e:	f7fe fffd 	bl	801315c <malloc>
 8014162:	65a8      	str	r0, [r5, #88]	; 0x58
 8014164:	6004      	str	r4, [r0, #0]
 8014166:	6044      	str	r4, [r0, #4]
 8014168:	6084      	str	r4, [r0, #8]
 801416a:	60c4      	str	r4, [r0, #12]
 801416c:	6104      	str	r4, [r0, #16]
 801416e:	6144      	str	r4, [r0, #20]
 8014170:	6184      	str	r4, [r0, #24]
 8014172:	6284      	str	r4, [r0, #40]	; 0x28
 8014174:	62c4      	str	r4, [r0, #44]	; 0x2c
 8014176:	6304      	str	r4, [r0, #48]	; 0x30
 8014178:	6344      	str	r4, [r0, #52]	; 0x34
 801417a:	6384      	str	r4, [r0, #56]	; 0x38
 801417c:	63c4      	str	r4, [r0, #60]	; 0x3c
 801417e:	6404      	str	r4, [r0, #64]	; 0x40
 8014180:	6444      	str	r4, [r0, #68]	; 0x44
 8014182:	6484      	str	r4, [r0, #72]	; 0x48
 8014184:	64c4      	str	r4, [r0, #76]	; 0x4c
 8014186:	7704      	strb	r4, [r0, #28]
 8014188:	6244      	str	r4, [r0, #36]	; 0x24
 801418a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801418c:	0039      	movs	r1, r7
 801418e:	0030      	movs	r0, r6
 8014190:	2301      	movs	r3, #1
 8014192:	f000 f803 	bl	801419c <__strtok_r>
 8014196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014198:	200000ac 	.word	0x200000ac

0801419c <__strtok_r>:
 801419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801419e:	2800      	cmp	r0, #0
 80141a0:	d104      	bne.n	80141ac <__strtok_r+0x10>
 80141a2:	6810      	ldr	r0, [r2, #0]
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d101      	bne.n	80141ac <__strtok_r+0x10>
 80141a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141aa:	0020      	movs	r0, r4
 80141ac:	000e      	movs	r6, r1
 80141ae:	7805      	ldrb	r5, [r0, #0]
 80141b0:	1c44      	adds	r4, r0, #1
 80141b2:	7837      	ldrb	r7, [r6, #0]
 80141b4:	2f00      	cmp	r7, #0
 80141b6:	d104      	bne.n	80141c2 <__strtok_r+0x26>
 80141b8:	2d00      	cmp	r5, #0
 80141ba:	d110      	bne.n	80141de <__strtok_r+0x42>
 80141bc:	6015      	str	r5, [r2, #0]
 80141be:	0028      	movs	r0, r5
 80141c0:	e7f2      	b.n	80141a8 <__strtok_r+0xc>
 80141c2:	3601      	adds	r6, #1
 80141c4:	42bd      	cmp	r5, r7
 80141c6:	d1f4      	bne.n	80141b2 <__strtok_r+0x16>
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1ee      	bne.n	80141aa <__strtok_r+0xe>
 80141cc:	6014      	str	r4, [r2, #0]
 80141ce:	7003      	strb	r3, [r0, #0]
 80141d0:	e7ea      	b.n	80141a8 <__strtok_r+0xc>
 80141d2:	0033      	movs	r3, r6
 80141d4:	e00d      	b.n	80141f2 <__strtok_r+0x56>
 80141d6:	3501      	adds	r5, #1
 80141d8:	2f00      	cmp	r7, #0
 80141da:	d103      	bne.n	80141e4 <__strtok_r+0x48>
 80141dc:	001c      	movs	r4, r3
 80141de:	000d      	movs	r5, r1
 80141e0:	7826      	ldrb	r6, [r4, #0]
 80141e2:	1c63      	adds	r3, r4, #1
 80141e4:	782f      	ldrb	r7, [r5, #0]
 80141e6:	42be      	cmp	r6, r7
 80141e8:	d1f5      	bne.n	80141d6 <__strtok_r+0x3a>
 80141ea:	2e00      	cmp	r6, #0
 80141ec:	d0f1      	beq.n	80141d2 <__strtok_r+0x36>
 80141ee:	2100      	movs	r1, #0
 80141f0:	7021      	strb	r1, [r4, #0]
 80141f2:	6013      	str	r3, [r2, #0]
 80141f4:	e7d8      	b.n	80141a8 <__strtok_r+0xc>
	...

080141f8 <_strtol_l.isra.0>:
 80141f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141fa:	001f      	movs	r7, r3
 80141fc:	000e      	movs	r6, r1
 80141fe:	b087      	sub	sp, #28
 8014200:	9005      	str	r0, [sp, #20]
 8014202:	9101      	str	r1, [sp, #4]
 8014204:	9202      	str	r2, [sp, #8]
 8014206:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014208:	7834      	ldrb	r4, [r6, #0]
 801420a:	f7fe ff95 	bl	8013138 <__locale_ctype_ptr_l>
 801420e:	2208      	movs	r2, #8
 8014210:	1900      	adds	r0, r0, r4
 8014212:	7843      	ldrb	r3, [r0, #1]
 8014214:	1c75      	adds	r5, r6, #1
 8014216:	4013      	ands	r3, r2
 8014218:	d136      	bne.n	8014288 <_strtol_l.isra.0+0x90>
 801421a:	2c2d      	cmp	r4, #45	; 0x2d
 801421c:	d136      	bne.n	801428c <_strtol_l.isra.0+0x94>
 801421e:	1cb5      	adds	r5, r6, #2
 8014220:	7874      	ldrb	r4, [r6, #1]
 8014222:	2601      	movs	r6, #1
 8014224:	2f00      	cmp	r7, #0
 8014226:	d062      	beq.n	80142ee <_strtol_l.isra.0+0xf6>
 8014228:	2f10      	cmp	r7, #16
 801422a:	d109      	bne.n	8014240 <_strtol_l.isra.0+0x48>
 801422c:	2c30      	cmp	r4, #48	; 0x30
 801422e:	d107      	bne.n	8014240 <_strtol_l.isra.0+0x48>
 8014230:	2220      	movs	r2, #32
 8014232:	782b      	ldrb	r3, [r5, #0]
 8014234:	4393      	bics	r3, r2
 8014236:	2b58      	cmp	r3, #88	; 0x58
 8014238:	d154      	bne.n	80142e4 <_strtol_l.isra.0+0xec>
 801423a:	2710      	movs	r7, #16
 801423c:	786c      	ldrb	r4, [r5, #1]
 801423e:	3502      	adds	r5, #2
 8014240:	4b2d      	ldr	r3, [pc, #180]	; (80142f8 <_strtol_l.isra.0+0x100>)
 8014242:	0039      	movs	r1, r7
 8014244:	18f3      	adds	r3, r6, r3
 8014246:	0018      	movs	r0, r3
 8014248:	9303      	str	r3, [sp, #12]
 801424a:	f7eb fffd 	bl	8000248 <__aeabi_uidivmod>
 801424e:	9104      	str	r1, [sp, #16]
 8014250:	2101      	movs	r1, #1
 8014252:	2300      	movs	r3, #0
 8014254:	4249      	negs	r1, r1
 8014256:	0002      	movs	r2, r0
 8014258:	468c      	mov	ip, r1
 801425a:	0018      	movs	r0, r3
 801425c:	0021      	movs	r1, r4
 801425e:	3930      	subs	r1, #48	; 0x30
 8014260:	2909      	cmp	r1, #9
 8014262:	d81a      	bhi.n	801429a <_strtol_l.isra.0+0xa2>
 8014264:	000c      	movs	r4, r1
 8014266:	42a7      	cmp	r7, r4
 8014268:	dd23      	ble.n	80142b2 <_strtol_l.isra.0+0xba>
 801426a:	1c59      	adds	r1, r3, #1
 801426c:	d009      	beq.n	8014282 <_strtol_l.isra.0+0x8a>
 801426e:	4663      	mov	r3, ip
 8014270:	4282      	cmp	r2, r0
 8014272:	d306      	bcc.n	8014282 <_strtol_l.isra.0+0x8a>
 8014274:	d102      	bne.n	801427c <_strtol_l.isra.0+0x84>
 8014276:	9904      	ldr	r1, [sp, #16]
 8014278:	42a1      	cmp	r1, r4
 801427a:	db02      	blt.n	8014282 <_strtol_l.isra.0+0x8a>
 801427c:	2301      	movs	r3, #1
 801427e:	4378      	muls	r0, r7
 8014280:	1820      	adds	r0, r4, r0
 8014282:	782c      	ldrb	r4, [r5, #0]
 8014284:	3501      	adds	r5, #1
 8014286:	e7e9      	b.n	801425c <_strtol_l.isra.0+0x64>
 8014288:	002e      	movs	r6, r5
 801428a:	e7bc      	b.n	8014206 <_strtol_l.isra.0+0xe>
 801428c:	2c2b      	cmp	r4, #43	; 0x2b
 801428e:	d001      	beq.n	8014294 <_strtol_l.isra.0+0x9c>
 8014290:	001e      	movs	r6, r3
 8014292:	e7c7      	b.n	8014224 <_strtol_l.isra.0+0x2c>
 8014294:	1cb5      	adds	r5, r6, #2
 8014296:	7874      	ldrb	r4, [r6, #1]
 8014298:	e7fa      	b.n	8014290 <_strtol_l.isra.0+0x98>
 801429a:	0021      	movs	r1, r4
 801429c:	3941      	subs	r1, #65	; 0x41
 801429e:	2919      	cmp	r1, #25
 80142a0:	d801      	bhi.n	80142a6 <_strtol_l.isra.0+0xae>
 80142a2:	3c37      	subs	r4, #55	; 0x37
 80142a4:	e7df      	b.n	8014266 <_strtol_l.isra.0+0x6e>
 80142a6:	0021      	movs	r1, r4
 80142a8:	3961      	subs	r1, #97	; 0x61
 80142aa:	2919      	cmp	r1, #25
 80142ac:	d801      	bhi.n	80142b2 <_strtol_l.isra.0+0xba>
 80142ae:	3c57      	subs	r4, #87	; 0x57
 80142b0:	e7d9      	b.n	8014266 <_strtol_l.isra.0+0x6e>
 80142b2:	1c5a      	adds	r2, r3, #1
 80142b4:	d108      	bne.n	80142c8 <_strtol_l.isra.0+0xd0>
 80142b6:	9a05      	ldr	r2, [sp, #20]
 80142b8:	3323      	adds	r3, #35	; 0x23
 80142ba:	6013      	str	r3, [r2, #0]
 80142bc:	9b02      	ldr	r3, [sp, #8]
 80142be:	9803      	ldr	r0, [sp, #12]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d109      	bne.n	80142d8 <_strtol_l.isra.0+0xe0>
 80142c4:	b007      	add	sp, #28
 80142c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c8:	2e00      	cmp	r6, #0
 80142ca:	d000      	beq.n	80142ce <_strtol_l.isra.0+0xd6>
 80142cc:	4240      	negs	r0, r0
 80142ce:	9a02      	ldr	r2, [sp, #8]
 80142d0:	2a00      	cmp	r2, #0
 80142d2:	d0f7      	beq.n	80142c4 <_strtol_l.isra.0+0xcc>
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <_strtol_l.isra.0+0xe4>
 80142d8:	1e6b      	subs	r3, r5, #1
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	9b02      	ldr	r3, [sp, #8]
 80142de:	9a01      	ldr	r2, [sp, #4]
 80142e0:	601a      	str	r2, [r3, #0]
 80142e2:	e7ef      	b.n	80142c4 <_strtol_l.isra.0+0xcc>
 80142e4:	2430      	movs	r4, #48	; 0x30
 80142e6:	2f00      	cmp	r7, #0
 80142e8:	d1aa      	bne.n	8014240 <_strtol_l.isra.0+0x48>
 80142ea:	2708      	movs	r7, #8
 80142ec:	e7a8      	b.n	8014240 <_strtol_l.isra.0+0x48>
 80142ee:	2c30      	cmp	r4, #48	; 0x30
 80142f0:	d09e      	beq.n	8014230 <_strtol_l.isra.0+0x38>
 80142f2:	270a      	movs	r7, #10
 80142f4:	e7a4      	b.n	8014240 <_strtol_l.isra.0+0x48>
 80142f6:	46c0      	nop			; (mov r8, r8)
 80142f8:	7fffffff 	.word	0x7fffffff

080142fc <strtol>:
 80142fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142fe:	0013      	movs	r3, r2
 8014300:	4a06      	ldr	r2, [pc, #24]	; (801431c <strtol+0x20>)
 8014302:	0005      	movs	r5, r0
 8014304:	6810      	ldr	r0, [r2, #0]
 8014306:	6a04      	ldr	r4, [r0, #32]
 8014308:	2c00      	cmp	r4, #0
 801430a:	d100      	bne.n	801430e <strtol+0x12>
 801430c:	4c04      	ldr	r4, [pc, #16]	; (8014320 <strtol+0x24>)
 801430e:	000a      	movs	r2, r1
 8014310:	9400      	str	r4, [sp, #0]
 8014312:	0029      	movs	r1, r5
 8014314:	f7ff ff70 	bl	80141f8 <_strtol_l.isra.0>
 8014318:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801431a:	46c0      	nop			; (mov r8, r8)
 801431c:	200000ac 	.word	0x200000ac
 8014320:	20000110 	.word	0x20000110

08014324 <__ascii_wctomb>:
 8014324:	1e0b      	subs	r3, r1, #0
 8014326:	d004      	beq.n	8014332 <__ascii_wctomb+0xe>
 8014328:	2aff      	cmp	r2, #255	; 0xff
 801432a:	d904      	bls.n	8014336 <__ascii_wctomb+0x12>
 801432c:	238a      	movs	r3, #138	; 0x8a
 801432e:	6003      	str	r3, [r0, #0]
 8014330:	3b8b      	subs	r3, #139	; 0x8b
 8014332:	0018      	movs	r0, r3
 8014334:	4770      	bx	lr
 8014336:	700a      	strb	r2, [r1, #0]
 8014338:	2301      	movs	r3, #1
 801433a:	e7fa      	b.n	8014332 <__ascii_wctomb+0xe>

0801433c <rshift>:
 801433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801433e:	0004      	movs	r4, r0
 8014340:	6905      	ldr	r5, [r0, #16]
 8014342:	3414      	adds	r4, #20
 8014344:	114b      	asrs	r3, r1, #5
 8014346:	0026      	movs	r6, r4
 8014348:	429d      	cmp	r5, r3
 801434a:	dd14      	ble.n	8014376 <rshift+0x3a>
 801434c:	221f      	movs	r2, #31
 801434e:	00ad      	lsls	r5, r5, #2
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	4011      	ands	r1, r2
 8014354:	1965      	adds	r5, r4, r5
 8014356:	18e3      	adds	r3, r4, r3
 8014358:	0022      	movs	r2, r4
 801435a:	2900      	cmp	r1, #0
 801435c:	d01e      	beq.n	801439c <rshift+0x60>
 801435e:	cb04      	ldmia	r3!, {r2}
 8014360:	2720      	movs	r7, #32
 8014362:	40ca      	lsrs	r2, r1
 8014364:	46a4      	mov	ip, r4
 8014366:	1a7f      	subs	r7, r7, r1
 8014368:	4666      	mov	r6, ip
 801436a:	429d      	cmp	r5, r3
 801436c:	d80b      	bhi.n	8014386 <rshift+0x4a>
 801436e:	6032      	str	r2, [r6, #0]
 8014370:	2a00      	cmp	r2, #0
 8014372:	d000      	beq.n	8014376 <rshift+0x3a>
 8014374:	3604      	adds	r6, #4
 8014376:	1b33      	subs	r3, r6, r4
 8014378:	109b      	asrs	r3, r3, #2
 801437a:	6103      	str	r3, [r0, #16]
 801437c:	42a6      	cmp	r6, r4
 801437e:	d101      	bne.n	8014384 <rshift+0x48>
 8014380:	2300      	movs	r3, #0
 8014382:	6143      	str	r3, [r0, #20]
 8014384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014386:	681e      	ldr	r6, [r3, #0]
 8014388:	40be      	lsls	r6, r7
 801438a:	4332      	orrs	r2, r6
 801438c:	4666      	mov	r6, ip
 801438e:	c604      	stmia	r6!, {r2}
 8014390:	cb04      	ldmia	r3!, {r2}
 8014392:	46b4      	mov	ip, r6
 8014394:	40ca      	lsrs	r2, r1
 8014396:	e7e7      	b.n	8014368 <rshift+0x2c>
 8014398:	cb02      	ldmia	r3!, {r1}
 801439a:	c202      	stmia	r2!, {r1}
 801439c:	0016      	movs	r6, r2
 801439e:	429d      	cmp	r5, r3
 80143a0:	d8fa      	bhi.n	8014398 <rshift+0x5c>
 80143a2:	e7e8      	b.n	8014376 <rshift+0x3a>

080143a4 <__hexdig_fun>:
 80143a4:	0003      	movs	r3, r0
 80143a6:	3b30      	subs	r3, #48	; 0x30
 80143a8:	2b09      	cmp	r3, #9
 80143aa:	d803      	bhi.n	80143b4 <__hexdig_fun+0x10>
 80143ac:	3820      	subs	r0, #32
 80143ae:	b2c3      	uxtb	r3, r0
 80143b0:	0018      	movs	r0, r3
 80143b2:	4770      	bx	lr
 80143b4:	0003      	movs	r3, r0
 80143b6:	3b61      	subs	r3, #97	; 0x61
 80143b8:	2b05      	cmp	r3, #5
 80143ba:	d801      	bhi.n	80143c0 <__hexdig_fun+0x1c>
 80143bc:	3847      	subs	r0, #71	; 0x47
 80143be:	e7f6      	b.n	80143ae <__hexdig_fun+0xa>
 80143c0:	0002      	movs	r2, r0
 80143c2:	3a41      	subs	r2, #65	; 0x41
 80143c4:	2300      	movs	r3, #0
 80143c6:	2a05      	cmp	r2, #5
 80143c8:	d8f2      	bhi.n	80143b0 <__hexdig_fun+0xc>
 80143ca:	3827      	subs	r0, #39	; 0x27
 80143cc:	e7ef      	b.n	80143ae <__hexdig_fun+0xa>

080143ce <__gethex>:
 80143ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143d0:	b08d      	sub	sp, #52	; 0x34
 80143d2:	9005      	str	r0, [sp, #20]
 80143d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80143d6:	9109      	str	r1, [sp, #36]	; 0x24
 80143d8:	9202      	str	r2, [sp, #8]
 80143da:	930a      	str	r3, [sp, #40]	; 0x28
 80143dc:	f000 fadf 	bl	801499e <__localeconv_l>
 80143e0:	6803      	ldr	r3, [r0, #0]
 80143e2:	0018      	movs	r0, r3
 80143e4:	9307      	str	r3, [sp, #28]
 80143e6:	f7eb fe97 	bl	8000118 <strlen>
 80143ea:	2202      	movs	r2, #2
 80143ec:	9b07      	ldr	r3, [sp, #28]
 80143ee:	4252      	negs	r2, r2
 80143f0:	181b      	adds	r3, r3, r0
 80143f2:	3b01      	subs	r3, #1
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	9004      	str	r0, [sp, #16]
 80143f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80143fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143fc:	6819      	ldr	r1, [r3, #0]
 80143fe:	1c8b      	adds	r3, r1, #2
 8014400:	1a52      	subs	r2, r2, r1
 8014402:	18d1      	adds	r1, r2, r3
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	9108      	str	r1, [sp, #32]
 8014408:	9901      	ldr	r1, [sp, #4]
 801440a:	3301      	adds	r3, #1
 801440c:	7808      	ldrb	r0, [r1, #0]
 801440e:	2830      	cmp	r0, #48	; 0x30
 8014410:	d0f7      	beq.n	8014402 <__gethex+0x34>
 8014412:	f7ff ffc7 	bl	80143a4 <__hexdig_fun>
 8014416:	1e07      	subs	r7, r0, #0
 8014418:	d000      	beq.n	801441c <__gethex+0x4e>
 801441a:	e06f      	b.n	80144fc <__gethex+0x12e>
 801441c:	9a04      	ldr	r2, [sp, #16]
 801441e:	9907      	ldr	r1, [sp, #28]
 8014420:	9801      	ldr	r0, [sp, #4]
 8014422:	f7ff f81b 	bl	801345c <strncmp>
 8014426:	2800      	cmp	r0, #0
 8014428:	d000      	beq.n	801442c <__gethex+0x5e>
 801442a:	e06d      	b.n	8014508 <__gethex+0x13a>
 801442c:	9b01      	ldr	r3, [sp, #4]
 801442e:	9a04      	ldr	r2, [sp, #16]
 8014430:	189c      	adds	r4, r3, r2
 8014432:	7820      	ldrb	r0, [r4, #0]
 8014434:	f7ff ffb6 	bl	80143a4 <__hexdig_fun>
 8014438:	2800      	cmp	r0, #0
 801443a:	d069      	beq.n	8014510 <__gethex+0x142>
 801443c:	9401      	str	r4, [sp, #4]
 801443e:	9b01      	ldr	r3, [sp, #4]
 8014440:	7818      	ldrb	r0, [r3, #0]
 8014442:	2830      	cmp	r0, #48	; 0x30
 8014444:	d009      	beq.n	801445a <__gethex+0x8c>
 8014446:	f7ff ffad 	bl	80143a4 <__hexdig_fun>
 801444a:	4243      	negs	r3, r0
 801444c:	4143      	adcs	r3, r0
 801444e:	9303      	str	r3, [sp, #12]
 8014450:	2301      	movs	r3, #1
 8014452:	0026      	movs	r6, r4
 8014454:	9308      	str	r3, [sp, #32]
 8014456:	9c01      	ldr	r4, [sp, #4]
 8014458:	e004      	b.n	8014464 <__gethex+0x96>
 801445a:	9b01      	ldr	r3, [sp, #4]
 801445c:	3301      	adds	r3, #1
 801445e:	9301      	str	r3, [sp, #4]
 8014460:	e7ed      	b.n	801443e <__gethex+0x70>
 8014462:	3401      	adds	r4, #1
 8014464:	7820      	ldrb	r0, [r4, #0]
 8014466:	f7ff ff9d 	bl	80143a4 <__hexdig_fun>
 801446a:	2800      	cmp	r0, #0
 801446c:	d1f9      	bne.n	8014462 <__gethex+0x94>
 801446e:	9a04      	ldr	r2, [sp, #16]
 8014470:	9907      	ldr	r1, [sp, #28]
 8014472:	0020      	movs	r0, r4
 8014474:	f7fe fff2 	bl	801345c <strncmp>
 8014478:	2800      	cmp	r0, #0
 801447a:	d109      	bne.n	8014490 <__gethex+0xc2>
 801447c:	2e00      	cmp	r6, #0
 801447e:	d10a      	bne.n	8014496 <__gethex+0xc8>
 8014480:	9b04      	ldr	r3, [sp, #16]
 8014482:	18e4      	adds	r4, r4, r3
 8014484:	0026      	movs	r6, r4
 8014486:	7820      	ldrb	r0, [r4, #0]
 8014488:	f7ff ff8c 	bl	80143a4 <__hexdig_fun>
 801448c:	2800      	cmp	r0, #0
 801448e:	d139      	bne.n	8014504 <__gethex+0x136>
 8014490:	2700      	movs	r7, #0
 8014492:	42be      	cmp	r6, r7
 8014494:	d001      	beq.n	801449a <__gethex+0xcc>
 8014496:	1b37      	subs	r7, r6, r4
 8014498:	00bf      	lsls	r7, r7, #2
 801449a:	7823      	ldrb	r3, [r4, #0]
 801449c:	2b50      	cmp	r3, #80	; 0x50
 801449e:	d001      	beq.n	80144a4 <__gethex+0xd6>
 80144a0:	2b70      	cmp	r3, #112	; 0x70
 80144a2:	d142      	bne.n	801452a <__gethex+0x15c>
 80144a4:	7863      	ldrb	r3, [r4, #1]
 80144a6:	2b2b      	cmp	r3, #43	; 0x2b
 80144a8:	d034      	beq.n	8014514 <__gethex+0x146>
 80144aa:	2b2d      	cmp	r3, #45	; 0x2d
 80144ac:	d036      	beq.n	801451c <__gethex+0x14e>
 80144ae:	2300      	movs	r3, #0
 80144b0:	1c66      	adds	r6, r4, #1
 80144b2:	9306      	str	r3, [sp, #24]
 80144b4:	7830      	ldrb	r0, [r6, #0]
 80144b6:	f7ff ff75 	bl	80143a4 <__hexdig_fun>
 80144ba:	1e43      	subs	r3, r0, #1
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	2b18      	cmp	r3, #24
 80144c0:	d833      	bhi.n	801452a <__gethex+0x15c>
 80144c2:	3810      	subs	r0, #16
 80144c4:	0005      	movs	r5, r0
 80144c6:	3601      	adds	r6, #1
 80144c8:	7830      	ldrb	r0, [r6, #0]
 80144ca:	f7ff ff6b 	bl	80143a4 <__hexdig_fun>
 80144ce:	1e43      	subs	r3, r0, #1
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	2b18      	cmp	r3, #24
 80144d4:	d924      	bls.n	8014520 <__gethex+0x152>
 80144d6:	9b06      	ldr	r3, [sp, #24]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d000      	beq.n	80144de <__gethex+0x110>
 80144dc:	426d      	negs	r5, r5
 80144de:	197f      	adds	r7, r7, r5
 80144e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144e2:	601e      	str	r6, [r3, #0]
 80144e4:	9b03      	ldr	r3, [sp, #12]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d021      	beq.n	801452e <__gethex+0x160>
 80144ea:	9b08      	ldr	r3, [sp, #32]
 80144ec:	2606      	movs	r6, #6
 80144ee:	425a      	negs	r2, r3
 80144f0:	4153      	adcs	r3, r2
 80144f2:	425b      	negs	r3, r3
 80144f4:	401e      	ands	r6, r3
 80144f6:	0030      	movs	r0, r6
 80144f8:	b00d      	add	sp, #52	; 0x34
 80144fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144fc:	2300      	movs	r3, #0
 80144fe:	9303      	str	r3, [sp, #12]
 8014500:	001e      	movs	r6, r3
 8014502:	e7a8      	b.n	8014456 <__gethex+0x88>
 8014504:	3401      	adds	r4, #1
 8014506:	e7be      	b.n	8014486 <__gethex+0xb8>
 8014508:	9c01      	ldr	r4, [sp, #4]
 801450a:	2301      	movs	r3, #1
 801450c:	9303      	str	r3, [sp, #12]
 801450e:	e7c4      	b.n	801449a <__gethex+0xcc>
 8014510:	0007      	movs	r7, r0
 8014512:	e7fa      	b.n	801450a <__gethex+0x13c>
 8014514:	2300      	movs	r3, #0
 8014516:	9306      	str	r3, [sp, #24]
 8014518:	1ca6      	adds	r6, r4, #2
 801451a:	e7cb      	b.n	80144b4 <__gethex+0xe6>
 801451c:	2301      	movs	r3, #1
 801451e:	e7fa      	b.n	8014516 <__gethex+0x148>
 8014520:	230a      	movs	r3, #10
 8014522:	435d      	muls	r5, r3
 8014524:	182d      	adds	r5, r5, r0
 8014526:	3d10      	subs	r5, #16
 8014528:	e7cd      	b.n	80144c6 <__gethex+0xf8>
 801452a:	0026      	movs	r6, r4
 801452c:	e7d8      	b.n	80144e0 <__gethex+0x112>
 801452e:	9b01      	ldr	r3, [sp, #4]
 8014530:	9903      	ldr	r1, [sp, #12]
 8014532:	1ae3      	subs	r3, r4, r3
 8014534:	3b01      	subs	r3, #1
 8014536:	2b07      	cmp	r3, #7
 8014538:	dc47      	bgt.n	80145ca <__gethex+0x1fc>
 801453a:	9805      	ldr	r0, [sp, #20]
 801453c:	f000 fa33 	bl	80149a6 <_Balloc>
 8014540:	0003      	movs	r3, r0
 8014542:	3314      	adds	r3, #20
 8014544:	9303      	str	r3, [sp, #12]
 8014546:	9308      	str	r3, [sp, #32]
 8014548:	2300      	movs	r3, #0
 801454a:	0005      	movs	r5, r0
 801454c:	001e      	movs	r6, r3
 801454e:	9306      	str	r3, [sp, #24]
 8014550:	9b01      	ldr	r3, [sp, #4]
 8014552:	42a3      	cmp	r3, r4
 8014554:	d33c      	bcc.n	80145d0 <__gethex+0x202>
 8014556:	9c08      	ldr	r4, [sp, #32]
 8014558:	9b03      	ldr	r3, [sp, #12]
 801455a:	c440      	stmia	r4!, {r6}
 801455c:	1ae4      	subs	r4, r4, r3
 801455e:	10a4      	asrs	r4, r4, #2
 8014560:	612c      	str	r4, [r5, #16]
 8014562:	0030      	movs	r0, r6
 8014564:	f000 faec 	bl	8014b40 <__hi0bits>
 8014568:	9b02      	ldr	r3, [sp, #8]
 801456a:	0164      	lsls	r4, r4, #5
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	1a26      	subs	r6, r4, r0
 8014570:	9301      	str	r3, [sp, #4]
 8014572:	429e      	cmp	r6, r3
 8014574:	dd5f      	ble.n	8014636 <__gethex+0x268>
 8014576:	1af6      	subs	r6, r6, r3
 8014578:	0031      	movs	r1, r6
 801457a:	0028      	movs	r0, r5
 801457c:	f000 fde7 	bl	801514e <__any_on>
 8014580:	1e04      	subs	r4, r0, #0
 8014582:	d00f      	beq.n	80145a4 <__gethex+0x1d6>
 8014584:	2401      	movs	r4, #1
 8014586:	211f      	movs	r1, #31
 8014588:	0020      	movs	r0, r4
 801458a:	1e73      	subs	r3, r6, #1
 801458c:	4019      	ands	r1, r3
 801458e:	4088      	lsls	r0, r1
 8014590:	0001      	movs	r1, r0
 8014592:	115a      	asrs	r2, r3, #5
 8014594:	9803      	ldr	r0, [sp, #12]
 8014596:	0092      	lsls	r2, r2, #2
 8014598:	5812      	ldr	r2, [r2, r0]
 801459a:	420a      	tst	r2, r1
 801459c:	d002      	beq.n	80145a4 <__gethex+0x1d6>
 801459e:	42a3      	cmp	r3, r4
 80145a0:	dc41      	bgt.n	8014626 <__gethex+0x258>
 80145a2:	2402      	movs	r4, #2
 80145a4:	0031      	movs	r1, r6
 80145a6:	0028      	movs	r0, r5
 80145a8:	f7ff fec8 	bl	801433c <rshift>
 80145ac:	19bf      	adds	r7, r7, r6
 80145ae:	9b02      	ldr	r3, [sp, #8]
 80145b0:	689b      	ldr	r3, [r3, #8]
 80145b2:	9304      	str	r3, [sp, #16]
 80145b4:	42bb      	cmp	r3, r7
 80145b6:	da4e      	bge.n	8014656 <__gethex+0x288>
 80145b8:	0029      	movs	r1, r5
 80145ba:	9805      	ldr	r0, [sp, #20]
 80145bc:	f000 fa2b 	bl	8014a16 <_Bfree>
 80145c0:	2300      	movs	r3, #0
 80145c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145c4:	26a3      	movs	r6, #163	; 0xa3
 80145c6:	6013      	str	r3, [r2, #0]
 80145c8:	e795      	b.n	80144f6 <__gethex+0x128>
 80145ca:	3101      	adds	r1, #1
 80145cc:	105b      	asrs	r3, r3, #1
 80145ce:	e7b2      	b.n	8014536 <__gethex+0x168>
 80145d0:	1e63      	subs	r3, r4, #1
 80145d2:	9309      	str	r3, [sp, #36]	; 0x24
 80145d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	4293      	cmp	r3, r2
 80145da:	d015      	beq.n	8014608 <__gethex+0x23a>
 80145dc:	9b06      	ldr	r3, [sp, #24]
 80145de:	2b20      	cmp	r3, #32
 80145e0:	d105      	bne.n	80145ee <__gethex+0x220>
 80145e2:	9b08      	ldr	r3, [sp, #32]
 80145e4:	601e      	str	r6, [r3, #0]
 80145e6:	2600      	movs	r6, #0
 80145e8:	3304      	adds	r3, #4
 80145ea:	9308      	str	r3, [sp, #32]
 80145ec:	9606      	str	r6, [sp, #24]
 80145ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145f0:	7818      	ldrb	r0, [r3, #0]
 80145f2:	f7ff fed7 	bl	80143a4 <__hexdig_fun>
 80145f6:	230f      	movs	r3, #15
 80145f8:	4018      	ands	r0, r3
 80145fa:	9b06      	ldr	r3, [sp, #24]
 80145fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80145fe:	4098      	lsls	r0, r3
 8014600:	3304      	adds	r3, #4
 8014602:	4306      	orrs	r6, r0
 8014604:	9306      	str	r3, [sp, #24]
 8014606:	e7a3      	b.n	8014550 <__gethex+0x182>
 8014608:	2301      	movs	r3, #1
 801460a:	9a04      	ldr	r2, [sp, #16]
 801460c:	1a9c      	subs	r4, r3, r2
 801460e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014610:	191c      	adds	r4, r3, r4
 8014612:	9b01      	ldr	r3, [sp, #4]
 8014614:	429c      	cmp	r4, r3
 8014616:	d3e1      	bcc.n	80145dc <__gethex+0x20e>
 8014618:	9907      	ldr	r1, [sp, #28]
 801461a:	0020      	movs	r0, r4
 801461c:	f7fe ff1e 	bl	801345c <strncmp>
 8014620:	2800      	cmp	r0, #0
 8014622:	d1db      	bne.n	80145dc <__gethex+0x20e>
 8014624:	e794      	b.n	8014550 <__gethex+0x182>
 8014626:	1eb1      	subs	r1, r6, #2
 8014628:	0028      	movs	r0, r5
 801462a:	f000 fd90 	bl	801514e <__any_on>
 801462e:	2800      	cmp	r0, #0
 8014630:	d0b7      	beq.n	80145a2 <__gethex+0x1d4>
 8014632:	2403      	movs	r4, #3
 8014634:	e7b6      	b.n	80145a4 <__gethex+0x1d6>
 8014636:	9b01      	ldr	r3, [sp, #4]
 8014638:	2400      	movs	r4, #0
 801463a:	429e      	cmp	r6, r3
 801463c:	dab7      	bge.n	80145ae <__gethex+0x1e0>
 801463e:	1b9e      	subs	r6, r3, r6
 8014640:	0029      	movs	r1, r5
 8014642:	0032      	movs	r2, r6
 8014644:	9805      	ldr	r0, [sp, #20]
 8014646:	f000 fbaf 	bl	8014da8 <__lshift>
 801464a:	0003      	movs	r3, r0
 801464c:	3314      	adds	r3, #20
 801464e:	0005      	movs	r5, r0
 8014650:	1bbf      	subs	r7, r7, r6
 8014652:	9303      	str	r3, [sp, #12]
 8014654:	e7ab      	b.n	80145ae <__gethex+0x1e0>
 8014656:	9b02      	ldr	r3, [sp, #8]
 8014658:	685e      	ldr	r6, [r3, #4]
 801465a:	42be      	cmp	r6, r7
 801465c:	dd6b      	ble.n	8014736 <__gethex+0x368>
 801465e:	9b01      	ldr	r3, [sp, #4]
 8014660:	1bf6      	subs	r6, r6, r7
 8014662:	42b3      	cmp	r3, r6
 8014664:	dc32      	bgt.n	80146cc <__gethex+0x2fe>
 8014666:	9b02      	ldr	r3, [sp, #8]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	2b02      	cmp	r3, #2
 801466c:	d026      	beq.n	80146bc <__gethex+0x2ee>
 801466e:	2b03      	cmp	r3, #3
 8014670:	d028      	beq.n	80146c4 <__gethex+0x2f6>
 8014672:	2b01      	cmp	r3, #1
 8014674:	d119      	bne.n	80146aa <__gethex+0x2dc>
 8014676:	9b01      	ldr	r3, [sp, #4]
 8014678:	42b3      	cmp	r3, r6
 801467a:	d116      	bne.n	80146aa <__gethex+0x2dc>
 801467c:	2b01      	cmp	r3, #1
 801467e:	dc0d      	bgt.n	801469c <__gethex+0x2ce>
 8014680:	9b02      	ldr	r3, [sp, #8]
 8014682:	2662      	movs	r6, #98	; 0x62
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	9301      	str	r3, [sp, #4]
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801468c:	601a      	str	r2, [r3, #0]
 801468e:	2301      	movs	r3, #1
 8014690:	9a03      	ldr	r2, [sp, #12]
 8014692:	612b      	str	r3, [r5, #16]
 8014694:	6013      	str	r3, [r2, #0]
 8014696:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014698:	601d      	str	r5, [r3, #0]
 801469a:	e72c      	b.n	80144f6 <__gethex+0x128>
 801469c:	9901      	ldr	r1, [sp, #4]
 801469e:	0028      	movs	r0, r5
 80146a0:	3901      	subs	r1, #1
 80146a2:	f000 fd54 	bl	801514e <__any_on>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d1ea      	bne.n	8014680 <__gethex+0x2b2>
 80146aa:	0029      	movs	r1, r5
 80146ac:	9805      	ldr	r0, [sp, #20]
 80146ae:	f000 f9b2 	bl	8014a16 <_Bfree>
 80146b2:	2300      	movs	r3, #0
 80146b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80146b6:	2650      	movs	r6, #80	; 0x50
 80146b8:	6013      	str	r3, [r2, #0]
 80146ba:	e71c      	b.n	80144f6 <__gethex+0x128>
 80146bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d0de      	beq.n	8014680 <__gethex+0x2b2>
 80146c2:	e7f2      	b.n	80146aa <__gethex+0x2dc>
 80146c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d1da      	bne.n	8014680 <__gethex+0x2b2>
 80146ca:	e7ee      	b.n	80146aa <__gethex+0x2dc>
 80146cc:	1e77      	subs	r7, r6, #1
 80146ce:	2c00      	cmp	r4, #0
 80146d0:	d12f      	bne.n	8014732 <__gethex+0x364>
 80146d2:	2f00      	cmp	r7, #0
 80146d4:	d004      	beq.n	80146e0 <__gethex+0x312>
 80146d6:	0039      	movs	r1, r7
 80146d8:	0028      	movs	r0, r5
 80146da:	f000 fd38 	bl	801514e <__any_on>
 80146de:	0004      	movs	r4, r0
 80146e0:	231f      	movs	r3, #31
 80146e2:	117a      	asrs	r2, r7, #5
 80146e4:	401f      	ands	r7, r3
 80146e6:	3b1e      	subs	r3, #30
 80146e8:	40bb      	lsls	r3, r7
 80146ea:	9903      	ldr	r1, [sp, #12]
 80146ec:	0092      	lsls	r2, r2, #2
 80146ee:	5852      	ldr	r2, [r2, r1]
 80146f0:	421a      	tst	r2, r3
 80146f2:	d001      	beq.n	80146f8 <__gethex+0x32a>
 80146f4:	2302      	movs	r3, #2
 80146f6:	431c      	orrs	r4, r3
 80146f8:	9b01      	ldr	r3, [sp, #4]
 80146fa:	0031      	movs	r1, r6
 80146fc:	1b9b      	subs	r3, r3, r6
 80146fe:	2602      	movs	r6, #2
 8014700:	0028      	movs	r0, r5
 8014702:	9301      	str	r3, [sp, #4]
 8014704:	f7ff fe1a 	bl	801433c <rshift>
 8014708:	9b02      	ldr	r3, [sp, #8]
 801470a:	685f      	ldr	r7, [r3, #4]
 801470c:	2c00      	cmp	r4, #0
 801470e:	d040      	beq.n	8014792 <__gethex+0x3c4>
 8014710:	9b02      	ldr	r3, [sp, #8]
 8014712:	68db      	ldr	r3, [r3, #12]
 8014714:	2b02      	cmp	r3, #2
 8014716:	d010      	beq.n	801473a <__gethex+0x36c>
 8014718:	2b03      	cmp	r3, #3
 801471a:	d012      	beq.n	8014742 <__gethex+0x374>
 801471c:	2b01      	cmp	r3, #1
 801471e:	d106      	bne.n	801472e <__gethex+0x360>
 8014720:	07a2      	lsls	r2, r4, #30
 8014722:	d504      	bpl.n	801472e <__gethex+0x360>
 8014724:	9a03      	ldr	r2, [sp, #12]
 8014726:	6812      	ldr	r2, [r2, #0]
 8014728:	4314      	orrs	r4, r2
 801472a:	421c      	tst	r4, r3
 801472c:	d10c      	bne.n	8014748 <__gethex+0x37a>
 801472e:	2310      	movs	r3, #16
 8014730:	e02e      	b.n	8014790 <__gethex+0x3c2>
 8014732:	2401      	movs	r4, #1
 8014734:	e7d4      	b.n	80146e0 <__gethex+0x312>
 8014736:	2601      	movs	r6, #1
 8014738:	e7e8      	b.n	801470c <__gethex+0x33e>
 801473a:	2301      	movs	r3, #1
 801473c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801473e:	1a9b      	subs	r3, r3, r2
 8014740:	9313      	str	r3, [sp, #76]	; 0x4c
 8014742:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014744:	2b00      	cmp	r3, #0
 8014746:	d0f2      	beq.n	801472e <__gethex+0x360>
 8014748:	692c      	ldr	r4, [r5, #16]
 801474a:	00a3      	lsls	r3, r4, #2
 801474c:	9304      	str	r3, [sp, #16]
 801474e:	002b      	movs	r3, r5
 8014750:	00a2      	lsls	r2, r4, #2
 8014752:	3314      	adds	r3, #20
 8014754:	1899      	adds	r1, r3, r2
 8014756:	2200      	movs	r2, #0
 8014758:	4694      	mov	ip, r2
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	1c50      	adds	r0, r2, #1
 801475e:	d01d      	beq.n	801479c <__gethex+0x3ce>
 8014760:	3201      	adds	r2, #1
 8014762:	601a      	str	r2, [r3, #0]
 8014764:	002b      	movs	r3, r5
 8014766:	3314      	adds	r3, #20
 8014768:	2e02      	cmp	r6, #2
 801476a:	d13a      	bne.n	80147e2 <__gethex+0x414>
 801476c:	9a02      	ldr	r2, [sp, #8]
 801476e:	9901      	ldr	r1, [sp, #4]
 8014770:	6812      	ldr	r2, [r2, #0]
 8014772:	3a01      	subs	r2, #1
 8014774:	428a      	cmp	r2, r1
 8014776:	d10a      	bne.n	801478e <__gethex+0x3c0>
 8014778:	114a      	asrs	r2, r1, #5
 801477a:	211f      	movs	r1, #31
 801477c:	9801      	ldr	r0, [sp, #4]
 801477e:	0092      	lsls	r2, r2, #2
 8014780:	4001      	ands	r1, r0
 8014782:	2001      	movs	r0, #1
 8014784:	0004      	movs	r4, r0
 8014786:	408c      	lsls	r4, r1
 8014788:	58d3      	ldr	r3, [r2, r3]
 801478a:	4223      	tst	r3, r4
 801478c:	d148      	bne.n	8014820 <__gethex+0x452>
 801478e:	2320      	movs	r3, #32
 8014790:	431e      	orrs	r6, r3
 8014792:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014794:	601d      	str	r5, [r3, #0]
 8014796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014798:	601f      	str	r7, [r3, #0]
 801479a:	e6ac      	b.n	80144f6 <__gethex+0x128>
 801479c:	4662      	mov	r2, ip
 801479e:	c304      	stmia	r3!, {r2}
 80147a0:	4299      	cmp	r1, r3
 80147a2:	d8da      	bhi.n	801475a <__gethex+0x38c>
 80147a4:	68ab      	ldr	r3, [r5, #8]
 80147a6:	429c      	cmp	r4, r3
 80147a8:	db12      	blt.n	80147d0 <__gethex+0x402>
 80147aa:	686b      	ldr	r3, [r5, #4]
 80147ac:	9805      	ldr	r0, [sp, #20]
 80147ae:	1c59      	adds	r1, r3, #1
 80147b0:	f000 f8f9 	bl	80149a6 <_Balloc>
 80147b4:	0029      	movs	r1, r5
 80147b6:	692b      	ldr	r3, [r5, #16]
 80147b8:	9003      	str	r0, [sp, #12]
 80147ba:	1c9a      	adds	r2, r3, #2
 80147bc:	0092      	lsls	r2, r2, #2
 80147be:	310c      	adds	r1, #12
 80147c0:	300c      	adds	r0, #12
 80147c2:	f7fe fd00 	bl	80131c6 <memcpy>
 80147c6:	0029      	movs	r1, r5
 80147c8:	9805      	ldr	r0, [sp, #20]
 80147ca:	f000 f924 	bl	8014a16 <_Bfree>
 80147ce:	9d03      	ldr	r5, [sp, #12]
 80147d0:	692b      	ldr	r3, [r5, #16]
 80147d2:	1c5a      	adds	r2, r3, #1
 80147d4:	612a      	str	r2, [r5, #16]
 80147d6:	2201      	movs	r2, #1
 80147d8:	3304      	adds	r3, #4
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	18eb      	adds	r3, r5, r3
 80147de:	605a      	str	r2, [r3, #4]
 80147e0:	e7c0      	b.n	8014764 <__gethex+0x396>
 80147e2:	692a      	ldr	r2, [r5, #16]
 80147e4:	42a2      	cmp	r2, r4
 80147e6:	dd0a      	ble.n	80147fe <__gethex+0x430>
 80147e8:	2101      	movs	r1, #1
 80147ea:	0028      	movs	r0, r5
 80147ec:	f7ff fda6 	bl	801433c <rshift>
 80147f0:	9b02      	ldr	r3, [sp, #8]
 80147f2:	3701      	adds	r7, #1
 80147f4:	689b      	ldr	r3, [r3, #8]
 80147f6:	2601      	movs	r6, #1
 80147f8:	42bb      	cmp	r3, r7
 80147fa:	dac8      	bge.n	801478e <__gethex+0x3c0>
 80147fc:	e6dc      	b.n	80145b8 <__gethex+0x1ea>
 80147fe:	241f      	movs	r4, #31
 8014800:	9a01      	ldr	r2, [sp, #4]
 8014802:	2601      	movs	r6, #1
 8014804:	4022      	ands	r2, r4
 8014806:	1e14      	subs	r4, r2, #0
 8014808:	d0c1      	beq.n	801478e <__gethex+0x3c0>
 801480a:	9a04      	ldr	r2, [sp, #16]
 801480c:	189b      	adds	r3, r3, r2
 801480e:	3b04      	subs	r3, #4
 8014810:	6818      	ldr	r0, [r3, #0]
 8014812:	f000 f995 	bl	8014b40 <__hi0bits>
 8014816:	2120      	movs	r1, #32
 8014818:	1b0c      	subs	r4, r1, r4
 801481a:	42a0      	cmp	r0, r4
 801481c:	dbe4      	blt.n	80147e8 <__gethex+0x41a>
 801481e:	e7b6      	b.n	801478e <__gethex+0x3c0>
 8014820:	0006      	movs	r6, r0
 8014822:	e7b4      	b.n	801478e <__gethex+0x3c0>

08014824 <L_shift>:
 8014824:	2308      	movs	r3, #8
 8014826:	b570      	push	{r4, r5, r6, lr}
 8014828:	2520      	movs	r5, #32
 801482a:	1a9a      	subs	r2, r3, r2
 801482c:	0092      	lsls	r2, r2, #2
 801482e:	1aad      	subs	r5, r5, r2
 8014830:	6843      	ldr	r3, [r0, #4]
 8014832:	6806      	ldr	r6, [r0, #0]
 8014834:	001c      	movs	r4, r3
 8014836:	40ac      	lsls	r4, r5
 8014838:	40d3      	lsrs	r3, r2
 801483a:	4334      	orrs	r4, r6
 801483c:	6004      	str	r4, [r0, #0]
 801483e:	6043      	str	r3, [r0, #4]
 8014840:	3004      	adds	r0, #4
 8014842:	4288      	cmp	r0, r1
 8014844:	d3f4      	bcc.n	8014830 <L_shift+0xc>
 8014846:	bd70      	pop	{r4, r5, r6, pc}

08014848 <__match>:
 8014848:	b530      	push	{r4, r5, lr}
 801484a:	6803      	ldr	r3, [r0, #0]
 801484c:	780c      	ldrb	r4, [r1, #0]
 801484e:	3301      	adds	r3, #1
 8014850:	2c00      	cmp	r4, #0
 8014852:	d102      	bne.n	801485a <__match+0x12>
 8014854:	6003      	str	r3, [r0, #0]
 8014856:	2001      	movs	r0, #1
 8014858:	bd30      	pop	{r4, r5, pc}
 801485a:	781a      	ldrb	r2, [r3, #0]
 801485c:	0015      	movs	r5, r2
 801485e:	3d41      	subs	r5, #65	; 0x41
 8014860:	2d19      	cmp	r5, #25
 8014862:	d800      	bhi.n	8014866 <__match+0x1e>
 8014864:	3220      	adds	r2, #32
 8014866:	3101      	adds	r1, #1
 8014868:	42a2      	cmp	r2, r4
 801486a:	d0ef      	beq.n	801484c <__match+0x4>
 801486c:	2000      	movs	r0, #0
 801486e:	e7f3      	b.n	8014858 <__match+0x10>

08014870 <__hexnan>:
 8014870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014872:	b08b      	sub	sp, #44	; 0x2c
 8014874:	9201      	str	r2, [sp, #4]
 8014876:	680a      	ldr	r2, [r1, #0]
 8014878:	9901      	ldr	r1, [sp, #4]
 801487a:	1153      	asrs	r3, r2, #5
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	18cb      	adds	r3, r1, r3
 8014880:	9304      	str	r3, [sp, #16]
 8014882:	231f      	movs	r3, #31
 8014884:	401a      	ands	r2, r3
 8014886:	9008      	str	r0, [sp, #32]
 8014888:	9206      	str	r2, [sp, #24]
 801488a:	d002      	beq.n	8014892 <__hexnan+0x22>
 801488c:	9b04      	ldr	r3, [sp, #16]
 801488e:	3304      	adds	r3, #4
 8014890:	9304      	str	r3, [sp, #16]
 8014892:	9b04      	ldr	r3, [sp, #16]
 8014894:	2500      	movs	r5, #0
 8014896:	1f1e      	subs	r6, r3, #4
 8014898:	0037      	movs	r7, r6
 801489a:	0034      	movs	r4, r6
 801489c:	9b08      	ldr	r3, [sp, #32]
 801489e:	6035      	str	r5, [r6, #0]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	9507      	str	r5, [sp, #28]
 80148a4:	9305      	str	r3, [sp, #20]
 80148a6:	9502      	str	r5, [sp, #8]
 80148a8:	9b05      	ldr	r3, [sp, #20]
 80148aa:	3301      	adds	r3, #1
 80148ac:	9309      	str	r3, [sp, #36]	; 0x24
 80148ae:	9b05      	ldr	r3, [sp, #20]
 80148b0:	785b      	ldrb	r3, [r3, #1]
 80148b2:	9303      	str	r3, [sp, #12]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d028      	beq.n	801490a <__hexnan+0x9a>
 80148b8:	9803      	ldr	r0, [sp, #12]
 80148ba:	f7ff fd73 	bl	80143a4 <__hexdig_fun>
 80148be:	2800      	cmp	r0, #0
 80148c0:	d145      	bne.n	801494e <__hexnan+0xde>
 80148c2:	9b03      	ldr	r3, [sp, #12]
 80148c4:	2b20      	cmp	r3, #32
 80148c6:	d819      	bhi.n	80148fc <__hexnan+0x8c>
 80148c8:	9b02      	ldr	r3, [sp, #8]
 80148ca:	9a07      	ldr	r2, [sp, #28]
 80148cc:	4293      	cmp	r3, r2
 80148ce:	dd12      	ble.n	80148f6 <__hexnan+0x86>
 80148d0:	42bc      	cmp	r4, r7
 80148d2:	d206      	bcs.n	80148e2 <__hexnan+0x72>
 80148d4:	2d07      	cmp	r5, #7
 80148d6:	dc04      	bgt.n	80148e2 <__hexnan+0x72>
 80148d8:	002a      	movs	r2, r5
 80148da:	0039      	movs	r1, r7
 80148dc:	0020      	movs	r0, r4
 80148de:	f7ff ffa1 	bl	8014824 <L_shift>
 80148e2:	9b01      	ldr	r3, [sp, #4]
 80148e4:	2508      	movs	r5, #8
 80148e6:	429c      	cmp	r4, r3
 80148e8:	d905      	bls.n	80148f6 <__hexnan+0x86>
 80148ea:	1f27      	subs	r7, r4, #4
 80148ec:	2500      	movs	r5, #0
 80148ee:	003c      	movs	r4, r7
 80148f0:	9b02      	ldr	r3, [sp, #8]
 80148f2:	603d      	str	r5, [r7, #0]
 80148f4:	9307      	str	r3, [sp, #28]
 80148f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148f8:	9305      	str	r3, [sp, #20]
 80148fa:	e7d5      	b.n	80148a8 <__hexnan+0x38>
 80148fc:	9b03      	ldr	r3, [sp, #12]
 80148fe:	2b29      	cmp	r3, #41	; 0x29
 8014900:	d14a      	bne.n	8014998 <__hexnan+0x128>
 8014902:	9b05      	ldr	r3, [sp, #20]
 8014904:	9a08      	ldr	r2, [sp, #32]
 8014906:	3302      	adds	r3, #2
 8014908:	6013      	str	r3, [r2, #0]
 801490a:	9b02      	ldr	r3, [sp, #8]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d043      	beq.n	8014998 <__hexnan+0x128>
 8014910:	42bc      	cmp	r4, r7
 8014912:	d206      	bcs.n	8014922 <__hexnan+0xb2>
 8014914:	2d07      	cmp	r5, #7
 8014916:	dc04      	bgt.n	8014922 <__hexnan+0xb2>
 8014918:	002a      	movs	r2, r5
 801491a:	0039      	movs	r1, r7
 801491c:	0020      	movs	r0, r4
 801491e:	f7ff ff81 	bl	8014824 <L_shift>
 8014922:	9b01      	ldr	r3, [sp, #4]
 8014924:	429c      	cmp	r4, r3
 8014926:	d926      	bls.n	8014976 <__hexnan+0x106>
 8014928:	cc04      	ldmia	r4!, {r2}
 801492a:	601a      	str	r2, [r3, #0]
 801492c:	3304      	adds	r3, #4
 801492e:	42a6      	cmp	r6, r4
 8014930:	d2fa      	bcs.n	8014928 <__hexnan+0xb8>
 8014932:	2200      	movs	r2, #0
 8014934:	c304      	stmia	r3!, {r2}
 8014936:	429e      	cmp	r6, r3
 8014938:	d2fc      	bcs.n	8014934 <__hexnan+0xc4>
 801493a:	6833      	ldr	r3, [r6, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d104      	bne.n	801494a <__hexnan+0xda>
 8014940:	9b01      	ldr	r3, [sp, #4]
 8014942:	429e      	cmp	r6, r3
 8014944:	d126      	bne.n	8014994 <__hexnan+0x124>
 8014946:	2301      	movs	r3, #1
 8014948:	6033      	str	r3, [r6, #0]
 801494a:	2005      	movs	r0, #5
 801494c:	e025      	b.n	801499a <__hexnan+0x12a>
 801494e:	9b02      	ldr	r3, [sp, #8]
 8014950:	3501      	adds	r5, #1
 8014952:	3301      	adds	r3, #1
 8014954:	9302      	str	r3, [sp, #8]
 8014956:	2d08      	cmp	r5, #8
 8014958:	dd06      	ble.n	8014968 <__hexnan+0xf8>
 801495a:	9b01      	ldr	r3, [sp, #4]
 801495c:	429c      	cmp	r4, r3
 801495e:	d9ca      	bls.n	80148f6 <__hexnan+0x86>
 8014960:	2300      	movs	r3, #0
 8014962:	2501      	movs	r5, #1
 8014964:	3c04      	subs	r4, #4
 8014966:	6023      	str	r3, [r4, #0]
 8014968:	220f      	movs	r2, #15
 801496a:	6823      	ldr	r3, [r4, #0]
 801496c:	4010      	ands	r0, r2
 801496e:	011b      	lsls	r3, r3, #4
 8014970:	4318      	orrs	r0, r3
 8014972:	6020      	str	r0, [r4, #0]
 8014974:	e7bf      	b.n	80148f6 <__hexnan+0x86>
 8014976:	9b06      	ldr	r3, [sp, #24]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d0de      	beq.n	801493a <__hexnan+0xca>
 801497c:	2120      	movs	r1, #32
 801497e:	9a06      	ldr	r2, [sp, #24]
 8014980:	9b04      	ldr	r3, [sp, #16]
 8014982:	1a89      	subs	r1, r1, r2
 8014984:	2201      	movs	r2, #1
 8014986:	4252      	negs	r2, r2
 8014988:	40ca      	lsrs	r2, r1
 801498a:	3b04      	subs	r3, #4
 801498c:	6819      	ldr	r1, [r3, #0]
 801498e:	400a      	ands	r2, r1
 8014990:	601a      	str	r2, [r3, #0]
 8014992:	e7d2      	b.n	801493a <__hexnan+0xca>
 8014994:	3e04      	subs	r6, #4
 8014996:	e7d0      	b.n	801493a <__hexnan+0xca>
 8014998:	2004      	movs	r0, #4
 801499a:	b00b      	add	sp, #44	; 0x2c
 801499c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801499e <__localeconv_l>:
 801499e:	30f0      	adds	r0, #240	; 0xf0
 80149a0:	4770      	bx	lr

080149a2 <__malloc_lock>:
 80149a2:	4770      	bx	lr

080149a4 <__malloc_unlock>:
 80149a4:	4770      	bx	lr

080149a6 <_Balloc>:
 80149a6:	b570      	push	{r4, r5, r6, lr}
 80149a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80149aa:	0004      	movs	r4, r0
 80149ac:	000d      	movs	r5, r1
 80149ae:	2e00      	cmp	r6, #0
 80149b0:	d107      	bne.n	80149c2 <_Balloc+0x1c>
 80149b2:	2010      	movs	r0, #16
 80149b4:	f7fe fbd2 	bl	801315c <malloc>
 80149b8:	6260      	str	r0, [r4, #36]	; 0x24
 80149ba:	6046      	str	r6, [r0, #4]
 80149bc:	6086      	str	r6, [r0, #8]
 80149be:	6006      	str	r6, [r0, #0]
 80149c0:	60c6      	str	r6, [r0, #12]
 80149c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80149c4:	68f3      	ldr	r3, [r6, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d013      	beq.n	80149f2 <_Balloc+0x4c>
 80149ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149cc:	00aa      	lsls	r2, r5, #2
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	189b      	adds	r3, r3, r2
 80149d2:	6818      	ldr	r0, [r3, #0]
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d118      	bne.n	8014a0a <_Balloc+0x64>
 80149d8:	2101      	movs	r1, #1
 80149da:	000e      	movs	r6, r1
 80149dc:	40ae      	lsls	r6, r5
 80149de:	1d72      	adds	r2, r6, #5
 80149e0:	0092      	lsls	r2, r2, #2
 80149e2:	0020      	movs	r0, r4
 80149e4:	f000 fbd5 	bl	8015192 <_calloc_r>
 80149e8:	2800      	cmp	r0, #0
 80149ea:	d00c      	beq.n	8014a06 <_Balloc+0x60>
 80149ec:	6045      	str	r5, [r0, #4]
 80149ee:	6086      	str	r6, [r0, #8]
 80149f0:	e00d      	b.n	8014a0e <_Balloc+0x68>
 80149f2:	2221      	movs	r2, #33	; 0x21
 80149f4:	2104      	movs	r1, #4
 80149f6:	0020      	movs	r0, r4
 80149f8:	f000 fbcb 	bl	8015192 <_calloc_r>
 80149fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149fe:	60f0      	str	r0, [r6, #12]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d1e1      	bne.n	80149ca <_Balloc+0x24>
 8014a06:	2000      	movs	r0, #0
 8014a08:	bd70      	pop	{r4, r5, r6, pc}
 8014a0a:	6802      	ldr	r2, [r0, #0]
 8014a0c:	601a      	str	r2, [r3, #0]
 8014a0e:	2300      	movs	r3, #0
 8014a10:	6103      	str	r3, [r0, #16]
 8014a12:	60c3      	str	r3, [r0, #12]
 8014a14:	e7f8      	b.n	8014a08 <_Balloc+0x62>

08014a16 <_Bfree>:
 8014a16:	b570      	push	{r4, r5, r6, lr}
 8014a18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014a1a:	0006      	movs	r6, r0
 8014a1c:	000d      	movs	r5, r1
 8014a1e:	2c00      	cmp	r4, #0
 8014a20:	d107      	bne.n	8014a32 <_Bfree+0x1c>
 8014a22:	2010      	movs	r0, #16
 8014a24:	f7fe fb9a 	bl	801315c <malloc>
 8014a28:	6270      	str	r0, [r6, #36]	; 0x24
 8014a2a:	6044      	str	r4, [r0, #4]
 8014a2c:	6084      	str	r4, [r0, #8]
 8014a2e:	6004      	str	r4, [r0, #0]
 8014a30:	60c4      	str	r4, [r0, #12]
 8014a32:	2d00      	cmp	r5, #0
 8014a34:	d007      	beq.n	8014a46 <_Bfree+0x30>
 8014a36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014a38:	686a      	ldr	r2, [r5, #4]
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	0092      	lsls	r2, r2, #2
 8014a3e:	189b      	adds	r3, r3, r2
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	602a      	str	r2, [r5, #0]
 8014a44:	601d      	str	r5, [r3, #0]
 8014a46:	bd70      	pop	{r4, r5, r6, pc}

08014a48 <__multadd>:
 8014a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a4a:	001e      	movs	r6, r3
 8014a4c:	2314      	movs	r3, #20
 8014a4e:	469c      	mov	ip, r3
 8014a50:	0007      	movs	r7, r0
 8014a52:	000c      	movs	r4, r1
 8014a54:	2000      	movs	r0, #0
 8014a56:	690d      	ldr	r5, [r1, #16]
 8014a58:	448c      	add	ip, r1
 8014a5a:	4663      	mov	r3, ip
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	3001      	adds	r0, #1
 8014a60:	b299      	uxth	r1, r3
 8014a62:	4663      	mov	r3, ip
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	4351      	muls	r1, r2
 8014a68:	0c1b      	lsrs	r3, r3, #16
 8014a6a:	4353      	muls	r3, r2
 8014a6c:	1989      	adds	r1, r1, r6
 8014a6e:	0c0e      	lsrs	r6, r1, #16
 8014a70:	199b      	adds	r3, r3, r6
 8014a72:	b289      	uxth	r1, r1
 8014a74:	0c1e      	lsrs	r6, r3, #16
 8014a76:	041b      	lsls	r3, r3, #16
 8014a78:	185b      	adds	r3, r3, r1
 8014a7a:	4661      	mov	r1, ip
 8014a7c:	c108      	stmia	r1!, {r3}
 8014a7e:	468c      	mov	ip, r1
 8014a80:	4285      	cmp	r5, r0
 8014a82:	dcea      	bgt.n	8014a5a <__multadd+0x12>
 8014a84:	2e00      	cmp	r6, #0
 8014a86:	d01b      	beq.n	8014ac0 <__multadd+0x78>
 8014a88:	68a3      	ldr	r3, [r4, #8]
 8014a8a:	42ab      	cmp	r3, r5
 8014a8c:	dc12      	bgt.n	8014ab4 <__multadd+0x6c>
 8014a8e:	6863      	ldr	r3, [r4, #4]
 8014a90:	0038      	movs	r0, r7
 8014a92:	1c59      	adds	r1, r3, #1
 8014a94:	f7ff ff87 	bl	80149a6 <_Balloc>
 8014a98:	0021      	movs	r1, r4
 8014a9a:	6923      	ldr	r3, [r4, #16]
 8014a9c:	9001      	str	r0, [sp, #4]
 8014a9e:	1c9a      	adds	r2, r3, #2
 8014aa0:	0092      	lsls	r2, r2, #2
 8014aa2:	310c      	adds	r1, #12
 8014aa4:	300c      	adds	r0, #12
 8014aa6:	f7fe fb8e 	bl	80131c6 <memcpy>
 8014aaa:	0021      	movs	r1, r4
 8014aac:	0038      	movs	r0, r7
 8014aae:	f7ff ffb2 	bl	8014a16 <_Bfree>
 8014ab2:	9c01      	ldr	r4, [sp, #4]
 8014ab4:	1d2b      	adds	r3, r5, #4
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	18e3      	adds	r3, r4, r3
 8014aba:	3501      	adds	r5, #1
 8014abc:	605e      	str	r6, [r3, #4]
 8014abe:	6125      	str	r5, [r4, #16]
 8014ac0:	0020      	movs	r0, r4
 8014ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08014ac4 <__s2b>:
 8014ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ac6:	0006      	movs	r6, r0
 8014ac8:	0018      	movs	r0, r3
 8014aca:	000c      	movs	r4, r1
 8014acc:	3008      	adds	r0, #8
 8014ace:	2109      	movs	r1, #9
 8014ad0:	9301      	str	r3, [sp, #4]
 8014ad2:	0015      	movs	r5, r2
 8014ad4:	f7eb fbbc 	bl	8000250 <__divsi3>
 8014ad8:	2301      	movs	r3, #1
 8014ada:	2100      	movs	r1, #0
 8014adc:	4283      	cmp	r3, r0
 8014ade:	db1f      	blt.n	8014b20 <__s2b+0x5c>
 8014ae0:	0030      	movs	r0, r6
 8014ae2:	f7ff ff60 	bl	80149a6 <_Balloc>
 8014ae6:	9b08      	ldr	r3, [sp, #32]
 8014ae8:	6143      	str	r3, [r0, #20]
 8014aea:	2301      	movs	r3, #1
 8014aec:	6103      	str	r3, [r0, #16]
 8014aee:	2d09      	cmp	r5, #9
 8014af0:	dd19      	ble.n	8014b26 <__s2b+0x62>
 8014af2:	0023      	movs	r3, r4
 8014af4:	3309      	adds	r3, #9
 8014af6:	001f      	movs	r7, r3
 8014af8:	9300      	str	r3, [sp, #0]
 8014afa:	1964      	adds	r4, r4, r5
 8014afc:	783b      	ldrb	r3, [r7, #0]
 8014afe:	0001      	movs	r1, r0
 8014b00:	3b30      	subs	r3, #48	; 0x30
 8014b02:	220a      	movs	r2, #10
 8014b04:	0030      	movs	r0, r6
 8014b06:	3701      	adds	r7, #1
 8014b08:	f7ff ff9e 	bl	8014a48 <__multadd>
 8014b0c:	42a7      	cmp	r7, r4
 8014b0e:	d1f5      	bne.n	8014afc <__s2b+0x38>
 8014b10:	9b00      	ldr	r3, [sp, #0]
 8014b12:	195c      	adds	r4, r3, r5
 8014b14:	3c08      	subs	r4, #8
 8014b16:	002f      	movs	r7, r5
 8014b18:	9b01      	ldr	r3, [sp, #4]
 8014b1a:	429f      	cmp	r7, r3
 8014b1c:	db06      	blt.n	8014b2c <__s2b+0x68>
 8014b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	3101      	adds	r1, #1
 8014b24:	e7da      	b.n	8014adc <__s2b+0x18>
 8014b26:	340a      	adds	r4, #10
 8014b28:	2509      	movs	r5, #9
 8014b2a:	e7f4      	b.n	8014b16 <__s2b+0x52>
 8014b2c:	1b63      	subs	r3, r4, r5
 8014b2e:	5ddb      	ldrb	r3, [r3, r7]
 8014b30:	0001      	movs	r1, r0
 8014b32:	3b30      	subs	r3, #48	; 0x30
 8014b34:	220a      	movs	r2, #10
 8014b36:	0030      	movs	r0, r6
 8014b38:	f7ff ff86 	bl	8014a48 <__multadd>
 8014b3c:	3701      	adds	r7, #1
 8014b3e:	e7eb      	b.n	8014b18 <__s2b+0x54>

08014b40 <__hi0bits>:
 8014b40:	0003      	movs	r3, r0
 8014b42:	0c02      	lsrs	r2, r0, #16
 8014b44:	2000      	movs	r0, #0
 8014b46:	4282      	cmp	r2, r0
 8014b48:	d101      	bne.n	8014b4e <__hi0bits+0xe>
 8014b4a:	041b      	lsls	r3, r3, #16
 8014b4c:	3010      	adds	r0, #16
 8014b4e:	0e1a      	lsrs	r2, r3, #24
 8014b50:	d101      	bne.n	8014b56 <__hi0bits+0x16>
 8014b52:	3008      	adds	r0, #8
 8014b54:	021b      	lsls	r3, r3, #8
 8014b56:	0f1a      	lsrs	r2, r3, #28
 8014b58:	d101      	bne.n	8014b5e <__hi0bits+0x1e>
 8014b5a:	3004      	adds	r0, #4
 8014b5c:	011b      	lsls	r3, r3, #4
 8014b5e:	0f9a      	lsrs	r2, r3, #30
 8014b60:	d101      	bne.n	8014b66 <__hi0bits+0x26>
 8014b62:	3002      	adds	r0, #2
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	db03      	blt.n	8014b72 <__hi0bits+0x32>
 8014b6a:	3001      	adds	r0, #1
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	d400      	bmi.n	8014b72 <__hi0bits+0x32>
 8014b70:	2020      	movs	r0, #32
 8014b72:	4770      	bx	lr

08014b74 <__lo0bits>:
 8014b74:	2207      	movs	r2, #7
 8014b76:	6803      	ldr	r3, [r0, #0]
 8014b78:	b510      	push	{r4, lr}
 8014b7a:	0001      	movs	r1, r0
 8014b7c:	401a      	ands	r2, r3
 8014b7e:	d00d      	beq.n	8014b9c <__lo0bits+0x28>
 8014b80:	2401      	movs	r4, #1
 8014b82:	2000      	movs	r0, #0
 8014b84:	4223      	tst	r3, r4
 8014b86:	d105      	bne.n	8014b94 <__lo0bits+0x20>
 8014b88:	3002      	adds	r0, #2
 8014b8a:	4203      	tst	r3, r0
 8014b8c:	d003      	beq.n	8014b96 <__lo0bits+0x22>
 8014b8e:	40e3      	lsrs	r3, r4
 8014b90:	0020      	movs	r0, r4
 8014b92:	600b      	str	r3, [r1, #0]
 8014b94:	bd10      	pop	{r4, pc}
 8014b96:	089b      	lsrs	r3, r3, #2
 8014b98:	600b      	str	r3, [r1, #0]
 8014b9a:	e7fb      	b.n	8014b94 <__lo0bits+0x20>
 8014b9c:	b29c      	uxth	r4, r3
 8014b9e:	0010      	movs	r0, r2
 8014ba0:	2c00      	cmp	r4, #0
 8014ba2:	d101      	bne.n	8014ba8 <__lo0bits+0x34>
 8014ba4:	2010      	movs	r0, #16
 8014ba6:	0c1b      	lsrs	r3, r3, #16
 8014ba8:	b2da      	uxtb	r2, r3
 8014baa:	2a00      	cmp	r2, #0
 8014bac:	d101      	bne.n	8014bb2 <__lo0bits+0x3e>
 8014bae:	3008      	adds	r0, #8
 8014bb0:	0a1b      	lsrs	r3, r3, #8
 8014bb2:	071a      	lsls	r2, r3, #28
 8014bb4:	d101      	bne.n	8014bba <__lo0bits+0x46>
 8014bb6:	3004      	adds	r0, #4
 8014bb8:	091b      	lsrs	r3, r3, #4
 8014bba:	079a      	lsls	r2, r3, #30
 8014bbc:	d101      	bne.n	8014bc2 <__lo0bits+0x4e>
 8014bbe:	3002      	adds	r0, #2
 8014bc0:	089b      	lsrs	r3, r3, #2
 8014bc2:	07da      	lsls	r2, r3, #31
 8014bc4:	d4e8      	bmi.n	8014b98 <__lo0bits+0x24>
 8014bc6:	085b      	lsrs	r3, r3, #1
 8014bc8:	d001      	beq.n	8014bce <__lo0bits+0x5a>
 8014bca:	3001      	adds	r0, #1
 8014bcc:	e7e4      	b.n	8014b98 <__lo0bits+0x24>
 8014bce:	2020      	movs	r0, #32
 8014bd0:	e7e0      	b.n	8014b94 <__lo0bits+0x20>

08014bd2 <__i2b>:
 8014bd2:	b510      	push	{r4, lr}
 8014bd4:	000c      	movs	r4, r1
 8014bd6:	2101      	movs	r1, #1
 8014bd8:	f7ff fee5 	bl	80149a6 <_Balloc>
 8014bdc:	2301      	movs	r3, #1
 8014bde:	6144      	str	r4, [r0, #20]
 8014be0:	6103      	str	r3, [r0, #16]
 8014be2:	bd10      	pop	{r4, pc}

08014be4 <__multiply>:
 8014be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014be6:	690b      	ldr	r3, [r1, #16]
 8014be8:	0014      	movs	r4, r2
 8014bea:	6912      	ldr	r2, [r2, #16]
 8014bec:	b089      	sub	sp, #36	; 0x24
 8014bee:	000d      	movs	r5, r1
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	da01      	bge.n	8014bf8 <__multiply+0x14>
 8014bf4:	0025      	movs	r5, r4
 8014bf6:	000c      	movs	r4, r1
 8014bf8:	692f      	ldr	r7, [r5, #16]
 8014bfa:	6926      	ldr	r6, [r4, #16]
 8014bfc:	6869      	ldr	r1, [r5, #4]
 8014bfe:	19bb      	adds	r3, r7, r6
 8014c00:	9302      	str	r3, [sp, #8]
 8014c02:	68ab      	ldr	r3, [r5, #8]
 8014c04:	19ba      	adds	r2, r7, r6
 8014c06:	4293      	cmp	r3, r2
 8014c08:	da00      	bge.n	8014c0c <__multiply+0x28>
 8014c0a:	3101      	adds	r1, #1
 8014c0c:	f7ff fecb 	bl	80149a6 <_Balloc>
 8014c10:	0002      	movs	r2, r0
 8014c12:	19bb      	adds	r3, r7, r6
 8014c14:	3214      	adds	r2, #20
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	18d3      	adds	r3, r2, r3
 8014c1a:	469c      	mov	ip, r3
 8014c1c:	2100      	movs	r1, #0
 8014c1e:	0013      	movs	r3, r2
 8014c20:	9004      	str	r0, [sp, #16]
 8014c22:	4563      	cmp	r3, ip
 8014c24:	d31d      	bcc.n	8014c62 <__multiply+0x7e>
 8014c26:	3514      	adds	r5, #20
 8014c28:	00bf      	lsls	r7, r7, #2
 8014c2a:	19eb      	adds	r3, r5, r7
 8014c2c:	3414      	adds	r4, #20
 8014c2e:	00b6      	lsls	r6, r6, #2
 8014c30:	9305      	str	r3, [sp, #20]
 8014c32:	19a3      	adds	r3, r4, r6
 8014c34:	9503      	str	r5, [sp, #12]
 8014c36:	9401      	str	r4, [sp, #4]
 8014c38:	9307      	str	r3, [sp, #28]
 8014c3a:	9b07      	ldr	r3, [sp, #28]
 8014c3c:	9901      	ldr	r1, [sp, #4]
 8014c3e:	4299      	cmp	r1, r3
 8014c40:	d311      	bcc.n	8014c66 <__multiply+0x82>
 8014c42:	9b02      	ldr	r3, [sp, #8]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	dd06      	ble.n	8014c56 <__multiply+0x72>
 8014c48:	2304      	movs	r3, #4
 8014c4a:	425b      	negs	r3, r3
 8014c4c:	449c      	add	ip, r3
 8014c4e:	4663      	mov	r3, ip
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d051      	beq.n	8014cfa <__multiply+0x116>
 8014c56:	9b04      	ldr	r3, [sp, #16]
 8014c58:	9a02      	ldr	r2, [sp, #8]
 8014c5a:	0018      	movs	r0, r3
 8014c5c:	611a      	str	r2, [r3, #16]
 8014c5e:	b009      	add	sp, #36	; 0x24
 8014c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c62:	c302      	stmia	r3!, {r1}
 8014c64:	e7dd      	b.n	8014c22 <__multiply+0x3e>
 8014c66:	9b01      	ldr	r3, [sp, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	b298      	uxth	r0, r3
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	d01c      	beq.n	8014caa <__multiply+0xc6>
 8014c70:	0015      	movs	r5, r2
 8014c72:	2600      	movs	r6, #0
 8014c74:	9f03      	ldr	r7, [sp, #12]
 8014c76:	cf02      	ldmia	r7!, {r1}
 8014c78:	682c      	ldr	r4, [r5, #0]
 8014c7a:	b28b      	uxth	r3, r1
 8014c7c:	4343      	muls	r3, r0
 8014c7e:	0c09      	lsrs	r1, r1, #16
 8014c80:	4341      	muls	r1, r0
 8014c82:	b2a4      	uxth	r4, r4
 8014c84:	191b      	adds	r3, r3, r4
 8014c86:	199b      	adds	r3, r3, r6
 8014c88:	000e      	movs	r6, r1
 8014c8a:	6829      	ldr	r1, [r5, #0]
 8014c8c:	9506      	str	r5, [sp, #24]
 8014c8e:	0c09      	lsrs	r1, r1, #16
 8014c90:	1871      	adds	r1, r6, r1
 8014c92:	0c1e      	lsrs	r6, r3, #16
 8014c94:	1989      	adds	r1, r1, r6
 8014c96:	0c0e      	lsrs	r6, r1, #16
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	0409      	lsls	r1, r1, #16
 8014c9c:	430b      	orrs	r3, r1
 8014c9e:	c508      	stmia	r5!, {r3}
 8014ca0:	9b05      	ldr	r3, [sp, #20]
 8014ca2:	42bb      	cmp	r3, r7
 8014ca4:	d8e7      	bhi.n	8014c76 <__multiply+0x92>
 8014ca6:	9b06      	ldr	r3, [sp, #24]
 8014ca8:	605e      	str	r6, [r3, #4]
 8014caa:	9b01      	ldr	r3, [sp, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	0c1d      	lsrs	r5, r3, #16
 8014cb0:	d01e      	beq.n	8014cf0 <__multiply+0x10c>
 8014cb2:	0010      	movs	r0, r2
 8014cb4:	2700      	movs	r7, #0
 8014cb6:	6813      	ldr	r3, [r2, #0]
 8014cb8:	9e03      	ldr	r6, [sp, #12]
 8014cba:	6831      	ldr	r1, [r6, #0]
 8014cbc:	6804      	ldr	r4, [r0, #0]
 8014cbe:	b289      	uxth	r1, r1
 8014cc0:	4369      	muls	r1, r5
 8014cc2:	0c24      	lsrs	r4, r4, #16
 8014cc4:	1909      	adds	r1, r1, r4
 8014cc6:	19c9      	adds	r1, r1, r7
 8014cc8:	040f      	lsls	r7, r1, #16
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	433b      	orrs	r3, r7
 8014cce:	6003      	str	r3, [r0, #0]
 8014cd0:	ce80      	ldmia	r6!, {r7}
 8014cd2:	6843      	ldr	r3, [r0, #4]
 8014cd4:	0c3f      	lsrs	r7, r7, #16
 8014cd6:	436f      	muls	r7, r5
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	18fb      	adds	r3, r7, r3
 8014cdc:	0c09      	lsrs	r1, r1, #16
 8014cde:	185b      	adds	r3, r3, r1
 8014ce0:	9905      	ldr	r1, [sp, #20]
 8014ce2:	9006      	str	r0, [sp, #24]
 8014ce4:	0c1f      	lsrs	r7, r3, #16
 8014ce6:	3004      	adds	r0, #4
 8014ce8:	42b1      	cmp	r1, r6
 8014cea:	d8e6      	bhi.n	8014cba <__multiply+0xd6>
 8014cec:	9906      	ldr	r1, [sp, #24]
 8014cee:	604b      	str	r3, [r1, #4]
 8014cf0:	9b01      	ldr	r3, [sp, #4]
 8014cf2:	3204      	adds	r2, #4
 8014cf4:	3304      	adds	r3, #4
 8014cf6:	9301      	str	r3, [sp, #4]
 8014cf8:	e79f      	b.n	8014c3a <__multiply+0x56>
 8014cfa:	9b02      	ldr	r3, [sp, #8]
 8014cfc:	3b01      	subs	r3, #1
 8014cfe:	9302      	str	r3, [sp, #8]
 8014d00:	e79f      	b.n	8014c42 <__multiply+0x5e>
	...

08014d04 <__pow5mult>:
 8014d04:	2303      	movs	r3, #3
 8014d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d08:	4013      	ands	r3, r2
 8014d0a:	0005      	movs	r5, r0
 8014d0c:	000e      	movs	r6, r1
 8014d0e:	0014      	movs	r4, r2
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d008      	beq.n	8014d26 <__pow5mult+0x22>
 8014d14:	4922      	ldr	r1, [pc, #136]	; (8014da0 <__pow5mult+0x9c>)
 8014d16:	3b01      	subs	r3, #1
 8014d18:	009a      	lsls	r2, r3, #2
 8014d1a:	5852      	ldr	r2, [r2, r1]
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	0031      	movs	r1, r6
 8014d20:	f7ff fe92 	bl	8014a48 <__multadd>
 8014d24:	0006      	movs	r6, r0
 8014d26:	10a3      	asrs	r3, r4, #2
 8014d28:	9301      	str	r3, [sp, #4]
 8014d2a:	d036      	beq.n	8014d9a <__pow5mult+0x96>
 8014d2c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8014d2e:	2c00      	cmp	r4, #0
 8014d30:	d107      	bne.n	8014d42 <__pow5mult+0x3e>
 8014d32:	2010      	movs	r0, #16
 8014d34:	f7fe fa12 	bl	801315c <malloc>
 8014d38:	6268      	str	r0, [r5, #36]	; 0x24
 8014d3a:	6044      	str	r4, [r0, #4]
 8014d3c:	6084      	str	r4, [r0, #8]
 8014d3e:	6004      	str	r4, [r0, #0]
 8014d40:	60c4      	str	r4, [r0, #12]
 8014d42:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8014d44:	68bc      	ldr	r4, [r7, #8]
 8014d46:	2c00      	cmp	r4, #0
 8014d48:	d107      	bne.n	8014d5a <__pow5mult+0x56>
 8014d4a:	4916      	ldr	r1, [pc, #88]	; (8014da4 <__pow5mult+0xa0>)
 8014d4c:	0028      	movs	r0, r5
 8014d4e:	f7ff ff40 	bl	8014bd2 <__i2b>
 8014d52:	2300      	movs	r3, #0
 8014d54:	0004      	movs	r4, r0
 8014d56:	60b8      	str	r0, [r7, #8]
 8014d58:	6003      	str	r3, [r0, #0]
 8014d5a:	2201      	movs	r2, #1
 8014d5c:	9b01      	ldr	r3, [sp, #4]
 8014d5e:	4213      	tst	r3, r2
 8014d60:	d00a      	beq.n	8014d78 <__pow5mult+0x74>
 8014d62:	0031      	movs	r1, r6
 8014d64:	0022      	movs	r2, r4
 8014d66:	0028      	movs	r0, r5
 8014d68:	f7ff ff3c 	bl	8014be4 <__multiply>
 8014d6c:	0007      	movs	r7, r0
 8014d6e:	0031      	movs	r1, r6
 8014d70:	0028      	movs	r0, r5
 8014d72:	f7ff fe50 	bl	8014a16 <_Bfree>
 8014d76:	003e      	movs	r6, r7
 8014d78:	9b01      	ldr	r3, [sp, #4]
 8014d7a:	105b      	asrs	r3, r3, #1
 8014d7c:	9301      	str	r3, [sp, #4]
 8014d7e:	d00c      	beq.n	8014d9a <__pow5mult+0x96>
 8014d80:	6820      	ldr	r0, [r4, #0]
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d107      	bne.n	8014d96 <__pow5mult+0x92>
 8014d86:	0022      	movs	r2, r4
 8014d88:	0021      	movs	r1, r4
 8014d8a:	0028      	movs	r0, r5
 8014d8c:	f7ff ff2a 	bl	8014be4 <__multiply>
 8014d90:	2300      	movs	r3, #0
 8014d92:	6020      	str	r0, [r4, #0]
 8014d94:	6003      	str	r3, [r0, #0]
 8014d96:	0004      	movs	r4, r0
 8014d98:	e7df      	b.n	8014d5a <__pow5mult+0x56>
 8014d9a:	0030      	movs	r0, r6
 8014d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014d9e:	46c0      	nop			; (mov r8, r8)
 8014da0:	08018c40 	.word	0x08018c40
 8014da4:	00000271 	.word	0x00000271

08014da8 <__lshift>:
 8014da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014daa:	000d      	movs	r5, r1
 8014dac:	0017      	movs	r7, r2
 8014dae:	692b      	ldr	r3, [r5, #16]
 8014db0:	1154      	asrs	r4, r2, #5
 8014db2:	b085      	sub	sp, #20
 8014db4:	18e3      	adds	r3, r4, r3
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	3301      	adds	r3, #1
 8014dba:	9300      	str	r3, [sp, #0]
 8014dbc:	6849      	ldr	r1, [r1, #4]
 8014dbe:	68ab      	ldr	r3, [r5, #8]
 8014dc0:	9002      	str	r0, [sp, #8]
 8014dc2:	9a00      	ldr	r2, [sp, #0]
 8014dc4:	4293      	cmp	r3, r2
 8014dc6:	db35      	blt.n	8014e34 <__lshift+0x8c>
 8014dc8:	9802      	ldr	r0, [sp, #8]
 8014dca:	f7ff fdec 	bl	80149a6 <_Balloc>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	0002      	movs	r2, r0
 8014dd2:	0006      	movs	r6, r0
 8014dd4:	0019      	movs	r1, r3
 8014dd6:	3214      	adds	r2, #20
 8014dd8:	42a3      	cmp	r3, r4
 8014dda:	db2e      	blt.n	8014e3a <__lshift+0x92>
 8014ddc:	43e3      	mvns	r3, r4
 8014dde:	17db      	asrs	r3, r3, #31
 8014de0:	401c      	ands	r4, r3
 8014de2:	002b      	movs	r3, r5
 8014de4:	00a4      	lsls	r4, r4, #2
 8014de6:	1914      	adds	r4, r2, r4
 8014de8:	692a      	ldr	r2, [r5, #16]
 8014dea:	3314      	adds	r3, #20
 8014dec:	0092      	lsls	r2, r2, #2
 8014dee:	189a      	adds	r2, r3, r2
 8014df0:	4694      	mov	ip, r2
 8014df2:	221f      	movs	r2, #31
 8014df4:	4017      	ands	r7, r2
 8014df6:	d024      	beq.n	8014e42 <__lshift+0x9a>
 8014df8:	3201      	adds	r2, #1
 8014dfa:	1bd2      	subs	r2, r2, r7
 8014dfc:	9203      	str	r2, [sp, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	6819      	ldr	r1, [r3, #0]
 8014e02:	0020      	movs	r0, r4
 8014e04:	40b9      	lsls	r1, r7
 8014e06:	430a      	orrs	r2, r1
 8014e08:	c404      	stmia	r4!, {r2}
 8014e0a:	cb04      	ldmia	r3!, {r2}
 8014e0c:	9903      	ldr	r1, [sp, #12]
 8014e0e:	40ca      	lsrs	r2, r1
 8014e10:	459c      	cmp	ip, r3
 8014e12:	d8f5      	bhi.n	8014e00 <__lshift+0x58>
 8014e14:	6042      	str	r2, [r0, #4]
 8014e16:	2a00      	cmp	r2, #0
 8014e18:	d002      	beq.n	8014e20 <__lshift+0x78>
 8014e1a:	9b01      	ldr	r3, [sp, #4]
 8014e1c:	3302      	adds	r3, #2
 8014e1e:	9300      	str	r3, [sp, #0]
 8014e20:	9b00      	ldr	r3, [sp, #0]
 8014e22:	9802      	ldr	r0, [sp, #8]
 8014e24:	3b01      	subs	r3, #1
 8014e26:	6133      	str	r3, [r6, #16]
 8014e28:	0029      	movs	r1, r5
 8014e2a:	f7ff fdf4 	bl	8014a16 <_Bfree>
 8014e2e:	0030      	movs	r0, r6
 8014e30:	b005      	add	sp, #20
 8014e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e34:	3101      	adds	r1, #1
 8014e36:	005b      	lsls	r3, r3, #1
 8014e38:	e7c3      	b.n	8014dc2 <__lshift+0x1a>
 8014e3a:	0098      	lsls	r0, r3, #2
 8014e3c:	5011      	str	r1, [r2, r0]
 8014e3e:	3301      	adds	r3, #1
 8014e40:	e7ca      	b.n	8014dd8 <__lshift+0x30>
 8014e42:	cb04      	ldmia	r3!, {r2}
 8014e44:	c404      	stmia	r4!, {r2}
 8014e46:	459c      	cmp	ip, r3
 8014e48:	d8fb      	bhi.n	8014e42 <__lshift+0x9a>
 8014e4a:	e7e9      	b.n	8014e20 <__lshift+0x78>

08014e4c <__mcmp>:
 8014e4c:	690a      	ldr	r2, [r1, #16]
 8014e4e:	6903      	ldr	r3, [r0, #16]
 8014e50:	b530      	push	{r4, r5, lr}
 8014e52:	1a9b      	subs	r3, r3, r2
 8014e54:	d10d      	bne.n	8014e72 <__mcmp+0x26>
 8014e56:	0092      	lsls	r2, r2, #2
 8014e58:	3014      	adds	r0, #20
 8014e5a:	3114      	adds	r1, #20
 8014e5c:	1884      	adds	r4, r0, r2
 8014e5e:	1889      	adds	r1, r1, r2
 8014e60:	3c04      	subs	r4, #4
 8014e62:	3904      	subs	r1, #4
 8014e64:	6825      	ldr	r5, [r4, #0]
 8014e66:	680a      	ldr	r2, [r1, #0]
 8014e68:	4295      	cmp	r5, r2
 8014e6a:	d004      	beq.n	8014e76 <__mcmp+0x2a>
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	4295      	cmp	r5, r2
 8014e70:	d304      	bcc.n	8014e7c <__mcmp+0x30>
 8014e72:	0018      	movs	r0, r3
 8014e74:	bd30      	pop	{r4, r5, pc}
 8014e76:	42a0      	cmp	r0, r4
 8014e78:	d3f2      	bcc.n	8014e60 <__mcmp+0x14>
 8014e7a:	e7fa      	b.n	8014e72 <__mcmp+0x26>
 8014e7c:	425b      	negs	r3, r3
 8014e7e:	e7f8      	b.n	8014e72 <__mcmp+0x26>

08014e80 <__mdiff>:
 8014e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e82:	000d      	movs	r5, r1
 8014e84:	b085      	sub	sp, #20
 8014e86:	0007      	movs	r7, r0
 8014e88:	0011      	movs	r1, r2
 8014e8a:	0028      	movs	r0, r5
 8014e8c:	0014      	movs	r4, r2
 8014e8e:	f7ff ffdd 	bl	8014e4c <__mcmp>
 8014e92:	1e06      	subs	r6, r0, #0
 8014e94:	d108      	bne.n	8014ea8 <__mdiff+0x28>
 8014e96:	0001      	movs	r1, r0
 8014e98:	0038      	movs	r0, r7
 8014e9a:	f7ff fd84 	bl	80149a6 <_Balloc>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	6146      	str	r6, [r0, #20]
 8014ea2:	6103      	str	r3, [r0, #16]
 8014ea4:	b005      	add	sp, #20
 8014ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	9301      	str	r3, [sp, #4]
 8014eac:	2800      	cmp	r0, #0
 8014eae:	db04      	blt.n	8014eba <__mdiff+0x3a>
 8014eb0:	0023      	movs	r3, r4
 8014eb2:	002c      	movs	r4, r5
 8014eb4:	001d      	movs	r5, r3
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	9301      	str	r3, [sp, #4]
 8014eba:	6861      	ldr	r1, [r4, #4]
 8014ebc:	0038      	movs	r0, r7
 8014ebe:	f7ff fd72 	bl	80149a6 <_Balloc>
 8014ec2:	002f      	movs	r7, r5
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	9b01      	ldr	r3, [sp, #4]
 8014ec8:	6926      	ldr	r6, [r4, #16]
 8014eca:	60c3      	str	r3, [r0, #12]
 8014ecc:	3414      	adds	r4, #20
 8014ece:	00b3      	lsls	r3, r6, #2
 8014ed0:	18e3      	adds	r3, r4, r3
 8014ed2:	9302      	str	r3, [sp, #8]
 8014ed4:	692b      	ldr	r3, [r5, #16]
 8014ed6:	3714      	adds	r7, #20
 8014ed8:	009b      	lsls	r3, r3, #2
 8014eda:	18fb      	adds	r3, r7, r3
 8014edc:	9303      	str	r3, [sp, #12]
 8014ede:	0003      	movs	r3, r0
 8014ee0:	4694      	mov	ip, r2
 8014ee2:	3314      	adds	r3, #20
 8014ee4:	cc20      	ldmia	r4!, {r5}
 8014ee6:	cf04      	ldmia	r7!, {r2}
 8014ee8:	9201      	str	r2, [sp, #4]
 8014eea:	b2aa      	uxth	r2, r5
 8014eec:	4494      	add	ip, r2
 8014eee:	466a      	mov	r2, sp
 8014ef0:	4661      	mov	r1, ip
 8014ef2:	8892      	ldrh	r2, [r2, #4]
 8014ef4:	0c2d      	lsrs	r5, r5, #16
 8014ef6:	1a8a      	subs	r2, r1, r2
 8014ef8:	9901      	ldr	r1, [sp, #4]
 8014efa:	0c09      	lsrs	r1, r1, #16
 8014efc:	1a69      	subs	r1, r5, r1
 8014efe:	1415      	asrs	r5, r2, #16
 8014f00:	1949      	adds	r1, r1, r5
 8014f02:	140d      	asrs	r5, r1, #16
 8014f04:	b292      	uxth	r2, r2
 8014f06:	0409      	lsls	r1, r1, #16
 8014f08:	430a      	orrs	r2, r1
 8014f0a:	601a      	str	r2, [r3, #0]
 8014f0c:	9a03      	ldr	r2, [sp, #12]
 8014f0e:	46ac      	mov	ip, r5
 8014f10:	3304      	adds	r3, #4
 8014f12:	42ba      	cmp	r2, r7
 8014f14:	d8e6      	bhi.n	8014ee4 <__mdiff+0x64>
 8014f16:	9902      	ldr	r1, [sp, #8]
 8014f18:	001a      	movs	r2, r3
 8014f1a:	428c      	cmp	r4, r1
 8014f1c:	d305      	bcc.n	8014f2a <__mdiff+0xaa>
 8014f1e:	3a04      	subs	r2, #4
 8014f20:	6813      	ldr	r3, [r2, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00e      	beq.n	8014f44 <__mdiff+0xc4>
 8014f26:	6106      	str	r6, [r0, #16]
 8014f28:	e7bc      	b.n	8014ea4 <__mdiff+0x24>
 8014f2a:	cc04      	ldmia	r4!, {r2}
 8014f2c:	b291      	uxth	r1, r2
 8014f2e:	4461      	add	r1, ip
 8014f30:	140d      	asrs	r5, r1, #16
 8014f32:	0c12      	lsrs	r2, r2, #16
 8014f34:	1952      	adds	r2, r2, r5
 8014f36:	1415      	asrs	r5, r2, #16
 8014f38:	b289      	uxth	r1, r1
 8014f3a:	0412      	lsls	r2, r2, #16
 8014f3c:	430a      	orrs	r2, r1
 8014f3e:	46ac      	mov	ip, r5
 8014f40:	c304      	stmia	r3!, {r2}
 8014f42:	e7e8      	b.n	8014f16 <__mdiff+0x96>
 8014f44:	3e01      	subs	r6, #1
 8014f46:	e7ea      	b.n	8014f1e <__mdiff+0x9e>

08014f48 <__ulp>:
 8014f48:	000b      	movs	r3, r1
 8014f4a:	4910      	ldr	r1, [pc, #64]	; (8014f8c <__ulp+0x44>)
 8014f4c:	b510      	push	{r4, lr}
 8014f4e:	4019      	ands	r1, r3
 8014f50:	4b0f      	ldr	r3, [pc, #60]	; (8014f90 <__ulp+0x48>)
 8014f52:	18c9      	adds	r1, r1, r3
 8014f54:	2900      	cmp	r1, #0
 8014f56:	dd04      	ble.n	8014f62 <__ulp+0x1a>
 8014f58:	2200      	movs	r2, #0
 8014f5a:	000b      	movs	r3, r1
 8014f5c:	0010      	movs	r0, r2
 8014f5e:	0019      	movs	r1, r3
 8014f60:	bd10      	pop	{r4, pc}
 8014f62:	4249      	negs	r1, r1
 8014f64:	1509      	asrs	r1, r1, #20
 8014f66:	2200      	movs	r2, #0
 8014f68:	2300      	movs	r3, #0
 8014f6a:	2913      	cmp	r1, #19
 8014f6c:	dc04      	bgt.n	8014f78 <__ulp+0x30>
 8014f6e:	2080      	movs	r0, #128	; 0x80
 8014f70:	0300      	lsls	r0, r0, #12
 8014f72:	4108      	asrs	r0, r1
 8014f74:	0003      	movs	r3, r0
 8014f76:	e7f1      	b.n	8014f5c <__ulp+0x14>
 8014f78:	3914      	subs	r1, #20
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	291e      	cmp	r1, #30
 8014f7e:	dc02      	bgt.n	8014f86 <__ulp+0x3e>
 8014f80:	241f      	movs	r4, #31
 8014f82:	1a61      	subs	r1, r4, r1
 8014f84:	4088      	lsls	r0, r1
 8014f86:	0002      	movs	r2, r0
 8014f88:	e7e8      	b.n	8014f5c <__ulp+0x14>
 8014f8a:	46c0      	nop			; (mov r8, r8)
 8014f8c:	7ff00000 	.word	0x7ff00000
 8014f90:	fcc00000 	.word	0xfcc00000

08014f94 <__b2d>:
 8014f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f96:	0006      	movs	r6, r0
 8014f98:	6903      	ldr	r3, [r0, #16]
 8014f9a:	3614      	adds	r6, #20
 8014f9c:	009b      	lsls	r3, r3, #2
 8014f9e:	18f3      	adds	r3, r6, r3
 8014fa0:	1f1d      	subs	r5, r3, #4
 8014fa2:	682c      	ldr	r4, [r5, #0]
 8014fa4:	000f      	movs	r7, r1
 8014fa6:	0020      	movs	r0, r4
 8014fa8:	9301      	str	r3, [sp, #4]
 8014faa:	f7ff fdc9 	bl	8014b40 <__hi0bits>
 8014fae:	2320      	movs	r3, #32
 8014fb0:	1a1b      	subs	r3, r3, r0
 8014fb2:	603b      	str	r3, [r7, #0]
 8014fb4:	491c      	ldr	r1, [pc, #112]	; (8015028 <__b2d+0x94>)
 8014fb6:	280a      	cmp	r0, #10
 8014fb8:	dc16      	bgt.n	8014fe8 <__b2d+0x54>
 8014fba:	230b      	movs	r3, #11
 8014fbc:	0027      	movs	r7, r4
 8014fbe:	1a1b      	subs	r3, r3, r0
 8014fc0:	40df      	lsrs	r7, r3
 8014fc2:	4339      	orrs	r1, r7
 8014fc4:	469c      	mov	ip, r3
 8014fc6:	000b      	movs	r3, r1
 8014fc8:	2100      	movs	r1, #0
 8014fca:	42ae      	cmp	r6, r5
 8014fcc:	d202      	bcs.n	8014fd4 <__b2d+0x40>
 8014fce:	9901      	ldr	r1, [sp, #4]
 8014fd0:	3908      	subs	r1, #8
 8014fd2:	6809      	ldr	r1, [r1, #0]
 8014fd4:	3015      	adds	r0, #21
 8014fd6:	4084      	lsls	r4, r0
 8014fd8:	4660      	mov	r0, ip
 8014fda:	40c1      	lsrs	r1, r0
 8014fdc:	430c      	orrs	r4, r1
 8014fde:	0022      	movs	r2, r4
 8014fe0:	0010      	movs	r0, r2
 8014fe2:	0019      	movs	r1, r3
 8014fe4:	b003      	add	sp, #12
 8014fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fe8:	2700      	movs	r7, #0
 8014fea:	42ae      	cmp	r6, r5
 8014fec:	d202      	bcs.n	8014ff4 <__b2d+0x60>
 8014fee:	9d01      	ldr	r5, [sp, #4]
 8014ff0:	3d08      	subs	r5, #8
 8014ff2:	682f      	ldr	r7, [r5, #0]
 8014ff4:	380b      	subs	r0, #11
 8014ff6:	4684      	mov	ip, r0
 8014ff8:	1e03      	subs	r3, r0, #0
 8014ffa:	d012      	beq.n	8015022 <__b2d+0x8e>
 8014ffc:	409c      	lsls	r4, r3
 8014ffe:	2020      	movs	r0, #32
 8015000:	4321      	orrs	r1, r4
 8015002:	003c      	movs	r4, r7
 8015004:	1ac0      	subs	r0, r0, r3
 8015006:	40c4      	lsrs	r4, r0
 8015008:	4321      	orrs	r1, r4
 801500a:	000b      	movs	r3, r1
 801500c:	2100      	movs	r1, #0
 801500e:	42b5      	cmp	r5, r6
 8015010:	d901      	bls.n	8015016 <__b2d+0x82>
 8015012:	3d04      	subs	r5, #4
 8015014:	6829      	ldr	r1, [r5, #0]
 8015016:	4664      	mov	r4, ip
 8015018:	40c1      	lsrs	r1, r0
 801501a:	40a7      	lsls	r7, r4
 801501c:	430f      	orrs	r7, r1
 801501e:	003a      	movs	r2, r7
 8015020:	e7de      	b.n	8014fe0 <__b2d+0x4c>
 8015022:	4321      	orrs	r1, r4
 8015024:	000b      	movs	r3, r1
 8015026:	e7fa      	b.n	801501e <__b2d+0x8a>
 8015028:	3ff00000 	.word	0x3ff00000

0801502c <__d2b>:
 801502c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801502e:	001d      	movs	r5, r3
 8015030:	2101      	movs	r1, #1
 8015032:	0014      	movs	r4, r2
 8015034:	9f08      	ldr	r7, [sp, #32]
 8015036:	f7ff fcb6 	bl	80149a6 <_Balloc>
 801503a:	032b      	lsls	r3, r5, #12
 801503c:	006d      	lsls	r5, r5, #1
 801503e:	0006      	movs	r6, r0
 8015040:	0b1b      	lsrs	r3, r3, #12
 8015042:	0d6d      	lsrs	r5, r5, #21
 8015044:	d124      	bne.n	8015090 <__d2b+0x64>
 8015046:	9301      	str	r3, [sp, #4]
 8015048:	2c00      	cmp	r4, #0
 801504a:	d027      	beq.n	801509c <__d2b+0x70>
 801504c:	4668      	mov	r0, sp
 801504e:	9400      	str	r4, [sp, #0]
 8015050:	f7ff fd90 	bl	8014b74 <__lo0bits>
 8015054:	9c00      	ldr	r4, [sp, #0]
 8015056:	2800      	cmp	r0, #0
 8015058:	d01e      	beq.n	8015098 <__d2b+0x6c>
 801505a:	9b01      	ldr	r3, [sp, #4]
 801505c:	2120      	movs	r1, #32
 801505e:	001a      	movs	r2, r3
 8015060:	1a09      	subs	r1, r1, r0
 8015062:	408a      	lsls	r2, r1
 8015064:	40c3      	lsrs	r3, r0
 8015066:	4322      	orrs	r2, r4
 8015068:	6172      	str	r2, [r6, #20]
 801506a:	9301      	str	r3, [sp, #4]
 801506c:	9c01      	ldr	r4, [sp, #4]
 801506e:	61b4      	str	r4, [r6, #24]
 8015070:	1e63      	subs	r3, r4, #1
 8015072:	419c      	sbcs	r4, r3
 8015074:	3401      	adds	r4, #1
 8015076:	6134      	str	r4, [r6, #16]
 8015078:	2d00      	cmp	r5, #0
 801507a:	d018      	beq.n	80150ae <__d2b+0x82>
 801507c:	4b12      	ldr	r3, [pc, #72]	; (80150c8 <__d2b+0x9c>)
 801507e:	18ed      	adds	r5, r5, r3
 8015080:	2335      	movs	r3, #53	; 0x35
 8015082:	182d      	adds	r5, r5, r0
 8015084:	603d      	str	r5, [r7, #0]
 8015086:	1a18      	subs	r0, r3, r0
 8015088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801508a:	6018      	str	r0, [r3, #0]
 801508c:	0030      	movs	r0, r6
 801508e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015090:	2280      	movs	r2, #128	; 0x80
 8015092:	0352      	lsls	r2, r2, #13
 8015094:	4313      	orrs	r3, r2
 8015096:	e7d6      	b.n	8015046 <__d2b+0x1a>
 8015098:	6174      	str	r4, [r6, #20]
 801509a:	e7e7      	b.n	801506c <__d2b+0x40>
 801509c:	a801      	add	r0, sp, #4
 801509e:	f7ff fd69 	bl	8014b74 <__lo0bits>
 80150a2:	2401      	movs	r4, #1
 80150a4:	9b01      	ldr	r3, [sp, #4]
 80150a6:	6134      	str	r4, [r6, #16]
 80150a8:	6173      	str	r3, [r6, #20]
 80150aa:	3020      	adds	r0, #32
 80150ac:	e7e4      	b.n	8015078 <__d2b+0x4c>
 80150ae:	4b07      	ldr	r3, [pc, #28]	; (80150cc <__d2b+0xa0>)
 80150b0:	18c0      	adds	r0, r0, r3
 80150b2:	4b07      	ldr	r3, [pc, #28]	; (80150d0 <__d2b+0xa4>)
 80150b4:	6038      	str	r0, [r7, #0]
 80150b6:	18e3      	adds	r3, r4, r3
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	18f3      	adds	r3, r6, r3
 80150bc:	6958      	ldr	r0, [r3, #20]
 80150be:	f7ff fd3f 	bl	8014b40 <__hi0bits>
 80150c2:	0164      	lsls	r4, r4, #5
 80150c4:	1a20      	subs	r0, r4, r0
 80150c6:	e7df      	b.n	8015088 <__d2b+0x5c>
 80150c8:	fffffbcd 	.word	0xfffffbcd
 80150cc:	fffffbce 	.word	0xfffffbce
 80150d0:	3fffffff 	.word	0x3fffffff

080150d4 <__ratio>:
 80150d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150d6:	b085      	sub	sp, #20
 80150d8:	000f      	movs	r7, r1
 80150da:	a902      	add	r1, sp, #8
 80150dc:	0006      	movs	r6, r0
 80150de:	f7ff ff59 	bl	8014f94 <__b2d>
 80150e2:	0004      	movs	r4, r0
 80150e4:	000d      	movs	r5, r1
 80150e6:	0038      	movs	r0, r7
 80150e8:	a903      	add	r1, sp, #12
 80150ea:	9400      	str	r4, [sp, #0]
 80150ec:	9501      	str	r5, [sp, #4]
 80150ee:	f7ff ff51 	bl	8014f94 <__b2d>
 80150f2:	6936      	ldr	r6, [r6, #16]
 80150f4:	693f      	ldr	r7, [r7, #16]
 80150f6:	0002      	movs	r2, r0
 80150f8:	1bf7      	subs	r7, r6, r7
 80150fa:	017e      	lsls	r6, r7, #5
 80150fc:	46b4      	mov	ip, r6
 80150fe:	9f03      	ldr	r7, [sp, #12]
 8015100:	9e02      	ldr	r6, [sp, #8]
 8015102:	000b      	movs	r3, r1
 8015104:	1bf6      	subs	r6, r6, r7
 8015106:	4466      	add	r6, ip
 8015108:	0537      	lsls	r7, r6, #20
 801510a:	2e00      	cmp	r6, #0
 801510c:	dd07      	ble.n	801511e <__ratio+0x4a>
 801510e:	1979      	adds	r1, r7, r5
 8015110:	9101      	str	r1, [sp, #4]
 8015112:	9800      	ldr	r0, [sp, #0]
 8015114:	9901      	ldr	r1, [sp, #4]
 8015116:	f7ec f997 	bl	8001448 <__aeabi_ddiv>
 801511a:	b005      	add	sp, #20
 801511c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801511e:	1bcb      	subs	r3, r1, r7
 8015120:	e7f7      	b.n	8015112 <__ratio+0x3e>

08015122 <__copybits>:
 8015122:	0013      	movs	r3, r2
 8015124:	3901      	subs	r1, #1
 8015126:	b510      	push	{r4, lr}
 8015128:	1149      	asrs	r1, r1, #5
 801512a:	6912      	ldr	r2, [r2, #16]
 801512c:	3101      	adds	r1, #1
 801512e:	0089      	lsls	r1, r1, #2
 8015130:	3314      	adds	r3, #20
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	1841      	adds	r1, r0, r1
 8015136:	189a      	adds	r2, r3, r2
 8015138:	429a      	cmp	r2, r3
 801513a:	d803      	bhi.n	8015144 <__copybits+0x22>
 801513c:	2300      	movs	r3, #0
 801513e:	4281      	cmp	r1, r0
 8015140:	d803      	bhi.n	801514a <__copybits+0x28>
 8015142:	bd10      	pop	{r4, pc}
 8015144:	cb10      	ldmia	r3!, {r4}
 8015146:	c010      	stmia	r0!, {r4}
 8015148:	e7f6      	b.n	8015138 <__copybits+0x16>
 801514a:	c008      	stmia	r0!, {r3}
 801514c:	e7f7      	b.n	801513e <__copybits+0x1c>

0801514e <__any_on>:
 801514e:	0002      	movs	r2, r0
 8015150:	6900      	ldr	r0, [r0, #16]
 8015152:	b510      	push	{r4, lr}
 8015154:	3214      	adds	r2, #20
 8015156:	114b      	asrs	r3, r1, #5
 8015158:	4298      	cmp	r0, r3
 801515a:	db12      	blt.n	8015182 <__any_on+0x34>
 801515c:	dd0b      	ble.n	8015176 <__any_on+0x28>
 801515e:	201f      	movs	r0, #31
 8015160:	4001      	ands	r1, r0
 8015162:	d008      	beq.n	8015176 <__any_on+0x28>
 8015164:	0098      	lsls	r0, r3, #2
 8015166:	5884      	ldr	r4, [r0, r2]
 8015168:	0020      	movs	r0, r4
 801516a:	40c8      	lsrs	r0, r1
 801516c:	4088      	lsls	r0, r1
 801516e:	0001      	movs	r1, r0
 8015170:	2001      	movs	r0, #1
 8015172:	428c      	cmp	r4, r1
 8015174:	d104      	bne.n	8015180 <__any_on+0x32>
 8015176:	009b      	lsls	r3, r3, #2
 8015178:	18d3      	adds	r3, r2, r3
 801517a:	4293      	cmp	r3, r2
 801517c:	d803      	bhi.n	8015186 <__any_on+0x38>
 801517e:	2000      	movs	r0, #0
 8015180:	bd10      	pop	{r4, pc}
 8015182:	0003      	movs	r3, r0
 8015184:	e7f7      	b.n	8015176 <__any_on+0x28>
 8015186:	3b04      	subs	r3, #4
 8015188:	6819      	ldr	r1, [r3, #0]
 801518a:	2900      	cmp	r1, #0
 801518c:	d0f5      	beq.n	801517a <__any_on+0x2c>
 801518e:	2001      	movs	r0, #1
 8015190:	e7f6      	b.n	8015180 <__any_on+0x32>

08015192 <_calloc_r>:
 8015192:	434a      	muls	r2, r1
 8015194:	b570      	push	{r4, r5, r6, lr}
 8015196:	0011      	movs	r1, r2
 8015198:	0014      	movs	r4, r2
 801519a:	f7fe f86f 	bl	801327c <_malloc_r>
 801519e:	1e05      	subs	r5, r0, #0
 80151a0:	d003      	beq.n	80151aa <_calloc_r+0x18>
 80151a2:	0022      	movs	r2, r4
 80151a4:	2100      	movs	r1, #0
 80151a6:	f7fe f817 	bl	80131d8 <memset>
 80151aa:	0028      	movs	r0, r5
 80151ac:	bd70      	pop	{r4, r5, r6, pc}

080151ae <_realloc_r>:
 80151ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b0:	0007      	movs	r7, r0
 80151b2:	000d      	movs	r5, r1
 80151b4:	0016      	movs	r6, r2
 80151b6:	2900      	cmp	r1, #0
 80151b8:	d105      	bne.n	80151c6 <_realloc_r+0x18>
 80151ba:	0011      	movs	r1, r2
 80151bc:	f7fe f85e 	bl	801327c <_malloc_r>
 80151c0:	0004      	movs	r4, r0
 80151c2:	0020      	movs	r0, r4
 80151c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c6:	2a00      	cmp	r2, #0
 80151c8:	d103      	bne.n	80151d2 <_realloc_r+0x24>
 80151ca:	f7fe f80d 	bl	80131e8 <_free_r>
 80151ce:	0034      	movs	r4, r6
 80151d0:	e7f7      	b.n	80151c2 <_realloc_r+0x14>
 80151d2:	f000 fb07 	bl	80157e4 <_malloc_usable_size_r>
 80151d6:	002c      	movs	r4, r5
 80151d8:	42b0      	cmp	r0, r6
 80151da:	d2f2      	bcs.n	80151c2 <_realloc_r+0x14>
 80151dc:	0031      	movs	r1, r6
 80151de:	0038      	movs	r0, r7
 80151e0:	f7fe f84c 	bl	801327c <_malloc_r>
 80151e4:	1e04      	subs	r4, r0, #0
 80151e6:	d0ec      	beq.n	80151c2 <_realloc_r+0x14>
 80151e8:	0029      	movs	r1, r5
 80151ea:	0032      	movs	r2, r6
 80151ec:	f7fd ffeb 	bl	80131c6 <memcpy>
 80151f0:	0029      	movs	r1, r5
 80151f2:	0038      	movs	r0, r7
 80151f4:	f7fd fff8 	bl	80131e8 <_free_r>
 80151f8:	e7e3      	b.n	80151c2 <_realloc_r+0x14>
	...

080151fc <__ssputs_r>:
 80151fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151fe:	688e      	ldr	r6, [r1, #8]
 8015200:	b085      	sub	sp, #20
 8015202:	0007      	movs	r7, r0
 8015204:	000c      	movs	r4, r1
 8015206:	9203      	str	r2, [sp, #12]
 8015208:	9301      	str	r3, [sp, #4]
 801520a:	429e      	cmp	r6, r3
 801520c:	d83c      	bhi.n	8015288 <__ssputs_r+0x8c>
 801520e:	2390      	movs	r3, #144	; 0x90
 8015210:	898a      	ldrh	r2, [r1, #12]
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	421a      	tst	r2, r3
 8015216:	d034      	beq.n	8015282 <__ssputs_r+0x86>
 8015218:	2503      	movs	r5, #3
 801521a:	6909      	ldr	r1, [r1, #16]
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	1a5b      	subs	r3, r3, r1
 8015220:	9302      	str	r3, [sp, #8]
 8015222:	6963      	ldr	r3, [r4, #20]
 8015224:	9802      	ldr	r0, [sp, #8]
 8015226:	435d      	muls	r5, r3
 8015228:	0feb      	lsrs	r3, r5, #31
 801522a:	195d      	adds	r5, r3, r5
 801522c:	9b01      	ldr	r3, [sp, #4]
 801522e:	106d      	asrs	r5, r5, #1
 8015230:	3301      	adds	r3, #1
 8015232:	181b      	adds	r3, r3, r0
 8015234:	42ab      	cmp	r3, r5
 8015236:	d900      	bls.n	801523a <__ssputs_r+0x3e>
 8015238:	001d      	movs	r5, r3
 801523a:	0553      	lsls	r3, r2, #21
 801523c:	d532      	bpl.n	80152a4 <__ssputs_r+0xa8>
 801523e:	0029      	movs	r1, r5
 8015240:	0038      	movs	r0, r7
 8015242:	f7fe f81b 	bl	801327c <_malloc_r>
 8015246:	1e06      	subs	r6, r0, #0
 8015248:	d109      	bne.n	801525e <__ssputs_r+0x62>
 801524a:	230c      	movs	r3, #12
 801524c:	603b      	str	r3, [r7, #0]
 801524e:	2340      	movs	r3, #64	; 0x40
 8015250:	2001      	movs	r0, #1
 8015252:	89a2      	ldrh	r2, [r4, #12]
 8015254:	4240      	negs	r0, r0
 8015256:	4313      	orrs	r3, r2
 8015258:	81a3      	strh	r3, [r4, #12]
 801525a:	b005      	add	sp, #20
 801525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801525e:	9a02      	ldr	r2, [sp, #8]
 8015260:	6921      	ldr	r1, [r4, #16]
 8015262:	f7fd ffb0 	bl	80131c6 <memcpy>
 8015266:	89a3      	ldrh	r3, [r4, #12]
 8015268:	4a14      	ldr	r2, [pc, #80]	; (80152bc <__ssputs_r+0xc0>)
 801526a:	401a      	ands	r2, r3
 801526c:	2380      	movs	r3, #128	; 0x80
 801526e:	4313      	orrs	r3, r2
 8015270:	81a3      	strh	r3, [r4, #12]
 8015272:	9b02      	ldr	r3, [sp, #8]
 8015274:	6126      	str	r6, [r4, #16]
 8015276:	18f6      	adds	r6, r6, r3
 8015278:	6026      	str	r6, [r4, #0]
 801527a:	6165      	str	r5, [r4, #20]
 801527c:	9e01      	ldr	r6, [sp, #4]
 801527e:	1aed      	subs	r5, r5, r3
 8015280:	60a5      	str	r5, [r4, #8]
 8015282:	9b01      	ldr	r3, [sp, #4]
 8015284:	429e      	cmp	r6, r3
 8015286:	d900      	bls.n	801528a <__ssputs_r+0x8e>
 8015288:	9e01      	ldr	r6, [sp, #4]
 801528a:	0032      	movs	r2, r6
 801528c:	9903      	ldr	r1, [sp, #12]
 801528e:	6820      	ldr	r0, [r4, #0]
 8015290:	f000 fa95 	bl	80157be <memmove>
 8015294:	68a3      	ldr	r3, [r4, #8]
 8015296:	2000      	movs	r0, #0
 8015298:	1b9b      	subs	r3, r3, r6
 801529a:	60a3      	str	r3, [r4, #8]
 801529c:	6823      	ldr	r3, [r4, #0]
 801529e:	199e      	adds	r6, r3, r6
 80152a0:	6026      	str	r6, [r4, #0]
 80152a2:	e7da      	b.n	801525a <__ssputs_r+0x5e>
 80152a4:	002a      	movs	r2, r5
 80152a6:	0038      	movs	r0, r7
 80152a8:	f7ff ff81 	bl	80151ae <_realloc_r>
 80152ac:	1e06      	subs	r6, r0, #0
 80152ae:	d1e0      	bne.n	8015272 <__ssputs_r+0x76>
 80152b0:	6921      	ldr	r1, [r4, #16]
 80152b2:	0038      	movs	r0, r7
 80152b4:	f7fd ff98 	bl	80131e8 <_free_r>
 80152b8:	e7c7      	b.n	801524a <__ssputs_r+0x4e>
 80152ba:	46c0      	nop			; (mov r8, r8)
 80152bc:	fffffb7f 	.word	0xfffffb7f

080152c0 <_svfiprintf_r>:
 80152c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152c2:	b0a1      	sub	sp, #132	; 0x84
 80152c4:	9003      	str	r0, [sp, #12]
 80152c6:	001d      	movs	r5, r3
 80152c8:	898b      	ldrh	r3, [r1, #12]
 80152ca:	000f      	movs	r7, r1
 80152cc:	0016      	movs	r6, r2
 80152ce:	061b      	lsls	r3, r3, #24
 80152d0:	d511      	bpl.n	80152f6 <_svfiprintf_r+0x36>
 80152d2:	690b      	ldr	r3, [r1, #16]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d10e      	bne.n	80152f6 <_svfiprintf_r+0x36>
 80152d8:	2140      	movs	r1, #64	; 0x40
 80152da:	f7fd ffcf 	bl	801327c <_malloc_r>
 80152de:	6038      	str	r0, [r7, #0]
 80152e0:	6138      	str	r0, [r7, #16]
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d105      	bne.n	80152f2 <_svfiprintf_r+0x32>
 80152e6:	230c      	movs	r3, #12
 80152e8:	9a03      	ldr	r2, [sp, #12]
 80152ea:	3801      	subs	r0, #1
 80152ec:	6013      	str	r3, [r2, #0]
 80152ee:	b021      	add	sp, #132	; 0x84
 80152f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152f2:	2340      	movs	r3, #64	; 0x40
 80152f4:	617b      	str	r3, [r7, #20]
 80152f6:	2300      	movs	r3, #0
 80152f8:	ac08      	add	r4, sp, #32
 80152fa:	6163      	str	r3, [r4, #20]
 80152fc:	3320      	adds	r3, #32
 80152fe:	7663      	strb	r3, [r4, #25]
 8015300:	3310      	adds	r3, #16
 8015302:	76a3      	strb	r3, [r4, #26]
 8015304:	9507      	str	r5, [sp, #28]
 8015306:	0035      	movs	r5, r6
 8015308:	782b      	ldrb	r3, [r5, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d001      	beq.n	8015312 <_svfiprintf_r+0x52>
 801530e:	2b25      	cmp	r3, #37	; 0x25
 8015310:	d146      	bne.n	80153a0 <_svfiprintf_r+0xe0>
 8015312:	1bab      	subs	r3, r5, r6
 8015314:	9305      	str	r3, [sp, #20]
 8015316:	d00c      	beq.n	8015332 <_svfiprintf_r+0x72>
 8015318:	0032      	movs	r2, r6
 801531a:	0039      	movs	r1, r7
 801531c:	9803      	ldr	r0, [sp, #12]
 801531e:	f7ff ff6d 	bl	80151fc <__ssputs_r>
 8015322:	1c43      	adds	r3, r0, #1
 8015324:	d100      	bne.n	8015328 <_svfiprintf_r+0x68>
 8015326:	e0ae      	b.n	8015486 <_svfiprintf_r+0x1c6>
 8015328:	6962      	ldr	r2, [r4, #20]
 801532a:	9b05      	ldr	r3, [sp, #20]
 801532c:	4694      	mov	ip, r2
 801532e:	4463      	add	r3, ip
 8015330:	6163      	str	r3, [r4, #20]
 8015332:	782b      	ldrb	r3, [r5, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d100      	bne.n	801533a <_svfiprintf_r+0x7a>
 8015338:	e0a5      	b.n	8015486 <_svfiprintf_r+0x1c6>
 801533a:	2201      	movs	r2, #1
 801533c:	2300      	movs	r3, #0
 801533e:	4252      	negs	r2, r2
 8015340:	6062      	str	r2, [r4, #4]
 8015342:	a904      	add	r1, sp, #16
 8015344:	3254      	adds	r2, #84	; 0x54
 8015346:	1852      	adds	r2, r2, r1
 8015348:	1c6e      	adds	r6, r5, #1
 801534a:	6023      	str	r3, [r4, #0]
 801534c:	60e3      	str	r3, [r4, #12]
 801534e:	60a3      	str	r3, [r4, #8]
 8015350:	7013      	strb	r3, [r2, #0]
 8015352:	65a3      	str	r3, [r4, #88]	; 0x58
 8015354:	7831      	ldrb	r1, [r6, #0]
 8015356:	2205      	movs	r2, #5
 8015358:	4853      	ldr	r0, [pc, #332]	; (80154a8 <_svfiprintf_r+0x1e8>)
 801535a:	f000 fa25 	bl	80157a8 <memchr>
 801535e:	1c75      	adds	r5, r6, #1
 8015360:	2800      	cmp	r0, #0
 8015362:	d11f      	bne.n	80153a4 <_svfiprintf_r+0xe4>
 8015364:	6822      	ldr	r2, [r4, #0]
 8015366:	06d3      	lsls	r3, r2, #27
 8015368:	d504      	bpl.n	8015374 <_svfiprintf_r+0xb4>
 801536a:	2353      	movs	r3, #83	; 0x53
 801536c:	a904      	add	r1, sp, #16
 801536e:	185b      	adds	r3, r3, r1
 8015370:	2120      	movs	r1, #32
 8015372:	7019      	strb	r1, [r3, #0]
 8015374:	0713      	lsls	r3, r2, #28
 8015376:	d504      	bpl.n	8015382 <_svfiprintf_r+0xc2>
 8015378:	2353      	movs	r3, #83	; 0x53
 801537a:	a904      	add	r1, sp, #16
 801537c:	185b      	adds	r3, r3, r1
 801537e:	212b      	movs	r1, #43	; 0x2b
 8015380:	7019      	strb	r1, [r3, #0]
 8015382:	7833      	ldrb	r3, [r6, #0]
 8015384:	2b2a      	cmp	r3, #42	; 0x2a
 8015386:	d016      	beq.n	80153b6 <_svfiprintf_r+0xf6>
 8015388:	0035      	movs	r5, r6
 801538a:	2100      	movs	r1, #0
 801538c:	200a      	movs	r0, #10
 801538e:	68e3      	ldr	r3, [r4, #12]
 8015390:	782a      	ldrb	r2, [r5, #0]
 8015392:	1c6e      	adds	r6, r5, #1
 8015394:	3a30      	subs	r2, #48	; 0x30
 8015396:	2a09      	cmp	r2, #9
 8015398:	d94e      	bls.n	8015438 <_svfiprintf_r+0x178>
 801539a:	2900      	cmp	r1, #0
 801539c:	d018      	beq.n	80153d0 <_svfiprintf_r+0x110>
 801539e:	e010      	b.n	80153c2 <_svfiprintf_r+0x102>
 80153a0:	3501      	adds	r5, #1
 80153a2:	e7b1      	b.n	8015308 <_svfiprintf_r+0x48>
 80153a4:	4b40      	ldr	r3, [pc, #256]	; (80154a8 <_svfiprintf_r+0x1e8>)
 80153a6:	6822      	ldr	r2, [r4, #0]
 80153a8:	1ac0      	subs	r0, r0, r3
 80153aa:	2301      	movs	r3, #1
 80153ac:	4083      	lsls	r3, r0
 80153ae:	4313      	orrs	r3, r2
 80153b0:	6023      	str	r3, [r4, #0]
 80153b2:	002e      	movs	r6, r5
 80153b4:	e7ce      	b.n	8015354 <_svfiprintf_r+0x94>
 80153b6:	9b07      	ldr	r3, [sp, #28]
 80153b8:	1d19      	adds	r1, r3, #4
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	9107      	str	r1, [sp, #28]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	db01      	blt.n	80153c6 <_svfiprintf_r+0x106>
 80153c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80153c4:	e004      	b.n	80153d0 <_svfiprintf_r+0x110>
 80153c6:	425b      	negs	r3, r3
 80153c8:	60e3      	str	r3, [r4, #12]
 80153ca:	2302      	movs	r3, #2
 80153cc:	4313      	orrs	r3, r2
 80153ce:	6023      	str	r3, [r4, #0]
 80153d0:	782b      	ldrb	r3, [r5, #0]
 80153d2:	2b2e      	cmp	r3, #46	; 0x2e
 80153d4:	d10a      	bne.n	80153ec <_svfiprintf_r+0x12c>
 80153d6:	786b      	ldrb	r3, [r5, #1]
 80153d8:	2b2a      	cmp	r3, #42	; 0x2a
 80153da:	d135      	bne.n	8015448 <_svfiprintf_r+0x188>
 80153dc:	9b07      	ldr	r3, [sp, #28]
 80153de:	3502      	adds	r5, #2
 80153e0:	1d1a      	adds	r2, r3, #4
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	9207      	str	r2, [sp, #28]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	db2b      	blt.n	8015442 <_svfiprintf_r+0x182>
 80153ea:	9309      	str	r3, [sp, #36]	; 0x24
 80153ec:	4e2f      	ldr	r6, [pc, #188]	; (80154ac <_svfiprintf_r+0x1ec>)
 80153ee:	7829      	ldrb	r1, [r5, #0]
 80153f0:	2203      	movs	r2, #3
 80153f2:	0030      	movs	r0, r6
 80153f4:	f000 f9d8 	bl	80157a8 <memchr>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d006      	beq.n	801540a <_svfiprintf_r+0x14a>
 80153fc:	2340      	movs	r3, #64	; 0x40
 80153fe:	1b80      	subs	r0, r0, r6
 8015400:	4083      	lsls	r3, r0
 8015402:	6822      	ldr	r2, [r4, #0]
 8015404:	3501      	adds	r5, #1
 8015406:	4313      	orrs	r3, r2
 8015408:	6023      	str	r3, [r4, #0]
 801540a:	7829      	ldrb	r1, [r5, #0]
 801540c:	2206      	movs	r2, #6
 801540e:	4828      	ldr	r0, [pc, #160]	; (80154b0 <_svfiprintf_r+0x1f0>)
 8015410:	1c6e      	adds	r6, r5, #1
 8015412:	7621      	strb	r1, [r4, #24]
 8015414:	f000 f9c8 	bl	80157a8 <memchr>
 8015418:	2800      	cmp	r0, #0
 801541a:	d03c      	beq.n	8015496 <_svfiprintf_r+0x1d6>
 801541c:	4b25      	ldr	r3, [pc, #148]	; (80154b4 <_svfiprintf_r+0x1f4>)
 801541e:	2b00      	cmp	r3, #0
 8015420:	d125      	bne.n	801546e <_svfiprintf_r+0x1ae>
 8015422:	2207      	movs	r2, #7
 8015424:	9b07      	ldr	r3, [sp, #28]
 8015426:	3307      	adds	r3, #7
 8015428:	4393      	bics	r3, r2
 801542a:	3308      	adds	r3, #8
 801542c:	9307      	str	r3, [sp, #28]
 801542e:	6963      	ldr	r3, [r4, #20]
 8015430:	9a04      	ldr	r2, [sp, #16]
 8015432:	189b      	adds	r3, r3, r2
 8015434:	6163      	str	r3, [r4, #20]
 8015436:	e766      	b.n	8015306 <_svfiprintf_r+0x46>
 8015438:	4343      	muls	r3, r0
 801543a:	2101      	movs	r1, #1
 801543c:	189b      	adds	r3, r3, r2
 801543e:	0035      	movs	r5, r6
 8015440:	e7a6      	b.n	8015390 <_svfiprintf_r+0xd0>
 8015442:	2301      	movs	r3, #1
 8015444:	425b      	negs	r3, r3
 8015446:	e7d0      	b.n	80153ea <_svfiprintf_r+0x12a>
 8015448:	2300      	movs	r3, #0
 801544a:	200a      	movs	r0, #10
 801544c:	001a      	movs	r2, r3
 801544e:	3501      	adds	r5, #1
 8015450:	6063      	str	r3, [r4, #4]
 8015452:	7829      	ldrb	r1, [r5, #0]
 8015454:	1c6e      	adds	r6, r5, #1
 8015456:	3930      	subs	r1, #48	; 0x30
 8015458:	2909      	cmp	r1, #9
 801545a:	d903      	bls.n	8015464 <_svfiprintf_r+0x1a4>
 801545c:	2b00      	cmp	r3, #0
 801545e:	d0c5      	beq.n	80153ec <_svfiprintf_r+0x12c>
 8015460:	9209      	str	r2, [sp, #36]	; 0x24
 8015462:	e7c3      	b.n	80153ec <_svfiprintf_r+0x12c>
 8015464:	4342      	muls	r2, r0
 8015466:	2301      	movs	r3, #1
 8015468:	1852      	adds	r2, r2, r1
 801546a:	0035      	movs	r5, r6
 801546c:	e7f1      	b.n	8015452 <_svfiprintf_r+0x192>
 801546e:	ab07      	add	r3, sp, #28
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	003a      	movs	r2, r7
 8015474:	4b10      	ldr	r3, [pc, #64]	; (80154b8 <_svfiprintf_r+0x1f8>)
 8015476:	0021      	movs	r1, r4
 8015478:	9803      	ldr	r0, [sp, #12]
 801547a:	e000      	b.n	801547e <_svfiprintf_r+0x1be>
 801547c:	bf00      	nop
 801547e:	9004      	str	r0, [sp, #16]
 8015480:	9b04      	ldr	r3, [sp, #16]
 8015482:	3301      	adds	r3, #1
 8015484:	d1d3      	bne.n	801542e <_svfiprintf_r+0x16e>
 8015486:	89bb      	ldrh	r3, [r7, #12]
 8015488:	980d      	ldr	r0, [sp, #52]	; 0x34
 801548a:	065b      	lsls	r3, r3, #25
 801548c:	d400      	bmi.n	8015490 <_svfiprintf_r+0x1d0>
 801548e:	e72e      	b.n	80152ee <_svfiprintf_r+0x2e>
 8015490:	2001      	movs	r0, #1
 8015492:	4240      	negs	r0, r0
 8015494:	e72b      	b.n	80152ee <_svfiprintf_r+0x2e>
 8015496:	ab07      	add	r3, sp, #28
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	003a      	movs	r2, r7
 801549c:	4b06      	ldr	r3, [pc, #24]	; (80154b8 <_svfiprintf_r+0x1f8>)
 801549e:	0021      	movs	r1, r4
 80154a0:	9803      	ldr	r0, [sp, #12]
 80154a2:	f000 f879 	bl	8015598 <_printf_i>
 80154a6:	e7ea      	b.n	801547e <_svfiprintf_r+0x1be>
 80154a8:	08018c4c 	.word	0x08018c4c
 80154ac:	08018c52 	.word	0x08018c52
 80154b0:	08018c56 	.word	0x08018c56
 80154b4:	00000000 	.word	0x00000000
 80154b8:	080151fd 	.word	0x080151fd

080154bc <_printf_common>:
 80154bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154be:	0015      	movs	r5, r2
 80154c0:	9301      	str	r3, [sp, #4]
 80154c2:	688a      	ldr	r2, [r1, #8]
 80154c4:	690b      	ldr	r3, [r1, #16]
 80154c6:	9000      	str	r0, [sp, #0]
 80154c8:	000c      	movs	r4, r1
 80154ca:	4293      	cmp	r3, r2
 80154cc:	da00      	bge.n	80154d0 <_printf_common+0x14>
 80154ce:	0013      	movs	r3, r2
 80154d0:	0022      	movs	r2, r4
 80154d2:	602b      	str	r3, [r5, #0]
 80154d4:	3243      	adds	r2, #67	; 0x43
 80154d6:	7812      	ldrb	r2, [r2, #0]
 80154d8:	2a00      	cmp	r2, #0
 80154da:	d001      	beq.n	80154e0 <_printf_common+0x24>
 80154dc:	3301      	adds	r3, #1
 80154de:	602b      	str	r3, [r5, #0]
 80154e0:	6823      	ldr	r3, [r4, #0]
 80154e2:	069b      	lsls	r3, r3, #26
 80154e4:	d502      	bpl.n	80154ec <_printf_common+0x30>
 80154e6:	682b      	ldr	r3, [r5, #0]
 80154e8:	3302      	adds	r3, #2
 80154ea:	602b      	str	r3, [r5, #0]
 80154ec:	2706      	movs	r7, #6
 80154ee:	6823      	ldr	r3, [r4, #0]
 80154f0:	401f      	ands	r7, r3
 80154f2:	d027      	beq.n	8015544 <_printf_common+0x88>
 80154f4:	0023      	movs	r3, r4
 80154f6:	3343      	adds	r3, #67	; 0x43
 80154f8:	781b      	ldrb	r3, [r3, #0]
 80154fa:	1e5a      	subs	r2, r3, #1
 80154fc:	4193      	sbcs	r3, r2
 80154fe:	6822      	ldr	r2, [r4, #0]
 8015500:	0692      	lsls	r2, r2, #26
 8015502:	d430      	bmi.n	8015566 <_printf_common+0xaa>
 8015504:	0022      	movs	r2, r4
 8015506:	9901      	ldr	r1, [sp, #4]
 8015508:	3243      	adds	r2, #67	; 0x43
 801550a:	9800      	ldr	r0, [sp, #0]
 801550c:	9e08      	ldr	r6, [sp, #32]
 801550e:	47b0      	blx	r6
 8015510:	1c43      	adds	r3, r0, #1
 8015512:	d025      	beq.n	8015560 <_printf_common+0xa4>
 8015514:	2306      	movs	r3, #6
 8015516:	6820      	ldr	r0, [r4, #0]
 8015518:	682a      	ldr	r2, [r5, #0]
 801551a:	68e1      	ldr	r1, [r4, #12]
 801551c:	4003      	ands	r3, r0
 801551e:	2500      	movs	r5, #0
 8015520:	2b04      	cmp	r3, #4
 8015522:	d103      	bne.n	801552c <_printf_common+0x70>
 8015524:	1a8d      	subs	r5, r1, r2
 8015526:	43eb      	mvns	r3, r5
 8015528:	17db      	asrs	r3, r3, #31
 801552a:	401d      	ands	r5, r3
 801552c:	68a3      	ldr	r3, [r4, #8]
 801552e:	6922      	ldr	r2, [r4, #16]
 8015530:	4293      	cmp	r3, r2
 8015532:	dd01      	ble.n	8015538 <_printf_common+0x7c>
 8015534:	1a9b      	subs	r3, r3, r2
 8015536:	18ed      	adds	r5, r5, r3
 8015538:	2700      	movs	r7, #0
 801553a:	42bd      	cmp	r5, r7
 801553c:	d120      	bne.n	8015580 <_printf_common+0xc4>
 801553e:	2000      	movs	r0, #0
 8015540:	e010      	b.n	8015564 <_printf_common+0xa8>
 8015542:	3701      	adds	r7, #1
 8015544:	68e3      	ldr	r3, [r4, #12]
 8015546:	682a      	ldr	r2, [r5, #0]
 8015548:	1a9b      	subs	r3, r3, r2
 801554a:	42bb      	cmp	r3, r7
 801554c:	ddd2      	ble.n	80154f4 <_printf_common+0x38>
 801554e:	0022      	movs	r2, r4
 8015550:	2301      	movs	r3, #1
 8015552:	3219      	adds	r2, #25
 8015554:	9901      	ldr	r1, [sp, #4]
 8015556:	9800      	ldr	r0, [sp, #0]
 8015558:	9e08      	ldr	r6, [sp, #32]
 801555a:	47b0      	blx	r6
 801555c:	1c43      	adds	r3, r0, #1
 801555e:	d1f0      	bne.n	8015542 <_printf_common+0x86>
 8015560:	2001      	movs	r0, #1
 8015562:	4240      	negs	r0, r0
 8015564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015566:	2030      	movs	r0, #48	; 0x30
 8015568:	18e1      	adds	r1, r4, r3
 801556a:	3143      	adds	r1, #67	; 0x43
 801556c:	7008      	strb	r0, [r1, #0]
 801556e:	0021      	movs	r1, r4
 8015570:	1c5a      	adds	r2, r3, #1
 8015572:	3145      	adds	r1, #69	; 0x45
 8015574:	7809      	ldrb	r1, [r1, #0]
 8015576:	18a2      	adds	r2, r4, r2
 8015578:	3243      	adds	r2, #67	; 0x43
 801557a:	3302      	adds	r3, #2
 801557c:	7011      	strb	r1, [r2, #0]
 801557e:	e7c1      	b.n	8015504 <_printf_common+0x48>
 8015580:	0022      	movs	r2, r4
 8015582:	2301      	movs	r3, #1
 8015584:	321a      	adds	r2, #26
 8015586:	9901      	ldr	r1, [sp, #4]
 8015588:	9800      	ldr	r0, [sp, #0]
 801558a:	9e08      	ldr	r6, [sp, #32]
 801558c:	47b0      	blx	r6
 801558e:	1c43      	adds	r3, r0, #1
 8015590:	d0e6      	beq.n	8015560 <_printf_common+0xa4>
 8015592:	3701      	adds	r7, #1
 8015594:	e7d1      	b.n	801553a <_printf_common+0x7e>
	...

08015598 <_printf_i>:
 8015598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801559a:	b089      	sub	sp, #36	; 0x24
 801559c:	9204      	str	r2, [sp, #16]
 801559e:	000a      	movs	r2, r1
 80155a0:	3243      	adds	r2, #67	; 0x43
 80155a2:	9305      	str	r3, [sp, #20]
 80155a4:	9003      	str	r0, [sp, #12]
 80155a6:	9202      	str	r2, [sp, #8]
 80155a8:	7e0a      	ldrb	r2, [r1, #24]
 80155aa:	000c      	movs	r4, r1
 80155ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155ae:	2a6e      	cmp	r2, #110	; 0x6e
 80155b0:	d100      	bne.n	80155b4 <_printf_i+0x1c>
 80155b2:	e086      	b.n	80156c2 <_printf_i+0x12a>
 80155b4:	d81f      	bhi.n	80155f6 <_printf_i+0x5e>
 80155b6:	2a63      	cmp	r2, #99	; 0x63
 80155b8:	d033      	beq.n	8015622 <_printf_i+0x8a>
 80155ba:	d808      	bhi.n	80155ce <_printf_i+0x36>
 80155bc:	2a00      	cmp	r2, #0
 80155be:	d100      	bne.n	80155c2 <_printf_i+0x2a>
 80155c0:	e08c      	b.n	80156dc <_printf_i+0x144>
 80155c2:	2a58      	cmp	r2, #88	; 0x58
 80155c4:	d04d      	beq.n	8015662 <_printf_i+0xca>
 80155c6:	0025      	movs	r5, r4
 80155c8:	3542      	adds	r5, #66	; 0x42
 80155ca:	702a      	strb	r2, [r5, #0]
 80155cc:	e030      	b.n	8015630 <_printf_i+0x98>
 80155ce:	2a64      	cmp	r2, #100	; 0x64
 80155d0:	d001      	beq.n	80155d6 <_printf_i+0x3e>
 80155d2:	2a69      	cmp	r2, #105	; 0x69
 80155d4:	d1f7      	bne.n	80155c6 <_printf_i+0x2e>
 80155d6:	6819      	ldr	r1, [r3, #0]
 80155d8:	6825      	ldr	r5, [r4, #0]
 80155da:	1d0a      	adds	r2, r1, #4
 80155dc:	0628      	lsls	r0, r5, #24
 80155de:	d529      	bpl.n	8015634 <_printf_i+0x9c>
 80155e0:	6808      	ldr	r0, [r1, #0]
 80155e2:	601a      	str	r2, [r3, #0]
 80155e4:	2800      	cmp	r0, #0
 80155e6:	da03      	bge.n	80155f0 <_printf_i+0x58>
 80155e8:	232d      	movs	r3, #45	; 0x2d
 80155ea:	9a02      	ldr	r2, [sp, #8]
 80155ec:	4240      	negs	r0, r0
 80155ee:	7013      	strb	r3, [r2, #0]
 80155f0:	4e6b      	ldr	r6, [pc, #428]	; (80157a0 <_printf_i+0x208>)
 80155f2:	270a      	movs	r7, #10
 80155f4:	e04f      	b.n	8015696 <_printf_i+0xfe>
 80155f6:	2a73      	cmp	r2, #115	; 0x73
 80155f8:	d074      	beq.n	80156e4 <_printf_i+0x14c>
 80155fa:	d808      	bhi.n	801560e <_printf_i+0x76>
 80155fc:	2a6f      	cmp	r2, #111	; 0x6f
 80155fe:	d01f      	beq.n	8015640 <_printf_i+0xa8>
 8015600:	2a70      	cmp	r2, #112	; 0x70
 8015602:	d1e0      	bne.n	80155c6 <_printf_i+0x2e>
 8015604:	2220      	movs	r2, #32
 8015606:	6809      	ldr	r1, [r1, #0]
 8015608:	430a      	orrs	r2, r1
 801560a:	6022      	str	r2, [r4, #0]
 801560c:	e003      	b.n	8015616 <_printf_i+0x7e>
 801560e:	2a75      	cmp	r2, #117	; 0x75
 8015610:	d016      	beq.n	8015640 <_printf_i+0xa8>
 8015612:	2a78      	cmp	r2, #120	; 0x78
 8015614:	d1d7      	bne.n	80155c6 <_printf_i+0x2e>
 8015616:	0022      	movs	r2, r4
 8015618:	2178      	movs	r1, #120	; 0x78
 801561a:	3245      	adds	r2, #69	; 0x45
 801561c:	7011      	strb	r1, [r2, #0]
 801561e:	4e61      	ldr	r6, [pc, #388]	; (80157a4 <_printf_i+0x20c>)
 8015620:	e022      	b.n	8015668 <_printf_i+0xd0>
 8015622:	0025      	movs	r5, r4
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	3542      	adds	r5, #66	; 0x42
 8015628:	1d11      	adds	r1, r2, #4
 801562a:	6019      	str	r1, [r3, #0]
 801562c:	6813      	ldr	r3, [r2, #0]
 801562e:	702b      	strb	r3, [r5, #0]
 8015630:	2301      	movs	r3, #1
 8015632:	e065      	b.n	8015700 <_printf_i+0x168>
 8015634:	6808      	ldr	r0, [r1, #0]
 8015636:	601a      	str	r2, [r3, #0]
 8015638:	0669      	lsls	r1, r5, #25
 801563a:	d5d3      	bpl.n	80155e4 <_printf_i+0x4c>
 801563c:	b200      	sxth	r0, r0
 801563e:	e7d1      	b.n	80155e4 <_printf_i+0x4c>
 8015640:	6819      	ldr	r1, [r3, #0]
 8015642:	6825      	ldr	r5, [r4, #0]
 8015644:	1d08      	adds	r0, r1, #4
 8015646:	6018      	str	r0, [r3, #0]
 8015648:	6808      	ldr	r0, [r1, #0]
 801564a:	062e      	lsls	r6, r5, #24
 801564c:	d505      	bpl.n	801565a <_printf_i+0xc2>
 801564e:	4e54      	ldr	r6, [pc, #336]	; (80157a0 <_printf_i+0x208>)
 8015650:	2708      	movs	r7, #8
 8015652:	2a6f      	cmp	r2, #111	; 0x6f
 8015654:	d01b      	beq.n	801568e <_printf_i+0xf6>
 8015656:	270a      	movs	r7, #10
 8015658:	e019      	b.n	801568e <_printf_i+0xf6>
 801565a:	066d      	lsls	r5, r5, #25
 801565c:	d5f7      	bpl.n	801564e <_printf_i+0xb6>
 801565e:	b280      	uxth	r0, r0
 8015660:	e7f5      	b.n	801564e <_printf_i+0xb6>
 8015662:	3145      	adds	r1, #69	; 0x45
 8015664:	4e4e      	ldr	r6, [pc, #312]	; (80157a0 <_printf_i+0x208>)
 8015666:	700a      	strb	r2, [r1, #0]
 8015668:	6818      	ldr	r0, [r3, #0]
 801566a:	6822      	ldr	r2, [r4, #0]
 801566c:	1d01      	adds	r1, r0, #4
 801566e:	6800      	ldr	r0, [r0, #0]
 8015670:	6019      	str	r1, [r3, #0]
 8015672:	0615      	lsls	r5, r2, #24
 8015674:	d521      	bpl.n	80156ba <_printf_i+0x122>
 8015676:	07d3      	lsls	r3, r2, #31
 8015678:	d502      	bpl.n	8015680 <_printf_i+0xe8>
 801567a:	2320      	movs	r3, #32
 801567c:	431a      	orrs	r2, r3
 801567e:	6022      	str	r2, [r4, #0]
 8015680:	2710      	movs	r7, #16
 8015682:	2800      	cmp	r0, #0
 8015684:	d103      	bne.n	801568e <_printf_i+0xf6>
 8015686:	2320      	movs	r3, #32
 8015688:	6822      	ldr	r2, [r4, #0]
 801568a:	439a      	bics	r2, r3
 801568c:	6022      	str	r2, [r4, #0]
 801568e:	0023      	movs	r3, r4
 8015690:	2200      	movs	r2, #0
 8015692:	3343      	adds	r3, #67	; 0x43
 8015694:	701a      	strb	r2, [r3, #0]
 8015696:	6863      	ldr	r3, [r4, #4]
 8015698:	60a3      	str	r3, [r4, #8]
 801569a:	2b00      	cmp	r3, #0
 801569c:	db58      	blt.n	8015750 <_printf_i+0x1b8>
 801569e:	2204      	movs	r2, #4
 80156a0:	6821      	ldr	r1, [r4, #0]
 80156a2:	4391      	bics	r1, r2
 80156a4:	6021      	str	r1, [r4, #0]
 80156a6:	2800      	cmp	r0, #0
 80156a8:	d154      	bne.n	8015754 <_printf_i+0x1bc>
 80156aa:	9d02      	ldr	r5, [sp, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d05a      	beq.n	8015766 <_printf_i+0x1ce>
 80156b0:	0025      	movs	r5, r4
 80156b2:	7833      	ldrb	r3, [r6, #0]
 80156b4:	3542      	adds	r5, #66	; 0x42
 80156b6:	702b      	strb	r3, [r5, #0]
 80156b8:	e055      	b.n	8015766 <_printf_i+0x1ce>
 80156ba:	0655      	lsls	r5, r2, #25
 80156bc:	d5db      	bpl.n	8015676 <_printf_i+0xde>
 80156be:	b280      	uxth	r0, r0
 80156c0:	e7d9      	b.n	8015676 <_printf_i+0xde>
 80156c2:	681a      	ldr	r2, [r3, #0]
 80156c4:	680d      	ldr	r5, [r1, #0]
 80156c6:	1d10      	adds	r0, r2, #4
 80156c8:	6949      	ldr	r1, [r1, #20]
 80156ca:	6018      	str	r0, [r3, #0]
 80156cc:	6813      	ldr	r3, [r2, #0]
 80156ce:	062e      	lsls	r6, r5, #24
 80156d0:	d501      	bpl.n	80156d6 <_printf_i+0x13e>
 80156d2:	6019      	str	r1, [r3, #0]
 80156d4:	e002      	b.n	80156dc <_printf_i+0x144>
 80156d6:	066d      	lsls	r5, r5, #25
 80156d8:	d5fb      	bpl.n	80156d2 <_printf_i+0x13a>
 80156da:	8019      	strh	r1, [r3, #0]
 80156dc:	2300      	movs	r3, #0
 80156de:	9d02      	ldr	r5, [sp, #8]
 80156e0:	6123      	str	r3, [r4, #16]
 80156e2:	e04f      	b.n	8015784 <_printf_i+0x1ec>
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	1d11      	adds	r1, r2, #4
 80156e8:	6019      	str	r1, [r3, #0]
 80156ea:	6815      	ldr	r5, [r2, #0]
 80156ec:	2100      	movs	r1, #0
 80156ee:	6862      	ldr	r2, [r4, #4]
 80156f0:	0028      	movs	r0, r5
 80156f2:	f000 f859 	bl	80157a8 <memchr>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d001      	beq.n	80156fe <_printf_i+0x166>
 80156fa:	1b40      	subs	r0, r0, r5
 80156fc:	6060      	str	r0, [r4, #4]
 80156fe:	6863      	ldr	r3, [r4, #4]
 8015700:	6123      	str	r3, [r4, #16]
 8015702:	2300      	movs	r3, #0
 8015704:	9a02      	ldr	r2, [sp, #8]
 8015706:	7013      	strb	r3, [r2, #0]
 8015708:	e03c      	b.n	8015784 <_printf_i+0x1ec>
 801570a:	6923      	ldr	r3, [r4, #16]
 801570c:	002a      	movs	r2, r5
 801570e:	9904      	ldr	r1, [sp, #16]
 8015710:	9803      	ldr	r0, [sp, #12]
 8015712:	9d05      	ldr	r5, [sp, #20]
 8015714:	47a8      	blx	r5
 8015716:	1c43      	adds	r3, r0, #1
 8015718:	d03e      	beq.n	8015798 <_printf_i+0x200>
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	079b      	lsls	r3, r3, #30
 801571e:	d415      	bmi.n	801574c <_printf_i+0x1b4>
 8015720:	9b07      	ldr	r3, [sp, #28]
 8015722:	68e0      	ldr	r0, [r4, #12]
 8015724:	4298      	cmp	r0, r3
 8015726:	da39      	bge.n	801579c <_printf_i+0x204>
 8015728:	0018      	movs	r0, r3
 801572a:	e037      	b.n	801579c <_printf_i+0x204>
 801572c:	0022      	movs	r2, r4
 801572e:	2301      	movs	r3, #1
 8015730:	3219      	adds	r2, #25
 8015732:	9904      	ldr	r1, [sp, #16]
 8015734:	9803      	ldr	r0, [sp, #12]
 8015736:	9e05      	ldr	r6, [sp, #20]
 8015738:	47b0      	blx	r6
 801573a:	1c43      	adds	r3, r0, #1
 801573c:	d02c      	beq.n	8015798 <_printf_i+0x200>
 801573e:	3501      	adds	r5, #1
 8015740:	68e3      	ldr	r3, [r4, #12]
 8015742:	9a07      	ldr	r2, [sp, #28]
 8015744:	1a9b      	subs	r3, r3, r2
 8015746:	42ab      	cmp	r3, r5
 8015748:	dcf0      	bgt.n	801572c <_printf_i+0x194>
 801574a:	e7e9      	b.n	8015720 <_printf_i+0x188>
 801574c:	2500      	movs	r5, #0
 801574e:	e7f7      	b.n	8015740 <_printf_i+0x1a8>
 8015750:	2800      	cmp	r0, #0
 8015752:	d0ad      	beq.n	80156b0 <_printf_i+0x118>
 8015754:	9d02      	ldr	r5, [sp, #8]
 8015756:	0039      	movs	r1, r7
 8015758:	f7ea fd76 	bl	8000248 <__aeabi_uidivmod>
 801575c:	5c73      	ldrb	r3, [r6, r1]
 801575e:	3d01      	subs	r5, #1
 8015760:	702b      	strb	r3, [r5, #0]
 8015762:	2800      	cmp	r0, #0
 8015764:	d1f7      	bne.n	8015756 <_printf_i+0x1be>
 8015766:	2f08      	cmp	r7, #8
 8015768:	d109      	bne.n	801577e <_printf_i+0x1e6>
 801576a:	6823      	ldr	r3, [r4, #0]
 801576c:	07db      	lsls	r3, r3, #31
 801576e:	d506      	bpl.n	801577e <_printf_i+0x1e6>
 8015770:	6863      	ldr	r3, [r4, #4]
 8015772:	6922      	ldr	r2, [r4, #16]
 8015774:	4293      	cmp	r3, r2
 8015776:	dc02      	bgt.n	801577e <_printf_i+0x1e6>
 8015778:	2330      	movs	r3, #48	; 0x30
 801577a:	3d01      	subs	r5, #1
 801577c:	702b      	strb	r3, [r5, #0]
 801577e:	9b02      	ldr	r3, [sp, #8]
 8015780:	1b5b      	subs	r3, r3, r5
 8015782:	6123      	str	r3, [r4, #16]
 8015784:	9b05      	ldr	r3, [sp, #20]
 8015786:	aa07      	add	r2, sp, #28
 8015788:	9300      	str	r3, [sp, #0]
 801578a:	0021      	movs	r1, r4
 801578c:	9b04      	ldr	r3, [sp, #16]
 801578e:	9803      	ldr	r0, [sp, #12]
 8015790:	f7ff fe94 	bl	80154bc <_printf_common>
 8015794:	1c43      	adds	r3, r0, #1
 8015796:	d1b8      	bne.n	801570a <_printf_i+0x172>
 8015798:	2001      	movs	r0, #1
 801579a:	4240      	negs	r0, r0
 801579c:	b009      	add	sp, #36	; 0x24
 801579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157a0:	08018c5d 	.word	0x08018c5d
 80157a4:	08018c6e 	.word	0x08018c6e

080157a8 <memchr>:
 80157a8:	b2c9      	uxtb	r1, r1
 80157aa:	1882      	adds	r2, r0, r2
 80157ac:	4290      	cmp	r0, r2
 80157ae:	d101      	bne.n	80157b4 <memchr+0xc>
 80157b0:	2000      	movs	r0, #0
 80157b2:	4770      	bx	lr
 80157b4:	7803      	ldrb	r3, [r0, #0]
 80157b6:	428b      	cmp	r3, r1
 80157b8:	d0fb      	beq.n	80157b2 <memchr+0xa>
 80157ba:	3001      	adds	r0, #1
 80157bc:	e7f6      	b.n	80157ac <memchr+0x4>

080157be <memmove>:
 80157be:	b510      	push	{r4, lr}
 80157c0:	4288      	cmp	r0, r1
 80157c2:	d902      	bls.n	80157ca <memmove+0xc>
 80157c4:	188b      	adds	r3, r1, r2
 80157c6:	4298      	cmp	r0, r3
 80157c8:	d303      	bcc.n	80157d2 <memmove+0x14>
 80157ca:	2300      	movs	r3, #0
 80157cc:	e007      	b.n	80157de <memmove+0x20>
 80157ce:	5c8b      	ldrb	r3, [r1, r2]
 80157d0:	5483      	strb	r3, [r0, r2]
 80157d2:	3a01      	subs	r2, #1
 80157d4:	d2fb      	bcs.n	80157ce <memmove+0x10>
 80157d6:	bd10      	pop	{r4, pc}
 80157d8:	5ccc      	ldrb	r4, [r1, r3]
 80157da:	54c4      	strb	r4, [r0, r3]
 80157dc:	3301      	adds	r3, #1
 80157de:	429a      	cmp	r2, r3
 80157e0:	d1fa      	bne.n	80157d8 <memmove+0x1a>
 80157e2:	e7f8      	b.n	80157d6 <memmove+0x18>

080157e4 <_malloc_usable_size_r>:
 80157e4:	1f0b      	subs	r3, r1, #4
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	1f18      	subs	r0, r3, #4
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	da01      	bge.n	80157f2 <_malloc_usable_size_r+0xe>
 80157ee:	580b      	ldr	r3, [r1, r0]
 80157f0:	18c0      	adds	r0, r0, r3
 80157f2:	4770      	bx	lr

080157f4 <_sbrk>:
 80157f4:	4b05      	ldr	r3, [pc, #20]	; (801580c <_sbrk+0x18>)
 80157f6:	0002      	movs	r2, r0
 80157f8:	6819      	ldr	r1, [r3, #0]
 80157fa:	2900      	cmp	r1, #0
 80157fc:	d101      	bne.n	8015802 <_sbrk+0xe>
 80157fe:	4904      	ldr	r1, [pc, #16]	; (8015810 <_sbrk+0x1c>)
 8015800:	6019      	str	r1, [r3, #0]
 8015802:	6818      	ldr	r0, [r3, #0]
 8015804:	1882      	adds	r2, r0, r2
 8015806:	601a      	str	r2, [r3, #0]
 8015808:	4770      	bx	lr
 801580a:	46c0      	nop			; (mov r8, r8)
 801580c:	200060b0 	.word	0x200060b0
 8015810:	20006678 	.word	0x20006678

08015814 <_init>:
 8015814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015816:	46c0      	nop			; (mov r8, r8)
 8015818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801581a:	bc08      	pop	{r3}
 801581c:	469e      	mov	lr, r3
 801581e:	4770      	bx	lr

08015820 <_fini>:
 8015820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015822:	46c0      	nop			; (mov r8, r8)
 8015824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015826:	bc08      	pop	{r3}
 8015828:	469e      	mov	lr, r3
 801582a:	4770      	bx	lr
